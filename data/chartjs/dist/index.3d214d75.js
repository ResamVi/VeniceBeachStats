// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function (modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      var res = localRequire.resolve(x);
      return res === false ? {} : newRequire(res);
    }

    function resolve(x) {
      var id = modules[name][1][x];
      return id != null ? id : x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function (id, exports) {
    modules[id] = [
      function (require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function () {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function () {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"km5uZ":[function(require,module,exports) {
var global = arguments[3];
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d6ea1d42532a7575";
var HMR_USE_SSE = false;
module.bundle.HMR_BUNDLE_ID = "0a8ecb283d214d75";
"use strict";
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE, HMR_USE_SSE, chrome, browser, __parcel__import__, __parcel__importScripts__, ServiceWorkerGlobalScope */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: {|[string]: mixed|};
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
interface ExtensionContext {
  runtime: {|
    reload(): void,
    getURL(url: string): string;
    getManifest(): {manifest_version: number, ...};
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
declare var HMR_USE_SSE: boolean;
declare var chrome: ExtensionContext;
declare var browser: ExtensionContext;
declare var __parcel__import__: (string) => Promise<void>;
declare var __parcel__importScripts__: (string) => Promise<void>;
declare var globalThis: typeof self;
declare var ServiceWorkerGlobalScope: Object;
*/ var OVERLAY_ID = "__parcel__error__overlay__";
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData[moduleName],
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function(fn) {
            this._acceptCallbacks.push(fn || function() {});
        },
        dispose: function(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData[moduleName] = undefined;
}
module.bundle.Module = Module;
module.bundle.hotData = {};
var checkedAssets /*: {|[string]: boolean|} */ , assetsToDispose /*: Array<[ParcelRequire, string]> */ , assetsToAccept /*: Array<[ParcelRequire, string]> */ ;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf("http") === 0 ? location.hostname : "localhost");
}
function getPort() {
    return HMR_PORT || location.port;
}
// eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== "undefined") {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == "https:" && ![
        "localhost",
        "127.0.0.1",
        "0.0.0.0"
    ].includes(hostname) ? "wss" : "ws";
    var ws;
    if (HMR_USE_SSE) ws = new EventSource("/__parcel_hmr");
    else try {
        ws = new WebSocket(protocol + "://" + hostname + (port ? ":" + port : "") + "/");
    } catch (err) {
        if (err.message) console.error(err.message);
        ws = {};
    }
    // Web extension context
    var extCtx = typeof browser === "undefined" ? typeof chrome === "undefined" ? null : chrome : browser;
    // Safari doesn't support sourceURL in error stacks.
    // eval may also be disabled via CSP, so do a quick check.
    var supportsSourceURL = false;
    try {
        (0, eval)('throw new Error("test"); //# sourceURL=test.js');
    } catch (err) {
        supportsSourceURL = err.stack.includes("test.js");
    }
    // $FlowFixMe
    ws.onmessage = async function(event /*: {data: string, ...} */ ) {
        checkedAssets = {} /*: {|[string]: boolean|} */ ;
        assetsToAccept = [];
        assetsToDispose = [];
        var data /*: HMRMessage */  = JSON.parse(event.data);
        if (data.type === "update") {
            // Remove error overlay if there is one
            if (typeof document !== "undefined") removeErrorOverlay();
            let assets = data.assets.filter((asset)=>asset.envHash === HMR_ENV_HASH);
            // Handle HMR Update
            let handled = assets.every((asset)=>{
                return asset.type === "css" || asset.type === "js" && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                // Dispatch custom event so other runtimes (e.g React Refresh) are aware.
                if (typeof window !== "undefined" && typeof CustomEvent !== "undefined") window.dispatchEvent(new CustomEvent("parcelhmraccept"));
                await hmrApplyUpdates(assets);
                // Dispose all old assets.
                let processedAssets = {} /*: {|[string]: boolean|} */ ;
                for(let i = 0; i < assetsToDispose.length; i++){
                    let id = assetsToDispose[i][1];
                    if (!processedAssets[id]) {
                        hmrDispose(assetsToDispose[i][0], id);
                        processedAssets[id] = true;
                    }
                }
                // Run accept callbacks. This will also re-execute other disposed assets in topological order.
                processedAssets = {};
                for(let i = 0; i < assetsToAccept.length; i++){
                    let id = assetsToAccept[i][1];
                    if (!processedAssets[id]) {
                        hmrAccept(assetsToAccept[i][0], id);
                        processedAssets[id] = true;
                    }
                }
            } else fullReload();
        }
        if (data.type === "error") {
            // Log parcel errors to console
            for (let ansiDiagnostic of data.diagnostics.ansi){
                let stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                console.error("\uD83D\uDEA8 [parcel]: " + ansiDiagnostic.message + "\n" + stack + "\n\n" + ansiDiagnostic.hints.join("\n"));
            }
            if (typeof document !== "undefined") {
                // Render the fancy html overlay
                removeErrorOverlay();
                var overlay = createErrorOverlay(data.diagnostics.html);
                // $FlowFixMe
                document.body.appendChild(overlay);
            }
        }
    };
    if (ws instanceof WebSocket) {
        ws.onerror = function(e) {
            if (e.message) console.error(e.message);
        };
        ws.onclose = function() {
            console.warn("[parcel] \uD83D\uDEA8 Connection to the HMR server was lost");
        };
    }
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log("[parcel] \u2728 Error resolved");
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement("div");
    overlay.id = OVERLAY_ID;
    let errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    for (let diagnostic of diagnostics){
        let stack = diagnostic.frames.length ? diagnostic.frames.reduce((p, frame)=>{
            return `${p}
<a href="/__parcel_launch_editor?file=${encodeURIComponent(frame.location)}" style="text-decoration: underline; color: #888" onclick="fetch(this.href); return false">${frame.location}</a>
${frame.code}`;
        }, "") : diagnostic.stack;
        errorHTML += `
      <div>
        <div style="font-size: 18px; font-weight: bold; margin-top: 20px;">
          \u{1F6A8} ${diagnostic.message}
        </div>
        <pre>${stack}</pre>
        <div>
          ${diagnostic.hints.map((hint)=>"<div>\uD83D\uDCA1 " + hint + "</div>").join("")}
        </div>
        ${diagnostic.documentation ? `<div>\u{1F4DD} <a style="color: violet" href="${diagnostic.documentation}" target="_blank">Learn more</a></div>` : ""}
      </div>
    `;
    }
    errorHTML += "</div>";
    overlay.innerHTML = errorHTML;
    return overlay;
}
function fullReload() {
    if ("reload" in location) location.reload();
    else if (extCtx && extCtx.runtime && extCtx.runtime.reload) extCtx.runtime.reload();
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var href = link.getAttribute("href");
    if (!href) return;
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute("href", // $FlowFixMe
    href.split("?")[0] + "?" + Date.now());
    // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href /*: string */  = links[i].getAttribute("href");
            var hostname = getHostname();
            var servedFromHMRServer = hostname === "localhost" ? new RegExp("^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):" + getPort()).test(href) : href.indexOf(hostname + ":" + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrDownload(asset) {
    if (asset.type === "js") {
        if (typeof document !== "undefined") {
            let script = document.createElement("script");
            script.src = asset.url + "?t=" + Date.now();
            if (asset.outputFormat === "esmodule") script.type = "module";
            return new Promise((resolve, reject)=>{
                var _document$head;
                script.onload = ()=>resolve(script);
                script.onerror = reject;
                (_document$head = document.head) === null || _document$head === void 0 || _document$head.appendChild(script);
            });
        } else if (typeof importScripts === "function") {
            // Worker scripts
            if (asset.outputFormat === "esmodule") return import(asset.url + "?t=" + Date.now());
            else return new Promise((resolve, reject)=>{
                try {
                    importScripts(asset.url + "?t=" + Date.now());
                    resolve();
                } catch (err) {
                    reject(err);
                }
            });
        }
    }
}
async function hmrApplyUpdates(assets) {
    global.parcelHotUpdate = Object.create(null);
    let scriptsToRemove;
    try {
        // If sourceURL comments aren't supported in eval, we need to load
        // the update from the dev server over HTTP so that stack traces
        // are correct in errors/logs. This is much slower than eval, so
        // we only do it if needed (currently just Safari).
        // https://bugs.webkit.org/show_bug.cgi?id=137297
        // This path is also taken if a CSP disallows eval.
        if (!supportsSourceURL) {
            let promises = assets.map((asset)=>{
                var _hmrDownload;
                return (_hmrDownload = hmrDownload(asset)) === null || _hmrDownload === void 0 ? void 0 : _hmrDownload.catch((err)=>{
                    // Web extension fix
                    if (extCtx && extCtx.runtime && extCtx.runtime.getManifest().manifest_version == 3 && typeof ServiceWorkerGlobalScope != "undefined" && global instanceof ServiceWorkerGlobalScope) {
                        extCtx.runtime.reload();
                        return;
                    }
                    throw err;
                });
            });
            scriptsToRemove = await Promise.all(promises);
        }
        assets.forEach(function(asset) {
            hmrApply(module.bundle.root, asset);
        });
    } finally{
        delete global.parcelHotUpdate;
        if (scriptsToRemove) scriptsToRemove.forEach((script)=>{
            if (script) {
                var _document$head2;
                (_document$head2 = document.head) === null || _document$head2 === void 0 || _document$head2.removeChild(script);
            }
        });
    }
}
function hmrApply(bundle /*: ParcelRequire */ , asset /*:  HMRAsset */ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === "css") reloadCSS();
    else if (asset.type === "js") {
        let deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
        if (deps) {
            if (modules[asset.id]) {
                // Remove dependencies that are removed and will become orphaned.
                // This is necessary so that if the asset is added back again, the cache is gone, and we prevent a full page reload.
                let oldDeps = modules[asset.id][1];
                for(let dep in oldDeps)if (!deps[dep] || deps[dep] !== oldDeps[dep]) {
                    let id = oldDeps[dep];
                    let parents = getParents(module.bundle.root, id);
                    if (parents.length === 1) hmrDelete(module.bundle.root, id);
                }
            }
            if (supportsSourceURL) // Global eval. We would use `new Function` here but browser
            // support for source maps is better with eval.
            (0, eval)(asset.output);
            // $FlowFixMe
            let fn = global.parcelHotUpdate[asset.id];
            modules[asset.id] = [
                fn,
                deps
            ];
        } else if (bundle.parent) hmrApply(bundle.parent, asset);
    }
}
function hmrDelete(bundle, id) {
    let modules = bundle.modules;
    if (!modules) return;
    if (modules[id]) {
        // Collect dependencies that will become orphaned when this module is deleted.
        let deps = modules[id][1];
        let orphans = [];
        for(let dep in deps){
            let parents = getParents(module.bundle.root, deps[dep]);
            if (parents.length === 1) orphans.push(deps[dep]);
        }
        // Delete the module. This must be done before deleting dependencies in case of circular dependencies.
        delete modules[id];
        delete bundle.cache[id];
        // Now delete the orphans.
        orphans.forEach((id)=>{
            hmrDelete(module.bundle.root, id);
        });
    } else if (bundle.parent) hmrDelete(bundle.parent, id);
}
function hmrAcceptCheck(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    if (hmrAcceptCheckOne(bundle, id, depsByBundle)) return true;
    // Traverse parents breadth first. All possible ancestries must accept the HMR update, or we'll reload.
    let parents = getParents(module.bundle.root, id);
    let accepted = false;
    while(parents.length > 0){
        let v = parents.shift();
        let a = hmrAcceptCheckOne(v[0], v[1], null);
        if (a) // If this parent accepts, stop traversing upward, but still consider siblings.
        accepted = true;
        else {
            // Otherwise, queue the parents in the next level upward.
            let p = getParents(module.bundle.root, v[1]);
            if (p.length === 0) {
                // If there are no parents, then we've reached an entry without accepting. Reload.
                accepted = false;
                break;
            }
            parents.push(...p);
        }
    }
    return accepted;
}
function hmrAcceptCheckOne(bundle /*: ParcelRequire */ , id /*: string */ , depsByBundle /*: ?{ [string]: { [string]: string } }*/ ) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return true;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToDispose.push([
        bundle,
        id
    ]);
    if (!cached || cached.hot && cached.hot._acceptCallbacks.length) {
        assetsToAccept.push([
            bundle,
            id
        ]);
        return true;
    }
}
function hmrDispose(bundle /*: ParcelRequire */ , id /*: string */ ) {
    var cached = bundle.cache[id];
    bundle.hotData[id] = {};
    if (cached && cached.hot) cached.hot.data = bundle.hotData[id];
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData[id]);
    });
    delete bundle.cache[id];
}
function hmrAccept(bundle /*: ParcelRequire */ , id /*: string */ ) {
    // Execute the module.
    bundle(id);
    // Run the accept callbacks in the new version of the module.
    var cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) {
            assetsToAlsoAccept.forEach(function(a) {
                hmrDispose(a[0], a[1]);
            });
            // $FlowFixMe[method-unbinding]
            assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
        }
    });
}

},{}],"bB7Pu":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _auto = require("chart.js/auto");
var _dateFns = require("date-fns");
var _locale = require("date-fns/locale");
var _dataJs = require("../data.js");
var _dataJsDefault = parcelHelpers.interopDefault(_dataJs);
var _chartjsAdapterDateFns = require("chartjs-adapter-date-fns");
let transformed = (0, _dataJsDefault.default).map((row)=>{
    return {
        "x": row.date,
        "y": row.count
    };
});
const suedstadt = {
    label: "S\xfcdstadt",
    data: transformed
};
new (0, _auto.Chart)(document.getElementById("graph"), {
    type: "bar",
    data: {
        datasets: [
            suedstadt
        ]
    },
    options: {
        scales: {
            x: {
                type: "time",
                adapters: {
                    date: {
                        locale: (0, _locale.de)
                    }
                },
                time: {
                    unit: "hour",
                    displayFormats: {
                        hour: "EEEE, kk:mm"
                    }
                },
                ticks: {
                },
                grid: {
                    color: (ctx)=>{
                        if (ctx.tick !== undefined && ctx.tick.label.includes("24:00")) return "#a7a7a7";
                        return "#dadada";
                    }
                }
            },
            y: {
                ticks: {
                    stepSize: 10
                }
            }
        }
    }
});

},{"chart.js/auto":"d8NN9","../data.js":"i07uf","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3","chartjs-adapter-date-fns":"hmLQz","date-fns/locale":"aigPy","date-fns":"dU215"}],"d8NN9":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var _chartJs = require("../dist/chart.js");
parcelHelpers.exportAll(_chartJs, exports);
(0, _chartJs.Chart).register(...(0, _chartJs.registerables));
exports.default = (0, _chartJs.Chart);

},{"../dist/chart.js":"ipU8D","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"ipU8D":[function(require,module,exports) {
/*!
 * Chart.js v4.4.3
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Animation", ()=>Animation);
parcelHelpers.export(exports, "Animations", ()=>Animations);
parcelHelpers.export(exports, "ArcElement", ()=>ArcElement);
parcelHelpers.export(exports, "BarController", ()=>BarController);
parcelHelpers.export(exports, "BarElement", ()=>BarElement);
parcelHelpers.export(exports, "BasePlatform", ()=>BasePlatform);
parcelHelpers.export(exports, "BasicPlatform", ()=>BasicPlatform);
parcelHelpers.export(exports, "BubbleController", ()=>BubbleController);
parcelHelpers.export(exports, "CategoryScale", ()=>CategoryScale);
parcelHelpers.export(exports, "Chart", ()=>Chart);
parcelHelpers.export(exports, "Colors", ()=>plugin_colors);
parcelHelpers.export(exports, "DatasetController", ()=>DatasetController);
parcelHelpers.export(exports, "Decimation", ()=>plugin_decimation);
parcelHelpers.export(exports, "DomPlatform", ()=>DomPlatform);
parcelHelpers.export(exports, "DoughnutController", ()=>DoughnutController);
parcelHelpers.export(exports, "Element", ()=>Element);
parcelHelpers.export(exports, "Filler", ()=>index);
parcelHelpers.export(exports, "Interaction", ()=>Interaction);
parcelHelpers.export(exports, "Legend", ()=>plugin_legend);
parcelHelpers.export(exports, "LineController", ()=>LineController);
parcelHelpers.export(exports, "LineElement", ()=>LineElement);
parcelHelpers.export(exports, "LinearScale", ()=>LinearScale);
parcelHelpers.export(exports, "LogarithmicScale", ()=>LogarithmicScale);
parcelHelpers.export(exports, "PieController", ()=>PieController);
parcelHelpers.export(exports, "PointElement", ()=>PointElement);
parcelHelpers.export(exports, "PolarAreaController", ()=>PolarAreaController);
parcelHelpers.export(exports, "RadarController", ()=>RadarController);
parcelHelpers.export(exports, "RadialLinearScale", ()=>RadialLinearScale);
parcelHelpers.export(exports, "Scale", ()=>Scale);
parcelHelpers.export(exports, "ScatterController", ()=>ScatterController);
parcelHelpers.export(exports, "SubTitle", ()=>plugin_subtitle);
parcelHelpers.export(exports, "Ticks", ()=>(0, _helpersSegmentJs.aL));
parcelHelpers.export(exports, "TimeScale", ()=>TimeScale);
parcelHelpers.export(exports, "TimeSeriesScale", ()=>TimeSeriesScale);
parcelHelpers.export(exports, "Title", ()=>plugin_title);
parcelHelpers.export(exports, "Tooltip", ()=>plugin_tooltip);
parcelHelpers.export(exports, "_adapters", ()=>adapters);
parcelHelpers.export(exports, "_detectPlatform", ()=>_detectPlatform);
parcelHelpers.export(exports, "animator", ()=>animator);
parcelHelpers.export(exports, "controllers", ()=>controllers);
parcelHelpers.export(exports, "defaults", ()=>(0, _helpersSegmentJs.d));
parcelHelpers.export(exports, "elements", ()=>elements);
parcelHelpers.export(exports, "layouts", ()=>layouts);
parcelHelpers.export(exports, "plugins", ()=>plugins);
parcelHelpers.export(exports, "registerables", ()=>registerables);
parcelHelpers.export(exports, "registry", ()=>registry);
parcelHelpers.export(exports, "scales", ()=>scales);
var _helpersSegmentJs = require("./chunks/helpers.segment.js");
var _color = require("@kurkle/color");
class Animator {
    constructor(){
        this._request = null;
        this._charts = new Map();
        this._running = false;
        this._lastDate = undefined;
    }
    _notify(chart, anims, date, type) {
        const callbacks = anims.listeners[type];
        const numSteps = anims.duration;
        callbacks.forEach((fn)=>fn({
                chart,
                initial: anims.initial,
                numSteps,
                currentStep: Math.min(date - anims.start, numSteps)
            }));
    }
    _refresh() {
        if (this._request) return;
        this._running = true;
        this._request = (0, _helpersSegmentJs.r).call(window, ()=>{
            this._update();
            this._request = null;
            if (this._running) this._refresh();
        });
    }
    _update(date = Date.now()) {
        let remaining = 0;
        this._charts.forEach((anims, chart)=>{
            if (!anims.running || !anims.items.length) return;
            const items = anims.items;
            let i = items.length - 1;
            let draw = false;
            let item;
            for(; i >= 0; --i){
                item = items[i];
                if (item._active) {
                    if (item._total > anims.duration) anims.duration = item._total;
                    item.tick(date);
                    draw = true;
                } else {
                    items[i] = items[items.length - 1];
                    items.pop();
                }
            }
            if (draw) {
                chart.draw();
                this._notify(chart, anims, date, "progress");
            }
            if (!items.length) {
                anims.running = false;
                this._notify(chart, anims, date, "complete");
                anims.initial = false;
            }
            remaining += items.length;
        });
        this._lastDate = date;
        if (remaining === 0) this._running = false;
    }
    _getAnims(chart) {
        const charts = this._charts;
        let anims = charts.get(chart);
        if (!anims) {
            anims = {
                running: false,
                initial: true,
                items: [],
                listeners: {
                    complete: [],
                    progress: []
                }
            };
            charts.set(chart, anims);
        }
        return anims;
    }
    listen(chart, event, cb) {
        this._getAnims(chart).listeners[event].push(cb);
    }
    add(chart, items) {
        if (!items || !items.length) return;
        this._getAnims(chart).items.push(...items);
    }
    has(chart) {
        return this._getAnims(chart).items.length > 0;
    }
    start(chart) {
        const anims = this._charts.get(chart);
        if (!anims) return;
        anims.running = true;
        anims.start = Date.now();
        anims.duration = anims.items.reduce((acc, cur)=>Math.max(acc, cur._duration), 0);
        this._refresh();
    }
    running(chart) {
        if (!this._running) return false;
        const anims = this._charts.get(chart);
        if (!anims || !anims.running || !anims.items.length) return false;
        return true;
    }
    stop(chart) {
        const anims = this._charts.get(chart);
        if (!anims || !anims.items.length) return;
        const items = anims.items;
        let i = items.length - 1;
        for(; i >= 0; --i)items[i].cancel();
        anims.items = [];
        this._notify(chart, anims, Date.now(), "complete");
    }
    remove(chart) {
        return this._charts.delete(chart);
    }
}
var animator = /* #__PURE__ */ new Animator();
const transparent = "transparent";
const interpolators = {
    boolean (from, to, factor) {
        return factor > 0.5 ? to : from;
    },
    color (from, to, factor) {
        const c0 = (0, _helpersSegmentJs.c)(from || transparent);
        const c1 = c0.valid && (0, _helpersSegmentJs.c)(to || transparent);
        return c1 && c1.valid ? c1.mix(c0, factor).hexString() : to;
    },
    number (from, to, factor) {
        return from + (to - from) * factor;
    }
};
class Animation {
    constructor(cfg, target, prop, to){
        const currentValue = target[prop];
        to = (0, _helpersSegmentJs.a)([
            cfg.to,
            to,
            currentValue,
            cfg.from
        ]);
        const from = (0, _helpersSegmentJs.a)([
            cfg.from,
            currentValue,
            to
        ]);
        this._active = true;
        this._fn = cfg.fn || interpolators[cfg.type || typeof from];
        this._easing = (0, _helpersSegmentJs.e)[cfg.easing] || (0, _helpersSegmentJs.e).linear;
        this._start = Math.floor(Date.now() + (cfg.delay || 0));
        this._duration = this._total = Math.floor(cfg.duration);
        this._loop = !!cfg.loop;
        this._target = target;
        this._prop = prop;
        this._from = from;
        this._to = to;
        this._promises = undefined;
    }
    active() {
        return this._active;
    }
    update(cfg, to, date) {
        if (this._active) {
            this._notify(false);
            const currentValue = this._target[this._prop];
            const elapsed = date - this._start;
            const remain = this._duration - elapsed;
            this._start = date;
            this._duration = Math.floor(Math.max(remain, cfg.duration));
            this._total += elapsed;
            this._loop = !!cfg.loop;
            this._to = (0, _helpersSegmentJs.a)([
                cfg.to,
                to,
                currentValue,
                cfg.from
            ]);
            this._from = (0, _helpersSegmentJs.a)([
                cfg.from,
                currentValue,
                to
            ]);
        }
    }
    cancel() {
        if (this._active) {
            this.tick(Date.now());
            this._active = false;
            this._notify(false);
        }
    }
    tick(date) {
        const elapsed = date - this._start;
        const duration = this._duration;
        const prop = this._prop;
        const from = this._from;
        const loop = this._loop;
        const to = this._to;
        let factor;
        this._active = from !== to && (loop || elapsed < duration);
        if (!this._active) {
            this._target[prop] = to;
            this._notify(true);
            return;
        }
        if (elapsed < 0) {
            this._target[prop] = from;
            return;
        }
        factor = elapsed / duration % 2;
        factor = loop && factor > 1 ? 2 - factor : factor;
        factor = this._easing(Math.min(1, Math.max(0, factor)));
        this._target[prop] = this._fn(from, to, factor);
    }
    wait() {
        const promises = this._promises || (this._promises = []);
        return new Promise((res, rej)=>{
            promises.push({
                res,
                rej
            });
        });
    }
    _notify(resolved) {
        const method = resolved ? "res" : "rej";
        const promises = this._promises || [];
        for(let i = 0; i < promises.length; i++)promises[i][method]();
    }
}
class Animations {
    constructor(chart, config){
        this._chart = chart;
        this._properties = new Map();
        this.configure(config);
    }
    configure(config) {
        if (!(0, _helpersSegmentJs.i)(config)) return;
        const animationOptions = Object.keys((0, _helpersSegmentJs.d).animation);
        const animatedProps = this._properties;
        Object.getOwnPropertyNames(config).forEach((key)=>{
            const cfg = config[key];
            if (!(0, _helpersSegmentJs.i)(cfg)) return;
            const resolved = {};
            for (const option of animationOptions)resolved[option] = cfg[option];
            ((0, _helpersSegmentJs.b)(cfg.properties) && cfg.properties || [
                key
            ]).forEach((prop)=>{
                if (prop === key || !animatedProps.has(prop)) animatedProps.set(prop, resolved);
            });
        });
    }
    _animateOptions(target, values) {
        const newOptions = values.options;
        const options = resolveTargetOptions(target, newOptions);
        if (!options) return [];
        const animations = this._createAnimations(options, newOptions);
        if (newOptions.$shared) awaitAll(target.options.$animations, newOptions).then(()=>{
            target.options = newOptions;
        }, ()=>{});
        return animations;
    }
    _createAnimations(target, values) {
        const animatedProps = this._properties;
        const animations = [];
        const running = target.$animations || (target.$animations = {});
        const props = Object.keys(values);
        const date = Date.now();
        let i;
        for(i = props.length - 1; i >= 0; --i){
            const prop = props[i];
            if (prop.charAt(0) === "$") continue;
            if (prop === "options") {
                animations.push(...this._animateOptions(target, values));
                continue;
            }
            const value = values[prop];
            let animation = running[prop];
            const cfg = animatedProps.get(prop);
            if (animation) {
                if (cfg && animation.active()) {
                    animation.update(cfg, value, date);
                    continue;
                } else animation.cancel();
            }
            if (!cfg || !cfg.duration) {
                target[prop] = value;
                continue;
            }
            running[prop] = animation = new Animation(cfg, target, prop, value);
            animations.push(animation);
        }
        return animations;
    }
    update(target, values) {
        if (this._properties.size === 0) {
            Object.assign(target, values);
            return;
        }
        const animations = this._createAnimations(target, values);
        if (animations.length) {
            animator.add(this._chart, animations);
            return true;
        }
    }
}
function awaitAll(animations, properties) {
    const running = [];
    const keys = Object.keys(properties);
    for(let i = 0; i < keys.length; i++){
        const anim = animations[keys[i]];
        if (anim && anim.active()) running.push(anim.wait());
    }
    return Promise.all(running);
}
function resolveTargetOptions(target, newOptions) {
    if (!newOptions) return;
    let options = target.options;
    if (!options) {
        target.options = newOptions;
        return;
    }
    if (options.$shared) target.options = options = Object.assign({}, options, {
        $shared: false,
        $animations: {}
    });
    return options;
}
function scaleClip(scale, allowedOverflow) {
    const opts = scale && scale.options || {};
    const reverse = opts.reverse;
    const min = opts.min === undefined ? allowedOverflow : 0;
    const max = opts.max === undefined ? allowedOverflow : 0;
    return {
        start: reverse ? max : min,
        end: reverse ? min : max
    };
}
function defaultClip(xScale, yScale, allowedOverflow) {
    if (allowedOverflow === false) return false;
    const x = scaleClip(xScale, allowedOverflow);
    const y = scaleClip(yScale, allowedOverflow);
    return {
        top: y.end,
        right: x.end,
        bottom: y.start,
        left: x.start
    };
}
function toClip(value) {
    let t, r, b, l;
    if ((0, _helpersSegmentJs.i)(value)) {
        t = value.top;
        r = value.right;
        b = value.bottom;
        l = value.left;
    } else t = r = b = l = value;
    return {
        top: t,
        right: r,
        bottom: b,
        left: l,
        disabled: value === false
    };
}
function getSortedDatasetIndices(chart, filterVisible) {
    const keys = [];
    const metasets = chart._getSortedDatasetMetas(filterVisible);
    let i, ilen;
    for(i = 0, ilen = metasets.length; i < ilen; ++i)keys.push(metasets[i].index);
    return keys;
}
function applyStack(stack, value, dsIndex, options = {}) {
    const keys = stack.keys;
    const singleMode = options.mode === "single";
    let i, ilen, datasetIndex, otherValue;
    if (value === null) return;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        datasetIndex = +keys[i];
        if (datasetIndex === dsIndex) {
            if (options.all) continue;
            break;
        }
        otherValue = stack.values[datasetIndex];
        if ((0, _helpersSegmentJs.g)(otherValue) && (singleMode || value === 0 || (0, _helpersSegmentJs.s)(value) === (0, _helpersSegmentJs.s)(otherValue))) value += otherValue;
    }
    return value;
}
function convertObjectDataToArray(data, meta) {
    const { iScale, vScale } = meta;
    const iAxisKey = iScale.axis === "x" ? "x" : "y";
    const vAxisKey = vScale.axis === "x" ? "x" : "y";
    const keys = Object.keys(data);
    const adata = new Array(keys.length);
    let i, ilen, key;
    for(i = 0, ilen = keys.length; i < ilen; ++i){
        key = keys[i];
        adata[i] = {
            [iAxisKey]: key,
            [vAxisKey]: data[key]
        };
    }
    return adata;
}
function isStacked(scale, meta) {
    const stacked = scale && scale.options.stacked;
    return stacked || stacked === undefined && meta.stack !== undefined;
}
function getStackKey(indexScale, valueScale, meta) {
    return `${indexScale.id}.${valueScale.id}.${meta.stack || meta.type}`;
}
function getUserBounds(scale) {
    const { min, max, minDefined, maxDefined } = scale.getUserBounds();
    return {
        min: minDefined ? min : Number.NEGATIVE_INFINITY,
        max: maxDefined ? max : Number.POSITIVE_INFINITY
    };
}
function getOrCreateStack(stacks, stackKey, indexValue) {
    const subStack = stacks[stackKey] || (stacks[stackKey] = {});
    return subStack[indexValue] || (subStack[indexValue] = {});
}
function getLastIndexInStack(stack, vScale, positive, type) {
    for (const meta of vScale.getMatchingVisibleMetas(type).reverse()){
        const value = stack[meta.index];
        if (positive && value > 0 || !positive && value < 0) return meta.index;
    }
    return null;
}
function updateStacks(controller, parsed) {
    const { chart, _cachedMeta: meta } = controller;
    const stacks = chart._stacks || (chart._stacks = {});
    const { iScale, vScale, index: datasetIndex } = meta;
    const iAxis = iScale.axis;
    const vAxis = vScale.axis;
    const key = getStackKey(iScale, vScale, meta);
    const ilen = parsed.length;
    let stack;
    for(let i = 0; i < ilen; ++i){
        const item = parsed[i];
        const { [iAxis]: index, [vAxis]: value } = item;
        const itemStacks = item._stacks || (item._stacks = {});
        stack = itemStacks[vAxis] = getOrCreateStack(stacks, key, index);
        stack[datasetIndex] = value;
        stack._top = getLastIndexInStack(stack, vScale, true, meta.type);
        stack._bottom = getLastIndexInStack(stack, vScale, false, meta.type);
        const visualValues = stack._visualValues || (stack._visualValues = {});
        visualValues[datasetIndex] = value;
    }
}
function getFirstScaleId(chart, axis) {
    const scales = chart.scales;
    return Object.keys(scales).filter((key)=>scales[key].axis === axis).shift();
}
function createDatasetContext(parent, index) {
    return (0, _helpersSegmentJs.j)(parent, {
        active: false,
        dataset: undefined,
        datasetIndex: index,
        index,
        mode: "default",
        type: "dataset"
    });
}
function createDataContext(parent, index, element) {
    return (0, _helpersSegmentJs.j)(parent, {
        active: false,
        dataIndex: index,
        parsed: undefined,
        raw: undefined,
        element,
        index,
        mode: "default",
        type: "data"
    });
}
function clearStacks(meta, items) {
    const datasetIndex = meta.controller.index;
    const axis = meta.vScale && meta.vScale.axis;
    if (!axis) return;
    items = items || meta._parsed;
    for (const parsed of items){
        const stacks = parsed._stacks;
        if (!stacks || stacks[axis] === undefined || stacks[axis][datasetIndex] === undefined) return;
        delete stacks[axis][datasetIndex];
        if (stacks[axis]._visualValues !== undefined && stacks[axis]._visualValues[datasetIndex] !== undefined) delete stacks[axis]._visualValues[datasetIndex];
    }
}
const isDirectUpdateMode = (mode)=>mode === "reset" || mode === "none";
const cloneIfNotShared = (cached, shared)=>shared ? cached : Object.assign({}, cached);
const createStack = (canStack, meta, chart)=>canStack && !meta.hidden && meta._stacked && {
        keys: getSortedDatasetIndices(chart, true),
        values: null
    };
class DatasetController {
    static defaults = {};
    static datasetElementType = null;
    static dataElementType = null;
    constructor(chart, datasetIndex){
        this.chart = chart;
        this._ctx = chart.ctx;
        this.index = datasetIndex;
        this._cachedDataOpts = {};
        this._cachedMeta = this.getMeta();
        this._type = this._cachedMeta.type;
        this.options = undefined;
        this._parsing = false;
        this._data = undefined;
        this._objectData = undefined;
        this._sharedOptions = undefined;
        this._drawStart = undefined;
        this._drawCount = undefined;
        this.enableOptionSharing = false;
        this.supportsDecimation = false;
        this.$context = undefined;
        this._syncList = [];
        this.datasetElementType = new.target.datasetElementType;
        this.dataElementType = new.target.dataElementType;
        this.initialize();
    }
    initialize() {
        const meta = this._cachedMeta;
        this.configure();
        this.linkScales();
        meta._stacked = isStacked(meta.vScale, meta);
        this.addElements();
        if (this.options.fill && !this.chart.isPluginEnabled("filler")) console.warn("Tried to use the 'fill' option without the 'Filler' plugin enabled. Please import and register the 'Filler' plugin and make sure it is not disabled in the options");
    }
    updateIndex(datasetIndex) {
        if (this.index !== datasetIndex) clearStacks(this._cachedMeta);
        this.index = datasetIndex;
    }
    linkScales() {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        const chooseId = (axis, x, y, r)=>axis === "x" ? x : axis === "r" ? r : y;
        const xid = meta.xAxisID = (0, _helpersSegmentJs.v)(dataset.xAxisID, getFirstScaleId(chart, "x"));
        const yid = meta.yAxisID = (0, _helpersSegmentJs.v)(dataset.yAxisID, getFirstScaleId(chart, "y"));
        const rid = meta.rAxisID = (0, _helpersSegmentJs.v)(dataset.rAxisID, getFirstScaleId(chart, "r"));
        const indexAxis = meta.indexAxis;
        const iid = meta.iAxisID = chooseId(indexAxis, xid, yid, rid);
        const vid = meta.vAxisID = chooseId(indexAxis, yid, xid, rid);
        meta.xScale = this.getScaleForId(xid);
        meta.yScale = this.getScaleForId(yid);
        meta.rScale = this.getScaleForId(rid);
        meta.iScale = this.getScaleForId(iid);
        meta.vScale = this.getScaleForId(vid);
    }
    getDataset() {
        return this.chart.data.datasets[this.index];
    }
    getMeta() {
        return this.chart.getDatasetMeta(this.index);
    }
    getScaleForId(scaleID) {
        return this.chart.scales[scaleID];
    }
    _getOtherScale(scale) {
        const meta = this._cachedMeta;
        return scale === meta.iScale ? meta.vScale : meta.iScale;
    }
    reset() {
        this._update("reset");
    }
    _destroy() {
        const meta = this._cachedMeta;
        if (this._data) (0, _helpersSegmentJs.u)(this._data, this);
        if (meta._stacked) clearStacks(meta);
    }
    _dataCheck() {
        const dataset = this.getDataset();
        const data = dataset.data || (dataset.data = []);
        const _data = this._data;
        if ((0, _helpersSegmentJs.i)(data)) {
            const meta = this._cachedMeta;
            this._data = convertObjectDataToArray(data, meta);
        } else if (_data !== data) {
            if (_data) {
                (0, _helpersSegmentJs.u)(_data, this);
                const meta = this._cachedMeta;
                clearStacks(meta);
                meta._parsed = [];
            }
            if (data && Object.isExtensible(data)) (0, _helpersSegmentJs.l)(data, this);
            this._syncList = [];
            this._data = data;
        }
    }
    addElements() {
        const meta = this._cachedMeta;
        this._dataCheck();
        if (this.datasetElementType) meta.dataset = new this.datasetElementType();
    }
    buildOrUpdateElements(resetNewElements) {
        const meta = this._cachedMeta;
        const dataset = this.getDataset();
        let stackChanged = false;
        this._dataCheck();
        const oldStacked = meta._stacked;
        meta._stacked = isStacked(meta.vScale, meta);
        if (meta.stack !== dataset.stack) {
            stackChanged = true;
            clearStacks(meta);
            meta.stack = dataset.stack;
        }
        this._resyncElements(resetNewElements);
        if (stackChanged || oldStacked !== meta._stacked) updateStacks(this, meta._parsed);
    }
    configure() {
        const config = this.chart.config;
        const scopeKeys = config.datasetScopeKeys(this._type);
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys, true);
        this.options = config.createResolver(scopes, this.getContext());
        this._parsing = this.options.parsing;
        this._cachedDataOpts = {};
    }
    parse(start, count) {
        const { _cachedMeta: meta, _data: data } = this;
        const { iScale, _stacked } = meta;
        const iAxis = iScale.axis;
        let sorted = start === 0 && count === data.length ? true : meta._sorted;
        let prev = start > 0 && meta._parsed[start - 1];
        let i, cur, parsed;
        if (this._parsing === false) {
            meta._parsed = data;
            meta._sorted = true;
            parsed = data;
        } else {
            if ((0, _helpersSegmentJs.b)(data[start])) parsed = this.parseArrayData(meta, data, start, count);
            else if ((0, _helpersSegmentJs.i)(data[start])) parsed = this.parseObjectData(meta, data, start, count);
            else parsed = this.parsePrimitiveData(meta, data, start, count);
            const isNotInOrderComparedToPrev = ()=>cur[iAxis] === null || prev && cur[iAxis] < prev[iAxis];
            for(i = 0; i < count; ++i){
                meta._parsed[i + start] = cur = parsed[i];
                if (sorted) {
                    if (isNotInOrderComparedToPrev()) sorted = false;
                    prev = cur;
                }
            }
            meta._sorted = sorted;
        }
        if (_stacked) updateStacks(this, parsed);
    }
    parsePrimitiveData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const labels = iScale.getLabels();
        const singleScale = iScale === vScale;
        const parsed = new Array(count);
        let i, ilen, index;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            parsed[i] = {
                [iAxis]: singleScale || iScale.parse(labels[index], index),
                [vAxis]: vScale.parse(data[index], index)
            };
        }
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse(item[0], index),
                y: yScale.parse(item[1], index)
            };
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const { xScale, yScale } = meta;
        const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
        const parsed = new Array(count);
        let i, ilen, index, item;
        for(i = 0, ilen = count; i < ilen; ++i){
            index = i + start;
            item = data[index];
            parsed[i] = {
                x: xScale.parse((0, _helpersSegmentJs.f)(item, xAxisKey), index),
                y: yScale.parse((0, _helpersSegmentJs.f)(item, yAxisKey), index)
            };
        }
        return parsed;
    }
    getParsed(index) {
        return this._cachedMeta._parsed[index];
    }
    getDataElement(index) {
        return this._cachedMeta.data[index];
    }
    applyStack(scale, parsed, mode) {
        const chart = this.chart;
        const meta = this._cachedMeta;
        const value = parsed[scale.axis];
        const stack = {
            keys: getSortedDatasetIndices(chart, true),
            values: parsed._stacks[scale.axis]._visualValues
        };
        return applyStack(stack, value, meta.index, {
            mode
        });
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        const parsedValue = parsed[scale.axis];
        let value = parsedValue === null ? NaN : parsedValue;
        const values = stack && parsed._stacks[scale.axis];
        if (stack && values) {
            stack.values = values;
            value = applyStack(stack, parsedValue, this._cachedMeta.index);
        }
        range.min = Math.min(range.min, value);
        range.max = Math.max(range.max, value);
    }
    getMinMax(scale, canStack) {
        const meta = this._cachedMeta;
        const _parsed = meta._parsed;
        const sorted = meta._sorted && scale === meta.iScale;
        const ilen = _parsed.length;
        const otherScale = this._getOtherScale(scale);
        const stack = createStack(canStack, meta, this.chart);
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        const { min: otherMin, max: otherMax } = getUserBounds(otherScale);
        let i, parsed;
        function _skip() {
            parsed = _parsed[i];
            const otherValue = parsed[otherScale.axis];
            return !(0, _helpersSegmentJs.g)(parsed[scale.axis]) || otherMin > otherValue || otherMax < otherValue;
        }
        for(i = 0; i < ilen; ++i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            if (sorted) break;
        }
        if (sorted) for(i = ilen - 1; i >= 0; --i){
            if (_skip()) continue;
            this.updateRangeFromParsed(range, scale, parsed, stack);
            break;
        }
        return range;
    }
    getAllParsedValues(scale) {
        const parsed = this._cachedMeta._parsed;
        const values = [];
        let i, ilen, value;
        for(i = 0, ilen = parsed.length; i < ilen; ++i){
            value = parsed[i][scale.axis];
            if ((0, _helpersSegmentJs.g)(value)) values.push(value);
        }
        return values;
    }
    getMaxOverflow() {
        return false;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const vScale = meta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: iScale ? "" + iScale.getLabelForValue(parsed[iScale.axis]) : "",
            value: vScale ? "" + vScale.getLabelForValue(parsed[vScale.axis]) : ""
        };
    }
    _update(mode) {
        const meta = this._cachedMeta;
        this.update(mode || "default");
        meta._clip = toClip((0, _helpersSegmentJs.v)(this.options.clip, defaultClip(meta.xScale, meta.yScale, this.getMaxOverflow())));
    }
    update(mode) {}
    draw() {
        const ctx = this._ctx;
        const chart = this.chart;
        const meta = this._cachedMeta;
        const elements = meta.data || [];
        const area = chart.chartArea;
        const active = [];
        const start = this._drawStart || 0;
        const count = this._drawCount || elements.length - start;
        const drawActiveElementsOnTop = this.options.drawActiveElementsOnTop;
        let i;
        if (meta.dataset) meta.dataset.draw(ctx, area, start, count);
        for(i = start; i < start + count; ++i){
            const element = elements[i];
            if (element.hidden) continue;
            if (element.active && drawActiveElementsOnTop) active.push(element);
            else element.draw(ctx, area);
        }
        for(i = 0; i < active.length; ++i)active[i].draw(ctx, area);
    }
    getStyle(index, active) {
        const mode = active ? "active" : "default";
        return index === undefined && this._cachedMeta.dataset ? this.resolveDatasetElementOptions(mode) : this.resolveDataElementOptions(index || 0, mode);
    }
    getContext(index, active, mode) {
        const dataset = this.getDataset();
        let context;
        if (index >= 0 && index < this._cachedMeta.data.length) {
            const element = this._cachedMeta.data[index];
            context = element.$context || (element.$context = createDataContext(this.getContext(), index, element));
            context.parsed = this.getParsed(index);
            context.raw = dataset.data[index];
            context.index = context.dataIndex = index;
        } else {
            context = this.$context || (this.$context = createDatasetContext(this.chart.getContext(), this.index));
            context.dataset = dataset;
            context.index = context.datasetIndex = this.index;
        }
        context.active = !!active;
        context.mode = mode;
        return context;
    }
    resolveDatasetElementOptions(mode) {
        return this._resolveElementOptions(this.datasetElementType.id, mode);
    }
    resolveDataElementOptions(index, mode) {
        return this._resolveElementOptions(this.dataElementType.id, mode, index);
    }
    _resolveElementOptions(elementType, mode = "default", index) {
        const active = mode === "active";
        const cache = this._cachedDataOpts;
        const cacheKey = elementType + "-" + mode;
        const cached = cache[cacheKey];
        const sharing = this.enableOptionSharing && (0, _helpersSegmentJs.h)(index);
        if (cached) return cloneIfNotShared(cached, sharing);
        const config = this.chart.config;
        const scopeKeys = config.datasetElementScopeKeys(this._type, elementType);
        const prefixes = active ? [
            `${elementType}Hover`,
            "hover",
            elementType,
            ""
        ] : [
            elementType,
            ""
        ];
        const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
        const names = Object.keys((0, _helpersSegmentJs.d).elements[elementType]);
        const context = ()=>this.getContext(index, active, mode);
        const values = config.resolveNamedOptions(scopes, names, context, prefixes);
        if (values.$shared) {
            values.$shared = sharing;
            cache[cacheKey] = Object.freeze(cloneIfNotShared(values, sharing));
        }
        return values;
    }
    _resolveAnimations(index, transition, active) {
        const chart = this.chart;
        const cache = this._cachedDataOpts;
        const cacheKey = `animation-${transition}`;
        const cached = cache[cacheKey];
        if (cached) return cached;
        let options;
        if (chart.options.animation !== false) {
            const config = this.chart.config;
            const scopeKeys = config.datasetAnimationScopeKeys(this._type, transition);
            const scopes = config.getOptionScopes(this.getDataset(), scopeKeys);
            options = config.createResolver(scopes, this.getContext(index, active, transition));
        }
        const animations = new Animations(chart, options && options.animations);
        if (options && options._cacheable) cache[cacheKey] = Object.freeze(animations);
        return animations;
    }
    getSharedOptions(options) {
        if (!options.$shared) return;
        return this._sharedOptions || (this._sharedOptions = Object.assign({}, options));
    }
    includeOptions(mode, sharedOptions) {
        return !sharedOptions || isDirectUpdateMode(mode) || this.chart._animationsDisabled;
    }
    _getSharedOptions(start, mode) {
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const previouslySharedOptions = this._sharedOptions;
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions) || sharedOptions !== previouslySharedOptions;
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
        return {
            sharedOptions,
            includeOptions
        };
    }
    updateElement(element, index, properties, mode) {
        if (isDirectUpdateMode(mode)) Object.assign(element, properties);
        else this._resolveAnimations(index, mode).update(element, properties);
    }
    updateSharedOptions(sharedOptions, mode, newOptions) {
        if (sharedOptions && !isDirectUpdateMode(mode)) this._resolveAnimations(undefined, mode).update(sharedOptions, newOptions);
    }
    _setStyle(element, index, mode, active) {
        element.active = active;
        const options = this.getStyle(index, active);
        this._resolveAnimations(index, mode, active).update(element, {
            options: !active && this.getSharedOptions(options) || options
        });
    }
    removeHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, "active", false);
    }
    setHoverStyle(element, datasetIndex, index) {
        this._setStyle(element, index, "active", true);
    }
    _removeDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, "active", false);
    }
    _setDatasetHoverStyle() {
        const element = this._cachedMeta.dataset;
        if (element) this._setStyle(element, undefined, "active", true);
    }
    _resyncElements(resetNewElements) {
        const data = this._data;
        const elements = this._cachedMeta.data;
        for (const [method, arg1, arg2] of this._syncList)this[method](arg1, arg2);
        this._syncList = [];
        const numMeta = elements.length;
        const numData = data.length;
        const count = Math.min(numData, numMeta);
        if (count) this.parse(0, count);
        if (numData > numMeta) this._insertElements(numMeta, numData - numMeta, resetNewElements);
        else if (numData < numMeta) this._removeElements(numData, numMeta - numData);
    }
    _insertElements(start, count, resetNewElements = true) {
        const meta = this._cachedMeta;
        const data = meta.data;
        const end = start + count;
        let i;
        const move = (arr)=>{
            arr.length += count;
            for(i = arr.length - 1; i >= end; i--)arr[i] = arr[i - count];
        };
        move(data);
        for(i = start; i < end; ++i)data[i] = new this.dataElementType();
        if (this._parsing) move(meta._parsed);
        this.parse(start, count);
        if (resetNewElements) this.updateElements(data, start, count, "reset");
    }
    updateElements(element, start, count, mode) {}
    _removeElements(start, count) {
        const meta = this._cachedMeta;
        if (this._parsing) {
            const removed = meta._parsed.splice(start, count);
            if (meta._stacked) clearStacks(meta, removed);
        }
        meta.data.splice(start, count);
    }
    _sync(args) {
        if (this._parsing) this._syncList.push(args);
        else {
            const [method, arg1, arg2] = args;
            this[method](arg1, arg2);
        }
        this.chart._dataChanges.push([
            this.index,
            ...args
        ]);
    }
    _onDataPush() {
        const count = arguments.length;
        this._sync([
            "_insertElements",
            this.getDataset().data.length - count,
            count
        ]);
    }
    _onDataPop() {
        this._sync([
            "_removeElements",
            this._cachedMeta.data.length - 1,
            1
        ]);
    }
    _onDataShift() {
        this._sync([
            "_removeElements",
            0,
            1
        ]);
    }
    _onDataSplice(start, count) {
        if (count) this._sync([
            "_removeElements",
            start,
            count
        ]);
        const newCount = arguments.length - 2;
        if (newCount) this._sync([
            "_insertElements",
            start,
            newCount
        ]);
    }
    _onDataUnshift() {
        this._sync([
            "_insertElements",
            0,
            arguments.length
        ]);
    }
}
function getAllScaleValues(scale, type) {
    if (!scale._cache.$bar) {
        const visibleMetas = scale.getMatchingVisibleMetas(type);
        let values = [];
        for(let i = 0, ilen = visibleMetas.length; i < ilen; i++)values = values.concat(visibleMetas[i].controller.getAllParsedValues(scale));
        scale._cache.$bar = (0, _helpersSegmentJs._)(values.sort((a, b)=>a - b));
    }
    return scale._cache.$bar;
}
function computeMinSampleSize(meta) {
    const scale = meta.iScale;
    const values = getAllScaleValues(scale, meta.type);
    let min = scale._length;
    let i, ilen, curr, prev;
    const updateMinAndPrev = ()=>{
        if (curr === 32767 || curr === -32768) return;
        if ((0, _helpersSegmentJs.h)(prev)) min = Math.min(min, Math.abs(curr - prev) || min);
        prev = curr;
    };
    for(i = 0, ilen = values.length; i < ilen; ++i){
        curr = scale.getPixelForValue(values[i]);
        updateMinAndPrev();
    }
    prev = undefined;
    for(i = 0, ilen = scale.ticks.length; i < ilen; ++i){
        curr = scale.getPixelForTick(i);
        updateMinAndPrev();
    }
    return min;
}
function computeFitCategoryTraits(index, ruler, options, stackCount) {
    const thickness = options.barThickness;
    let size, ratio;
    if ((0, _helpersSegmentJs.k)(thickness)) {
        size = ruler.min * options.categoryPercentage;
        ratio = options.barPercentage;
    } else {
        size = thickness * stackCount;
        ratio = 1;
    }
    return {
        chunk: size / stackCount,
        ratio,
        start: ruler.pixels[index] - size / 2
    };
}
function computeFlexCategoryTraits(index, ruler, options, stackCount) {
    const pixels = ruler.pixels;
    const curr = pixels[index];
    let prev = index > 0 ? pixels[index - 1] : null;
    let next = index < pixels.length - 1 ? pixels[index + 1] : null;
    const percent = options.categoryPercentage;
    if (prev === null) prev = curr - (next === null ? ruler.end - ruler.start : next - curr);
    if (next === null) next = curr + curr - prev;
    const start = curr - (curr - Math.min(prev, next)) / 2 * percent;
    const size = Math.abs(next - prev) / 2 * percent;
    return {
        chunk: size / stackCount,
        ratio: options.barPercentage,
        start
    };
}
function parseFloatBar(entry, item, vScale, i) {
    const startValue = vScale.parse(entry[0], i);
    const endValue = vScale.parse(entry[1], i);
    const min = Math.min(startValue, endValue);
    const max = Math.max(startValue, endValue);
    let barStart = min;
    let barEnd = max;
    if (Math.abs(min) > Math.abs(max)) {
        barStart = max;
        barEnd = min;
    }
    item[vScale.axis] = barEnd;
    item._custom = {
        barStart,
        barEnd,
        start: startValue,
        end: endValue,
        min,
        max
    };
}
function parseValue(entry, item, vScale, i) {
    if ((0, _helpersSegmentJs.b)(entry)) parseFloatBar(entry, item, vScale, i);
    else item[vScale.axis] = vScale.parse(entry, i);
    return item;
}
function parseArrayOrPrimitive(meta, data, start, count) {
    const iScale = meta.iScale;
    const vScale = meta.vScale;
    const labels = iScale.getLabels();
    const singleScale = iScale === vScale;
    const parsed = [];
    let i, ilen, item, entry;
    for(i = start, ilen = start + count; i < ilen; ++i){
        entry = data[i];
        item = {};
        item[iScale.axis] = singleScale || iScale.parse(labels[i], i);
        parsed.push(parseValue(entry, item, vScale, i));
    }
    return parsed;
}
function isFloatBar(custom) {
    return custom && custom.barStart !== undefined && custom.barEnd !== undefined;
}
function barSign(size, vScale, actualBase) {
    if (size !== 0) return (0, _helpersSegmentJs.s)(size);
    return (vScale.isHorizontal() ? 1 : -1) * (vScale.min >= actualBase ? 1 : -1);
}
function borderProps(properties) {
    let reverse, start, end, top, bottom;
    if (properties.horizontal) {
        reverse = properties.base > properties.x;
        start = "left";
        end = "right";
    } else {
        reverse = properties.base < properties.y;
        start = "bottom";
        end = "top";
    }
    if (reverse) {
        top = "end";
        bottom = "start";
    } else {
        top = "start";
        bottom = "end";
    }
    return {
        start,
        end,
        reverse,
        top,
        bottom
    };
}
function setBorderSkipped(properties, options, stack, index) {
    let edge = options.borderSkipped;
    const res = {};
    if (!edge) {
        properties.borderSkipped = res;
        return;
    }
    if (edge === true) {
        properties.borderSkipped = {
            top: true,
            right: true,
            bottom: true,
            left: true
        };
        return;
    }
    const { start, end, reverse, top, bottom } = borderProps(properties);
    if (edge === "middle" && stack) {
        properties.enableBorderRadius = true;
        if ((stack._top || 0) === index) edge = top;
        else if ((stack._bottom || 0) === index) edge = bottom;
        else {
            res[parseEdge(bottom, start, end, reverse)] = true;
            edge = top;
        }
    }
    res[parseEdge(edge, start, end, reverse)] = true;
    properties.borderSkipped = res;
}
function parseEdge(edge, a, b, reverse) {
    if (reverse) {
        edge = swap(edge, a, b);
        edge = startEnd(edge, b, a);
    } else edge = startEnd(edge, a, b);
    return edge;
}
function swap(orig, v1, v2) {
    return orig === v1 ? v2 : orig === v2 ? v1 : orig;
}
function startEnd(v, start, end) {
    return v === "start" ? start : v === "end" ? end : v;
}
function setInflateAmount(properties, { inflateAmount }, ratio) {
    properties.inflateAmount = inflateAmount === "auto" ? ratio === 1 ? 0.33 : 0 : inflateAmount;
}
class BarController extends DatasetController {
    static id = "bar";
    static defaults = {
        datasetElementType: false,
        dataElementType: "bar",
        categoryPercentage: 0.8,
        barPercentage: 0.9,
        grouped: true,
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "base",
                    "width",
                    "height"
                ]
            }
        }
    };
    static overrides = {
        scales: {
            _index_: {
                type: "category",
                offset: true,
                grid: {
                    offset: true
                }
            },
            _value_: {
                type: "linear",
                beginAtZero: true
            }
        }
    };
    parsePrimitiveData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
    parseArrayData(meta, data, start, count) {
        return parseArrayOrPrimitive(meta, data, start, count);
    }
    parseObjectData(meta, data, start, count) {
        const { iScale, vScale } = meta;
        const { xAxisKey = "x", yAxisKey = "y" } = this._parsing;
        const iAxisKey = iScale.axis === "x" ? xAxisKey : yAxisKey;
        const vAxisKey = vScale.axis === "x" ? xAxisKey : yAxisKey;
        const parsed = [];
        let i, ilen, item, obj;
        for(i = start, ilen = start + count; i < ilen; ++i){
            obj = data[i];
            item = {};
            item[iScale.axis] = iScale.parse((0, _helpersSegmentJs.f)(obj, iAxisKey), i);
            parsed.push(parseValue((0, _helpersSegmentJs.f)(obj, vAxisKey), item, vScale, i));
        }
        return parsed;
    }
    updateRangeFromParsed(range, scale, parsed, stack) {
        super.updateRangeFromParsed(range, scale, parsed, stack);
        const custom = parsed._custom;
        if (custom && scale === this._cachedMeta.vScale) {
            range.min = Math.min(range.min, custom.min);
            range.max = Math.max(range.max, custom.max);
        }
    }
    getMaxOverflow() {
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const { iScale, vScale } = meta;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const value = isFloatBar(custom) ? "[" + custom.start + ", " + custom.end + "]" : "" + vScale.getLabelForValue(parsed[vScale.axis]);
        return {
            label: "" + iScale.getLabelForValue(parsed[iScale.axis]),
            value
        };
    }
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
        const meta = this._cachedMeta;
        meta.stack = this.getDataset().stack;
    }
    update(mode) {
        const meta = this._cachedMeta;
        this.updateElements(meta.data, 0, meta.data.length, mode);
    }
    updateElements(bars, start, count, mode) {
        const reset = mode === "reset";
        const { index, _cachedMeta: { vScale } } = this;
        const base = vScale.getBasePixel();
        const horizontal = vScale.isHorizontal();
        const ruler = this._getRuler();
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        for(let i = start; i < start + count; i++){
            const parsed = this.getParsed(i);
            const vpixels = reset || (0, _helpersSegmentJs.k)(parsed[vScale.axis]) ? {
                base,
                head: base
            } : this._calculateBarValuePixels(i);
            const ipixels = this._calculateBarIndexPixels(i, ruler);
            const stack = (parsed._stacks || {})[vScale.axis];
            const properties = {
                horizontal,
                base: vpixels.base,
                enableBorderRadius: !stack || isFloatBar(parsed._custom) || index === stack._top || index === stack._bottom,
                x: horizontal ? vpixels.head : ipixels.center,
                y: horizontal ? ipixels.center : vpixels.head,
                height: horizontal ? ipixels.size : Math.abs(vpixels.size),
                width: horizontal ? Math.abs(vpixels.size) : ipixels.size
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, bars[i].active ? "active" : mode);
            const options = properties.options || bars[i].options;
            setBorderSkipped(properties, options, stack, index);
            setInflateAmount(properties, options, ruler.ratio);
            this.updateElement(bars[i], i, properties, mode);
        }
    }
    _getStacks(last, dataIndex) {
        const { iScale } = this._cachedMeta;
        const metasets = iScale.getMatchingVisibleMetas(this._type).filter((meta)=>meta.controller.options.grouped);
        const stacked = iScale.options.stacked;
        const stacks = [];
        const skipNull = (meta)=>{
            const parsed = meta.controller.getParsed(dataIndex);
            const val = parsed && parsed[meta.vScale.axis];
            if ((0, _helpersSegmentJs.k)(val) || isNaN(val)) return true;
        };
        for (const meta of metasets){
            if (dataIndex !== undefined && skipNull(meta)) continue;
            if (stacked === false || stacks.indexOf(meta.stack) === -1 || stacked === undefined && meta.stack === undefined) stacks.push(meta.stack);
            if (meta.index === last) break;
        }
        if (!stacks.length) stacks.push(undefined);
        return stacks;
    }
    _getStackCount(index) {
        return this._getStacks(undefined, index).length;
    }
    _getStackIndex(datasetIndex, name, dataIndex) {
        const stacks = this._getStacks(datasetIndex, dataIndex);
        const index = name !== undefined ? stacks.indexOf(name) : -1;
        return index === -1 ? stacks.length - 1 : index;
    }
    _getRuler() {
        const opts = this.options;
        const meta = this._cachedMeta;
        const iScale = meta.iScale;
        const pixels = [];
        let i, ilen;
        for(i = 0, ilen = meta.data.length; i < ilen; ++i)pixels.push(iScale.getPixelForValue(this.getParsed(i)[iScale.axis], i));
        const barThickness = opts.barThickness;
        const min = barThickness || computeMinSampleSize(meta);
        return {
            min,
            pixels,
            start: iScale._startPixel,
            end: iScale._endPixel,
            stackCount: this._getStackCount(),
            scale: iScale,
            grouped: opts.grouped,
            ratio: barThickness ? 1 : opts.categoryPercentage * opts.barPercentage
        };
    }
    _calculateBarValuePixels(index) {
        const { _cachedMeta: { vScale, _stacked, index: datasetIndex }, options: { base: baseValue, minBarLength } } = this;
        const actualBase = baseValue || 0;
        const parsed = this.getParsed(index);
        const custom = parsed._custom;
        const floating = isFloatBar(custom);
        let value = parsed[vScale.axis];
        let start = 0;
        let length = _stacked ? this.applyStack(vScale, parsed, _stacked) : value;
        let head, size;
        if (length !== value) {
            start = length - value;
            length = value;
        }
        if (floating) {
            value = custom.barStart;
            length = custom.barEnd - custom.barStart;
            if (value !== 0 && (0, _helpersSegmentJs.s)(value) !== (0, _helpersSegmentJs.s)(custom.barEnd)) start = 0;
            start += value;
        }
        const startValue = !(0, _helpersSegmentJs.k)(baseValue) && !floating ? baseValue : start;
        let base = vScale.getPixelForValue(startValue);
        if (this.chart.getDataVisibility(index)) head = vScale.getPixelForValue(start + length);
        else head = base;
        size = head - base;
        if (Math.abs(size) < minBarLength) {
            size = barSign(size, vScale, actualBase) * minBarLength;
            if (value === actualBase) base -= size / 2;
            const startPixel = vScale.getPixelForDecimal(0);
            const endPixel = vScale.getPixelForDecimal(1);
            const min = Math.min(startPixel, endPixel);
            const max = Math.max(startPixel, endPixel);
            base = Math.max(Math.min(base, max), min);
            head = base + size;
            if (_stacked && !floating) parsed._stacks[vScale.axis]._visualValues[datasetIndex] = vScale.getValueForPixel(head) - vScale.getValueForPixel(base);
        }
        if (base === vScale.getPixelForValue(actualBase)) {
            const halfGrid = (0, _helpersSegmentJs.s)(size) * vScale.getLineWidthForValue(actualBase) / 2;
            base += halfGrid;
            size -= halfGrid;
        }
        return {
            size,
            base,
            head,
            center: head + size / 2
        };
    }
    _calculateBarIndexPixels(index, ruler) {
        const scale = ruler.scale;
        const options = this.options;
        const skipNull = options.skipNull;
        const maxBarThickness = (0, _helpersSegmentJs.v)(options.maxBarThickness, Infinity);
        let center, size;
        if (ruler.grouped) {
            const stackCount = skipNull ? this._getStackCount(index) : ruler.stackCount;
            const range = options.barThickness === "flex" ? computeFlexCategoryTraits(index, ruler, options, stackCount) : computeFitCategoryTraits(index, ruler, options, stackCount);
            const stackIndex = this._getStackIndex(this.index, this._cachedMeta.stack, skipNull ? index : undefined);
            center = range.start + range.chunk * stackIndex + range.chunk / 2;
            size = Math.min(maxBarThickness, range.chunk * range.ratio);
        } else {
            center = scale.getPixelForValue(this.getParsed(index)[scale.axis], index);
            size = Math.min(maxBarThickness, ruler.min * ruler.ratio);
        }
        return {
            base: center - size / 2,
            head: center + size / 2,
            center,
            size
        };
    }
    draw() {
        const meta = this._cachedMeta;
        const vScale = meta.vScale;
        const rects = meta.data;
        const ilen = rects.length;
        let i = 0;
        for(; i < ilen; ++i)if (this.getParsed(i)[vScale.axis] !== null && !rects[i].hidden) rects[i].draw(this._ctx);
    }
}
class BubbleController extends DatasetController {
    static id = "bubble";
    static defaults = {
        datasetElementType: false,
        dataElementType: "point",
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "borderWidth",
                    "radius"
                ]
            }
        }
    };
    static overrides = {
        scales: {
            x: {
                type: "linear"
            },
            y: {
                type: "linear"
            }
        }
    };
    initialize() {
        this.enableOptionSharing = true;
        super.initialize();
    }
    parsePrimitiveData(meta, data, start, count) {
        const parsed = super.parsePrimitiveData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++)parsed[i]._custom = this.resolveDataElementOptions(i + start).radius;
        return parsed;
    }
    parseArrayData(meta, data, start, count) {
        const parsed = super.parseArrayData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0, _helpersSegmentJs.v)(item[2], this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    parseObjectData(meta, data, start, count) {
        const parsed = super.parseObjectData(meta, data, start, count);
        for(let i = 0; i < parsed.length; i++){
            const item = data[start + i];
            parsed[i]._custom = (0, _helpersSegmentJs.v)(item && item.r && +item.r, this.resolveDataElementOptions(i + start).radius);
        }
        return parsed;
    }
    getMaxOverflow() {
        const data = this._cachedMeta.data;
        let max = 0;
        for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
        return max > 0 && max;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        const r = parsed._custom;
        return {
            label: labels[index] || "",
            value: "(" + x + ", " + y + (r ? ", " + r : "") + ")"
        };
    }
    update(mode) {
        const points = this._cachedMeta.data;
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const parsed = !reset && this.getParsed(i);
            const properties = {};
            const iPixel = properties[iAxis] = reset ? iScale.getPixelForDecimal(0.5) : iScale.getPixelForValue(parsed[iAxis]);
            const vPixel = properties[vAxis] = reset ? vScale.getBasePixel() : vScale.getPixelForValue(parsed[vAxis]);
            properties.skip = isNaN(iPixel) || isNaN(vPixel);
            if (includeOptions) {
                properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
                if (reset) properties.options.radius = 0;
            }
            this.updateElement(point, i, properties, mode);
        }
    }
    resolveDataElementOptions(index, mode) {
        const parsed = this.getParsed(index);
        let values = super.resolveDataElementOptions(index, mode);
        if (values.$shared) values = Object.assign({}, values, {
            $shared: false
        });
        const radius = values.radius;
        if (mode !== "active") values.radius = 0;
        values.radius += (0, _helpersSegmentJs.v)(parsed && parsed._custom, radius);
        return values;
    }
}
function getRatioAndOffset(rotation, circumference, cutout) {
    let ratioX = 1;
    let ratioY = 1;
    let offsetX = 0;
    let offsetY = 0;
    if (circumference < (0, _helpersSegmentJs.T)) {
        const startAngle = rotation;
        const endAngle = startAngle + circumference;
        const startX = Math.cos(startAngle);
        const startY = Math.sin(startAngle);
        const endX = Math.cos(endAngle);
        const endY = Math.sin(endAngle);
        const calcMax = (angle, a, b)=>(0, _helpersSegmentJs.p)(angle, startAngle, endAngle, true) ? 1 : Math.max(a, a * cutout, b, b * cutout);
        const calcMin = (angle, a, b)=>(0, _helpersSegmentJs.p)(angle, startAngle, endAngle, true) ? -1 : Math.min(a, a * cutout, b, b * cutout);
        const maxX = calcMax(0, startX, endX);
        const maxY = calcMax((0, _helpersSegmentJs.H), startY, endY);
        const minX = calcMin((0, _helpersSegmentJs.P), startX, endX);
        const minY = calcMin((0, _helpersSegmentJs.P) + (0, _helpersSegmentJs.H), startY, endY);
        ratioX = (maxX - minX) / 2;
        ratioY = (maxY - minY) / 2;
        offsetX = -(maxX + minX) / 2;
        offsetY = -(maxY + minY) / 2;
    }
    return {
        ratioX,
        ratioY,
        offsetX,
        offsetY
    };
}
class DoughnutController extends DatasetController {
    static id = "doughnut";
    static defaults = {
        datasetElementType: false,
        dataElementType: "arc",
        animation: {
            animateRotate: true,
            animateScale: false
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "circumference",
                    "endAngle",
                    "innerRadius",
                    "outerRadius",
                    "startAngle",
                    "x",
                    "y",
                    "offset",
                    "borderWidth",
                    "spacing"
                ]
            }
        },
        cutout: "50%",
        rotation: 0,
        circumference: 360,
        radius: "100%",
        spacing: 0,
        indexAxis: "r"
    };
    static descriptors = {
        _scriptable: (name)=>name !== "spacing",
        _indexable: (name)=>name !== "spacing" && !name.startsWith("borderDash") && !name.startsWith("hoverBorderDash")
    };
    static overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            const { labels: { pointStyle, color } } = chart.legend.options;
                            return data.labels.map((label, i)=>{
                                const meta = chart.getDatasetMeta(0);
                                const style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick (e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        }
    };
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.enableOptionSharing = true;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.offsetX = undefined;
        this.offsetY = undefined;
    }
    linkScales() {}
    parse(start, count) {
        const data = this.getDataset().data;
        const meta = this._cachedMeta;
        if (this._parsing === false) meta._parsed = data;
        else {
            let getter = (i)=>+data[i];
            if ((0, _helpersSegmentJs.i)(data[start])) {
                const { key = "value" } = this._parsing;
                getter = (i)=>+(0, _helpersSegmentJs.f)(data[i], key);
            }
            let i, ilen;
            for(i = start, ilen = start + count; i < ilen; ++i)meta._parsed[i] = getter(i);
        }
    }
    _getRotation() {
        return (0, _helpersSegmentJs.t)(this.options.rotation - 90);
    }
    _getCircumference() {
        return (0, _helpersSegmentJs.t)(this.options.circumference);
    }
    _getRotationExtents() {
        let min = (0, _helpersSegmentJs.T);
        let max = -(0, _helpersSegmentJs.T);
        for(let i = 0; i < this.chart.data.datasets.length; ++i)if (this.chart.isDatasetVisible(i) && this.chart.getDatasetMeta(i).type === this._type) {
            const controller = this.chart.getDatasetMeta(i).controller;
            const rotation = controller._getRotation();
            const circumference = controller._getCircumference();
            min = Math.min(min, rotation);
            max = Math.max(max, rotation + circumference);
        }
        return {
            rotation: min,
            circumference: max - min
        };
    }
    update(mode) {
        const chart = this.chart;
        const { chartArea } = chart;
        const meta = this._cachedMeta;
        const arcs = meta.data;
        const spacing = this.getMaxBorderWidth() + this.getMaxOffset(arcs) + this.options.spacing;
        const maxSize = Math.max((Math.min(chartArea.width, chartArea.height) - spacing) / 2, 0);
        const cutout = Math.min((0, _helpersSegmentJs.m)(this.options.cutout, maxSize), 1);
        const chartWeight = this._getRingWeight(this.index);
        const { circumference, rotation } = this._getRotationExtents();
        const { ratioX, ratioY, offsetX, offsetY } = getRatioAndOffset(rotation, circumference, cutout);
        const maxWidth = (chartArea.width - spacing) / ratioX;
        const maxHeight = (chartArea.height - spacing) / ratioY;
        const maxRadius = Math.max(Math.min(maxWidth, maxHeight) / 2, 0);
        const outerRadius = (0, _helpersSegmentJs.n)(this.options.radius, maxRadius);
        const innerRadius = Math.max(outerRadius * cutout, 0);
        const radiusLength = (outerRadius - innerRadius) / this._getVisibleDatasetWeightTotal();
        this.offsetX = offsetX * outerRadius;
        this.offsetY = offsetY * outerRadius;
        meta.total = this.calculateTotal();
        this.outerRadius = outerRadius - radiusLength * this._getRingWeightOffset(this.index);
        this.innerRadius = Math.max(this.outerRadius - radiusLength * chartWeight, 0);
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    _circumference(i, reset) {
        const opts = this.options;
        const meta = this._cachedMeta;
        const circumference = this._getCircumference();
        if (reset && opts.animation.animateRotate || !this.chart.getDataVisibility(i) || meta._parsed[i] === null || meta.data[i].hidden) return 0;
        return this.calculateCircumference(meta._parsed[i] * circumference / (0, _helpersSegmentJs.T));
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === "reset";
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const centerX = (chartArea.left + chartArea.right) / 2;
        const centerY = (chartArea.top + chartArea.bottom) / 2;
        const animateScale = reset && animationOpts.animateScale;
        const innerRadius = animateScale ? 0 : this.innerRadius;
        const outerRadius = animateScale ? 0 : this.outerRadius;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        let startAngle = this._getRotation();
        let i;
        for(i = 0; i < start; ++i)startAngle += this._circumference(i, reset);
        for(i = start; i < start + count; ++i){
            const circumference = this._circumference(i, reset);
            const arc = arcs[i];
            const properties = {
                x: centerX + this.offsetX,
                y: centerY + this.offsetY,
                startAngle,
                endAngle: startAngle + circumference,
                circumference,
                outerRadius,
                innerRadius
            };
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, arc.active ? "active" : mode);
            startAngle += circumference;
            this.updateElement(arc, i, properties, mode);
        }
    }
    calculateTotal() {
        const meta = this._cachedMeta;
        const metaData = meta.data;
        let total = 0;
        let i;
        for(i = 0; i < metaData.length; i++){
            const value = meta._parsed[i];
            if (value !== null && !isNaN(value) && this.chart.getDataVisibility(i) && !metaData[i].hidden) total += Math.abs(value);
        }
        return total;
    }
    calculateCircumference(value) {
        const total = this._cachedMeta.total;
        if (total > 0 && !isNaN(value)) return (0, _helpersSegmentJs.T) * (Math.abs(value) / total);
        return 0;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0, _helpersSegmentJs.o)(meta._parsed[index], chart.options.locale);
        return {
            label: labels[index] || "",
            value
        };
    }
    getMaxBorderWidth(arcs) {
        let max = 0;
        const chart = this.chart;
        let i, ilen, meta, controller, options;
        if (!arcs) {
            for(i = 0, ilen = chart.data.datasets.length; i < ilen; ++i)if (chart.isDatasetVisible(i)) {
                meta = chart.getDatasetMeta(i);
                arcs = meta.data;
                controller = meta.controller;
                break;
            }
        }
        if (!arcs) return 0;
        for(i = 0, ilen = arcs.length; i < ilen; ++i){
            options = controller.resolveDataElementOptions(i);
            if (options.borderAlign !== "inner") max = Math.max(max, options.borderWidth || 0, options.hoverBorderWidth || 0);
        }
        return max;
    }
    getMaxOffset(arcs) {
        let max = 0;
        for(let i = 0, ilen = arcs.length; i < ilen; ++i){
            const options = this.resolveDataElementOptions(i);
            max = Math.max(max, options.offset || 0, options.hoverOffset || 0);
        }
        return max;
    }
    _getRingWeightOffset(datasetIndex) {
        let ringWeightOffset = 0;
        for(let i = 0; i < datasetIndex; ++i)if (this.chart.isDatasetVisible(i)) ringWeightOffset += this._getRingWeight(i);
        return ringWeightOffset;
    }
    _getRingWeight(datasetIndex) {
        return Math.max((0, _helpersSegmentJs.v)(this.chart.data.datasets[datasetIndex].weight, 1), 0);
    }
    _getVisibleDatasetWeightTotal() {
        return this._getRingWeightOffset(this.chart.data.datasets.length) || 1;
    }
}
class LineController extends DatasetController {
    static id = "line";
    static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        showLine: true,
        spanGaps: false
    };
    static overrides = {
        scales: {
            _index_: {
                type: "category"
            },
            _value_: {
                type: "linear"
            }
        }
    };
    initialize() {
        this.enableOptionSharing = true;
        this.supportsDecimation = true;
        super.initialize();
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { dataset: line, data: points = [], _dataset } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = (0, _helpersSegmentJs.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0, _helpersSegmentJs.w)(meta)) {
            start = 0;
            count = points.length;
        }
        line._chart = this.chart;
        line._datasetIndex = this.index;
        line._decimated = !!_dataset._decimated;
        line.points = points;
        const options = this.resolveDatasetElementOptions(mode);
        if (!this.options.showLine) options.borderWidth = 0;
        options.segment = this.options.segment;
        this.updateElement(line, undefined, {
            animated: !animationsDisabled,
            options
        }, mode);
        this.updateElements(points, start, count, mode);
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const { sharedOptions, includeOptions } = this._getSharedOptions(start, mode);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = (0, _helpersSegmentJs.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
        const end = start + count;
        const pointsCount = points.length;
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = 0; i < pointsCount; ++i){
            const point = points[i];
            const properties = directUpdate ? point : {};
            if (i < start || i >= end) {
                properties.skip = true;
                continue;
            }
            const parsed = this.getParsed(i);
            const nullData = (0, _helpersSegmentJs.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        const data = meta.data || [];
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
    draw() {
        const meta = this._cachedMeta;
        meta.dataset.updateControlPoints(this.chart.chartArea, meta.iScale.axis);
        super.draw();
    }
}
class PolarAreaController extends DatasetController {
    static id = "polarArea";
    static defaults = {
        dataElementType: "arc",
        animation: {
            animateRotate: true,
            animateScale: true
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "startAngle",
                    "endAngle",
                    "innerRadius",
                    "outerRadius"
                ]
            }
        },
        indexAxis: "r",
        startAngle: 0
    };
    static overrides = {
        aspectRatio: 1,
        plugins: {
            legend: {
                labels: {
                    generateLabels (chart) {
                        const data = chart.data;
                        if (data.labels.length && data.datasets.length) {
                            const { labels: { pointStyle, color } } = chart.legend.options;
                            return data.labels.map((label, i)=>{
                                const meta = chart.getDatasetMeta(0);
                                const style = meta.controller.getStyle(i);
                                return {
                                    text: label,
                                    fillStyle: style.backgroundColor,
                                    strokeStyle: style.borderColor,
                                    fontColor: color,
                                    lineWidth: style.borderWidth,
                                    pointStyle: pointStyle,
                                    hidden: !chart.getDataVisibility(i),
                                    index: i
                                };
                            });
                        }
                        return [];
                    }
                },
                onClick (e, legendItem, legend) {
                    legend.chart.toggleDataVisibility(legendItem.index);
                    legend.chart.update();
                }
            }
        },
        scales: {
            r: {
                type: "radialLinear",
                angleLines: {
                    display: false
                },
                beginAtZero: true,
                grid: {
                    circular: true
                },
                pointLabels: {
                    display: false
                },
                startAngle: 0
            }
        }
    };
    constructor(chart, datasetIndex){
        super(chart, datasetIndex);
        this.innerRadius = undefined;
        this.outerRadius = undefined;
    }
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const chart = this.chart;
        const labels = chart.data.labels || [];
        const value = (0, _helpersSegmentJs.o)(meta._parsed[index].r, chart.options.locale);
        return {
            label: labels[index] || "",
            value
        };
    }
    parseObjectData(meta, data, start, count) {
        return (0, _helpersSegmentJs.y).bind(this)(meta, data, start, count);
    }
    update(mode) {
        const arcs = this._cachedMeta.data;
        this._updateRadius();
        this.updateElements(arcs, 0, arcs.length, mode);
    }
    getMinMax() {
        const meta = this._cachedMeta;
        const range = {
            min: Number.POSITIVE_INFINITY,
            max: Number.NEGATIVE_INFINITY
        };
        meta.data.forEach((element, index)=>{
            const parsed = this.getParsed(index).r;
            if (!isNaN(parsed) && this.chart.getDataVisibility(index)) {
                if (parsed < range.min) range.min = parsed;
                if (parsed > range.max) range.max = parsed;
            }
        });
        return range;
    }
    _updateRadius() {
        const chart = this.chart;
        const chartArea = chart.chartArea;
        const opts = chart.options;
        const minSize = Math.min(chartArea.right - chartArea.left, chartArea.bottom - chartArea.top);
        const outerRadius = Math.max(minSize / 2, 0);
        const innerRadius = Math.max(opts.cutoutPercentage ? outerRadius / 100 * opts.cutoutPercentage : 1, 0);
        const radiusLength = (outerRadius - innerRadius) / chart.getVisibleDatasetCount();
        this.outerRadius = outerRadius - radiusLength * this.index;
        this.innerRadius = this.outerRadius - radiusLength;
    }
    updateElements(arcs, start, count, mode) {
        const reset = mode === "reset";
        const chart = this.chart;
        const opts = chart.options;
        const animationOpts = opts.animation;
        const scale = this._cachedMeta.rScale;
        const centerX = scale.xCenter;
        const centerY = scale.yCenter;
        const datasetStartAngle = scale.getIndexAngle(0) - 0.5 * (0, _helpersSegmentJs.P);
        let angle = datasetStartAngle;
        let i;
        const defaultAngle = 360 / this.countVisibleElements();
        for(i = 0; i < start; ++i)angle += this._computeAngle(i, mode, defaultAngle);
        for(i = start; i < start + count; i++){
            const arc = arcs[i];
            let startAngle = angle;
            let endAngle = angle + this._computeAngle(i, mode, defaultAngle);
            let outerRadius = chart.getDataVisibility(i) ? scale.getDistanceFromCenterForValue(this.getParsed(i).r) : 0;
            angle = endAngle;
            if (reset) {
                if (animationOpts.animateScale) outerRadius = 0;
                if (animationOpts.animateRotate) startAngle = endAngle = datasetStartAngle;
            }
            const properties = {
                x: centerX,
                y: centerY,
                innerRadius: 0,
                outerRadius,
                startAngle,
                endAngle,
                options: this.resolveDataElementOptions(i, arc.active ? "active" : mode)
            };
            this.updateElement(arc, i, properties, mode);
        }
    }
    countVisibleElements() {
        const meta = this._cachedMeta;
        let count = 0;
        meta.data.forEach((element, index)=>{
            if (!isNaN(this.getParsed(index).r) && this.chart.getDataVisibility(index)) count++;
        });
        return count;
    }
    _computeAngle(index, mode, defaultAngle) {
        return this.chart.getDataVisibility(index) ? (0, _helpersSegmentJs.t)(this.resolveDataElementOptions(index, mode).angle || defaultAngle) : 0;
    }
}
class PieController extends DoughnutController {
    static id = "pie";
    static defaults = {
        cutout: 0,
        rotation: 0,
        circumference: 360,
        radius: "100%"
    };
}
class RadarController extends DatasetController {
    static id = "radar";
    static defaults = {
        datasetElementType: "line",
        dataElementType: "point",
        indexAxis: "r",
        showLine: true,
        elements: {
            line: {
                fill: "start"
            }
        }
    };
    static overrides = {
        aspectRatio: 1,
        scales: {
            r: {
                type: "radialLinear"
            }
        }
    };
    getLabelAndValue(index) {
        const vScale = this._cachedMeta.vScale;
        const parsed = this.getParsed(index);
        return {
            label: vScale.getLabels()[index],
            value: "" + vScale.getLabelForValue(parsed[vScale.axis])
        };
    }
    parseObjectData(meta, data, start, count) {
        return (0, _helpersSegmentJs.y).bind(this)(meta, data, start, count);
    }
    update(mode) {
        const meta = this._cachedMeta;
        const line = meta.dataset;
        const points = meta.data || [];
        const labels = meta.iScale.getLabels();
        line.points = points;
        if (mode !== "resize") {
            const options = this.resolveDatasetElementOptions(mode);
            if (!this.options.showLine) options.borderWidth = 0;
            const properties = {
                _loop: true,
                _fullLoop: labels.length === points.length,
                options
            };
            this.updateElement(line, undefined, properties, mode);
        }
        this.updateElements(points, 0, points.length, mode);
    }
    updateElements(points, start, count, mode) {
        const scale = this._cachedMeta.rScale;
        const reset = mode === "reset";
        for(let i = start; i < start + count; i++){
            const point = points[i];
            const options = this.resolveDataElementOptions(i, point.active ? "active" : mode);
            const pointPosition = scale.getPointPositionForValue(i, this.getParsed(i).r);
            const x = reset ? scale.xCenter : pointPosition.x;
            const y = reset ? scale.yCenter : pointPosition.y;
            const properties = {
                x,
                y,
                angle: pointPosition.angle,
                skip: isNaN(x) || isNaN(y),
                options
            };
            this.updateElement(point, i, properties, mode);
        }
    }
}
class ScatterController extends DatasetController {
    static id = "scatter";
    static defaults = {
        datasetElementType: false,
        dataElementType: "point",
        showLine: false,
        fill: false
    };
    static overrides = {
        interaction: {
            mode: "point"
        },
        scales: {
            x: {
                type: "linear"
            },
            y: {
                type: "linear"
            }
        }
    };
    getLabelAndValue(index) {
        const meta = this._cachedMeta;
        const labels = this.chart.data.labels || [];
        const { xScale, yScale } = meta;
        const parsed = this.getParsed(index);
        const x = xScale.getLabelForValue(parsed.x);
        const y = yScale.getLabelForValue(parsed.y);
        return {
            label: labels[index] || "",
            value: "(" + x + ", " + y + ")"
        };
    }
    update(mode) {
        const meta = this._cachedMeta;
        const { data: points = [] } = meta;
        const animationsDisabled = this.chart._animationsDisabled;
        let { start, count } = (0, _helpersSegmentJs.q)(meta, points, animationsDisabled);
        this._drawStart = start;
        this._drawCount = count;
        if ((0, _helpersSegmentJs.w)(meta)) {
            start = 0;
            count = points.length;
        }
        if (this.options.showLine) {
            if (!this.datasetElementType) this.addElements();
            const { dataset: line, _dataset } = meta;
            line._chart = this.chart;
            line._datasetIndex = this.index;
            line._decimated = !!_dataset._decimated;
            line.points = points;
            const options = this.resolveDatasetElementOptions(mode);
            options.segment = this.options.segment;
            this.updateElement(line, undefined, {
                animated: !animationsDisabled,
                options
            }, mode);
        } else if (this.datasetElementType) {
            delete meta.dataset;
            this.datasetElementType = false;
        }
        this.updateElements(points, start, count, mode);
    }
    addElements() {
        const { showLine } = this.options;
        if (!this.datasetElementType && showLine) this.datasetElementType = this.chart.registry.getElement("line");
        super.addElements();
    }
    updateElements(points, start, count, mode) {
        const reset = mode === "reset";
        const { iScale, vScale, _stacked, _dataset } = this._cachedMeta;
        const firstOpts = this.resolveDataElementOptions(start, mode);
        const sharedOptions = this.getSharedOptions(firstOpts);
        const includeOptions = this.includeOptions(mode, sharedOptions);
        const iAxis = iScale.axis;
        const vAxis = vScale.axis;
        const { spanGaps, segment } = this.options;
        const maxGapLength = (0, _helpersSegmentJs.x)(spanGaps) ? spanGaps : Number.POSITIVE_INFINITY;
        const directUpdate = this.chart._animationsDisabled || reset || mode === "none";
        let prevParsed = start > 0 && this.getParsed(start - 1);
        for(let i = start; i < start + count; ++i){
            const point = points[i];
            const parsed = this.getParsed(i);
            const properties = directUpdate ? point : {};
            const nullData = (0, _helpersSegmentJs.k)(parsed[vAxis]);
            const iPixel = properties[iAxis] = iScale.getPixelForValue(parsed[iAxis], i);
            const vPixel = properties[vAxis] = reset || nullData ? vScale.getBasePixel() : vScale.getPixelForValue(_stacked ? this.applyStack(vScale, parsed, _stacked) : parsed[vAxis], i);
            properties.skip = isNaN(iPixel) || isNaN(vPixel) || nullData;
            properties.stop = i > 0 && Math.abs(parsed[iAxis] - prevParsed[iAxis]) > maxGapLength;
            if (segment) {
                properties.parsed = parsed;
                properties.raw = _dataset.data[i];
            }
            if (includeOptions) properties.options = sharedOptions || this.resolveDataElementOptions(i, point.active ? "active" : mode);
            if (!directUpdate) this.updateElement(point, i, properties, mode);
            prevParsed = parsed;
        }
        this.updateSharedOptions(sharedOptions, mode, firstOpts);
    }
    getMaxOverflow() {
        const meta = this._cachedMeta;
        const data = meta.data || [];
        if (!this.options.showLine) {
            let max = 0;
            for(let i = data.length - 1; i >= 0; --i)max = Math.max(max, data[i].size(this.resolveDataElementOptions(i)) / 2);
            return max > 0 && max;
        }
        const dataset = meta.dataset;
        const border = dataset.options && dataset.options.borderWidth || 0;
        if (!data.length) return border;
        const firstPoint = data[0].size(this.resolveDataElementOptions(0));
        const lastPoint = data[data.length - 1].size(this.resolveDataElementOptions(data.length - 1));
        return Math.max(border, firstPoint, lastPoint) / 2;
    }
}
var controllers = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    BarController: BarController,
    BubbleController: BubbleController,
    DoughnutController: DoughnutController,
    LineController: LineController,
    PieController: PieController,
    PolarAreaController: PolarAreaController,
    RadarController: RadarController,
    ScatterController: ScatterController
});
/**
 * @namespace Chart._adapters
 * @since 2.8.0
 * @private
 */ function abstract() {
    throw new Error("This method is not implemented: Check that a complete date adapter is provided.");
}
/**
 * Date adapter (current used by the time scale)
 * @namespace Chart._adapters._date
 * @memberof Chart._adapters
 * @private
 */ class DateAdapterBase {
    /**
   * Override default date adapter methods.
   * Accepts type parameter to define options type.
   * @example
   * Chart._adapters._date.override<{myAdapterOption: string}>({
   *   init() {
   *     console.log(this.options.myAdapterOption);
   *   }
   * })
   */ static override(members) {
        Object.assign(DateAdapterBase.prototype, members);
    }
    options;
    constructor(options){
        this.options = options || {};
    }
    // eslint-disable-next-line @typescript-eslint/no-empty-function
    init() {}
    formats() {
        return abstract();
    }
    parse() {
        return abstract();
    }
    format() {
        return abstract();
    }
    add() {
        return abstract();
    }
    diff() {
        return abstract();
    }
    startOf() {
        return abstract();
    }
    endOf() {
        return abstract();
    }
}
var adapters = {
    _date: DateAdapterBase
};
function binarySearch(metaset, axis, value, intersect) {
    const { controller, data, _sorted } = metaset;
    const iScale = controller._cachedMeta.iScale;
    if (iScale && axis === iScale.axis && axis !== "r" && _sorted && data.length) {
        const lookupMethod = iScale._reversePixels ? (0, _helpersSegmentJs.A) : (0, _helpersSegmentJs.B);
        if (!intersect) return lookupMethod(data, axis, value);
        else if (controller._sharedOptions) {
            const el = data[0];
            const range = typeof el.getRange === "function" && el.getRange(axis);
            if (range) {
                const start = lookupMethod(data, axis, value - range);
                const end = lookupMethod(data, axis, value + range);
                return {
                    lo: start.lo,
                    hi: end.hi
                };
            }
        }
    }
    return {
        lo: 0,
        hi: data.length - 1
    };
}
function evaluateInteractionItems(chart, axis, position, handler, intersect) {
    const metasets = chart.getSortedVisibleDatasetMetas();
    const value = position[axis];
    for(let i = 0, ilen = metasets.length; i < ilen; ++i){
        const { index, data } = metasets[i];
        const { lo, hi } = binarySearch(metasets[i], axis, value, intersect);
        for(let j = lo; j <= hi; ++j){
            const element = data[j];
            if (!element.skip) handler(element, index, j);
        }
    }
}
function getDistanceMetricForAxis(axis) {
    const useX = axis.indexOf("x") !== -1;
    const useY = axis.indexOf("y") !== -1;
    return function(pt1, pt2) {
        const deltaX = useX ? Math.abs(pt1.x - pt2.x) : 0;
        const deltaY = useY ? Math.abs(pt1.y - pt2.y) : 0;
        return Math.sqrt(Math.pow(deltaX, 2) + Math.pow(deltaY, 2));
    };
}
function getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) {
    const items = [];
    if (!includeInvisible && !chart.isPointInArea(position)) return items;
    const evaluationFunc = function(element, datasetIndex, index) {
        if (!includeInvisible && !(0, _helpersSegmentJs.C)(element, chart.chartArea, 0)) return;
        if (element.inRange(position.x, position.y, useFinalPosition)) items.push({
            element,
            datasetIndex,
            index
        });
    };
    evaluateInteractionItems(chart, axis, position, evaluationFunc, true);
    return items;
}
function getNearestRadialItems(chart, position, axis, useFinalPosition) {
    let items = [];
    function evaluationFunc(element, datasetIndex, index) {
        const { startAngle, endAngle } = element.getProps([
            "startAngle",
            "endAngle"
        ], useFinalPosition);
        const { angle } = (0, _helpersSegmentJs.D)(element, {
            x: position.x,
            y: position.y
        });
        if ((0, _helpersSegmentJs.p)(angle, startAngle, endAngle)) items.push({
            element,
            datasetIndex,
            index
        });
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    let items = [];
    const distanceMetric = getDistanceMetricForAxis(axis);
    let minDistance = Number.POSITIVE_INFINITY;
    function evaluationFunc(element, datasetIndex, index) {
        const inRange = element.inRange(position.x, position.y, useFinalPosition);
        if (intersect && !inRange) return;
        const center = element.getCenterPoint(useFinalPosition);
        const pointInArea = !!includeInvisible || chart.isPointInArea(center);
        if (!pointInArea && !inRange) return;
        const distance = distanceMetric(position, center);
        if (distance < minDistance) {
            items = [
                {
                    element,
                    datasetIndex,
                    index
                }
            ];
            minDistance = distance;
        } else if (distance === minDistance) items.push({
            element,
            datasetIndex,
            index
        });
    }
    evaluateInteractionItems(chart, axis, position, evaluationFunc);
    return items;
}
function getNearestItems(chart, position, axis, intersect, useFinalPosition, includeInvisible) {
    if (!includeInvisible && !chart.isPointInArea(position)) return [];
    return axis === "r" && !intersect ? getNearestRadialItems(chart, position, axis, useFinalPosition) : getNearestCartesianItems(chart, position, axis, intersect, useFinalPosition, includeInvisible);
}
function getAxisItems(chart, position, axis, intersect, useFinalPosition) {
    const items = [];
    const rangeMethod = axis === "x" ? "inXRange" : "inYRange";
    let intersectsItem = false;
    evaluateInteractionItems(chart, axis, position, (element, datasetIndex, index)=>{
        if (element[rangeMethod](position[axis], useFinalPosition)) {
            items.push({
                element,
                datasetIndex,
                index
            });
            intersectsItem = intersectsItem || element.inRange(position.x, position.y, useFinalPosition);
        }
    });
    if (intersect && !intersectsItem) return [];
    return items;
}
var Interaction = {
    evaluateInteractionItems,
    modes: {
        index (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            const axis = options.axis || "x";
            const includeInvisible = options.includeInvisible || false;
            const items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            const elements = [];
            if (!items.length) return [];
            chart.getSortedVisibleDatasetMetas().forEach((meta)=>{
                const index = items[0].index;
                const element = meta.data[index];
                if (element && !element.skip) elements.push({
                    element,
                    datasetIndex: meta.index,
                    index
                });
            });
            return elements;
        },
        dataset (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            let items = options.intersect ? getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible) : getNearestItems(chart, position, axis, false, useFinalPosition, includeInvisible);
            if (items.length > 0) {
                const datasetIndex = items[0].datasetIndex;
                const data = chart.getDatasetMeta(datasetIndex).data;
                items = [];
                for(let i = 0; i < data.length; ++i)items.push({
                    element: data[i],
                    datasetIndex,
                    index: i
                });
            }
            return items;
        },
        point (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            return getIntersectItems(chart, position, axis, useFinalPosition, includeInvisible);
        },
        nearest (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            const axis = options.axis || "xy";
            const includeInvisible = options.includeInvisible || false;
            return getNearestItems(chart, position, axis, options.intersect, useFinalPosition, includeInvisible);
        },
        x (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            return getAxisItems(chart, position, "x", options.intersect, useFinalPosition);
        },
        y (chart, e, options, useFinalPosition) {
            const position = (0, _helpersSegmentJs.z)(e, chart);
            return getAxisItems(chart, position, "y", options.intersect, useFinalPosition);
        }
    }
};
const STATIC_POSITIONS = [
    "left",
    "top",
    "right",
    "bottom"
];
function filterByPosition(array, position) {
    return array.filter((v)=>v.pos === position);
}
function filterDynamicPositionByAxis(array, axis) {
    return array.filter((v)=>STATIC_POSITIONS.indexOf(v.pos) === -1 && v.box.axis === axis);
}
function sortByWeight(array, reverse) {
    return array.sort((a, b)=>{
        const v0 = reverse ? b : a;
        const v1 = reverse ? a : b;
        return v0.weight === v1.weight ? v0.index - v1.index : v0.weight - v1.weight;
    });
}
function wrapBoxes(boxes) {
    const layoutBoxes = [];
    let i, ilen, box, pos, stack, stackWeight;
    for(i = 0, ilen = (boxes || []).length; i < ilen; ++i){
        box = boxes[i];
        ({ position: pos, options: { stack, stackWeight = 1 } } = box);
        layoutBoxes.push({
            index: i,
            box,
            pos,
            horizontal: box.isHorizontal(),
            weight: box.weight,
            stack: stack && pos + stack,
            stackWeight
        });
    }
    return layoutBoxes;
}
function buildStacks(layouts) {
    const stacks = {};
    for (const wrap of layouts){
        const { stack, pos, stackWeight } = wrap;
        if (!stack || !STATIC_POSITIONS.includes(pos)) continue;
        const _stack = stacks[stack] || (stacks[stack] = {
            count: 0,
            placed: 0,
            weight: 0,
            size: 0
        });
        _stack.count++;
        _stack.weight += stackWeight;
    }
    return stacks;
}
function setLayoutDims(layouts, params) {
    const stacks = buildStacks(layouts);
    const { vBoxMaxWidth, hBoxMaxHeight } = params;
    let i, ilen, layout;
    for(i = 0, ilen = layouts.length; i < ilen; ++i){
        layout = layouts[i];
        const { fullSize } = layout.box;
        const stack = stacks[layout.stack];
        const factor = stack && layout.stackWeight / stack.weight;
        if (layout.horizontal) {
            layout.width = factor ? factor * vBoxMaxWidth : fullSize && params.availableWidth;
            layout.height = hBoxMaxHeight;
        } else {
            layout.width = vBoxMaxWidth;
            layout.height = factor ? factor * hBoxMaxHeight : fullSize && params.availableHeight;
        }
    }
    return stacks;
}
function buildLayoutBoxes(boxes) {
    const layoutBoxes = wrapBoxes(boxes);
    const fullSize = sortByWeight(layoutBoxes.filter((wrap)=>wrap.box.fullSize), true);
    const left = sortByWeight(filterByPosition(layoutBoxes, "left"), true);
    const right = sortByWeight(filterByPosition(layoutBoxes, "right"));
    const top = sortByWeight(filterByPosition(layoutBoxes, "top"), true);
    const bottom = sortByWeight(filterByPosition(layoutBoxes, "bottom"));
    const centerHorizontal = filterDynamicPositionByAxis(layoutBoxes, "x");
    const centerVertical = filterDynamicPositionByAxis(layoutBoxes, "y");
    return {
        fullSize,
        leftAndTop: left.concat(top),
        rightAndBottom: right.concat(centerVertical).concat(bottom).concat(centerHorizontal),
        chartArea: filterByPosition(layoutBoxes, "chartArea"),
        vertical: left.concat(right).concat(centerVertical),
        horizontal: top.concat(bottom).concat(centerHorizontal)
    };
}
function getCombinedMax(maxPadding, chartArea, a, b) {
    return Math.max(maxPadding[a], chartArea[a]) + Math.max(maxPadding[b], chartArea[b]);
}
function updateMaxPadding(maxPadding, boxPadding) {
    maxPadding.top = Math.max(maxPadding.top, boxPadding.top);
    maxPadding.left = Math.max(maxPadding.left, boxPadding.left);
    maxPadding.bottom = Math.max(maxPadding.bottom, boxPadding.bottom);
    maxPadding.right = Math.max(maxPadding.right, boxPadding.right);
}
function updateDims(chartArea, params, layout, stacks) {
    const { pos, box } = layout;
    const maxPadding = chartArea.maxPadding;
    if (!(0, _helpersSegmentJs.i)(pos)) {
        if (layout.size) chartArea[pos] -= layout.size;
        const stack = stacks[layout.stack] || {
            size: 0,
            count: 1
        };
        stack.size = Math.max(stack.size, layout.horizontal ? box.height : box.width);
        layout.size = stack.size / stack.count;
        chartArea[pos] += layout.size;
    }
    if (box.getPadding) updateMaxPadding(maxPadding, box.getPadding());
    const newWidth = Math.max(0, params.outerWidth - getCombinedMax(maxPadding, chartArea, "left", "right"));
    const newHeight = Math.max(0, params.outerHeight - getCombinedMax(maxPadding, chartArea, "top", "bottom"));
    const widthChanged = newWidth !== chartArea.w;
    const heightChanged = newHeight !== chartArea.h;
    chartArea.w = newWidth;
    chartArea.h = newHeight;
    return layout.horizontal ? {
        same: widthChanged,
        other: heightChanged
    } : {
        same: heightChanged,
        other: widthChanged
    };
}
function handleMaxPadding(chartArea) {
    const maxPadding = chartArea.maxPadding;
    function updatePos(pos) {
        const change = Math.max(maxPadding[pos] - chartArea[pos], 0);
        chartArea[pos] += change;
        return change;
    }
    chartArea.y += updatePos("top");
    chartArea.x += updatePos("left");
    updatePos("right");
    updatePos("bottom");
}
function getMargins(horizontal, chartArea) {
    const maxPadding = chartArea.maxPadding;
    function marginForPositions(positions) {
        const margin = {
            left: 0,
            top: 0,
            right: 0,
            bottom: 0
        };
        positions.forEach((pos)=>{
            margin[pos] = Math.max(chartArea[pos], maxPadding[pos]);
        });
        return margin;
    }
    return horizontal ? marginForPositions([
        "left",
        "right"
    ]) : marginForPositions([
        "top",
        "bottom"
    ]);
}
function fitBoxes(boxes, chartArea, params, stacks) {
    const refitBoxes = [];
    let i, ilen, layout, box, refit, changed;
    for(i = 0, ilen = boxes.length, refit = 0; i < ilen; ++i){
        layout = boxes[i];
        box = layout.box;
        box.update(layout.width || chartArea.w, layout.height || chartArea.h, getMargins(layout.horizontal, chartArea));
        const { same, other } = updateDims(chartArea, params, layout, stacks);
        refit |= same && refitBoxes.length;
        changed = changed || other;
        if (!box.fullSize) refitBoxes.push(layout);
    }
    return refit && fitBoxes(refitBoxes, chartArea, params, stacks) || changed;
}
function setBoxDims(box, left, top, width, height) {
    box.top = top;
    box.left = left;
    box.right = left + width;
    box.bottom = top + height;
    box.width = width;
    box.height = height;
}
function placeBoxes(boxes, chartArea, params, stacks) {
    const userPadding = params.padding;
    let { x, y } = chartArea;
    for (const layout of boxes){
        const box = layout.box;
        const stack = stacks[layout.stack] || {
            count: 1,
            placed: 0,
            weight: 1
        };
        const weight = layout.stackWeight / stack.weight || 1;
        if (layout.horizontal) {
            const width = chartArea.w * weight;
            const height = stack.size || box.height;
            if ((0, _helpersSegmentJs.h)(stack.start)) y = stack.start;
            if (box.fullSize) setBoxDims(box, userPadding.left, y, params.outerWidth - userPadding.right - userPadding.left, height);
            else setBoxDims(box, chartArea.left + stack.placed, y, width, height);
            stack.start = y;
            stack.placed += width;
            y = box.bottom;
        } else {
            const height = chartArea.h * weight;
            const width = stack.size || box.width;
            if ((0, _helpersSegmentJs.h)(stack.start)) x = stack.start;
            if (box.fullSize) setBoxDims(box, x, userPadding.top, width, params.outerHeight - userPadding.bottom - userPadding.top);
            else setBoxDims(box, x, chartArea.top + stack.placed, width, height);
            stack.start = x;
            stack.placed += height;
            x = box.right;
        }
    }
    chartArea.x = x;
    chartArea.y = y;
}
var layouts = {
    addBox (chart, item) {
        if (!chart.boxes) chart.boxes = [];
        item.fullSize = item.fullSize || false;
        item.position = item.position || "top";
        item.weight = item.weight || 0;
        item._layers = item._layers || function() {
            return [
                {
                    z: 0,
                    draw (chartArea) {
                        item.draw(chartArea);
                    }
                }
            ];
        };
        chart.boxes.push(item);
    },
    removeBox (chart, layoutItem) {
        const index = chart.boxes ? chart.boxes.indexOf(layoutItem) : -1;
        if (index !== -1) chart.boxes.splice(index, 1);
    },
    configure (chart, item, options) {
        item.fullSize = options.fullSize;
        item.position = options.position;
        item.weight = options.weight;
    },
    update (chart, width, height, minPadding) {
        if (!chart) return;
        const padding = (0, _helpersSegmentJs.E)(chart.options.layout.padding);
        const availableWidth = Math.max(width - padding.width, 0);
        const availableHeight = Math.max(height - padding.height, 0);
        const boxes = buildLayoutBoxes(chart.boxes);
        const verticalBoxes = boxes.vertical;
        const horizontalBoxes = boxes.horizontal;
        (0, _helpersSegmentJs.F)(chart.boxes, (box)=>{
            if (typeof box.beforeLayout === "function") box.beforeLayout();
        });
        const visibleVerticalBoxCount = verticalBoxes.reduce((total, wrap)=>wrap.box.options && wrap.box.options.display === false ? total : total + 1, 0) || 1;
        const params = Object.freeze({
            outerWidth: width,
            outerHeight: height,
            padding,
            availableWidth,
            availableHeight,
            vBoxMaxWidth: availableWidth / 2 / visibleVerticalBoxCount,
            hBoxMaxHeight: availableHeight / 2
        });
        const maxPadding = Object.assign({}, padding);
        updateMaxPadding(maxPadding, (0, _helpersSegmentJs.E)(minPadding));
        const chartArea = Object.assign({
            maxPadding,
            w: availableWidth,
            h: availableHeight,
            x: padding.left,
            y: padding.top
        }, padding);
        const stacks = setLayoutDims(verticalBoxes.concat(horizontalBoxes), params);
        fitBoxes(boxes.fullSize, chartArea, params, stacks);
        fitBoxes(verticalBoxes, chartArea, params, stacks);
        if (fitBoxes(horizontalBoxes, chartArea, params, stacks)) fitBoxes(verticalBoxes, chartArea, params, stacks);
        handleMaxPadding(chartArea);
        placeBoxes(boxes.leftAndTop, chartArea, params, stacks);
        chartArea.x += chartArea.w;
        chartArea.y += chartArea.h;
        placeBoxes(boxes.rightAndBottom, chartArea, params, stacks);
        chart.chartArea = {
            left: chartArea.left,
            top: chartArea.top,
            right: chartArea.left + chartArea.w,
            bottom: chartArea.top + chartArea.h,
            height: chartArea.h,
            width: chartArea.w
        };
        (0, _helpersSegmentJs.F)(boxes.chartArea, (layout)=>{
            const box = layout.box;
            Object.assign(box, chart.chartArea);
            box.update(chartArea.w, chartArea.h, {
                left: 0,
                top: 0,
                right: 0,
                bottom: 0
            });
        });
    }
};
class BasePlatform {
    acquireContext(canvas, aspectRatio) {}
    releaseContext(context) {
        return false;
    }
    addEventListener(chart, type, listener) {}
    removeEventListener(chart, type, listener) {}
    getDevicePixelRatio() {
        return 1;
    }
    getMaximumSize(element, width, height, aspectRatio) {
        width = Math.max(0, width || element.width);
        height = height || element.height;
        return {
            width,
            height: Math.max(0, aspectRatio ? Math.floor(width / aspectRatio) : height)
        };
    }
    isAttached(canvas) {
        return true;
    }
    updateConfig(config) {}
}
class BasicPlatform extends BasePlatform {
    acquireContext(item) {
        return item && item.getContext && item.getContext("2d") || null;
    }
    updateConfig(config) {
        config.options.animation = false;
    }
}
const EXPANDO_KEY = "$chartjs";
const EVENT_TYPES = {
    touchstart: "mousedown",
    touchmove: "mousemove",
    touchend: "mouseup",
    pointerenter: "mouseenter",
    pointerdown: "mousedown",
    pointermove: "mousemove",
    pointerup: "mouseup",
    pointerleave: "mouseout",
    pointerout: "mouseout"
};
const isNullOrEmpty = (value)=>value === null || value === "";
function initCanvas(canvas, aspectRatio) {
    const style = canvas.style;
    const renderHeight = canvas.getAttribute("height");
    const renderWidth = canvas.getAttribute("width");
    canvas[EXPANDO_KEY] = {
        initial: {
            height: renderHeight,
            width: renderWidth,
            style: {
                display: style.display,
                height: style.height,
                width: style.width
            }
        }
    };
    style.display = style.display || "block";
    style.boxSizing = style.boxSizing || "border-box";
    if (isNullOrEmpty(renderWidth)) {
        const displayWidth = (0, _helpersSegmentJs.J)(canvas, "width");
        if (displayWidth !== undefined) canvas.width = displayWidth;
    }
    if (isNullOrEmpty(renderHeight)) {
        if (canvas.style.height === "") canvas.height = canvas.width / (aspectRatio || 2);
        else {
            const displayHeight = (0, _helpersSegmentJs.J)(canvas, "height");
            if (displayHeight !== undefined) canvas.height = displayHeight;
        }
    }
    return canvas;
}
const eventListenerOptions = (0, _helpersSegmentJs.K) ? {
    passive: true
} : false;
function addListener(node, type, listener) {
    if (node) node.addEventListener(type, listener, eventListenerOptions);
}
function removeListener(chart, type, listener) {
    if (chart && chart.canvas) chart.canvas.removeEventListener(type, listener, eventListenerOptions);
}
function fromNativeEvent(event, chart) {
    const type = EVENT_TYPES[event.type] || event.type;
    const { x, y } = (0, _helpersSegmentJs.z)(event, chart);
    return {
        type,
        chart,
        native: event,
        x: x !== undefined ? x : null,
        y: y !== undefined ? y : null
    };
}
function nodeListContains(nodeList, canvas) {
    for (const node of nodeList){
        if (node === canvas || node.contains(canvas)) return true;
    }
}
function createAttachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.addedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.removedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
function createDetachObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const observer = new MutationObserver((entries)=>{
        let trigger = false;
        for (const entry of entries){
            trigger = trigger || nodeListContains(entry.removedNodes, canvas);
            trigger = trigger && !nodeListContains(entry.addedNodes, canvas);
        }
        if (trigger) listener();
    });
    observer.observe(document, {
        childList: true,
        subtree: true
    });
    return observer;
}
const drpListeningCharts = new Map();
let oldDevicePixelRatio = 0;
function onWindowResize() {
    const dpr = window.devicePixelRatio;
    if (dpr === oldDevicePixelRatio) return;
    oldDevicePixelRatio = dpr;
    drpListeningCharts.forEach((resize, chart)=>{
        if (chart.currentDevicePixelRatio !== dpr) resize();
    });
}
function listenDevicePixelRatioChanges(chart, resize) {
    if (!drpListeningCharts.size) window.addEventListener("resize", onWindowResize);
    drpListeningCharts.set(chart, resize);
}
function unlistenDevicePixelRatioChanges(chart) {
    drpListeningCharts.delete(chart);
    if (!drpListeningCharts.size) window.removeEventListener("resize", onWindowResize);
}
function createResizeObserver(chart, type, listener) {
    const canvas = chart.canvas;
    const container = canvas && (0, _helpersSegmentJs.I)(canvas);
    if (!container) return;
    const resize = (0, _helpersSegmentJs.L)((width, height)=>{
        const w = container.clientWidth;
        listener(width, height);
        if (w < container.clientWidth) listener();
    }, window);
    const observer = new ResizeObserver((entries)=>{
        const entry = entries[0];
        const width = entry.contentRect.width;
        const height = entry.contentRect.height;
        if (width === 0 && height === 0) return;
        resize(width, height);
    });
    observer.observe(container);
    listenDevicePixelRatioChanges(chart, resize);
    return observer;
}
function releaseObserver(chart, type, observer) {
    if (observer) observer.disconnect();
    if (type === "resize") unlistenDevicePixelRatioChanges(chart);
}
function createProxyAndListen(chart, type, listener) {
    const canvas = chart.canvas;
    const proxy = (0, _helpersSegmentJs.L)((event)=>{
        if (chart.ctx !== null) listener(fromNativeEvent(event, chart));
    }, chart);
    addListener(canvas, type, proxy);
    return proxy;
}
class DomPlatform extends BasePlatform {
    acquireContext(canvas, aspectRatio) {
        const context = canvas && canvas.getContext && canvas.getContext("2d");
        if (context && context.canvas === canvas) {
            initCanvas(canvas, aspectRatio);
            return context;
        }
        return null;
    }
    releaseContext(context) {
        const canvas = context.canvas;
        if (!canvas[EXPANDO_KEY]) return false;
        const initial = canvas[EXPANDO_KEY].initial;
        [
            "height",
            "width"
        ].forEach((prop)=>{
            const value = initial[prop];
            if ((0, _helpersSegmentJs.k)(value)) canvas.removeAttribute(prop);
            else canvas.setAttribute(prop, value);
        });
        const style = initial.style || {};
        Object.keys(style).forEach((key)=>{
            canvas.style[key] = style[key];
        });
        canvas.width = canvas.width;
        delete canvas[EXPANDO_KEY];
        return true;
    }
    addEventListener(chart, type, listener) {
        this.removeEventListener(chart, type);
        const proxies = chart.$proxies || (chart.$proxies = {});
        const handlers = {
            attach: createAttachObserver,
            detach: createDetachObserver,
            resize: createResizeObserver
        };
        const handler = handlers[type] || createProxyAndListen;
        proxies[type] = handler(chart, type, listener);
    }
    removeEventListener(chart, type) {
        const proxies = chart.$proxies || (chart.$proxies = {});
        const proxy = proxies[type];
        if (!proxy) return;
        const handlers = {
            attach: releaseObserver,
            detach: releaseObserver,
            resize: releaseObserver
        };
        const handler = handlers[type] || removeListener;
        handler(chart, type, proxy);
        proxies[type] = undefined;
    }
    getDevicePixelRatio() {
        return window.devicePixelRatio;
    }
    getMaximumSize(canvas, width, height, aspectRatio) {
        return (0, _helpersSegmentJs.G)(canvas, width, height, aspectRatio);
    }
    isAttached(canvas) {
        const container = canvas && (0, _helpersSegmentJs.I)(canvas);
        return !!(container && container.isConnected);
    }
}
function _detectPlatform(canvas) {
    if (!(0, _helpersSegmentJs.M)() || typeof OffscreenCanvas !== "undefined" && canvas instanceof OffscreenCanvas) return BasicPlatform;
    return DomPlatform;
}
class Element {
    static defaults = {};
    static defaultRoutes = undefined;
    x;
    y;
    active = false;
    options;
    $animations;
    tooltipPosition(useFinalPosition) {
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    hasValue() {
        return (0, _helpersSegmentJs.x)(this.x) && (0, _helpersSegmentJs.x)(this.y);
    }
    getProps(props, final) {
        const anims = this.$animations;
        if (!final || !anims) // let's not create an object, if not needed
        return this;
        const ret = {};
        props.forEach((prop)=>{
            ret[prop] = anims[prop] && anims[prop].active() ? anims[prop]._to : this[prop];
        });
        return ret;
    }
}
function autoSkip(scale, ticks) {
    const tickOpts = scale.options.ticks;
    const determinedMaxTicks = determineMaxTicks(scale);
    const ticksLimit = Math.min(tickOpts.maxTicksLimit || determinedMaxTicks, determinedMaxTicks);
    const majorIndices = tickOpts.major.enabled ? getMajorIndices(ticks) : [];
    const numMajorIndices = majorIndices.length;
    const first = majorIndices[0];
    const last = majorIndices[numMajorIndices - 1];
    const newTicks = [];
    if (numMajorIndices > ticksLimit) {
        skipMajors(ticks, newTicks, majorIndices, numMajorIndices / ticksLimit);
        return newTicks;
    }
    const spacing = calculateSpacing(majorIndices, ticks, ticksLimit);
    if (numMajorIndices > 0) {
        let i, ilen;
        const avgMajorSpacing = numMajorIndices > 1 ? Math.round((last - first) / (numMajorIndices - 1)) : null;
        skip(ticks, newTicks, spacing, (0, _helpersSegmentJs.k)(avgMajorSpacing) ? 0 : first - avgMajorSpacing, first);
        for(i = 0, ilen = numMajorIndices - 1; i < ilen; i++)skip(ticks, newTicks, spacing, majorIndices[i], majorIndices[i + 1]);
        skip(ticks, newTicks, spacing, last, (0, _helpersSegmentJs.k)(avgMajorSpacing) ? ticks.length : last + avgMajorSpacing);
        return newTicks;
    }
    skip(ticks, newTicks, spacing);
    return newTicks;
}
function determineMaxTicks(scale) {
    const offset = scale.options.offset;
    const tickLength = scale._tickSize();
    const maxScale = scale._length / tickLength + (offset ? 0 : 1);
    const maxChart = scale._maxLength / tickLength;
    return Math.floor(Math.min(maxScale, maxChart));
}
function calculateSpacing(majorIndices, ticks, ticksLimit) {
    const evenMajorSpacing = getEvenSpacing(majorIndices);
    const spacing = ticks.length / ticksLimit;
    if (!evenMajorSpacing) return Math.max(spacing, 1);
    const factors = (0, _helpersSegmentJs.N)(evenMajorSpacing);
    for(let i = 0, ilen = factors.length - 1; i < ilen; i++){
        const factor = factors[i];
        if (factor > spacing) return factor;
    }
    return Math.max(spacing, 1);
}
function getMajorIndices(ticks) {
    const result = [];
    let i, ilen;
    for(i = 0, ilen = ticks.length; i < ilen; i++)if (ticks[i].major) result.push(i);
    return result;
}
function skipMajors(ticks, newTicks, majorIndices, spacing) {
    let count = 0;
    let next = majorIndices[0];
    let i;
    spacing = Math.ceil(spacing);
    for(i = 0; i < ticks.length; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = majorIndices[count * spacing];
    }
}
function skip(ticks, newTicks, spacing, majorStart, majorEnd) {
    const start = (0, _helpersSegmentJs.v)(majorStart, 0);
    const end = Math.min((0, _helpersSegmentJs.v)(majorEnd, ticks.length), ticks.length);
    let count = 0;
    let length, i, next;
    spacing = Math.ceil(spacing);
    if (majorEnd) {
        length = majorEnd - majorStart;
        spacing = length / Math.floor(length / spacing);
    }
    next = start;
    while(next < 0){
        count++;
        next = Math.round(start + count * spacing);
    }
    for(i = Math.max(start, 0); i < end; i++)if (i === next) {
        newTicks.push(ticks[i]);
        count++;
        next = Math.round(start + count * spacing);
    }
}
function getEvenSpacing(arr) {
    const len = arr.length;
    let i, diff;
    if (len < 2) return false;
    for(diff = arr[0], i = 1; i < len; ++i){
        if (arr[i] - arr[i - 1] !== diff) return false;
    }
    return diff;
}
const reverseAlign = (align)=>align === "left" ? "right" : align === "right" ? "left" : align;
const offsetFromEdge = (scale, edge, offset)=>edge === "top" || edge === "left" ? scale[edge] + offset : scale[edge] - offset;
const getTicksLimit = (ticksLength, maxTicksLimit)=>Math.min(maxTicksLimit || ticksLength, ticksLength);
function sample(arr, numItems) {
    const result = [];
    const increment = arr.length / numItems;
    const len = arr.length;
    let i = 0;
    for(; i < len; i += increment)result.push(arr[Math.floor(i)]);
    return result;
}
function getPixelForGridLine(scale, index, offsetGridLines) {
    const length = scale.ticks.length;
    const validIndex = Math.min(index, length - 1);
    const start = scale._startPixel;
    const end = scale._endPixel;
    const epsilon = 1e-6;
    let lineValue = scale.getPixelForTick(validIndex);
    let offset;
    if (offsetGridLines) {
        if (length === 1) offset = Math.max(lineValue - start, end - lineValue);
        else if (index === 0) offset = (scale.getPixelForTick(1) - lineValue) / 2;
        else offset = (lineValue - scale.getPixelForTick(validIndex - 1)) / 2;
        lineValue += validIndex < index ? offset : -offset;
        if (lineValue < start - epsilon || lineValue > end + epsilon) return;
    }
    return lineValue;
}
function garbageCollect(caches, length) {
    (0, _helpersSegmentJs.F)(caches, (cache)=>{
        const gc = cache.gc;
        const gcLen = gc.length / 2;
        let i;
        if (gcLen > length) {
            for(i = 0; i < gcLen; ++i)delete cache.data[gc[i]];
            gc.splice(0, gcLen);
        }
    });
}
function getTickMarkLength(options) {
    return options.drawTicks ? options.tickLength : 0;
}
function getTitleHeight(options, fallback) {
    if (!options.display) return 0;
    const font = (0, _helpersSegmentJs.a0)(options.font, fallback);
    const padding = (0, _helpersSegmentJs.E)(options.padding);
    const lines = (0, _helpersSegmentJs.b)(options.text) ? options.text.length : 1;
    return lines * font.lineHeight + padding.height;
}
function createScaleContext(parent, scale) {
    return (0, _helpersSegmentJs.j)(parent, {
        scale,
        type: "scale"
    });
}
function createTickContext(parent, index, tick) {
    return (0, _helpersSegmentJs.j)(parent, {
        tick,
        index,
        type: "tick"
    });
}
function titleAlign(align, position, reverse) {
    let ret = (0, _helpersSegmentJs.a1)(align);
    if (reverse && position !== "right" || !reverse && position === "right") ret = reverseAlign(ret);
    return ret;
}
function titleArgs(scale, offset, position, align) {
    const { top, left, bottom, right, chart } = scale;
    const { chartArea, scales } = chart;
    let rotation = 0;
    let maxWidth, titleX, titleY;
    const height = bottom - top;
    const width = right - left;
    if (scale.isHorizontal()) {
        titleX = (0, _helpersSegmentJs.a2)(align, left, right);
        if ((0, _helpersSegmentJs.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleY = scales[positionAxisID].getPixelForValue(value) + height - offset;
        } else if (position === "center") titleY = (chartArea.bottom + chartArea.top) / 2 + height - offset;
        else titleY = offsetFromEdge(scale, position, offset);
        maxWidth = right - left;
    } else {
        if ((0, _helpersSegmentJs.i)(position)) {
            const positionAxisID = Object.keys(position)[0];
            const value = position[positionAxisID];
            titleX = scales[positionAxisID].getPixelForValue(value) - width + offset;
        } else if (position === "center") titleX = (chartArea.left + chartArea.right) / 2 - width + offset;
        else titleX = offsetFromEdge(scale, position, offset);
        titleY = (0, _helpersSegmentJs.a2)(align, bottom, top);
        rotation = position === "left" ? -(0, _helpersSegmentJs.H) : (0, _helpersSegmentJs.H);
    }
    return {
        titleX,
        titleY,
        maxWidth,
        rotation
    };
}
class Scale extends Element {
    constructor(cfg){
        super();
        this.id = cfg.id;
        this.type = cfg.type;
        this.options = undefined;
        this.ctx = cfg.ctx;
        this.chart = cfg.chart;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this._margins = {
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        };
        this.maxWidth = undefined;
        this.maxHeight = undefined;
        this.paddingTop = undefined;
        this.paddingBottom = undefined;
        this.paddingLeft = undefined;
        this.paddingRight = undefined;
        this.axis = undefined;
        this.labelRotation = undefined;
        this.min = undefined;
        this.max = undefined;
        this._range = undefined;
        this.ticks = [];
        this._gridLineItems = null;
        this._labelItems = null;
        this._labelSizes = null;
        this._length = 0;
        this._maxLength = 0;
        this._longestTextCache = {};
        this._startPixel = undefined;
        this._endPixel = undefined;
        this._reversePixels = false;
        this._userMax = undefined;
        this._userMin = undefined;
        this._suggestedMax = undefined;
        this._suggestedMin = undefined;
        this._ticksLength = 0;
        this._borderValue = 0;
        this._cache = {};
        this._dataLimitsCached = false;
        this.$context = undefined;
    }
    init(options) {
        this.options = options.setContext(this.getContext());
        this.axis = options.axis;
        this._userMin = this.parse(options.min);
        this._userMax = this.parse(options.max);
        this._suggestedMin = this.parse(options.suggestedMin);
        this._suggestedMax = this.parse(options.suggestedMax);
    }
    parse(raw, index) {
        return raw;
    }
    getUserBounds() {
        let { _userMin, _userMax, _suggestedMin, _suggestedMax } = this;
        _userMin = (0, _helpersSegmentJs.O)(_userMin, Number.POSITIVE_INFINITY);
        _userMax = (0, _helpersSegmentJs.O)(_userMax, Number.NEGATIVE_INFINITY);
        _suggestedMin = (0, _helpersSegmentJs.O)(_suggestedMin, Number.POSITIVE_INFINITY);
        _suggestedMax = (0, _helpersSegmentJs.O)(_suggestedMax, Number.NEGATIVE_INFINITY);
        return {
            min: (0, _helpersSegmentJs.O)(_userMin, _suggestedMin),
            max: (0, _helpersSegmentJs.O)(_userMax, _suggestedMax),
            minDefined: (0, _helpersSegmentJs.g)(_userMin),
            maxDefined: (0, _helpersSegmentJs.g)(_userMax)
        };
    }
    getMinMax(canStack) {
        let { min, max, minDefined, maxDefined } = this.getUserBounds();
        let range;
        if (minDefined && maxDefined) return {
            min,
            max
        };
        const metas = this.getMatchingVisibleMetas();
        for(let i = 0, ilen = metas.length; i < ilen; ++i){
            range = metas[i].controller.getMinMax(this, canStack);
            if (!minDefined) min = Math.min(min, range.min);
            if (!maxDefined) max = Math.max(max, range.max);
        }
        min = maxDefined && min > max ? max : min;
        max = minDefined && min > max ? min : max;
        return {
            min: (0, _helpersSegmentJs.O)(min, (0, _helpersSegmentJs.O)(max, min)),
            max: (0, _helpersSegmentJs.O)(max, (0, _helpersSegmentJs.O)(min, max))
        };
    }
    getPadding() {
        return {
            left: this.paddingLeft || 0,
            top: this.paddingTop || 0,
            right: this.paddingRight || 0,
            bottom: this.paddingBottom || 0
        };
    }
    getTicks() {
        return this.ticks;
    }
    getLabels() {
        const data = this.chart.data;
        return this.options.labels || (this.isHorizontal() ? data.xLabels : data.yLabels) || data.labels || [];
    }
    getLabelItems(chartArea = this.chart.chartArea) {
        const items = this._labelItems || (this._labelItems = this._computeLabelItems(chartArea));
        return items;
    }
    beforeLayout() {
        this._cache = {};
        this._dataLimitsCached = false;
    }
    beforeUpdate() {
        (0, _helpersSegmentJs.Q)(this.options.beforeUpdate, [
            this
        ]);
    }
    update(maxWidth, maxHeight, margins) {
        const { beginAtZero, grace, ticks: tickOpts } = this.options;
        const sampleSize = tickOpts.sampleSize;
        this.beforeUpdate();
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins = Object.assign({
            left: 0,
            right: 0,
            top: 0,
            bottom: 0
        }, margins);
        this.ticks = null;
        this._labelSizes = null;
        this._gridLineItems = null;
        this._labelItems = null;
        this.beforeSetDimensions();
        this.setDimensions();
        this.afterSetDimensions();
        this._maxLength = this.isHorizontal() ? this.width + margins.left + margins.right : this.height + margins.top + margins.bottom;
        if (!this._dataLimitsCached) {
            this.beforeDataLimits();
            this.determineDataLimits();
            this.afterDataLimits();
            this._range = (0, _helpersSegmentJs.R)(this, grace, beginAtZero);
            this._dataLimitsCached = true;
        }
        this.beforeBuildTicks();
        this.ticks = this.buildTicks() || [];
        this.afterBuildTicks();
        const samplingEnabled = sampleSize < this.ticks.length;
        this._convertTicksToLabels(samplingEnabled ? sample(this.ticks, sampleSize) : this.ticks);
        this.configure();
        this.beforeCalculateLabelRotation();
        this.calculateLabelRotation();
        this.afterCalculateLabelRotation();
        if (tickOpts.display && (tickOpts.autoSkip || tickOpts.source === "auto")) {
            this.ticks = autoSkip(this, this.ticks);
            this._labelSizes = null;
            this.afterAutoSkip();
        }
        if (samplingEnabled) this._convertTicksToLabels(this.ticks);
        this.beforeFit();
        this.fit();
        this.afterFit();
        this.afterUpdate();
    }
    configure() {
        let reversePixels = this.options.reverse;
        let startPixel, endPixel;
        if (this.isHorizontal()) {
            startPixel = this.left;
            endPixel = this.right;
        } else {
            startPixel = this.top;
            endPixel = this.bottom;
            reversePixels = !reversePixels;
        }
        this._startPixel = startPixel;
        this._endPixel = endPixel;
        this._reversePixels = reversePixels;
        this._length = endPixel - startPixel;
        this._alignToPixels = this.options.alignToPixels;
    }
    afterUpdate() {
        (0, _helpersSegmentJs.Q)(this.options.afterUpdate, [
            this
        ]);
    }
    beforeSetDimensions() {
        (0, _helpersSegmentJs.Q)(this.options.beforeSetDimensions, [
            this
        ]);
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = 0;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = 0;
            this.bottom = this.height;
        }
        this.paddingLeft = 0;
        this.paddingTop = 0;
        this.paddingRight = 0;
        this.paddingBottom = 0;
    }
    afterSetDimensions() {
        (0, _helpersSegmentJs.Q)(this.options.afterSetDimensions, [
            this
        ]);
    }
    _callHooks(name) {
        this.chart.notifyPlugins(name, this.getContext());
        (0, _helpersSegmentJs.Q)(this.options[name], [
            this
        ]);
    }
    beforeDataLimits() {
        this._callHooks("beforeDataLimits");
    }
    determineDataLimits() {}
    afterDataLimits() {
        this._callHooks("afterDataLimits");
    }
    beforeBuildTicks() {
        this._callHooks("beforeBuildTicks");
    }
    buildTicks() {
        return [];
    }
    afterBuildTicks() {
        this._callHooks("afterBuildTicks");
    }
    beforeTickToLabelConversion() {
        (0, _helpersSegmentJs.Q)(this.options.beforeTickToLabelConversion, [
            this
        ]);
    }
    generateTickLabels(ticks) {
        const tickOpts = this.options.ticks;
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; i++){
            tick = ticks[i];
            tick.label = (0, _helpersSegmentJs.Q)(tickOpts.callback, [
                tick.value,
                i,
                ticks
            ], this);
        }
    }
    afterTickToLabelConversion() {
        (0, _helpersSegmentJs.Q)(this.options.afterTickToLabelConversion, [
            this
        ]);
    }
    beforeCalculateLabelRotation() {
        (0, _helpersSegmentJs.Q)(this.options.beforeCalculateLabelRotation, [
            this
        ]);
    }
    calculateLabelRotation() {
        const options = this.options;
        const tickOpts = options.ticks;
        const numTicks = getTicksLimit(this.ticks.length, options.ticks.maxTicksLimit);
        const minRotation = tickOpts.minRotation || 0;
        const maxRotation = tickOpts.maxRotation;
        let labelRotation = minRotation;
        let tickWidth, maxHeight, maxLabelDiagonal;
        if (!this._isVisible() || !tickOpts.display || minRotation >= maxRotation || numTicks <= 1 || !this.isHorizontal()) {
            this.labelRotation = minRotation;
            return;
        }
        const labelSizes = this._getLabelSizes();
        const maxLabelWidth = labelSizes.widest.width;
        const maxLabelHeight = labelSizes.highest.height;
        const maxWidth = (0, _helpersSegmentJs.S)(this.chart.width - maxLabelWidth, 0, this.maxWidth);
        tickWidth = options.offset ? this.maxWidth / numTicks : maxWidth / (numTicks - 1);
        if (maxLabelWidth + 6 > tickWidth) {
            tickWidth = maxWidth / (numTicks - (options.offset ? 0.5 : 1));
            maxHeight = this.maxHeight - getTickMarkLength(options.grid) - tickOpts.padding - getTitleHeight(options.title, this.chart.options.font);
            maxLabelDiagonal = Math.sqrt(maxLabelWidth * maxLabelWidth + maxLabelHeight * maxLabelHeight);
            labelRotation = (0, _helpersSegmentJs.U)(Math.min(Math.asin((0, _helpersSegmentJs.S)((labelSizes.highest.height + 6) / tickWidth, -1, 1)), Math.asin((0, _helpersSegmentJs.S)(maxHeight / maxLabelDiagonal, -1, 1)) - Math.asin((0, _helpersSegmentJs.S)(maxLabelHeight / maxLabelDiagonal, -1, 1))));
            labelRotation = Math.max(minRotation, Math.min(maxRotation, labelRotation));
        }
        this.labelRotation = labelRotation;
    }
    afterCalculateLabelRotation() {
        (0, _helpersSegmentJs.Q)(this.options.afterCalculateLabelRotation, [
            this
        ]);
    }
    afterAutoSkip() {}
    beforeFit() {
        (0, _helpersSegmentJs.Q)(this.options.beforeFit, [
            this
        ]);
    }
    fit() {
        const minSize = {
            width: 0,
            height: 0
        };
        const { chart, options: { ticks: tickOpts, title: titleOpts, grid: gridOpts } } = this;
        const display = this._isVisible();
        const isHorizontal = this.isHorizontal();
        if (display) {
            const titleHeight = getTitleHeight(titleOpts, chart.options.font);
            if (isHorizontal) {
                minSize.width = this.maxWidth;
                minSize.height = getTickMarkLength(gridOpts) + titleHeight;
            } else {
                minSize.height = this.maxHeight;
                minSize.width = getTickMarkLength(gridOpts) + titleHeight;
            }
            if (tickOpts.display && this.ticks.length) {
                const { first, last, widest, highest } = this._getLabelSizes();
                const tickPadding = tickOpts.padding * 2;
                const angleRadians = (0, _helpersSegmentJs.t)(this.labelRotation);
                const cos = Math.cos(angleRadians);
                const sin = Math.sin(angleRadians);
                if (isHorizontal) {
                    const labelHeight = tickOpts.mirror ? 0 : sin * widest.width + cos * highest.height;
                    minSize.height = Math.min(this.maxHeight, minSize.height + labelHeight + tickPadding);
                } else {
                    const labelWidth = tickOpts.mirror ? 0 : cos * widest.width + sin * highest.height;
                    minSize.width = Math.min(this.maxWidth, minSize.width + labelWidth + tickPadding);
                }
                this._calculatePadding(first, last, sin, cos);
            }
        }
        this._handleMargins();
        if (isHorizontal) {
            this.width = this._length = chart.width - this._margins.left - this._margins.right;
            this.height = minSize.height;
        } else {
            this.width = minSize.width;
            this.height = this._length = chart.height - this._margins.top - this._margins.bottom;
        }
    }
    _calculatePadding(first, last, sin, cos) {
        const { ticks: { align, padding }, position } = this.options;
        const isRotated = this.labelRotation !== 0;
        const labelsBelowTicks = position !== "top" && this.axis === "x";
        if (this.isHorizontal()) {
            const offsetLeft = this.getPixelForTick(0) - this.left;
            const offsetRight = this.right - this.getPixelForTick(this.ticks.length - 1);
            let paddingLeft = 0;
            let paddingRight = 0;
            if (isRotated) {
                if (labelsBelowTicks) {
                    paddingLeft = cos * first.width;
                    paddingRight = sin * last.height;
                } else {
                    paddingLeft = sin * first.height;
                    paddingRight = cos * last.width;
                }
            } else if (align === "start") paddingRight = last.width;
            else if (align === "end") paddingLeft = first.width;
            else if (align !== "inner") {
                paddingLeft = first.width / 2;
                paddingRight = last.width / 2;
            }
            this.paddingLeft = Math.max((paddingLeft - offsetLeft + padding) * this.width / (this.width - offsetLeft), 0);
            this.paddingRight = Math.max((paddingRight - offsetRight + padding) * this.width / (this.width - offsetRight), 0);
        } else {
            let paddingTop = last.height / 2;
            let paddingBottom = first.height / 2;
            if (align === "start") {
                paddingTop = 0;
                paddingBottom = first.height;
            } else if (align === "end") {
                paddingTop = last.height;
                paddingBottom = 0;
            }
            this.paddingTop = paddingTop + padding;
            this.paddingBottom = paddingBottom + padding;
        }
    }
    _handleMargins() {
        if (this._margins) {
            this._margins.left = Math.max(this.paddingLeft, this._margins.left);
            this._margins.top = Math.max(this.paddingTop, this._margins.top);
            this._margins.right = Math.max(this.paddingRight, this._margins.right);
            this._margins.bottom = Math.max(this.paddingBottom, this._margins.bottom);
        }
    }
    afterFit() {
        (0, _helpersSegmentJs.Q)(this.options.afterFit, [
            this
        ]);
    }
    isHorizontal() {
        const { axis, position } = this.options;
        return position === "top" || position === "bottom" || axis === "x";
    }
    isFullSize() {
        return this.options.fullSize;
    }
    _convertTicksToLabels(ticks) {
        this.beforeTickToLabelConversion();
        this.generateTickLabels(ticks);
        let i, ilen;
        for(i = 0, ilen = ticks.length; i < ilen; i++)if ((0, _helpersSegmentJs.k)(ticks[i].label)) {
            ticks.splice(i, 1);
            ilen--;
            i--;
        }
        this.afterTickToLabelConversion();
    }
    _getLabelSizes() {
        let labelSizes = this._labelSizes;
        if (!labelSizes) {
            const sampleSize = this.options.ticks.sampleSize;
            let ticks = this.ticks;
            if (sampleSize < ticks.length) ticks = sample(ticks, sampleSize);
            this._labelSizes = labelSizes = this._computeLabelSizes(ticks, ticks.length, this.options.ticks.maxTicksLimit);
        }
        return labelSizes;
    }
    _computeLabelSizes(ticks, length, maxTicksLimit) {
        const { ctx, _longestTextCache: caches } = this;
        const widths = [];
        const heights = [];
        const increment = Math.floor(length / getTicksLimit(length, maxTicksLimit));
        let widestLabelSize = 0;
        let highestLabelSize = 0;
        let i, j, jlen, label, tickFont, fontString, cache, lineHeight, width, height, nestedLabel;
        for(i = 0; i < length; i += increment){
            label = ticks[i].label;
            tickFont = this._resolveTickFontOptions(i);
            ctx.font = fontString = tickFont.string;
            cache = caches[fontString] = caches[fontString] || {
                data: {},
                gc: []
            };
            lineHeight = tickFont.lineHeight;
            width = height = 0;
            if (!(0, _helpersSegmentJs.k)(label) && !(0, _helpersSegmentJs.b)(label)) {
                width = (0, _helpersSegmentJs.V)(ctx, cache.data, cache.gc, width, label);
                height = lineHeight;
            } else if ((0, _helpersSegmentJs.b)(label)) for(j = 0, jlen = label.length; j < jlen; ++j){
                nestedLabel = label[j];
                if (!(0, _helpersSegmentJs.k)(nestedLabel) && !(0, _helpersSegmentJs.b)(nestedLabel)) {
                    width = (0, _helpersSegmentJs.V)(ctx, cache.data, cache.gc, width, nestedLabel);
                    height += lineHeight;
                }
            }
            widths.push(width);
            heights.push(height);
            widestLabelSize = Math.max(width, widestLabelSize);
            highestLabelSize = Math.max(height, highestLabelSize);
        }
        garbageCollect(caches, length);
        const widest = widths.indexOf(widestLabelSize);
        const highest = heights.indexOf(highestLabelSize);
        const valueAt = (idx)=>({
                width: widths[idx] || 0,
                height: heights[idx] || 0
            });
        return {
            first: valueAt(0),
            last: valueAt(length - 1),
            widest: valueAt(widest),
            highest: valueAt(highest),
            widths,
            heights
        };
    }
    getLabelForValue(value) {
        return value;
    }
    getPixelForValue(value, index) {
        return NaN;
    }
    getValueForPixel(pixel) {}
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index].value);
    }
    getPixelForDecimal(decimal) {
        if (this._reversePixels) decimal = 1 - decimal;
        const pixel = this._startPixel + decimal * this._length;
        return (0, _helpersSegmentJs.W)(this._alignToPixels ? (0, _helpersSegmentJs.X)(this.chart, pixel, 0) : pixel);
    }
    getDecimalForPixel(pixel) {
        const decimal = (pixel - this._startPixel) / this._length;
        return this._reversePixels ? 1 - decimal : decimal;
    }
    getBasePixel() {
        return this.getPixelForValue(this.getBaseValue());
    }
    getBaseValue() {
        const { min, max } = this;
        return min < 0 && max < 0 ? max : min > 0 && max > 0 ? min : 0;
    }
    getContext(index) {
        const ticks = this.ticks || [];
        if (index >= 0 && index < ticks.length) {
            const tick = ticks[index];
            return tick.$context || (tick.$context = createTickContext(this.getContext(), index, tick));
        }
        return this.$context || (this.$context = createScaleContext(this.chart.getContext(), this));
    }
    _tickSize() {
        const optionTicks = this.options.ticks;
        const rot = (0, _helpersSegmentJs.t)(this.labelRotation);
        const cos = Math.abs(Math.cos(rot));
        const sin = Math.abs(Math.sin(rot));
        const labelSizes = this._getLabelSizes();
        const padding = optionTicks.autoSkipPadding || 0;
        const w = labelSizes ? labelSizes.widest.width + padding : 0;
        const h = labelSizes ? labelSizes.highest.height + padding : 0;
        return this.isHorizontal() ? h * cos > w * sin ? w / cos : h / sin : h * sin < w * cos ? h / cos : w / sin;
    }
    _isVisible() {
        const display = this.options.display;
        if (display !== "auto") return !!display;
        return this.getMatchingVisibleMetas().length > 0;
    }
    _computeGridLineItems(chartArea) {
        const axis = this.axis;
        const chart = this.chart;
        const options = this.options;
        const { grid, position, border } = options;
        const offset = grid.offset;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const ticksLength = ticks.length + (offset ? 1 : 0);
        const tl = getTickMarkLength(grid);
        const items = [];
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = borderOpts.display ? borderOpts.width : 0;
        const axisHalfWidth = axisWidth / 2;
        const alignBorderValue = function(pixel) {
            return (0, _helpersSegmentJs.X)(chart, pixel, axisWidth);
        };
        let borderValue, i, lineValue, alignedLineValue;
        let tx1, ty1, tx2, ty2, x1, y1, x2, y2;
        if (position === "top") {
            borderValue = alignBorderValue(this.bottom);
            ty1 = this.bottom - tl;
            ty2 = borderValue - axisHalfWidth;
            y1 = alignBorderValue(chartArea.top) + axisHalfWidth;
            y2 = chartArea.bottom;
        } else if (position === "bottom") {
            borderValue = alignBorderValue(this.top);
            y1 = chartArea.top;
            y2 = alignBorderValue(chartArea.bottom) - axisHalfWidth;
            ty1 = borderValue + axisHalfWidth;
            ty2 = this.top + tl;
        } else if (position === "left") {
            borderValue = alignBorderValue(this.right);
            tx1 = this.right - tl;
            tx2 = borderValue - axisHalfWidth;
            x1 = alignBorderValue(chartArea.left) + axisHalfWidth;
            x2 = chartArea.right;
        } else if (position === "right") {
            borderValue = alignBorderValue(this.left);
            x1 = chartArea.left;
            x2 = alignBorderValue(chartArea.right) - axisHalfWidth;
            tx1 = borderValue + axisHalfWidth;
            tx2 = this.left + tl;
        } else if (axis === "x") {
            if (position === "center") borderValue = alignBorderValue((chartArea.top + chartArea.bottom) / 2 + 0.5);
            else if ((0, _helpersSegmentJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            y1 = chartArea.top;
            y2 = chartArea.bottom;
            ty1 = borderValue + axisHalfWidth;
            ty2 = ty1 + tl;
        } else if (axis === "y") {
            if (position === "center") borderValue = alignBorderValue((chartArea.left + chartArea.right) / 2);
            else if ((0, _helpersSegmentJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                borderValue = alignBorderValue(this.chart.scales[positionAxisID].getPixelForValue(value));
            }
            tx1 = borderValue - axisHalfWidth;
            tx2 = tx1 - tl;
            x1 = chartArea.left;
            x2 = chartArea.right;
        }
        const limit = (0, _helpersSegmentJs.v)(options.ticks.maxTicksLimit, ticksLength);
        const step = Math.max(1, Math.ceil(ticksLength / limit));
        for(i = 0; i < ticksLength; i += step){
            const context = this.getContext(i);
            const optsAtIndex = grid.setContext(context);
            const optsAtIndexBorder = border.setContext(context);
            const lineWidth = optsAtIndex.lineWidth;
            const lineColor = optsAtIndex.color;
            const borderDash = optsAtIndexBorder.dash || [];
            const borderDashOffset = optsAtIndexBorder.dashOffset;
            const tickWidth = optsAtIndex.tickWidth;
            const tickColor = optsAtIndex.tickColor;
            const tickBorderDash = optsAtIndex.tickBorderDash || [];
            const tickBorderDashOffset = optsAtIndex.tickBorderDashOffset;
            lineValue = getPixelForGridLine(this, i, offset);
            if (lineValue === undefined) continue;
            alignedLineValue = (0, _helpersSegmentJs.X)(chart, lineValue, lineWidth);
            if (isHorizontal) tx1 = tx2 = x1 = x2 = alignedLineValue;
            else ty1 = ty2 = y1 = y2 = alignedLineValue;
            items.push({
                tx1,
                ty1,
                tx2,
                ty2,
                x1,
                y1,
                x2,
                y2,
                width: lineWidth,
                color: lineColor,
                borderDash,
                borderDashOffset,
                tickWidth,
                tickColor,
                tickBorderDash,
                tickBorderDashOffset
            });
        }
        this._ticksLength = ticksLength;
        this._borderValue = borderValue;
        return items;
    }
    _computeLabelItems(chartArea) {
        const axis = this.axis;
        const options = this.options;
        const { position, ticks: optionTicks } = options;
        const isHorizontal = this.isHorizontal();
        const ticks = this.ticks;
        const { align, crossAlign, padding, mirror } = optionTicks;
        const tl = getTickMarkLength(options.grid);
        const tickAndPadding = tl + padding;
        const hTickAndPadding = mirror ? -padding : tickAndPadding;
        const rotation = -(0, _helpersSegmentJs.t)(this.labelRotation);
        const items = [];
        let i, ilen, tick, label, x, y, textAlign, pixel, font, lineHeight, lineCount, textOffset;
        let textBaseline = "middle";
        if (position === "top") {
            y = this.bottom - hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === "bottom") {
            y = this.top + hTickAndPadding;
            textAlign = this._getXAxisLabelAlignment();
        } else if (position === "left") {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (position === "right") {
            const ret = this._getYAxisLabelAlignment(tl);
            textAlign = ret.textAlign;
            x = ret.x;
        } else if (axis === "x") {
            if (position === "center") y = (chartArea.top + chartArea.bottom) / 2 + tickAndPadding;
            else if ((0, _helpersSegmentJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                y = this.chart.scales[positionAxisID].getPixelForValue(value) + tickAndPadding;
            }
            textAlign = this._getXAxisLabelAlignment();
        } else if (axis === "y") {
            if (position === "center") x = (chartArea.left + chartArea.right) / 2 - tickAndPadding;
            else if ((0, _helpersSegmentJs.i)(position)) {
                const positionAxisID = Object.keys(position)[0];
                const value = position[positionAxisID];
                x = this.chart.scales[positionAxisID].getPixelForValue(value);
            }
            textAlign = this._getYAxisLabelAlignment(tl).textAlign;
        }
        if (axis === "y") {
            if (align === "start") textBaseline = "top";
            else if (align === "end") textBaseline = "bottom";
        }
        const labelSizes = this._getLabelSizes();
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            label = tick.label;
            const optsAtIndex = optionTicks.setContext(this.getContext(i));
            pixel = this.getPixelForTick(i) + optionTicks.labelOffset;
            font = this._resolveTickFontOptions(i);
            lineHeight = font.lineHeight;
            lineCount = (0, _helpersSegmentJs.b)(label) ? label.length : 1;
            const halfCount = lineCount / 2;
            const color = optsAtIndex.color;
            const strokeColor = optsAtIndex.textStrokeColor;
            const strokeWidth = optsAtIndex.textStrokeWidth;
            let tickTextAlign = textAlign;
            if (isHorizontal) {
                x = pixel;
                if (textAlign === "inner") {
                    if (i === ilen - 1) tickTextAlign = !this.options.reverse ? "right" : "left";
                    else if (i === 0) tickTextAlign = !this.options.reverse ? "left" : "right";
                    else tickTextAlign = "center";
                }
                if (position === "top") {
                    if (crossAlign === "near" || rotation !== 0) textOffset = -lineCount * lineHeight + lineHeight / 2;
                    else if (crossAlign === "center") textOffset = -labelSizes.highest.height / 2 - halfCount * lineHeight + lineHeight;
                    else textOffset = -labelSizes.highest.height + lineHeight / 2;
                } else {
                    if (crossAlign === "near" || rotation !== 0) textOffset = lineHeight / 2;
                    else if (crossAlign === "center") textOffset = labelSizes.highest.height / 2 - halfCount * lineHeight;
                    else textOffset = labelSizes.highest.height - lineCount * lineHeight;
                }
                if (mirror) textOffset *= -1;
                if (rotation !== 0 && !optsAtIndex.showLabelBackdrop) x += lineHeight / 2 * Math.sin(rotation);
            } else {
                y = pixel;
                textOffset = (1 - lineCount) * lineHeight / 2;
            }
            let backdrop;
            if (optsAtIndex.showLabelBackdrop) {
                const labelPadding = (0, _helpersSegmentJs.E)(optsAtIndex.backdropPadding);
                const height = labelSizes.heights[i];
                const width = labelSizes.widths[i];
                let top = textOffset - labelPadding.top;
                let left = 0 - labelPadding.left;
                switch(textBaseline){
                    case "middle":
                        top -= height / 2;
                        break;
                    case "bottom":
                        top -= height;
                        break;
                }
                switch(textAlign){
                    case "center":
                        left -= width / 2;
                        break;
                    case "right":
                        left -= width;
                        break;
                    case "inner":
                        if (i === ilen - 1) left -= width;
                        else if (i > 0) left -= width / 2;
                        break;
                }
                backdrop = {
                    left,
                    top,
                    width: width + labelPadding.width,
                    height: height + labelPadding.height,
                    color: optsAtIndex.backdropColor
                };
            }
            items.push({
                label,
                font,
                textOffset,
                options: {
                    rotation,
                    color,
                    strokeColor,
                    strokeWidth,
                    textAlign: tickTextAlign,
                    textBaseline,
                    translation: [
                        x,
                        y
                    ],
                    backdrop
                }
            });
        }
        return items;
    }
    _getXAxisLabelAlignment() {
        const { position, ticks } = this.options;
        const rotation = -(0, _helpersSegmentJs.t)(this.labelRotation);
        if (rotation) return position === "top" ? "left" : "right";
        let align = "center";
        if (ticks.align === "start") align = "left";
        else if (ticks.align === "end") align = "right";
        else if (ticks.align === "inner") align = "inner";
        return align;
    }
    _getYAxisLabelAlignment(tl) {
        const { position, ticks: { crossAlign, mirror, padding } } = this.options;
        const labelSizes = this._getLabelSizes();
        const tickAndPadding = tl + padding;
        const widest = labelSizes.widest.width;
        let textAlign;
        let x;
        if (position === "left") {
            if (mirror) {
                x = this.right + padding;
                if (crossAlign === "near") textAlign = "left";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x += widest / 2;
                } else {
                    textAlign = "right";
                    x += widest;
                }
            } else {
                x = this.right - tickAndPadding;
                if (crossAlign === "near") textAlign = "right";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x -= widest / 2;
                } else {
                    textAlign = "left";
                    x = this.left;
                }
            }
        } else if (position === "right") {
            if (mirror) {
                x = this.left + padding;
                if (crossAlign === "near") textAlign = "right";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x -= widest / 2;
                } else {
                    textAlign = "left";
                    x -= widest;
                }
            } else {
                x = this.left + tickAndPadding;
                if (crossAlign === "near") textAlign = "left";
                else if (crossAlign === "center") {
                    textAlign = "center";
                    x += widest / 2;
                } else {
                    textAlign = "right";
                    x = this.right;
                }
            }
        } else textAlign = "right";
        return {
            textAlign,
            x
        };
    }
    _computeLabelArea() {
        if (this.options.ticks.mirror) return;
        const chart = this.chart;
        const position = this.options.position;
        if (position === "left" || position === "right") return {
            top: 0,
            left: this.left,
            bottom: chart.height,
            right: this.right
        };
        if (position === "top" || position === "bottom") return {
            top: this.top,
            left: 0,
            bottom: this.bottom,
            right: chart.width
        };
    }
    drawBackground() {
        const { ctx, options: { backgroundColor }, left, top, width, height } = this;
        if (backgroundColor) {
            ctx.save();
            ctx.fillStyle = backgroundColor;
            ctx.fillRect(left, top, width, height);
            ctx.restore();
        }
    }
    getLineWidthForValue(value) {
        const grid = this.options.grid;
        if (!this._isVisible() || !grid.display) return 0;
        const ticks = this.ticks;
        const index = ticks.findIndex((t)=>t.value === value);
        if (index >= 0) {
            const opts = grid.setContext(this.getContext(index));
            return opts.lineWidth;
        }
        return 0;
    }
    drawGrid(chartArea) {
        const grid = this.options.grid;
        const ctx = this.ctx;
        const items = this._gridLineItems || (this._gridLineItems = this._computeGridLineItems(chartArea));
        let i, ilen;
        const drawLine = (p1, p2, style)=>{
            if (!style.width || !style.color) return;
            ctx.save();
            ctx.lineWidth = style.width;
            ctx.strokeStyle = style.color;
            ctx.setLineDash(style.borderDash || []);
            ctx.lineDashOffset = style.borderDashOffset;
            ctx.beginPath();
            ctx.moveTo(p1.x, p1.y);
            ctx.lineTo(p2.x, p2.y);
            ctx.stroke();
            ctx.restore();
        };
        if (grid.display) for(i = 0, ilen = items.length; i < ilen; ++i){
            const item = items[i];
            if (grid.drawOnChartArea) drawLine({
                x: item.x1,
                y: item.y1
            }, {
                x: item.x2,
                y: item.y2
            }, item);
            if (grid.drawTicks) drawLine({
                x: item.tx1,
                y: item.ty1
            }, {
                x: item.tx2,
                y: item.ty2
            }, {
                color: item.tickColor,
                width: item.tickWidth,
                borderDash: item.tickBorderDash,
                borderDashOffset: item.tickBorderDashOffset
            });
        }
    }
    drawBorder() {
        const { chart, ctx, options: { border, grid } } = this;
        const borderOpts = border.setContext(this.getContext());
        const axisWidth = border.display ? borderOpts.width : 0;
        if (!axisWidth) return;
        const lastLineWidth = grid.setContext(this.getContext(0)).lineWidth;
        const borderValue = this._borderValue;
        let x1, x2, y1, y2;
        if (this.isHorizontal()) {
            x1 = (0, _helpersSegmentJs.X)(chart, this.left, axisWidth) - axisWidth / 2;
            x2 = (0, _helpersSegmentJs.X)(chart, this.right, lastLineWidth) + lastLineWidth / 2;
            y1 = y2 = borderValue;
        } else {
            y1 = (0, _helpersSegmentJs.X)(chart, this.top, axisWidth) - axisWidth / 2;
            y2 = (0, _helpersSegmentJs.X)(chart, this.bottom, lastLineWidth) + lastLineWidth / 2;
            x1 = x2 = borderValue;
        }
        ctx.save();
        ctx.lineWidth = borderOpts.width;
        ctx.strokeStyle = borderOpts.color;
        ctx.beginPath();
        ctx.moveTo(x1, y1);
        ctx.lineTo(x2, y2);
        ctx.stroke();
        ctx.restore();
    }
    drawLabels(chartArea) {
        const optionTicks = this.options.ticks;
        if (!optionTicks.display) return;
        const ctx = this.ctx;
        const area = this._computeLabelArea();
        if (area) (0, _helpersSegmentJs.Y)(ctx, area);
        const items = this.getLabelItems(chartArea);
        for (const item of items){
            const renderTextOptions = item.options;
            const tickFont = item.font;
            const label = item.label;
            const y = item.textOffset;
            (0, _helpersSegmentJs.Z)(ctx, label, 0, y, tickFont, renderTextOptions);
        }
        if (area) (0, _helpersSegmentJs.$)(ctx);
    }
    drawTitle() {
        const { ctx, options: { position, title, reverse } } = this;
        if (!title.display) return;
        const font = (0, _helpersSegmentJs.a0)(title.font);
        const padding = (0, _helpersSegmentJs.E)(title.padding);
        const align = title.align;
        let offset = font.lineHeight / 2;
        if (position === "bottom" || position === "center" || (0, _helpersSegmentJs.i)(position)) {
            offset += padding.bottom;
            if ((0, _helpersSegmentJs.b)(title.text)) offset += font.lineHeight * (title.text.length - 1);
        } else offset += padding.top;
        const { titleX, titleY, maxWidth, rotation } = titleArgs(this, offset, position, align);
        (0, _helpersSegmentJs.Z)(ctx, title.text, 0, 0, font, {
            color: title.color,
            maxWidth,
            rotation,
            textAlign: titleAlign(align, position, reverse),
            textBaseline: "middle",
            translation: [
                titleX,
                titleY
            ]
        });
    }
    draw(chartArea) {
        if (!this._isVisible()) return;
        this.drawBackground();
        this.drawGrid(chartArea);
        this.drawBorder();
        this.drawTitle();
        this.drawLabels(chartArea);
    }
    _layers() {
        const opts = this.options;
        const tz = opts.ticks && opts.ticks.z || 0;
        const gz = (0, _helpersSegmentJs.v)(opts.grid && opts.grid.z, -1);
        const bz = (0, _helpersSegmentJs.v)(opts.border && opts.border.z, 0);
        if (!this._isVisible() || this.draw !== Scale.prototype.draw) return [
            {
                z: tz,
                draw: (chartArea)=>{
                    this.draw(chartArea);
                }
            }
        ];
        return [
            {
                z: gz,
                draw: (chartArea)=>{
                    this.drawBackground();
                    this.drawGrid(chartArea);
                    this.drawTitle();
                }
            },
            {
                z: bz,
                draw: ()=>{
                    this.drawBorder();
                }
            },
            {
                z: tz,
                draw: (chartArea)=>{
                    this.drawLabels(chartArea);
                }
            }
        ];
    }
    getMatchingVisibleMetas(type) {
        const metas = this.chart.getSortedVisibleDatasetMetas();
        const axisID = this.axis + "AxisID";
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metas.length; i < ilen; ++i){
            const meta = metas[i];
            if (meta[axisID] === this.id && (!type || meta.type === type)) result.push(meta);
        }
        return result;
    }
    _resolveTickFontOptions(index) {
        const opts = this.options.ticks.setContext(this.getContext(index));
        return (0, _helpersSegmentJs.a0)(opts.font);
    }
    _maxDigits() {
        const fontSize = this._resolveTickFontOptions(0).lineHeight;
        return (this.isHorizontal() ? this.width : this.height) / fontSize;
    }
}
class TypedRegistry {
    constructor(type, scope, override){
        this.type = type;
        this.scope = scope;
        this.override = override;
        this.items = Object.create(null);
    }
    isForType(type) {
        return Object.prototype.isPrototypeOf.call(this.type.prototype, type.prototype);
    }
    register(item) {
        const proto = Object.getPrototypeOf(item);
        let parentScope;
        if (isIChartComponent(proto)) parentScope = this.register(proto);
        const items = this.items;
        const id = item.id;
        const scope = this.scope + "." + id;
        if (!id) throw new Error("class does not have id: " + item);
        if (id in items) return scope;
        items[id] = item;
        registerDefaults(item, scope, parentScope);
        if (this.override) (0, _helpersSegmentJs.d).override(item.id, item.overrides);
        return scope;
    }
    get(id) {
        return this.items[id];
    }
    unregister(item) {
        const items = this.items;
        const id = item.id;
        const scope = this.scope;
        if (id in items) delete items[id];
        if (scope && id in (0, _helpersSegmentJs.d)[scope]) {
            delete (0, _helpersSegmentJs.d)[scope][id];
            if (this.override) delete (0, _helpersSegmentJs.a3)[id];
        }
    }
}
function registerDefaults(item, scope, parentScope) {
    const itemDefaults = (0, _helpersSegmentJs.a4)(Object.create(null), [
        parentScope ? (0, _helpersSegmentJs.d).get(parentScope) : {},
        (0, _helpersSegmentJs.d).get(scope),
        item.defaults
    ]);
    (0, _helpersSegmentJs.d).set(scope, itemDefaults);
    if (item.defaultRoutes) routeDefaults(scope, item.defaultRoutes);
    if (item.descriptors) (0, _helpersSegmentJs.d).describe(scope, item.descriptors);
}
function routeDefaults(scope, routes) {
    Object.keys(routes).forEach((property)=>{
        const propertyParts = property.split(".");
        const sourceName = propertyParts.pop();
        const sourceScope = [
            scope
        ].concat(propertyParts).join(".");
        const parts = routes[property].split(".");
        const targetName = parts.pop();
        const targetScope = parts.join(".");
        (0, _helpersSegmentJs.d).route(sourceScope, sourceName, targetScope, targetName);
    });
}
function isIChartComponent(proto) {
    return "id" in proto && "defaults" in proto;
}
class Registry {
    constructor(){
        this.controllers = new TypedRegistry(DatasetController, "datasets", true);
        this.elements = new TypedRegistry(Element, "elements");
        this.plugins = new TypedRegistry(Object, "plugins");
        this.scales = new TypedRegistry(Scale, "scales");
        this._typedRegistries = [
            this.controllers,
            this.scales,
            this.elements
        ];
    }
    add(...args) {
        this._each("register", args);
    }
    remove(...args) {
        this._each("unregister", args);
    }
    addControllers(...args) {
        this._each("register", args, this.controllers);
    }
    addElements(...args) {
        this._each("register", args, this.elements);
    }
    addPlugins(...args) {
        this._each("register", args, this.plugins);
    }
    addScales(...args) {
        this._each("register", args, this.scales);
    }
    getController(id) {
        return this._get(id, this.controllers, "controller");
    }
    getElement(id) {
        return this._get(id, this.elements, "element");
    }
    getPlugin(id) {
        return this._get(id, this.plugins, "plugin");
    }
    getScale(id) {
        return this._get(id, this.scales, "scale");
    }
    removeControllers(...args) {
        this._each("unregister", args, this.controllers);
    }
    removeElements(...args) {
        this._each("unregister", args, this.elements);
    }
    removePlugins(...args) {
        this._each("unregister", args, this.plugins);
    }
    removeScales(...args) {
        this._each("unregister", args, this.scales);
    }
    _each(method, args, typedRegistry) {
        [
            ...args
        ].forEach((arg)=>{
            const reg = typedRegistry || this._getRegistryForType(arg);
            if (typedRegistry || reg.isForType(arg) || reg === this.plugins && arg.id) this._exec(method, reg, arg);
            else (0, _helpersSegmentJs.F)(arg, (item)=>{
                const itemReg = typedRegistry || this._getRegistryForType(item);
                this._exec(method, itemReg, item);
            });
        });
    }
    _exec(method, registry, component) {
        const camelMethod = (0, _helpersSegmentJs.a5)(method);
        (0, _helpersSegmentJs.Q)(component["before" + camelMethod], [], component);
        registry[method](component);
        (0, _helpersSegmentJs.Q)(component["after" + camelMethod], [], component);
    }
    _getRegistryForType(type) {
        for(let i = 0; i < this._typedRegistries.length; i++){
            const reg = this._typedRegistries[i];
            if (reg.isForType(type)) return reg;
        }
        return this.plugins;
    }
    _get(id, typedRegistry, type) {
        const item = typedRegistry.get(id);
        if (item === undefined) throw new Error('"' + id + '" is not a registered ' + type + ".");
        return item;
    }
}
var registry = /* #__PURE__ */ new Registry();
class PluginService {
    constructor(){
        this._init = [];
    }
    notify(chart, hook, args, filter) {
        if (hook === "beforeInit") {
            this._init = this._createDescriptors(chart, true);
            this._notify(this._init, chart, "install");
        }
        const descriptors = filter ? this._descriptors(chart).filter(filter) : this._descriptors(chart);
        const result = this._notify(descriptors, chart, hook, args);
        if (hook === "afterDestroy") {
            this._notify(descriptors, chart, "stop");
            this._notify(this._init, chart, "uninstall");
        }
        return result;
    }
    _notify(descriptors, chart, hook, args) {
        args = args || {};
        for (const descriptor of descriptors){
            const plugin = descriptor.plugin;
            const method = plugin[hook];
            const params = [
                chart,
                args,
                descriptor.options
            ];
            if ((0, _helpersSegmentJs.Q)(method, params, plugin) === false && args.cancelable) return false;
        }
        return true;
    }
    invalidate() {
        if (!(0, _helpersSegmentJs.k)(this._cache)) {
            this._oldCache = this._cache;
            this._cache = undefined;
        }
    }
    _descriptors(chart) {
        if (this._cache) return this._cache;
        const descriptors = this._cache = this._createDescriptors(chart);
        this._notifyStateChanges(chart);
        return descriptors;
    }
    _createDescriptors(chart, all) {
        const config = chart && chart.config;
        const options = (0, _helpersSegmentJs.v)(config.options && config.options.plugins, {});
        const plugins = allPlugins(config);
        return options === false && !all ? [] : createDescriptors(chart, plugins, options, all);
    }
    _notifyStateChanges(chart) {
        const previousDescriptors = this._oldCache || [];
        const descriptors = this._cache;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.plugin.id === y.plugin.id));
        this._notify(diff(previousDescriptors, descriptors), chart, "stop");
        this._notify(diff(descriptors, previousDescriptors), chart, "start");
    }
}
function allPlugins(config) {
    const localIds = {};
    const plugins = [];
    const keys = Object.keys(registry.plugins.items);
    for(let i = 0; i < keys.length; i++)plugins.push(registry.getPlugin(keys[i]));
    const local = config.plugins || [];
    for(let i = 0; i < local.length; i++){
        const plugin = local[i];
        if (plugins.indexOf(plugin) === -1) {
            plugins.push(plugin);
            localIds[plugin.id] = true;
        }
    }
    return {
        plugins,
        localIds
    };
}
function getOpts(options, all) {
    if (!all && options === false) return null;
    if (options === true) return {};
    return options;
}
function createDescriptors(chart, { plugins, localIds }, options, all) {
    const result = [];
    const context = chart.getContext();
    for (const plugin of plugins){
        const id = plugin.id;
        const opts = getOpts(options[id], all);
        if (opts === null) continue;
        result.push({
            plugin,
            options: pluginOpts(chart.config, {
                plugin,
                local: localIds[id]
            }, opts, context)
        });
    }
    return result;
}
function pluginOpts(config, { plugin, local }, opts, context) {
    const keys = config.pluginScopeKeys(plugin);
    const scopes = config.getOptionScopes(opts, keys);
    if (local && plugin.defaults) scopes.push(plugin.defaults);
    return config.createResolver(scopes, context, [
        ""
    ], {
        scriptable: false,
        indexable: false,
        allKeys: true
    });
}
function getIndexAxis(type, options) {
    const datasetDefaults = (0, _helpersSegmentJs.d).datasets[type] || {};
    const datasetOptions = (options.datasets || {})[type] || {};
    return datasetOptions.indexAxis || options.indexAxis || datasetDefaults.indexAxis || "x";
}
function getAxisFromDefaultScaleID(id, indexAxis) {
    let axis = id;
    if (id === "_index_") axis = indexAxis;
    else if (id === "_value_") axis = indexAxis === "x" ? "y" : "x";
    return axis;
}
function getDefaultScaleIDFromAxis(axis, indexAxis) {
    return axis === indexAxis ? "_index_" : "_value_";
}
function idMatchesAxis(id) {
    if (id === "x" || id === "y" || id === "r") return id;
}
function axisFromPosition(position) {
    if (position === "top" || position === "bottom") return "x";
    if (position === "left" || position === "right") return "y";
}
function determineAxis(id, ...scaleOptions) {
    if (idMatchesAxis(id)) return id;
    for (const opts of scaleOptions){
        const axis = opts.axis || axisFromPosition(opts.position) || id.length > 1 && idMatchesAxis(id[0].toLowerCase());
        if (axis) return axis;
    }
    throw new Error(`Cannot determine type of '${id}' axis. Please provide 'axis' or 'position' option.`);
}
function getAxisFromDataset(id, axis, dataset) {
    if (dataset[axis + "AxisID"] === id) return {
        axis
    };
}
function retrieveAxisFromDatasets(id, config) {
    if (config.data && config.data.datasets) {
        const boundDs = config.data.datasets.filter((d)=>d.xAxisID === id || d.yAxisID === id);
        if (boundDs.length) return getAxisFromDataset(id, "x", boundDs[0]) || getAxisFromDataset(id, "y", boundDs[0]);
    }
    return {};
}
function mergeScaleConfig(config, options) {
    const chartDefaults = (0, _helpersSegmentJs.a3)[config.type] || {
        scales: {}
    };
    const configScales = options.scales || {};
    const chartIndexAxis = getIndexAxis(config.type, options);
    const scales = Object.create(null);
    Object.keys(configScales).forEach((id)=>{
        const scaleConf = configScales[id];
        if (!(0, _helpersSegmentJs.i)(scaleConf)) return console.error(`Invalid scale configuration for scale: ${id}`);
        if (scaleConf._proxy) return console.warn(`Ignoring resolver passed as options for scale: ${id}`);
        const axis = determineAxis(id, scaleConf, retrieveAxisFromDatasets(id, config), (0, _helpersSegmentJs.d).scales[scaleConf.type]);
        const defaultId = getDefaultScaleIDFromAxis(axis, chartIndexAxis);
        const defaultScaleOptions = chartDefaults.scales || {};
        scales[id] = (0, _helpersSegmentJs.ab)(Object.create(null), [
            {
                axis
            },
            scaleConf,
            defaultScaleOptions[axis],
            defaultScaleOptions[defaultId]
        ]);
    });
    config.data.datasets.forEach((dataset)=>{
        const type = dataset.type || config.type;
        const indexAxis = dataset.indexAxis || getIndexAxis(type, options);
        const datasetDefaults = (0, _helpersSegmentJs.a3)[type] || {};
        const defaultScaleOptions = datasetDefaults.scales || {};
        Object.keys(defaultScaleOptions).forEach((defaultID)=>{
            const axis = getAxisFromDefaultScaleID(defaultID, indexAxis);
            const id = dataset[axis + "AxisID"] || axis;
            scales[id] = scales[id] || Object.create(null);
            (0, _helpersSegmentJs.ab)(scales[id], [
                {
                    axis
                },
                configScales[id],
                defaultScaleOptions[defaultID]
            ]);
        });
    });
    Object.keys(scales).forEach((key)=>{
        const scale = scales[key];
        (0, _helpersSegmentJs.ab)(scale, [
            (0, _helpersSegmentJs.d).scales[scale.type],
            (0, _helpersSegmentJs.d).scale
        ]);
    });
    return scales;
}
function initOptions(config) {
    const options = config.options || (config.options = {});
    options.plugins = (0, _helpersSegmentJs.v)(options.plugins, {});
    options.scales = mergeScaleConfig(config, options);
}
function initData(data) {
    data = data || {};
    data.datasets = data.datasets || [];
    data.labels = data.labels || [];
    return data;
}
function initConfig(config) {
    config = config || {};
    config.data = initData(config.data);
    initOptions(config);
    return config;
}
const keyCache = new Map();
const keysCached = new Set();
function cachedKeys(cacheKey, generate) {
    let keys = keyCache.get(cacheKey);
    if (!keys) {
        keys = generate();
        keyCache.set(cacheKey, keys);
        keysCached.add(keys);
    }
    return keys;
}
const addIfFound = (set, obj, key)=>{
    const opts = (0, _helpersSegmentJs.f)(obj, key);
    if (opts !== undefined) set.add(opts);
};
class Config {
    constructor(config){
        this._config = initConfig(config);
        this._scopeCache = new Map();
        this._resolverCache = new Map();
    }
    get platform() {
        return this._config.platform;
    }
    get type() {
        return this._config.type;
    }
    set type(type) {
        this._config.type = type;
    }
    get data() {
        return this._config.data;
    }
    set data(data) {
        this._config.data = initData(data);
    }
    get options() {
        return this._config.options;
    }
    set options(options) {
        this._config.options = options;
    }
    get plugins() {
        return this._config.plugins;
    }
    update() {
        const config = this._config;
        this.clearCache();
        initOptions(config);
    }
    clearCache() {
        this._scopeCache.clear();
        this._resolverCache.clear();
    }
    datasetScopeKeys(datasetType) {
        return cachedKeys(datasetType, ()=>[
                [
                    `datasets.${datasetType}`,
                    ""
                ]
            ]);
    }
    datasetAnimationScopeKeys(datasetType, transition) {
        return cachedKeys(`${datasetType}.transition.${transition}`, ()=>[
                [
                    `datasets.${datasetType}.transitions.${transition}`,
                    `transitions.${transition}`
                ],
                [
                    `datasets.${datasetType}`,
                    ""
                ]
            ]);
    }
    datasetElementScopeKeys(datasetType, elementType) {
        return cachedKeys(`${datasetType}-${elementType}`, ()=>[
                [
                    `datasets.${datasetType}.elements.${elementType}`,
                    `datasets.${datasetType}`,
                    `elements.${elementType}`,
                    ""
                ]
            ]);
    }
    pluginScopeKeys(plugin) {
        const id = plugin.id;
        const type = this.type;
        return cachedKeys(`${type}-plugin-${id}`, ()=>[
                [
                    `plugins.${id}`,
                    ...plugin.additionalOptionScopes || []
                ]
            ]);
    }
    _cachedScopes(mainScope, resetCache) {
        const _scopeCache = this._scopeCache;
        let cache = _scopeCache.get(mainScope);
        if (!cache || resetCache) {
            cache = new Map();
            _scopeCache.set(mainScope, cache);
        }
        return cache;
    }
    getOptionScopes(mainScope, keyLists, resetCache) {
        const { options, type } = this;
        const cache = this._cachedScopes(mainScope, resetCache);
        const cached = cache.get(keyLists);
        if (cached) return cached;
        const scopes = new Set();
        keyLists.forEach((keys)=>{
            if (mainScope) {
                scopes.add(mainScope);
                keys.forEach((key)=>addIfFound(scopes, mainScope, key));
            }
            keys.forEach((key)=>addIfFound(scopes, options, key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentJs.a3)[type] || {}, key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentJs.d), key));
            keys.forEach((key)=>addIfFound(scopes, (0, _helpersSegmentJs.a6), key));
        });
        const array = Array.from(scopes);
        if (array.length === 0) array.push(Object.create(null));
        if (keysCached.has(keyLists)) cache.set(keyLists, array);
        return array;
    }
    chartOptionScopes() {
        const { options, type } = this;
        return [
            options,
            (0, _helpersSegmentJs.a3)[type] || {},
            (0, _helpersSegmentJs.d).datasets[type] || {},
            {
                type
            },
            (0, _helpersSegmentJs.d),
            (0, _helpersSegmentJs.a6)
        ];
    }
    resolveNamedOptions(scopes, names, context, prefixes = [
        ""
    ]) {
        const result = {
            $shared: true
        };
        const { resolver, subPrefixes } = getResolver(this._resolverCache, scopes, prefixes);
        let options = resolver;
        if (needContext(resolver, names)) {
            result.$shared = false;
            context = (0, _helpersSegmentJs.a7)(context) ? context() : context;
            const subResolver = this.createResolver(scopes, context, subPrefixes);
            options = (0, _helpersSegmentJs.a8)(resolver, context, subResolver);
        }
        for (const prop of names)result[prop] = options[prop];
        return result;
    }
    createResolver(scopes, context, prefixes = [
        ""
    ], descriptorDefaults) {
        const { resolver } = getResolver(this._resolverCache, scopes, prefixes);
        return (0, _helpersSegmentJs.i)(context) ? (0, _helpersSegmentJs.a8)(resolver, context, undefined, descriptorDefaults) : resolver;
    }
}
function getResolver(resolverCache, scopes, prefixes) {
    let cache = resolverCache.get(scopes);
    if (!cache) {
        cache = new Map();
        resolverCache.set(scopes, cache);
    }
    const cacheKey = prefixes.join();
    let cached = cache.get(cacheKey);
    if (!cached) {
        const resolver = (0, _helpersSegmentJs.a9)(scopes, prefixes);
        cached = {
            resolver,
            subPrefixes: prefixes.filter((p)=>!p.toLowerCase().includes("hover"))
        };
        cache.set(cacheKey, cached);
    }
    return cached;
}
const hasFunction = (value)=>(0, _helpersSegmentJs.i)(value) && Object.getOwnPropertyNames(value).some((key)=>(0, _helpersSegmentJs.a7)(value[key]));
function needContext(proxy, names) {
    const { isScriptable, isIndexable } = (0, _helpersSegmentJs.aa)(proxy);
    for (const prop of names){
        const scriptable = isScriptable(prop);
        const indexable = isIndexable(prop);
        const value = (indexable || scriptable) && proxy[prop];
        if (scriptable && ((0, _helpersSegmentJs.a7)(value) || hasFunction(value)) || indexable && (0, _helpersSegmentJs.b)(value)) return true;
    }
    return false;
}
var version = "4.4.3";
const KNOWN_POSITIONS = [
    "top",
    "bottom",
    "left",
    "right",
    "chartArea"
];
function positionIsHorizontal(position, axis) {
    return position === "top" || position === "bottom" || KNOWN_POSITIONS.indexOf(position) === -1 && axis === "x";
}
function compare2Level(l1, l2) {
    return function(a, b) {
        return a[l1] === b[l1] ? a[l2] - b[l2] : a[l1] - b[l1];
    };
}
function onAnimationsComplete(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    chart.notifyPlugins("afterRender");
    (0, _helpersSegmentJs.Q)(animationOptions && animationOptions.onComplete, [
        context
    ], chart);
}
function onAnimationProgress(context) {
    const chart = context.chart;
    const animationOptions = chart.options.animation;
    (0, _helpersSegmentJs.Q)(animationOptions && animationOptions.onProgress, [
        context
    ], chart);
}
function getCanvas(item) {
    if ((0, _helpersSegmentJs.M)() && typeof item === "string") item = document.getElementById(item);
    else if (item && item.length) item = item[0];
    if (item && item.canvas) item = item.canvas;
    return item;
}
const instances = {};
const getChart = (key)=>{
    const canvas = getCanvas(key);
    return Object.values(instances).filter((c)=>c.canvas === canvas).pop();
};
function moveNumericKeys(obj, start, move) {
    const keys = Object.keys(obj);
    for (const key of keys){
        const intKey = +key;
        if (intKey >= start) {
            const value = obj[key];
            delete obj[key];
            if (move > 0 || intKey > start) obj[intKey + move] = value;
        }
    }
}
function determineLastEvent(e, lastEvent, inChartArea, isClick) {
    if (!inChartArea || e.type === "mouseout") return null;
    if (isClick) return lastEvent;
    return e;
}
function getSizeForArea(scale, chartArea, field) {
    return scale.options.clip ? scale[field] : chartArea[field];
}
function getDatasetArea(meta, chartArea) {
    const { xScale, yScale } = meta;
    if (xScale && yScale) return {
        left: getSizeForArea(xScale, chartArea, "left"),
        right: getSizeForArea(xScale, chartArea, "right"),
        top: getSizeForArea(yScale, chartArea, "top"),
        bottom: getSizeForArea(yScale, chartArea, "bottom")
    };
    return chartArea;
}
class Chart {
    static defaults = (0, _helpersSegmentJs.d);
    static instances = instances;
    static overrides = (0, _helpersSegmentJs.a3);
    static registry = registry;
    static version = version;
    static getChart = getChart;
    static register(...items) {
        registry.add(...items);
        invalidatePlugins();
    }
    static unregister(...items) {
        registry.remove(...items);
        invalidatePlugins();
    }
    constructor(item, userConfig){
        const config = this.config = new Config(userConfig);
        const initialCanvas = getCanvas(item);
        const existingChart = getChart(initialCanvas);
        if (existingChart) throw new Error("Canvas is already in use. Chart with ID '" + existingChart.id + "'" + " must be destroyed before the canvas with ID '" + existingChart.canvas.id + "' can be reused.");
        const options = config.createResolver(config.chartOptionScopes(), this.getContext());
        this.platform = new (config.platform || _detectPlatform(initialCanvas))();
        this.platform.updateConfig(config);
        const context = this.platform.acquireContext(initialCanvas, options.aspectRatio);
        const canvas = context && context.canvas;
        const height = canvas && canvas.height;
        const width = canvas && canvas.width;
        this.id = (0, _helpersSegmentJs.ac)();
        this.ctx = context;
        this.canvas = canvas;
        this.width = width;
        this.height = height;
        this._options = options;
        this._aspectRatio = this.aspectRatio;
        this._layers = [];
        this._metasets = [];
        this._stacks = undefined;
        this.boxes = [];
        this.currentDevicePixelRatio = undefined;
        this.chartArea = undefined;
        this._active = [];
        this._lastEvent = undefined;
        this._listeners = {};
        this._responsiveListeners = undefined;
        this._sortedMetasets = [];
        this.scales = {};
        this._plugins = new PluginService();
        this.$proxies = {};
        this._hiddenIndices = {};
        this.attached = false;
        this._animationsDisabled = undefined;
        this.$context = undefined;
        this._doResize = (0, _helpersSegmentJs.ad)((mode)=>this.update(mode), options.resizeDelay || 0);
        this._dataChanges = [];
        instances[this.id] = this;
        if (!context || !canvas) {
            console.error("Failed to create chart: can't acquire context from the given item");
            return;
        }
        animator.listen(this, "complete", onAnimationsComplete);
        animator.listen(this, "progress", onAnimationProgress);
        this._initialize();
        if (this.attached) this.update();
    }
    get aspectRatio() {
        const { options: { aspectRatio, maintainAspectRatio }, width, height, _aspectRatio } = this;
        if (!(0, _helpersSegmentJs.k)(aspectRatio)) return aspectRatio;
        if (maintainAspectRatio && _aspectRatio) return _aspectRatio;
        return height ? width / height : null;
    }
    get data() {
        return this.config.data;
    }
    set data(data) {
        this.config.data = data;
    }
    get options() {
        return this._options;
    }
    set options(options) {
        this.config.options = options;
    }
    get registry() {
        return registry;
    }
    _initialize() {
        this.notifyPlugins("beforeInit");
        if (this.options.responsive) this.resize();
        else (0, _helpersSegmentJs.ae)(this, this.options.devicePixelRatio);
        this.bindEvents();
        this.notifyPlugins("afterInit");
        return this;
    }
    clear() {
        (0, _helpersSegmentJs.af)(this.canvas, this.ctx);
        return this;
    }
    stop() {
        animator.stop(this);
        return this;
    }
    resize(width, height) {
        if (!animator.running(this)) this._resize(width, height);
        else this._resizeBeforeDraw = {
            width,
            height
        };
    }
    _resize(width, height) {
        const options = this.options;
        const canvas = this.canvas;
        const aspectRatio = options.maintainAspectRatio && this.aspectRatio;
        const newSize = this.platform.getMaximumSize(canvas, width, height, aspectRatio);
        const newRatio = options.devicePixelRatio || this.platform.getDevicePixelRatio();
        const mode = this.width ? "resize" : "attach";
        this.width = newSize.width;
        this.height = newSize.height;
        this._aspectRatio = this.aspectRatio;
        if (!(0, _helpersSegmentJs.ae)(this, newRatio, true)) return;
        this.notifyPlugins("resize", {
            size: newSize
        });
        (0, _helpersSegmentJs.Q)(options.onResize, [
            this,
            newSize
        ], this);
        if (this.attached) {
            if (this._doResize(mode)) this.render();
        }
    }
    ensureScalesHaveIDs() {
        const options = this.options;
        const scalesOptions = options.scales || {};
        (0, _helpersSegmentJs.F)(scalesOptions, (axisOptions, axisID)=>{
            axisOptions.id = axisID;
        });
    }
    buildOrUpdateScales() {
        const options = this.options;
        const scaleOpts = options.scales;
        const scales = this.scales;
        const updated = Object.keys(scales).reduce((obj, id)=>{
            obj[id] = false;
            return obj;
        }, {});
        let items = [];
        if (scaleOpts) items = items.concat(Object.keys(scaleOpts).map((id)=>{
            const scaleOptions = scaleOpts[id];
            const axis = determineAxis(id, scaleOptions);
            const isRadial = axis === "r";
            const isHorizontal = axis === "x";
            return {
                options: scaleOptions,
                dposition: isRadial ? "chartArea" : isHorizontal ? "bottom" : "left",
                dtype: isRadial ? "radialLinear" : isHorizontal ? "category" : "linear"
            };
        }));
        (0, _helpersSegmentJs.F)(items, (item)=>{
            const scaleOptions = item.options;
            const id = scaleOptions.id;
            const axis = determineAxis(id, scaleOptions);
            const scaleType = (0, _helpersSegmentJs.v)(scaleOptions.type, item.dtype);
            if (scaleOptions.position === undefined || positionIsHorizontal(scaleOptions.position, axis) !== positionIsHorizontal(item.dposition)) scaleOptions.position = item.dposition;
            updated[id] = true;
            let scale = null;
            if (id in scales && scales[id].type === scaleType) scale = scales[id];
            else {
                const scaleClass = registry.getScale(scaleType);
                scale = new scaleClass({
                    id,
                    type: scaleType,
                    ctx: this.ctx,
                    chart: this
                });
                scales[scale.id] = scale;
            }
            scale.init(scaleOptions, options);
        });
        (0, _helpersSegmentJs.F)(updated, (hasUpdated, id)=>{
            if (!hasUpdated) delete scales[id];
        });
        (0, _helpersSegmentJs.F)(scales, (scale)=>{
            layouts.configure(this, scale, scale.options);
            layouts.addBox(this, scale);
        });
    }
    _updateMetasets() {
        const metasets = this._metasets;
        const numData = this.data.datasets.length;
        const numMeta = metasets.length;
        metasets.sort((a, b)=>a.index - b.index);
        if (numMeta > numData) {
            for(let i = numData; i < numMeta; ++i)this._destroyDatasetMeta(i);
            metasets.splice(numData, numMeta - numData);
        }
        this._sortedMetasets = metasets.slice(0).sort(compare2Level("order", "index"));
    }
    _removeUnreferencedMetasets() {
        const { _metasets: metasets, data: { datasets } } = this;
        if (metasets.length > datasets.length) delete this._stacks;
        metasets.forEach((meta, index)=>{
            if (datasets.filter((x)=>x === meta._dataset).length === 0) this._destroyDatasetMeta(index);
        });
    }
    buildOrUpdateControllers() {
        const newControllers = [];
        const datasets = this.data.datasets;
        let i, ilen;
        this._removeUnreferencedMetasets();
        for(i = 0, ilen = datasets.length; i < ilen; i++){
            const dataset = datasets[i];
            let meta = this.getDatasetMeta(i);
            const type = dataset.type || this.config.type;
            if (meta.type && meta.type !== type) {
                this._destroyDatasetMeta(i);
                meta = this.getDatasetMeta(i);
            }
            meta.type = type;
            meta.indexAxis = dataset.indexAxis || getIndexAxis(type, this.options);
            meta.order = dataset.order || 0;
            meta.index = i;
            meta.label = "" + dataset.label;
            meta.visible = this.isDatasetVisible(i);
            if (meta.controller) {
                meta.controller.updateIndex(i);
                meta.controller.linkScales();
            } else {
                const ControllerClass = registry.getController(type);
                const { datasetElementType, dataElementType } = (0, _helpersSegmentJs.d).datasets[type];
                Object.assign(ControllerClass, {
                    dataElementType: registry.getElement(dataElementType),
                    datasetElementType: datasetElementType && registry.getElement(datasetElementType)
                });
                meta.controller = new ControllerClass(this, i);
                newControllers.push(meta.controller);
            }
        }
        this._updateMetasets();
        return newControllers;
    }
    _resetElements() {
        (0, _helpersSegmentJs.F)(this.data.datasets, (dataset, datasetIndex)=>{
            this.getDatasetMeta(datasetIndex).controller.reset();
        }, this);
    }
    reset() {
        this._resetElements();
        this.notifyPlugins("reset");
    }
    update(mode) {
        const config = this.config;
        config.update();
        const options = this._options = config.createResolver(config.chartOptionScopes(), this.getContext());
        const animsDisabled = this._animationsDisabled = !options.animation;
        this._updateScales();
        this._checkEventBindings();
        this._updateHiddenIndices();
        this._plugins.invalidate();
        if (this.notifyPlugins("beforeUpdate", {
            mode,
            cancelable: true
        }) === false) return;
        const newControllers = this.buildOrUpdateControllers();
        this.notifyPlugins("beforeElementsUpdate");
        let minPadding = 0;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; i++){
            const { controller } = this.getDatasetMeta(i);
            const reset = !animsDisabled && newControllers.indexOf(controller) === -1;
            controller.buildOrUpdateElements(reset);
            minPadding = Math.max(+controller.getMaxOverflow(), minPadding);
        }
        minPadding = this._minPadding = options.layout.autoPadding ? minPadding : 0;
        this._updateLayout(minPadding);
        if (!animsDisabled) (0, _helpersSegmentJs.F)(newControllers, (controller)=>{
            controller.reset();
        });
        this._updateDatasets(mode);
        this.notifyPlugins("afterUpdate", {
            mode
        });
        this._layers.sort(compare2Level("z", "_idx"));
        const { _active, _lastEvent } = this;
        if (_lastEvent) this._eventHandler(_lastEvent, true);
        else if (_active.length) this._updateHoverStyles(_active, _active, true);
        this.render();
    }
    _updateScales() {
        (0, _helpersSegmentJs.F)(this.scales, (scale)=>{
            layouts.removeBox(this, scale);
        });
        this.ensureScalesHaveIDs();
        this.buildOrUpdateScales();
    }
    _checkEventBindings() {
        const options = this.options;
        const existingEvents = new Set(Object.keys(this._listeners));
        const newEvents = new Set(options.events);
        if (!(0, _helpersSegmentJs.ag)(existingEvents, newEvents) || !!this._responsiveListeners !== options.responsive) {
            this.unbindEvents();
            this.bindEvents();
        }
    }
    _updateHiddenIndices() {
        const { _hiddenIndices } = this;
        const changes = this._getUniformDataChanges() || [];
        for (const { method, start, count } of changes){
            const move = method === "_removeElements" ? -count : count;
            moveNumericKeys(_hiddenIndices, start, move);
        }
    }
    _getUniformDataChanges() {
        const _dataChanges = this._dataChanges;
        if (!_dataChanges || !_dataChanges.length) return;
        this._dataChanges = [];
        const datasetCount = this.data.datasets.length;
        const makeSet = (idx)=>new Set(_dataChanges.filter((c)=>c[0] === idx).map((c, i)=>i + "," + c.splice(1).join(",")));
        const changeSet = makeSet(0);
        for(let i = 1; i < datasetCount; i++){
            if (!(0, _helpersSegmentJs.ag)(changeSet, makeSet(i))) return;
        }
        return Array.from(changeSet).map((c)=>c.split(",")).map((a)=>({
                method: a[1],
                start: +a[2],
                count: +a[3]
            }));
    }
    _updateLayout(minPadding) {
        if (this.notifyPlugins("beforeLayout", {
            cancelable: true
        }) === false) return;
        layouts.update(this, this.width, this.height, minPadding);
        const area = this.chartArea;
        const noArea = area.width <= 0 || area.height <= 0;
        this._layers = [];
        (0, _helpersSegmentJs.F)(this.boxes, (box)=>{
            if (noArea && box.position === "chartArea") return;
            if (box.configure) box.configure();
            this._layers.push(...box._layers());
        }, this);
        this._layers.forEach((item, index)=>{
            item._idx = index;
        });
        this.notifyPlugins("afterLayout");
    }
    _updateDatasets(mode) {
        if (this.notifyPlugins("beforeDatasetsUpdate", {
            mode,
            cancelable: true
        }) === false) return;
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this.getDatasetMeta(i).controller.configure();
        for(let i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._updateDataset(i, (0, _helpersSegmentJs.a7)(mode) ? mode({
            datasetIndex: i
        }) : mode);
        this.notifyPlugins("afterDatasetsUpdate", {
            mode
        });
    }
    _updateDataset(index, mode) {
        const meta = this.getDatasetMeta(index);
        const args = {
            meta,
            index,
            mode,
            cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetUpdate", args) === false) return;
        meta.controller._update(mode);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetUpdate", args);
    }
    render() {
        if (this.notifyPlugins("beforeRender", {
            cancelable: true
        }) === false) return;
        if (animator.has(this)) {
            if (this.attached && !animator.running(this)) animator.start(this);
        } else {
            this.draw();
            onAnimationsComplete({
                chart: this
            });
        }
    }
    draw() {
        let i;
        if (this._resizeBeforeDraw) {
            const { width, height } = this._resizeBeforeDraw;
            this._resize(width, height);
            this._resizeBeforeDraw = null;
        }
        this.clear();
        if (this.width <= 0 || this.height <= 0) return;
        if (this.notifyPlugins("beforeDraw", {
            cancelable: true
        }) === false) return;
        const layers = this._layers;
        for(i = 0; i < layers.length && layers[i].z <= 0; ++i)layers[i].draw(this.chartArea);
        this._drawDatasets();
        for(; i < layers.length; ++i)layers[i].draw(this.chartArea);
        this.notifyPlugins("afterDraw");
    }
    _getSortedDatasetMetas(filterVisible) {
        const metasets = this._sortedMetasets;
        const result = [];
        let i, ilen;
        for(i = 0, ilen = metasets.length; i < ilen; ++i){
            const meta = metasets[i];
            if (!filterVisible || meta.visible) result.push(meta);
        }
        return result;
    }
    getSortedVisibleDatasetMetas() {
        return this._getSortedDatasetMetas(true);
    }
    _drawDatasets() {
        if (this.notifyPlugins("beforeDatasetsDraw", {
            cancelable: true
        }) === false) return;
        const metasets = this.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i)this._drawDataset(metasets[i]);
        this.notifyPlugins("afterDatasetsDraw");
    }
    _drawDataset(meta) {
        const ctx = this.ctx;
        const clip = meta._clip;
        const useClip = !clip.disabled;
        const area = getDatasetArea(meta, this.chartArea);
        const args = {
            meta,
            index: meta.index,
            cancelable: true
        };
        if (this.notifyPlugins("beforeDatasetDraw", args) === false) return;
        if (useClip) (0, _helpersSegmentJs.Y)(ctx, {
            left: clip.left === false ? 0 : area.left - clip.left,
            right: clip.right === false ? this.width : area.right + clip.right,
            top: clip.top === false ? 0 : area.top - clip.top,
            bottom: clip.bottom === false ? this.height : area.bottom + clip.bottom
        });
        meta.controller.draw();
        if (useClip) (0, _helpersSegmentJs.$)(ctx);
        args.cancelable = false;
        this.notifyPlugins("afterDatasetDraw", args);
    }
    isPointInArea(point) {
        return (0, _helpersSegmentJs.C)(point, this.chartArea, this._minPadding);
    }
    getElementsAtEventForMode(e, mode, options, useFinalPosition) {
        const method = Interaction.modes[mode];
        if (typeof method === "function") return method(this, e, options, useFinalPosition);
        return [];
    }
    getDatasetMeta(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        const metasets = this._metasets;
        let meta = metasets.filter((x)=>x && x._dataset === dataset).pop();
        if (!meta) {
            meta = {
                type: null,
                data: [],
                dataset: null,
                controller: null,
                hidden: null,
                xAxisID: null,
                yAxisID: null,
                order: dataset && dataset.order || 0,
                index: datasetIndex,
                _dataset: dataset,
                _parsed: [],
                _sorted: false
            };
            metasets.push(meta);
        }
        return meta;
    }
    getContext() {
        return this.$context || (this.$context = (0, _helpersSegmentJs.j)(null, {
            chart: this,
            type: "chart"
        }));
    }
    getVisibleDatasetCount() {
        return this.getSortedVisibleDatasetMetas().length;
    }
    isDatasetVisible(datasetIndex) {
        const dataset = this.data.datasets[datasetIndex];
        if (!dataset) return false;
        const meta = this.getDatasetMeta(datasetIndex);
        return typeof meta.hidden === "boolean" ? !meta.hidden : !dataset.hidden;
    }
    setDatasetVisibility(datasetIndex, visible) {
        const meta = this.getDatasetMeta(datasetIndex);
        meta.hidden = !visible;
    }
    toggleDataVisibility(index) {
        this._hiddenIndices[index] = !this._hiddenIndices[index];
    }
    getDataVisibility(index) {
        return !this._hiddenIndices[index];
    }
    _updateVisibility(datasetIndex, dataIndex, visible) {
        const mode = visible ? "show" : "hide";
        const meta = this.getDatasetMeta(datasetIndex);
        const anims = meta.controller._resolveAnimations(undefined, mode);
        if ((0, _helpersSegmentJs.h)(dataIndex)) {
            meta.data[dataIndex].hidden = !visible;
            this.update();
        } else {
            this.setDatasetVisibility(datasetIndex, visible);
            anims.update(meta, {
                visible
            });
            this.update((ctx)=>ctx.datasetIndex === datasetIndex ? mode : undefined);
        }
    }
    hide(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, false);
    }
    show(datasetIndex, dataIndex) {
        this._updateVisibility(datasetIndex, dataIndex, true);
    }
    _destroyDatasetMeta(datasetIndex) {
        const meta = this._metasets[datasetIndex];
        if (meta && meta.controller) meta.controller._destroy();
        delete this._metasets[datasetIndex];
    }
    _stop() {
        let i, ilen;
        this.stop();
        animator.remove(this);
        for(i = 0, ilen = this.data.datasets.length; i < ilen; ++i)this._destroyDatasetMeta(i);
    }
    destroy() {
        this.notifyPlugins("beforeDestroy");
        const { canvas, ctx } = this;
        this._stop();
        this.config.clearCache();
        if (canvas) {
            this.unbindEvents();
            (0, _helpersSegmentJs.af)(canvas, ctx);
            this.platform.releaseContext(ctx);
            this.canvas = null;
            this.ctx = null;
        }
        delete instances[this.id];
        this.notifyPlugins("afterDestroy");
    }
    toBase64Image(...args) {
        return this.canvas.toDataURL(...args);
    }
    bindEvents() {
        this.bindUserEvents();
        if (this.options.responsive) this.bindResponsiveEvents();
        else this.attached = true;
    }
    bindUserEvents() {
        const listeners = this._listeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const listener = (e, x, y)=>{
            e.offsetX = x;
            e.offsetY = y;
            this._eventHandler(e);
        };
        (0, _helpersSegmentJs.F)(this.options.events, (type)=>_add(type, listener));
    }
    bindResponsiveEvents() {
        if (!this._responsiveListeners) this._responsiveListeners = {};
        const listeners = this._responsiveListeners;
        const platform = this.platform;
        const _add = (type, listener)=>{
            platform.addEventListener(this, type, listener);
            listeners[type] = listener;
        };
        const _remove = (type, listener)=>{
            if (listeners[type]) {
                platform.removeEventListener(this, type, listener);
                delete listeners[type];
            }
        };
        const listener = (width, height)=>{
            if (this.canvas) this.resize(width, height);
        };
        let detached;
        const attached = ()=>{
            _remove("attach", attached);
            this.attached = true;
            this.resize();
            _add("resize", listener);
            _add("detach", detached);
        };
        detached = ()=>{
            this.attached = false;
            _remove("resize", listener);
            this._stop();
            this._resize(0, 0);
            _add("attach", attached);
        };
        if (platform.isAttached(this.canvas)) attached();
        else detached();
    }
    unbindEvents() {
        (0, _helpersSegmentJs.F)(this._listeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._listeners = {};
        (0, _helpersSegmentJs.F)(this._responsiveListeners, (listener, type)=>{
            this.platform.removeEventListener(this, type, listener);
        });
        this._responsiveListeners = undefined;
    }
    updateHoverStyle(items, mode, enabled) {
        const prefix = enabled ? "set" : "remove";
        let meta, item, i, ilen;
        if (mode === "dataset") {
            meta = this.getDatasetMeta(items[0].datasetIndex);
            meta.controller["_" + prefix + "DatasetHoverStyle"]();
        }
        for(i = 0, ilen = items.length; i < ilen; ++i){
            item = items[i];
            const controller = item && this.getDatasetMeta(item.datasetIndex).controller;
            if (controller) controller[prefix + "HoverStyle"](item.element, item.datasetIndex, item.index);
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements) {
        const lastActive = this._active || [];
        const active = activeElements.map(({ datasetIndex, index })=>{
            const meta = this.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error("No dataset found at index " + datasetIndex);
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0, _helpersSegmentJs.ah)(active, lastActive);
        if (changed) {
            this._active = active;
            this._lastEvent = null;
            this._updateHoverStyles(active, lastActive);
        }
    }
    notifyPlugins(hook, args, filter) {
        return this._plugins.notify(this, hook, args, filter);
    }
    isPluginEnabled(pluginId) {
        return this._plugins._cache.filter((p)=>p.plugin.id === pluginId).length === 1;
    }
    _updateHoverStyles(active, lastActive, replay) {
        const hoverOptions = this.options.hover;
        const diff = (a, b)=>a.filter((x)=>!b.some((y)=>x.datasetIndex === y.datasetIndex && x.index === y.index));
        const deactivated = diff(lastActive, active);
        const activated = replay ? active : diff(active, lastActive);
        if (deactivated.length) this.updateHoverStyle(deactivated, hoverOptions.mode, false);
        if (activated.length && hoverOptions.mode) this.updateHoverStyle(activated, hoverOptions.mode, true);
    }
    _eventHandler(e, replay) {
        const args = {
            event: e,
            replay,
            cancelable: true,
            inChartArea: this.isPointInArea(e)
        };
        const eventFilter = (plugin)=>(plugin.options.events || this.options.events).includes(e.native.type);
        if (this.notifyPlugins("beforeEvent", args, eventFilter) === false) return;
        const changed = this._handleEvent(e, replay, args.inChartArea);
        args.cancelable = false;
        this.notifyPlugins("afterEvent", args, eventFilter);
        if (changed || args.changed) this.render();
        return this;
    }
    _handleEvent(e, replay, inChartArea) {
        const { _active: lastActive = [], options } = this;
        const useFinalPosition = replay;
        const active = this._getActiveElements(e, lastActive, inChartArea, useFinalPosition);
        const isClick = (0, _helpersSegmentJs.ai)(e);
        const lastEvent = determineLastEvent(e, this._lastEvent, inChartArea, isClick);
        if (inChartArea) {
            this._lastEvent = null;
            (0, _helpersSegmentJs.Q)(options.onHover, [
                e,
                active,
                this
            ], this);
            if (isClick) (0, _helpersSegmentJs.Q)(options.onClick, [
                e,
                active,
                this
            ], this);
        }
        const changed = !(0, _helpersSegmentJs.ah)(active, lastActive);
        if (changed || replay) {
            this._active = active;
            this._updateHoverStyles(active, lastActive, replay);
        }
        this._lastEvent = lastEvent;
        return changed;
    }
    _getActiveElements(e, lastActive, inChartArea, useFinalPosition) {
        if (e.type === "mouseout") return [];
        if (!inChartArea) return lastActive;
        const hoverOptions = this.options.hover;
        return this.getElementsAtEventForMode(e, hoverOptions.mode, hoverOptions, useFinalPosition);
    }
}
function invalidatePlugins() {
    return (0, _helpersSegmentJs.F)(Chart.instances, (chart)=>chart._plugins.invalidate());
}
function clipArc(ctx, element, endAngle) {
    const { startAngle, pixelMargin, x, y, outerRadius, innerRadius } = element;
    let angleMargin = pixelMargin / outerRadius;
    // Draw an inner border by clipping the arc and drawing a double-width border
    // Enlarge the clipping arc by 0.33 pixels to eliminate glitches between borders
    ctx.beginPath();
    ctx.arc(x, y, outerRadius, startAngle - angleMargin, endAngle + angleMargin);
    if (innerRadius > pixelMargin) {
        angleMargin = pixelMargin / innerRadius;
        ctx.arc(x, y, innerRadius, endAngle + angleMargin, startAngle - angleMargin, true);
    } else ctx.arc(x, y, pixelMargin, endAngle + (0, _helpersSegmentJs.H), startAngle - (0, _helpersSegmentJs.H));
    ctx.closePath();
    ctx.clip();
}
function toRadiusCorners(value) {
    return (0, _helpersSegmentJs.ak)(value, [
        "outerStart",
        "outerEnd",
        "innerStart",
        "innerEnd"
    ]);
}
/**
 * Parse border radius from the provided options
 */ function parseBorderRadius$1(arc, innerRadius, outerRadius, angleDelta) {
    const o = toRadiusCorners(arc.options.borderRadius);
    const halfThickness = (outerRadius - innerRadius) / 2;
    const innerLimit = Math.min(halfThickness, angleDelta * innerRadius / 2);
    // Outer limits are complicated. We want to compute the available angular distance at
    // a radius of outerRadius - borderRadius because for small angular distances, this term limits.
    // We compute at r = outerRadius - borderRadius because this circle defines the center of the border corners.
    //
    // If the borderRadius is large, that value can become negative.
    // This causes the outer borders to lose their radius entirely, which is rather unexpected. To solve that, if borderRadius > outerRadius
    // we know that the thickness term will dominate and compute the limits at that point
    const computeOuterLimit = (val)=>{
        const outerArcLimit = (outerRadius - Math.min(halfThickness, val)) * angleDelta / 2;
        return (0, _helpersSegmentJs.S)(val, 0, Math.min(halfThickness, outerArcLimit));
    };
    return {
        outerStart: computeOuterLimit(o.outerStart),
        outerEnd: computeOuterLimit(o.outerEnd),
        innerStart: (0, _helpersSegmentJs.S)(o.innerStart, 0, innerLimit),
        innerEnd: (0, _helpersSegmentJs.S)(o.innerEnd, 0, innerLimit)
    };
}
/**
 * Convert (r, 𝜃) to (x, y)
 */ function rThetaToXY(r, theta, x, y) {
    return {
        x: x + r * Math.cos(theta),
        y: y + r * Math.sin(theta)
    };
}
/**
 * Path the arc, respecting border radius by separating into left and right halves.
 *
 *   Start      End
 *
 *    1--->a--->2    Outer
 *   /           \
 *   8           3
 *   |           |
 *   |           |
 *   7           4
 *   \           /
 *    6<---b<---5    Inner
 */ function pathArc(ctx, element, offset, spacing, end, circular) {
    const { x, y, startAngle: start, pixelMargin, innerRadius: innerR } = element;
    const outerRadius = Math.max(element.outerRadius + spacing + offset - pixelMargin, 0);
    const innerRadius = innerR > 0 ? innerR + spacing + offset + pixelMargin : 0;
    let spacingOffset = 0;
    const alpha = end - start;
    if (spacing) {
        // When spacing is present, it is the same for all items
        // So we adjust the start and end angle of the arc such that
        // the distance is the same as it would be without the spacing
        const noSpacingInnerRadius = innerR > 0 ? innerR - spacing : 0;
        const noSpacingOuterRadius = outerRadius > 0 ? outerRadius - spacing : 0;
        const avNogSpacingRadius = (noSpacingInnerRadius + noSpacingOuterRadius) / 2;
        const adjustedAngle = avNogSpacingRadius !== 0 ? alpha * avNogSpacingRadius / (avNogSpacingRadius + spacing) : alpha;
        spacingOffset = (alpha - adjustedAngle) / 2;
    }
    const beta = Math.max(0.001, alpha * outerRadius - offset / (0, _helpersSegmentJs.P)) / outerRadius;
    const angleOffset = (alpha - beta) / 2;
    const startAngle = start + angleOffset + spacingOffset;
    const endAngle = end - angleOffset - spacingOffset;
    const { outerStart, outerEnd, innerStart, innerEnd } = parseBorderRadius$1(element, innerRadius, outerRadius, endAngle - startAngle);
    const outerStartAdjustedRadius = outerRadius - outerStart;
    const outerEndAdjustedRadius = outerRadius - outerEnd;
    const outerStartAdjustedAngle = startAngle + outerStart / outerStartAdjustedRadius;
    const outerEndAdjustedAngle = endAngle - outerEnd / outerEndAdjustedRadius;
    const innerStartAdjustedRadius = innerRadius + innerStart;
    const innerEndAdjustedRadius = innerRadius + innerEnd;
    const innerStartAdjustedAngle = startAngle + innerStart / innerStartAdjustedRadius;
    const innerEndAdjustedAngle = endAngle - innerEnd / innerEndAdjustedRadius;
    ctx.beginPath();
    if (circular) {
        // The first arc segments from point 1 to point a to point 2
        const outerMidAdjustedAngle = (outerStartAdjustedAngle + outerEndAdjustedAngle) / 2;
        ctx.arc(x, y, outerRadius, outerStartAdjustedAngle, outerMidAdjustedAngle);
        ctx.arc(x, y, outerRadius, outerMidAdjustedAngle, outerEndAdjustedAngle);
        // The corner segment from point 2 to point 3
        if (outerEnd > 0) {
            const pCenter = rThetaToXY(outerEndAdjustedRadius, outerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerEnd, outerEndAdjustedAngle, endAngle + (0, _helpersSegmentJs.H));
        }
        // The line from point 3 to point 4
        const p4 = rThetaToXY(innerEndAdjustedRadius, endAngle, x, y);
        ctx.lineTo(p4.x, p4.y);
        // The corner segment from point 4 to point 5
        if (innerEnd > 0) {
            const pCenter = rThetaToXY(innerEndAdjustedRadius, innerEndAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerEnd, endAngle + (0, _helpersSegmentJs.H), innerEndAdjustedAngle + Math.PI);
        }
        // The inner arc from point 5 to point b to point 6
        const innerMidAdjustedAngle = (endAngle - innerEnd / innerRadius + (startAngle + innerStart / innerRadius)) / 2;
        ctx.arc(x, y, innerRadius, endAngle - innerEnd / innerRadius, innerMidAdjustedAngle, true);
        ctx.arc(x, y, innerRadius, innerMidAdjustedAngle, startAngle + innerStart / innerRadius, true);
        // The corner segment from point 6 to point 7
        if (innerStart > 0) {
            const pCenter = rThetaToXY(innerStartAdjustedRadius, innerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, innerStart, innerStartAdjustedAngle + Math.PI, startAngle - (0, _helpersSegmentJs.H));
        }
        // The line from point 7 to point 8
        const p8 = rThetaToXY(outerStartAdjustedRadius, startAngle, x, y);
        ctx.lineTo(p8.x, p8.y);
        // The corner segment from point 8 to point 1
        if (outerStart > 0) {
            const pCenter = rThetaToXY(outerStartAdjustedRadius, outerStartAdjustedAngle, x, y);
            ctx.arc(pCenter.x, pCenter.y, outerStart, startAngle - (0, _helpersSegmentJs.H), outerStartAdjustedAngle);
        }
    } else {
        ctx.moveTo(x, y);
        const outerStartX = Math.cos(outerStartAdjustedAngle) * outerRadius + x;
        const outerStartY = Math.sin(outerStartAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerStartX, outerStartY);
        const outerEndX = Math.cos(outerEndAdjustedAngle) * outerRadius + x;
        const outerEndY = Math.sin(outerEndAdjustedAngle) * outerRadius + y;
        ctx.lineTo(outerEndX, outerEndY);
    }
    ctx.closePath();
}
function drawArc(ctx, element, offset, spacing, circular) {
    const { fullCircles, startAngle, circumference } = element;
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        for(let i = 0; i < fullCircles; ++i)ctx.fill();
        if (!isNaN(circumference)) endAngle = startAngle + (circumference % (0, _helpersSegmentJs.T) || (0, _helpersSegmentJs.T));
    }
    pathArc(ctx, element, offset, spacing, endAngle, circular);
    ctx.fill();
    return endAngle;
}
function drawBorder(ctx, element, offset, spacing, circular) {
    const { fullCircles, startAngle, circumference, options } = element;
    const { borderWidth, borderJoinStyle, borderDash, borderDashOffset } = options;
    const inner = options.borderAlign === "inner";
    if (!borderWidth) return;
    ctx.setLineDash(borderDash || []);
    ctx.lineDashOffset = borderDashOffset;
    if (inner) {
        ctx.lineWidth = borderWidth * 2;
        ctx.lineJoin = borderJoinStyle || "round";
    } else {
        ctx.lineWidth = borderWidth;
        ctx.lineJoin = borderJoinStyle || "bevel";
    }
    let endAngle = element.endAngle;
    if (fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        for(let i = 0; i < fullCircles; ++i)ctx.stroke();
        if (!isNaN(circumference)) endAngle = startAngle + (circumference % (0, _helpersSegmentJs.T) || (0, _helpersSegmentJs.T));
    }
    if (inner) clipArc(ctx, element, endAngle);
    if (!fullCircles) {
        pathArc(ctx, element, offset, spacing, endAngle, circular);
        ctx.stroke();
    }
}
class ArcElement extends Element {
    static id = "arc";
    static defaults = {
        borderAlign: "center",
        borderColor: "#fff",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: undefined,
        borderRadius: 0,
        borderWidth: 2,
        offset: 0,
        spacing: 0,
        angle: undefined,
        circular: true
    };
    static defaultRoutes = {
        backgroundColor: "backgroundColor"
    };
    static descriptors = {
        _scriptable: true,
        _indexable: (name)=>name !== "borderDash"
    };
    circumference;
    endAngle;
    fullCircles;
    innerRadius;
    outerRadius;
    pixelMargin;
    startAngle;
    constructor(cfg){
        super();
        this.options = undefined;
        this.circumference = undefined;
        this.startAngle = undefined;
        this.endAngle = undefined;
        this.innerRadius = undefined;
        this.outerRadius = undefined;
        this.pixelMargin = 0;
        this.fullCircles = 0;
        if (cfg) Object.assign(this, cfg);
    }
    inRange(chartX, chartY, useFinalPosition) {
        const point = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        const { angle, distance } = (0, _helpersSegmentJs.D)(point, {
            x: chartX,
            y: chartY
        });
        const { startAngle, endAngle, innerRadius, outerRadius, circumference } = this.getProps([
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius",
            "circumference"
        ], useFinalPosition);
        const rAdjust = (this.options.spacing + this.options.borderWidth) / 2;
        const _circumference = (0, _helpersSegmentJs.v)(circumference, endAngle - startAngle);
        const betweenAngles = _circumference >= (0, _helpersSegmentJs.T) || (0, _helpersSegmentJs.p)(angle, startAngle, endAngle);
        const withinRadius = (0, _helpersSegmentJs.aj)(distance, innerRadius + rAdjust, outerRadius + rAdjust);
        return betweenAngles && withinRadius;
    }
    getCenterPoint(useFinalPosition) {
        const { x, y, startAngle, endAngle, innerRadius, outerRadius } = this.getProps([
            "x",
            "y",
            "startAngle",
            "endAngle",
            "innerRadius",
            "outerRadius"
        ], useFinalPosition);
        const { offset, spacing } = this.options;
        const halfAngle = (startAngle + endAngle) / 2;
        const halfRadius = (innerRadius + outerRadius + spacing + offset) / 2;
        return {
            x: x + Math.cos(halfAngle) * halfRadius,
            y: y + Math.sin(halfAngle) * halfRadius
        };
    }
    tooltipPosition(useFinalPosition) {
        return this.getCenterPoint(useFinalPosition);
    }
    draw(ctx) {
        const { options, circumference } = this;
        const offset = (options.offset || 0) / 4;
        const spacing = (options.spacing || 0) / 2;
        const circular = options.circular;
        this.pixelMargin = options.borderAlign === "inner" ? 0.33 : 0;
        this.fullCircles = circumference > (0, _helpersSegmentJs.T) ? Math.floor(circumference / (0, _helpersSegmentJs.T)) : 0;
        if (circumference === 0 || this.innerRadius < 0 || this.outerRadius < 0) return;
        ctx.save();
        const halfAngle = (this.startAngle + this.endAngle) / 2;
        ctx.translate(Math.cos(halfAngle) * offset, Math.sin(halfAngle) * offset);
        const fix = 1 - Math.sin(Math.min((0, _helpersSegmentJs.P), circumference || 0));
        const radiusOffset = offset * fix;
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        drawArc(ctx, this, radiusOffset, spacing, circular);
        drawBorder(ctx, this, radiusOffset, spacing, circular);
        ctx.restore();
    }
}
function setStyle(ctx, options, style = options) {
    ctx.lineCap = (0, _helpersSegmentJs.v)(style.borderCapStyle, options.borderCapStyle);
    ctx.setLineDash((0, _helpersSegmentJs.v)(style.borderDash, options.borderDash));
    ctx.lineDashOffset = (0, _helpersSegmentJs.v)(style.borderDashOffset, options.borderDashOffset);
    ctx.lineJoin = (0, _helpersSegmentJs.v)(style.borderJoinStyle, options.borderJoinStyle);
    ctx.lineWidth = (0, _helpersSegmentJs.v)(style.borderWidth, options.borderWidth);
    ctx.strokeStyle = (0, _helpersSegmentJs.v)(style.borderColor, options.borderColor);
}
function lineTo(ctx, previous, target) {
    ctx.lineTo(target.x, target.y);
}
function getLineMethod(options) {
    if (options.stepped) return 0, _helpersSegmentJs.ar;
    if (options.tension || options.cubicInterpolationMode === "monotone") return 0, _helpersSegmentJs.as;
    return lineTo;
}
function pathVars(points, segment, params = {}) {
    const count = points.length;
    const { start: paramsStart = 0, end: paramsEnd = count - 1 } = params;
    const { start: segmentStart, end: segmentEnd } = segment;
    const start = Math.max(paramsStart, segmentStart);
    const end = Math.min(paramsEnd, segmentEnd);
    const outside = paramsStart < segmentStart && paramsEnd < segmentStart || paramsStart > segmentEnd && paramsEnd > segmentEnd;
    return {
        count,
        start,
        loop: segment.loop,
        ilen: end < start && !outside ? count + end - start : end - start
    };
}
function pathSegment(ctx, line, segment, params) {
    const { points, options } = line;
    const { count, start, loop, ilen } = pathVars(points, segment, params);
    const lineMethod = getLineMethod(options);
    let { move = true, reverse } = params || {};
    let i, point, prev;
    for(i = 0; i <= ilen; ++i){
        point = points[(start + (reverse ? ilen - i : i)) % count];
        if (point.skip) continue;
        else if (move) {
            ctx.moveTo(point.x, point.y);
            move = false;
        } else lineMethod(ctx, prev, point, reverse, options.stepped);
        prev = point;
    }
    if (loop) {
        point = points[(start + (reverse ? ilen : 0)) % count];
        lineMethod(ctx, prev, point, reverse, options.stepped);
    }
    return !!loop;
}
function fastPathSegment(ctx, line, segment, params) {
    const points = line.points;
    const { count, start, ilen } = pathVars(points, segment, params);
    const { move = true, reverse } = params || {};
    let avgX = 0;
    let countX = 0;
    let i, point, prevX, minY, maxY, lastY;
    const pointIndex = (index)=>(start + (reverse ? ilen - index : index)) % count;
    const drawX = ()=>{
        if (minY !== maxY) {
            ctx.lineTo(avgX, maxY);
            ctx.lineTo(avgX, minY);
            ctx.lineTo(avgX, lastY);
        }
    };
    if (move) {
        point = points[pointIndex(0)];
        ctx.moveTo(point.x, point.y);
    }
    for(i = 0; i <= ilen; ++i){
        point = points[pointIndex(i)];
        if (point.skip) continue;
        const x = point.x;
        const y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) minY = y;
            else if (y > maxY) maxY = y;
            avgX = (countX * avgX + x) / ++countX;
        } else {
            drawX();
            ctx.lineTo(x, y);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
        }
        lastY = y;
    }
    drawX();
}
function _getSegmentMethod(line) {
    const opts = line.options;
    const borderDash = opts.borderDash && opts.borderDash.length;
    const useFastPath = !line._decimated && !line._loop && !opts.tension && opts.cubicInterpolationMode !== "monotone" && !opts.stepped && !borderDash;
    return useFastPath ? fastPathSegment : pathSegment;
}
function _getInterpolationMethod(options) {
    if (options.stepped) return 0, _helpersSegmentJs.ao;
    if (options.tension || options.cubicInterpolationMode === "monotone") return 0, _helpersSegmentJs.ap;
    return 0, _helpersSegmentJs.aq;
}
function strokePathWithCache(ctx, line, start, count) {
    let path = line._path;
    if (!path) {
        path = line._path = new Path2D();
        if (line.path(path, start, count)) path.closePath();
    }
    setStyle(ctx, line.options);
    ctx.stroke(path);
}
function strokePathDirect(ctx, line, start, count) {
    const { segments, options } = line;
    const segmentMethod = _getSegmentMethod(line);
    for (const segment of segments){
        setStyle(ctx, options, segment.style);
        ctx.beginPath();
        if (segmentMethod(ctx, line, segment, {
            start,
            end: start + count - 1
        })) ctx.closePath();
        ctx.stroke();
    }
}
const usePath2D = typeof Path2D === "function";
function draw(ctx, line, start, count) {
    if (usePath2D && !line.options.segment) strokePathWithCache(ctx, line, start, count);
    else strokePathDirect(ctx, line, start, count);
}
class LineElement extends Element {
    static id = "line";
    static defaults = {
        borderCapStyle: "butt",
        borderDash: [],
        borderDashOffset: 0,
        borderJoinStyle: "miter",
        borderWidth: 3,
        capBezierPoints: true,
        cubicInterpolationMode: "default",
        fill: false,
        spanGaps: false,
        stepped: false,
        tension: 0
    };
    static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    static descriptors = {
        _scriptable: true,
        _indexable: (name)=>name !== "borderDash" && name !== "fill"
    };
    constructor(cfg){
        super();
        this.animated = true;
        this.options = undefined;
        this._chart = undefined;
        this._loop = undefined;
        this._fullLoop = undefined;
        this._path = undefined;
        this._points = undefined;
        this._segments = undefined;
        this._decimated = false;
        this._pointsUpdated = false;
        this._datasetIndex = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    updateControlPoints(chartArea, indexAxis) {
        const options = this.options;
        if ((options.tension || options.cubicInterpolationMode === "monotone") && !options.stepped && !this._pointsUpdated) {
            const loop = options.spanGaps ? this._loop : this._fullLoop;
            (0, _helpersSegmentJs.al)(this._points, options, chartArea, loop, indexAxis);
            this._pointsUpdated = true;
        }
    }
    set points(points) {
        this._points = points;
        delete this._segments;
        delete this._path;
        this._pointsUpdated = false;
    }
    get points() {
        return this._points;
    }
    get segments() {
        return this._segments || (this._segments = (0, _helpersSegmentJs.am)(this, this.options.segment));
    }
    first() {
        const segments = this.segments;
        const points = this.points;
        return segments.length && points[segments[0].start];
    }
    last() {
        const segments = this.segments;
        const points = this.points;
        const count = segments.length;
        return count && points[segments[count - 1].end];
    }
    interpolate(point, property) {
        const options = this.options;
        const value = point[property];
        const points = this.points;
        const segments = (0, _helpersSegmentJs.an)(this, {
            property,
            start: value,
            end: value
        });
        if (!segments.length) return;
        const result = [];
        const _interpolate = _getInterpolationMethod(options);
        let i, ilen;
        for(i = 0, ilen = segments.length; i < ilen; ++i){
            const { start, end } = segments[i];
            const p1 = points[start];
            const p2 = points[end];
            if (p1 === p2) {
                result.push(p1);
                continue;
            }
            const t = Math.abs((value - p1[property]) / (p2[property] - p1[property]));
            const interpolated = _interpolate(p1, p2, t, options.stepped);
            interpolated[property] = point[property];
            result.push(interpolated);
        }
        return result.length === 1 ? result[0] : result;
    }
    pathSegment(ctx, segment, params) {
        const segmentMethod = _getSegmentMethod(this);
        return segmentMethod(ctx, this, segment, params);
    }
    path(ctx, start, count) {
        const segments = this.segments;
        const segmentMethod = _getSegmentMethod(this);
        let loop = this._loop;
        start = start || 0;
        count = count || this.points.length - start;
        for (const segment of segments)loop &= segmentMethod(ctx, this, segment, {
            start,
            end: start + count - 1
        });
        return !!loop;
    }
    draw(ctx, chartArea, start, count) {
        const options = this.options || {};
        const points = this.points || [];
        if (points.length && options.borderWidth) {
            ctx.save();
            draw(ctx, this, start, count);
            ctx.restore();
        }
        if (this.animated) {
            this._pointsUpdated = false;
            this._path = undefined;
        }
    }
}
function inRange$1(el, pos, axis, useFinalPosition) {
    const options = el.options;
    const { [axis]: value } = el.getProps([
        axis
    ], useFinalPosition);
    return Math.abs(pos - value) < options.radius + options.hitRadius;
}
class PointElement extends Element {
    static id = "point";
    parsed;
    skip;
    stop;
    /**
   * @type {any}
   */ static defaults = {
        borderWidth: 1,
        hitRadius: 1,
        hoverBorderWidth: 1,
        hoverRadius: 4,
        pointStyle: "circle",
        radius: 3,
        rotation: 0
    };
    /**
   * @type {any}
   */ static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    constructor(cfg){
        super();
        this.options = undefined;
        this.parsed = undefined;
        this.skip = undefined;
        this.stop = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        const options = this.options;
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return Math.pow(mouseX - x, 2) + Math.pow(mouseY - y, 2) < Math.pow(options.hitRadius + options.radius, 2);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange$1(this, mouseX, "x", useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange$1(this, mouseY, "y", useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x, y } = this.getProps([
            "x",
            "y"
        ], useFinalPosition);
        return {
            x,
            y
        };
    }
    size(options) {
        options = options || this.options || {};
        let radius = options.radius || 0;
        radius = Math.max(radius, radius && options.hoverRadius || 0);
        const borderWidth = radius && options.borderWidth || 0;
        return (radius + borderWidth) * 2;
    }
    draw(ctx, area) {
        const options = this.options;
        if (this.skip || options.radius < 0.1 || !(0, _helpersSegmentJs.C)(this, area, this.size(options) / 2)) return;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.fillStyle = options.backgroundColor;
        (0, _helpersSegmentJs.at)(ctx, options, this.x, this.y);
    }
    getRange() {
        const options = this.options || {};
        // @ts-expect-error Fallbacks should never be hit in practice
        return options.radius + options.hitRadius;
    }
}
function getBarBounds(bar, useFinalPosition) {
    const { x, y, base, width, height } = bar.getProps([
        "x",
        "y",
        "base",
        "width",
        "height"
    ], useFinalPosition);
    let left, right, top, bottom, half;
    if (bar.horizontal) {
        half = height / 2;
        left = Math.min(x, base);
        right = Math.max(x, base);
        top = y - half;
        bottom = y + half;
    } else {
        half = width / 2;
        left = x - half;
        right = x + half;
        top = Math.min(y, base);
        bottom = Math.max(y, base);
    }
    return {
        left,
        top,
        right,
        bottom
    };
}
function skipOrLimit(skip, value, min, max) {
    return skip ? 0 : (0, _helpersSegmentJs.S)(value, min, max);
}
function parseBorderWidth(bar, maxW, maxH) {
    const value = bar.options.borderWidth;
    const skip = bar.borderSkipped;
    const o = (0, _helpersSegmentJs.av)(value);
    return {
        t: skipOrLimit(skip.top, o.top, 0, maxH),
        r: skipOrLimit(skip.right, o.right, 0, maxW),
        b: skipOrLimit(skip.bottom, o.bottom, 0, maxH),
        l: skipOrLimit(skip.left, o.left, 0, maxW)
    };
}
function parseBorderRadius(bar, maxW, maxH) {
    const { enableBorderRadius } = bar.getProps([
        "enableBorderRadius"
    ]);
    const value = bar.options.borderRadius;
    const o = (0, _helpersSegmentJs.aw)(value);
    const maxR = Math.min(maxW, maxH);
    const skip = bar.borderSkipped;
    const enableBorder = enableBorderRadius || (0, _helpersSegmentJs.i)(value);
    return {
        topLeft: skipOrLimit(!enableBorder || skip.top || skip.left, o.topLeft, 0, maxR),
        topRight: skipOrLimit(!enableBorder || skip.top || skip.right, o.topRight, 0, maxR),
        bottomLeft: skipOrLimit(!enableBorder || skip.bottom || skip.left, o.bottomLeft, 0, maxR),
        bottomRight: skipOrLimit(!enableBorder || skip.bottom || skip.right, o.bottomRight, 0, maxR)
    };
}
function boundingRects(bar) {
    const bounds = getBarBounds(bar);
    const width = bounds.right - bounds.left;
    const height = bounds.bottom - bounds.top;
    const border = parseBorderWidth(bar, width / 2, height / 2);
    const radius = parseBorderRadius(bar, width / 2, height / 2);
    return {
        outer: {
            x: bounds.left,
            y: bounds.top,
            w: width,
            h: height,
            radius
        },
        inner: {
            x: bounds.left + border.l,
            y: bounds.top + border.t,
            w: width - border.l - border.r,
            h: height - border.t - border.b,
            radius: {
                topLeft: Math.max(0, radius.topLeft - Math.max(border.t, border.l)),
                topRight: Math.max(0, radius.topRight - Math.max(border.t, border.r)),
                bottomLeft: Math.max(0, radius.bottomLeft - Math.max(border.b, border.l)),
                bottomRight: Math.max(0, radius.bottomRight - Math.max(border.b, border.r))
            }
        }
    };
}
function inRange(bar, x, y, useFinalPosition) {
    const skipX = x === null;
    const skipY = y === null;
    const skipBoth = skipX && skipY;
    const bounds = bar && !skipBoth && getBarBounds(bar, useFinalPosition);
    return bounds && (skipX || (0, _helpersSegmentJs.aj)(x, bounds.left, bounds.right)) && (skipY || (0, _helpersSegmentJs.aj)(y, bounds.top, bounds.bottom));
}
function hasRadius(radius) {
    return radius.topLeft || radius.topRight || radius.bottomLeft || radius.bottomRight;
}
function addNormalRectPath(ctx, rect) {
    ctx.rect(rect.x, rect.y, rect.w, rect.h);
}
function inflateRect(rect, amount, refRect = {}) {
    const x = rect.x !== refRect.x ? -amount : 0;
    const y = rect.y !== refRect.y ? -amount : 0;
    const w = (rect.x + rect.w !== refRect.x + refRect.w ? amount : 0) - x;
    const h = (rect.y + rect.h !== refRect.y + refRect.h ? amount : 0) - y;
    return {
        x: rect.x + x,
        y: rect.y + y,
        w: rect.w + w,
        h: rect.h + h,
        radius: rect.radius
    };
}
class BarElement extends Element {
    static id = "bar";
    static defaults = {
        borderSkipped: "start",
        borderWidth: 0,
        borderRadius: 0,
        inflateAmount: "auto",
        pointStyle: undefined
    };
    static defaultRoutes = {
        backgroundColor: "backgroundColor",
        borderColor: "borderColor"
    };
    constructor(cfg){
        super();
        this.options = undefined;
        this.horizontal = undefined;
        this.base = undefined;
        this.width = undefined;
        this.height = undefined;
        this.inflateAmount = undefined;
        if (cfg) Object.assign(this, cfg);
    }
    draw(ctx) {
        const { inflateAmount, options: { borderColor, backgroundColor } } = this;
        const { inner, outer } = boundingRects(this);
        const addRectPath = hasRadius(outer.radius) ? (0, _helpersSegmentJs.au) : addNormalRectPath;
        ctx.save();
        if (outer.w !== inner.w || outer.h !== inner.h) {
            ctx.beginPath();
            addRectPath(ctx, inflateRect(outer, inflateAmount, inner));
            ctx.clip();
            addRectPath(ctx, inflateRect(inner, -inflateAmount, outer));
            ctx.fillStyle = borderColor;
            ctx.fill("evenodd");
        }
        ctx.beginPath();
        addRectPath(ctx, inflateRect(inner, inflateAmount));
        ctx.fillStyle = backgroundColor;
        ctx.fill();
        ctx.restore();
    }
    inRange(mouseX, mouseY, useFinalPosition) {
        return inRange(this, mouseX, mouseY, useFinalPosition);
    }
    inXRange(mouseX, useFinalPosition) {
        return inRange(this, mouseX, null, useFinalPosition);
    }
    inYRange(mouseY, useFinalPosition) {
        return inRange(this, null, mouseY, useFinalPosition);
    }
    getCenterPoint(useFinalPosition) {
        const { x, y, base, horizontal } = this.getProps([
            "x",
            "y",
            "base",
            "horizontal"
        ], useFinalPosition);
        return {
            x: horizontal ? (x + base) / 2 : x,
            y: horizontal ? y : (y + base) / 2
        };
    }
    getRange(axis) {
        return axis === "x" ? this.width / 2 : this.height / 2;
    }
}
var elements = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    ArcElement: ArcElement,
    BarElement: BarElement,
    LineElement: LineElement,
    PointElement: PointElement
});
const BORDER_COLORS = [
    "rgb(54, 162, 235)",
    "rgb(255, 99, 132)",
    "rgb(255, 159, 64)",
    "rgb(255, 205, 86)",
    "rgb(75, 192, 192)",
    "rgb(153, 102, 255)",
    "rgb(201, 203, 207)" // grey
];
// Border colors with 50% transparency
const BACKGROUND_COLORS = /* #__PURE__ */ BORDER_COLORS.map((color)=>color.replace("rgb(", "rgba(").replace(")", ", 0.5)"));
function getBorderColor(i) {
    return BORDER_COLORS[i % BORDER_COLORS.length];
}
function getBackgroundColor(i) {
    return BACKGROUND_COLORS[i % BACKGROUND_COLORS.length];
}
function colorizeDefaultDataset(dataset, i) {
    dataset.borderColor = getBorderColor(i);
    dataset.backgroundColor = getBackgroundColor(i);
    return ++i;
}
function colorizeDoughnutDataset(dataset, i) {
    dataset.backgroundColor = dataset.data.map(()=>getBorderColor(i++));
    return i;
}
function colorizePolarAreaDataset(dataset, i) {
    dataset.backgroundColor = dataset.data.map(()=>getBackgroundColor(i++));
    return i;
}
function getColorizer(chart) {
    let i = 0;
    return (dataset, datasetIndex)=>{
        const controller = chart.getDatasetMeta(datasetIndex).controller;
        if (controller instanceof DoughnutController) i = colorizeDoughnutDataset(dataset, i);
        else if (controller instanceof PolarAreaController) i = colorizePolarAreaDataset(dataset, i);
        else if (controller) i = colorizeDefaultDataset(dataset, i);
    };
}
function containsColorsDefinitions(descriptors) {
    let k;
    for(k in descriptors){
        if (descriptors[k].borderColor || descriptors[k].backgroundColor) return true;
    }
    return false;
}
function containsColorsDefinition(descriptor) {
    return descriptor && (descriptor.borderColor || descriptor.backgroundColor);
}
var plugin_colors = {
    id: "colors",
    defaults: {
        enabled: true,
        forceOverride: false
    },
    beforeLayout (chart, _args, options) {
        if (!options.enabled) return;
        const { data: { datasets }, options: chartOptions } = chart.config;
        const { elements } = chartOptions;
        if (!options.forceOverride && (containsColorsDefinitions(datasets) || containsColorsDefinition(chartOptions) || elements && containsColorsDefinitions(elements))) return;
        const colorizer = getColorizer(chart);
        datasets.forEach(colorizer);
    }
};
function lttbDecimation(data, start, count, availableWidth, options) {
    const samples = options.samples || availableWidth;
    if (samples >= count) return data.slice(start, start + count);
    const decimated = [];
    const bucketWidth = (count - 2) / (samples - 2);
    let sampledIndex = 0;
    const endIndex = start + count - 1;
    let a = start;
    let i, maxAreaPoint, maxArea, area, nextA;
    decimated[sampledIndex++] = data[a];
    for(i = 0; i < samples - 2; i++){
        let avgX = 0;
        let avgY = 0;
        let j;
        const avgRangeStart = Math.floor((i + 1) * bucketWidth) + 1 + start;
        const avgRangeEnd = Math.min(Math.floor((i + 2) * bucketWidth) + 1, count) + start;
        const avgRangeLength = avgRangeEnd - avgRangeStart;
        for(j = avgRangeStart; j < avgRangeEnd; j++){
            avgX += data[j].x;
            avgY += data[j].y;
        }
        avgX /= avgRangeLength;
        avgY /= avgRangeLength;
        const rangeOffs = Math.floor(i * bucketWidth) + 1 + start;
        const rangeTo = Math.min(Math.floor((i + 1) * bucketWidth) + 1, count) + start;
        const { x: pointAx, y: pointAy } = data[a];
        maxArea = area = -1;
        for(j = rangeOffs; j < rangeTo; j++){
            area = 0.5 * Math.abs((pointAx - avgX) * (data[j].y - pointAy) - (pointAx - data[j].x) * (avgY - pointAy));
            if (area > maxArea) {
                maxArea = area;
                maxAreaPoint = data[j];
                nextA = j;
            }
        }
        decimated[sampledIndex++] = maxAreaPoint;
        a = nextA;
    }
    decimated[sampledIndex++] = data[endIndex];
    return decimated;
}
function minMaxDecimation(data, start, count, availableWidth) {
    let avgX = 0;
    let countX = 0;
    let i, point, x, y, prevX, minIndex, maxIndex, startIndex, minY, maxY;
    const decimated = [];
    const endIndex = start + count - 1;
    const xMin = data[start].x;
    const xMax = data[endIndex].x;
    const dx = xMax - xMin;
    for(i = start; i < start + count; ++i){
        point = data[i];
        x = (point.x - xMin) / dx * availableWidth;
        y = point.y;
        const truncX = x | 0;
        if (truncX === prevX) {
            if (y < minY) {
                minY = y;
                minIndex = i;
            } else if (y > maxY) {
                maxY = y;
                maxIndex = i;
            }
            avgX = (countX * avgX + point.x) / ++countX;
        } else {
            const lastIndex = i - 1;
            if (!(0, _helpersSegmentJs.k)(minIndex) && !(0, _helpersSegmentJs.k)(maxIndex)) {
                const intermediateIndex1 = Math.min(minIndex, maxIndex);
                const intermediateIndex2 = Math.max(minIndex, maxIndex);
                if (intermediateIndex1 !== startIndex && intermediateIndex1 !== lastIndex) decimated.push({
                    ...data[intermediateIndex1],
                    x: avgX
                });
                if (intermediateIndex2 !== startIndex && intermediateIndex2 !== lastIndex) decimated.push({
                    ...data[intermediateIndex2],
                    x: avgX
                });
            }
            if (i > 0 && lastIndex !== startIndex) decimated.push(data[lastIndex]);
            decimated.push(point);
            prevX = truncX;
            countX = 0;
            minY = maxY = y;
            minIndex = maxIndex = startIndex = i;
        }
    }
    return decimated;
}
function cleanDecimatedDataset(dataset) {
    if (dataset._decimated) {
        const data = dataset._data;
        delete dataset._decimated;
        delete dataset._data;
        Object.defineProperty(dataset, "data", {
            configurable: true,
            enumerable: true,
            writable: true,
            value: data
        });
    }
}
function cleanDecimatedData(chart) {
    chart.data.datasets.forEach((dataset)=>{
        cleanDecimatedDataset(dataset);
    });
}
function getStartAndCountOfVisiblePointsSimplified(meta, points) {
    const pointCount = points.length;
    let start = 0;
    let count;
    const { iScale } = meta;
    const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
    if (minDefined) start = (0, _helpersSegmentJs.S)((0, _helpersSegmentJs.B)(points, iScale.axis, min).lo, 0, pointCount - 1);
    if (maxDefined) count = (0, _helpersSegmentJs.S)((0, _helpersSegmentJs.B)(points, iScale.axis, max).hi + 1, start, pointCount) - start;
    else count = pointCount - start;
    return {
        start,
        count
    };
}
var plugin_decimation = {
    id: "decimation",
    defaults: {
        algorithm: "min-max",
        enabled: false
    },
    beforeElementsUpdate: (chart, args, options)=>{
        if (!options.enabled) {
            cleanDecimatedData(chart);
            return;
        }
        const availableWidth = chart.width;
        chart.data.datasets.forEach((dataset, datasetIndex)=>{
            const { _data, indexAxis } = dataset;
            const meta = chart.getDatasetMeta(datasetIndex);
            const data = _data || dataset.data;
            if ((0, _helpersSegmentJs.a)([
                indexAxis,
                chart.options.indexAxis
            ]) === "y") return;
            if (!meta.controller.supportsDecimation) return;
            const xAxis = chart.scales[meta.xAxisID];
            if (xAxis.type !== "linear" && xAxis.type !== "time") return;
            if (chart.options.parsing) return;
            let { start, count } = getStartAndCountOfVisiblePointsSimplified(meta, data);
            const threshold = options.threshold || 4 * availableWidth;
            if (count <= threshold) {
                cleanDecimatedDataset(dataset);
                return;
            }
            if ((0, _helpersSegmentJs.k)(_data)) {
                dataset._data = data;
                delete dataset.data;
                Object.defineProperty(dataset, "data", {
                    configurable: true,
                    enumerable: true,
                    get: function() {
                        return this._decimated;
                    },
                    set: function(d) {
                        this._data = d;
                    }
                });
            }
            let decimated;
            switch(options.algorithm){
                case "lttb":
                    decimated = lttbDecimation(data, start, count, availableWidth, options);
                    break;
                case "min-max":
                    decimated = minMaxDecimation(data, start, count, availableWidth);
                    break;
                default:
                    throw new Error(`Unsupported decimation algorithm '${options.algorithm}'`);
            }
            dataset._decimated = decimated;
        });
    },
    destroy (chart) {
        cleanDecimatedData(chart);
    }
};
function _segments(line, target, property) {
    const segments = line.segments;
    const points = line.points;
    const tpoints = target.points;
    const parts = [];
    for (const segment of segments){
        let { start, end } = segment;
        end = _findSegmentEnd(start, end, points);
        const bounds = _getBounds(property, points[start], points[end], segment.loop);
        if (!target.segments) {
            parts.push({
                source: segment,
                target: bounds,
                start: points[start],
                end: points[end]
            });
            continue;
        }
        const targetSegments = (0, _helpersSegmentJs.an)(target, bounds);
        for (const tgt of targetSegments){
            const subBounds = _getBounds(property, tpoints[tgt.start], tpoints[tgt.end], tgt.loop);
            const fillSources = (0, _helpersSegmentJs.ax)(segment, points, subBounds);
            for (const fillSource of fillSources)parts.push({
                source: fillSource,
                target: tgt,
                start: {
                    [property]: _getEdge(bounds, subBounds, "start", Math.max)
                },
                end: {
                    [property]: _getEdge(bounds, subBounds, "end", Math.min)
                }
            });
        }
    }
    return parts;
}
function _getBounds(property, first, last, loop) {
    if (loop) return;
    let start = first[property];
    let end = last[property];
    if (property === "angle") {
        start = (0, _helpersSegmentJs.ay)(start);
        end = (0, _helpersSegmentJs.ay)(end);
    }
    return {
        property,
        start,
        end
    };
}
function _pointsFromSegments(boundary, line) {
    const { x = null, y = null } = boundary || {};
    const linePoints = line.points;
    const points = [];
    line.segments.forEach(({ start, end })=>{
        end = _findSegmentEnd(start, end, linePoints);
        const first = linePoints[start];
        const last = linePoints[end];
        if (y !== null) {
            points.push({
                x: first.x,
                y
            });
            points.push({
                x: last.x,
                y
            });
        } else if (x !== null) {
            points.push({
                x,
                y: first.y
            });
            points.push({
                x,
                y: last.y
            });
        }
    });
    return points;
}
function _findSegmentEnd(start, end, points) {
    for(; end > start; end--){
        const point = points[end];
        if (!isNaN(point.x) && !isNaN(point.y)) break;
    }
    return end;
}
function _getEdge(a, b, prop, fn) {
    if (a && b) return fn(a[prop], b[prop]);
    return a ? a[prop] : b ? b[prop] : 0;
}
function _createBoundaryLine(boundary, line) {
    let points = [];
    let _loop = false;
    if ((0, _helpersSegmentJs.b)(boundary)) {
        _loop = true;
        points = boundary;
    } else points = _pointsFromSegments(boundary, line);
    return points.length ? new LineElement({
        points,
        options: {
            tension: 0
        },
        _loop,
        _fullLoop: _loop
    }) : null;
}
function _shouldApplyFill(source) {
    return source && source.fill !== false;
}
function _resolveTarget(sources, index, propagate) {
    const source = sources[index];
    let fill = source.fill;
    const visited = [
        index
    ];
    let target;
    if (!propagate) return fill;
    while(fill !== false && visited.indexOf(fill) === -1){
        if (!(0, _helpersSegmentJs.g)(fill)) return fill;
        target = sources[fill];
        if (!target) return false;
        if (target.visible) return fill;
        visited.push(fill);
        fill = target.fill;
    }
    return false;
}
function _decodeFill(line, index, count) {
    const fill = parseFillOption(line);
    if ((0, _helpersSegmentJs.i)(fill)) return isNaN(fill.value) ? false : fill;
    let target = parseFloat(fill);
    if ((0, _helpersSegmentJs.g)(target) && Math.floor(target) === target) return decodeTargetIndex(fill[0], index, target, count);
    return [
        "origin",
        "start",
        "end",
        "stack",
        "shape"
    ].indexOf(fill) >= 0 && fill;
}
function decodeTargetIndex(firstCh, index, target, count) {
    if (firstCh === "-" || firstCh === "+") target = index + target;
    if (target === index || target < 0 || target >= count) return false;
    return target;
}
function _getTargetPixel(fill, scale) {
    let pixel = null;
    if (fill === "start") pixel = scale.bottom;
    else if (fill === "end") pixel = scale.top;
    else if ((0, _helpersSegmentJs.i)(fill)) pixel = scale.getPixelForValue(fill.value);
    else if (scale.getBasePixel) pixel = scale.getBasePixel();
    return pixel;
}
function _getTargetValue(fill, scale, startValue) {
    let value;
    if (fill === "start") value = startValue;
    else if (fill === "end") value = scale.options.reverse ? scale.min : scale.max;
    else if ((0, _helpersSegmentJs.i)(fill)) value = fill.value;
    else value = scale.getBaseValue();
    return value;
}
function parseFillOption(line) {
    const options = line.options;
    const fillOption = options.fill;
    let fill = (0, _helpersSegmentJs.v)(fillOption && fillOption.target, fillOption);
    if (fill === undefined) fill = !!options.backgroundColor;
    if (fill === false || fill === null) return false;
    if (fill === true) return "origin";
    return fill;
}
function _buildStackLine(source) {
    const { scale, index, line } = source;
    const points = [];
    const segments = line.segments;
    const sourcePoints = line.points;
    const linesBelow = getLinesBelow(scale, index);
    linesBelow.push(_createBoundaryLine({
        x: null,
        y: scale.bottom
    }, line));
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        for(let j = segment.start; j <= segment.end; j++)addPointsBelow(points, sourcePoints[j], linesBelow);
    }
    return new LineElement({
        points,
        options: {}
    });
}
function getLinesBelow(scale, index) {
    const below = [];
    const metas = scale.getMatchingVisibleMetas("line");
    for(let i = 0; i < metas.length; i++){
        const meta = metas[i];
        if (meta.index === index) break;
        if (!meta.hidden) below.unshift(meta.dataset);
    }
    return below;
}
function addPointsBelow(points, sourcePoint, linesBelow) {
    const postponed = [];
    for(let j = 0; j < linesBelow.length; j++){
        const line = linesBelow[j];
        const { first, last, point } = findPoint(line, sourcePoint, "x");
        if (!point || first && last) continue;
        if (first) postponed.unshift(point);
        else {
            points.push(point);
            if (!last) break;
        }
    }
    points.push(...postponed);
}
function findPoint(line, sourcePoint, property) {
    const point = line.interpolate(sourcePoint, property);
    if (!point) return {};
    const pointValue = point[property];
    const segments = line.segments;
    const linePoints = line.points;
    let first = false;
    let last = false;
    for(let i = 0; i < segments.length; i++){
        const segment = segments[i];
        const firstValue = linePoints[segment.start][property];
        const lastValue = linePoints[segment.end][property];
        if ((0, _helpersSegmentJs.aj)(pointValue, firstValue, lastValue)) {
            first = pointValue === firstValue;
            last = pointValue === lastValue;
            break;
        }
    }
    return {
        first,
        last,
        point
    };
}
class simpleArc {
    constructor(opts){
        this.x = opts.x;
        this.y = opts.y;
        this.radius = opts.radius;
    }
    pathSegment(ctx, bounds, opts) {
        const { x, y, radius } = this;
        bounds = bounds || {
            start: 0,
            end: (0, _helpersSegmentJs.T)
        };
        ctx.arc(x, y, radius, bounds.end, bounds.start, true);
        return !opts.bounds;
    }
    interpolate(point) {
        const { x, y, radius } = this;
        const angle = point.angle;
        return {
            x: x + Math.cos(angle) * radius,
            y: y + Math.sin(angle) * radius,
            angle
        };
    }
}
function _getTarget(source) {
    const { chart, fill, line } = source;
    if ((0, _helpersSegmentJs.g)(fill)) return getLineByIndex(chart, fill);
    if (fill === "stack") return _buildStackLine(source);
    if (fill === "shape") return true;
    const boundary = computeBoundary(source);
    if (boundary instanceof simpleArc) return boundary;
    return _createBoundaryLine(boundary, line);
}
function getLineByIndex(chart, index) {
    const meta = chart.getDatasetMeta(index);
    const visible = meta && chart.isDatasetVisible(index);
    return visible ? meta.dataset : null;
}
function computeBoundary(source) {
    const scale = source.scale || {};
    if (scale.getPointPositionForValue) return computeCircularBoundary(source);
    return computeLinearBoundary(source);
}
function computeLinearBoundary(source) {
    const { scale = {}, fill } = source;
    const pixel = _getTargetPixel(fill, scale);
    if ((0, _helpersSegmentJs.g)(pixel)) {
        const horizontal = scale.isHorizontal();
        return {
            x: horizontal ? pixel : null,
            y: horizontal ? null : pixel
        };
    }
    return null;
}
function computeCircularBoundary(source) {
    const { scale, fill } = source;
    const options = scale.options;
    const length = scale.getLabels().length;
    const start = options.reverse ? scale.max : scale.min;
    const value = _getTargetValue(fill, scale, start);
    const target = [];
    if (options.grid.circular) {
        const center = scale.getPointPositionForValue(0, start);
        return new simpleArc({
            x: center.x,
            y: center.y,
            radius: scale.getDistanceFromCenterForValue(value)
        });
    }
    for(let i = 0; i < length; ++i)target.push(scale.getPointPositionForValue(i, value));
    return target;
}
function _drawfill(ctx, source, area) {
    const target = _getTarget(source);
    const { line, scale, axis } = source;
    const lineOpts = line.options;
    const fillOption = lineOpts.fill;
    const color = lineOpts.backgroundColor;
    const { above = color, below = color } = fillOption || {};
    if (target && line.points.length) {
        (0, _helpersSegmentJs.Y)(ctx, area);
        doFill(ctx, {
            line,
            target,
            above,
            below,
            area,
            scale,
            axis
        });
        (0, _helpersSegmentJs.$)(ctx);
    }
}
function doFill(ctx, cfg) {
    const { line, target, above, below, area, scale } = cfg;
    const property = line._loop ? "angle" : cfg.axis;
    ctx.save();
    if (property === "x" && below !== above) {
        clipVertical(ctx, target, area.top);
        fill(ctx, {
            line,
            target,
            color: above,
            scale,
            property
        });
        ctx.restore();
        ctx.save();
        clipVertical(ctx, target, area.bottom);
    }
    fill(ctx, {
        line,
        target,
        color: below,
        scale,
        property
    });
    ctx.restore();
}
function clipVertical(ctx, target, clipY) {
    const { segments, points } = target;
    let first = true;
    let lineLoop = false;
    ctx.beginPath();
    for (const segment of segments){
        const { start, end } = segment;
        const firstPoint = points[start];
        const lastPoint = points[_findSegmentEnd(start, end, points)];
        if (first) {
            ctx.moveTo(firstPoint.x, firstPoint.y);
            first = false;
        } else {
            ctx.lineTo(firstPoint.x, clipY);
            ctx.lineTo(firstPoint.x, firstPoint.y);
        }
        lineLoop = !!target.pathSegment(ctx, segment, {
            move: lineLoop
        });
        if (lineLoop) ctx.closePath();
        else ctx.lineTo(lastPoint.x, clipY);
    }
    ctx.lineTo(target.first().x, clipY);
    ctx.closePath();
    ctx.clip();
}
function fill(ctx, cfg) {
    const { line, target, property, color, scale } = cfg;
    const segments = _segments(line, target, property);
    for (const { source: src, target: tgt, start, end } of segments){
        const { style: { backgroundColor = color } = {} } = src;
        const notShape = target !== true;
        ctx.save();
        ctx.fillStyle = backgroundColor;
        clipBounds(ctx, scale, notShape && _getBounds(property, start, end));
        ctx.beginPath();
        const lineLoop = !!line.pathSegment(ctx, src);
        let loop;
        if (notShape) {
            if (lineLoop) ctx.closePath();
            else interpolatedLineTo(ctx, target, end, property);
            const targetLoop = !!target.pathSegment(ctx, tgt, {
                move: lineLoop,
                reverse: true
            });
            loop = lineLoop && targetLoop;
            if (!loop) interpolatedLineTo(ctx, target, start, property);
        }
        ctx.closePath();
        ctx.fill(loop ? "evenodd" : "nonzero");
        ctx.restore();
    }
}
function clipBounds(ctx, scale, bounds) {
    const { top, bottom } = scale.chart.chartArea;
    const { property, start, end } = bounds || {};
    if (property === "x") {
        ctx.beginPath();
        ctx.rect(start, top, end - start, bottom - top);
        ctx.clip();
    }
}
function interpolatedLineTo(ctx, target, point, property) {
    const interpolatedPoint = target.interpolate(point, property);
    if (interpolatedPoint) ctx.lineTo(interpolatedPoint.x, interpolatedPoint.y);
}
var index = {
    id: "filler",
    afterDatasetsUpdate (chart, _args, options) {
        const count = (chart.data.datasets || []).length;
        const sources = [];
        let meta, i, line, source;
        for(i = 0; i < count; ++i){
            meta = chart.getDatasetMeta(i);
            line = meta.dataset;
            source = null;
            if (line && line.options && line instanceof LineElement) source = {
                visible: chart.isDatasetVisible(i),
                index: i,
                fill: _decodeFill(line, i, count),
                chart,
                axis: meta.controller.options.indexAxis,
                scale: meta.vScale,
                line
            };
            meta.$filler = source;
            sources.push(source);
        }
        for(i = 0; i < count; ++i){
            source = sources[i];
            if (!source || source.fill === false) continue;
            source.fill = _resolveTarget(sources, i, options.propagate);
        }
    },
    beforeDraw (chart, _args, options) {
        const draw = options.drawTime === "beforeDraw";
        const metasets = chart.getSortedVisibleDatasetMetas();
        const area = chart.chartArea;
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (!source) continue;
            source.line.updateControlPoints(area, source.axis);
            if (draw && source.fill) _drawfill(chart.ctx, source, area);
        }
    },
    beforeDatasetsDraw (chart, _args, options) {
        if (options.drawTime !== "beforeDatasetsDraw") return;
        const metasets = chart.getSortedVisibleDatasetMetas();
        for(let i = metasets.length - 1; i >= 0; --i){
            const source = metasets[i].$filler;
            if (_shouldApplyFill(source)) _drawfill(chart.ctx, source, chart.chartArea);
        }
    },
    beforeDatasetDraw (chart, args, options) {
        const source = args.meta.$filler;
        if (!_shouldApplyFill(source) || options.drawTime !== "beforeDatasetDraw") return;
        _drawfill(chart.ctx, source, chart.chartArea);
    },
    defaults: {
        propagate: true,
        drawTime: "beforeDatasetDraw"
    }
};
const getBoxSize = (labelOpts, fontSize)=>{
    let { boxHeight = fontSize, boxWidth = fontSize } = labelOpts;
    if (labelOpts.usePointStyle) {
        boxHeight = Math.min(boxHeight, fontSize);
        boxWidth = labelOpts.pointStyleWidth || Math.min(boxWidth, fontSize);
    }
    return {
        boxWidth,
        boxHeight,
        itemHeight: Math.max(fontSize, boxHeight)
    };
};
const itemsEqual = (a, b)=>a !== null && b !== null && a.datasetIndex === b.datasetIndex && a.index === b.index;
class Legend extends Element {
    constructor(config){
        super();
        this._added = false;
        this.legendHitBoxes = [];
        this._hoveredItem = null;
        this.doughnutMode = false;
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this.legendItems = undefined;
        this.columnSizes = undefined;
        this.lineWidths = undefined;
        this.maxHeight = undefined;
        this.maxWidth = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.height = undefined;
        this.width = undefined;
        this._margins = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight, margins) {
        this.maxWidth = maxWidth;
        this.maxHeight = maxHeight;
        this._margins = margins;
        this.setDimensions();
        this.buildLabels();
        this.fit();
    }
    setDimensions() {
        if (this.isHorizontal()) {
            this.width = this.maxWidth;
            this.left = this._margins.left;
            this.right = this.width;
        } else {
            this.height = this.maxHeight;
            this.top = this._margins.top;
            this.bottom = this.height;
        }
    }
    buildLabels() {
        const labelOpts = this.options.labels || {};
        let legendItems = (0, _helpersSegmentJs.Q)(labelOpts.generateLabels, [
            this.chart
        ], this) || [];
        if (labelOpts.filter) legendItems = legendItems.filter((item)=>labelOpts.filter(item, this.chart.data));
        if (labelOpts.sort) legendItems = legendItems.sort((a, b)=>labelOpts.sort(a, b, this.chart.data));
        if (this.options.reverse) legendItems.reverse();
        this.legendItems = legendItems;
    }
    fit() {
        const { options, ctx } = this;
        if (!options.display) {
            this.width = this.height = 0;
            return;
        }
        const labelOpts = options.labels;
        const labelFont = (0, _helpersSegmentJs.a0)(labelOpts.font);
        const fontSize = labelFont.size;
        const titleHeight = this._computeTitleHeight();
        const { boxWidth, itemHeight } = getBoxSize(labelOpts, fontSize);
        let width, height;
        ctx.font = labelFont.string;
        if (this.isHorizontal()) {
            width = this.maxWidth;
            height = this._fitRows(titleHeight, fontSize, boxWidth, itemHeight) + 10;
        } else {
            height = this.maxHeight;
            width = this._fitCols(titleHeight, labelFont, boxWidth, itemHeight) + 10;
        }
        this.width = Math.min(width, options.maxWidth || this.maxWidth);
        this.height = Math.min(height, options.maxHeight || this.maxHeight);
    }
    _fitRows(titleHeight, fontSize, boxWidth, itemHeight) {
        const { ctx, maxWidth, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const lineWidths = this.lineWidths = [
            0
        ];
        const lineHeight = itemHeight + padding;
        let totalHeight = titleHeight;
        ctx.textAlign = "left";
        ctx.textBaseline = "middle";
        let row = -1;
        let top = -lineHeight;
        this.legendItems.forEach((legendItem, i)=>{
            const itemWidth = boxWidth + fontSize / 2 + ctx.measureText(legendItem.text).width;
            if (i === 0 || lineWidths[lineWidths.length - 1] + itemWidth + 2 * padding > maxWidth) {
                totalHeight += lineHeight;
                lineWidths[lineWidths.length - (i > 0 ? 0 : 1)] = 0;
                top += lineHeight;
                row++;
            }
            hitboxes[i] = {
                left: 0,
                top,
                row,
                width: itemWidth,
                height: itemHeight
            };
            lineWidths[lineWidths.length - 1] += itemWidth + padding;
        });
        return totalHeight;
    }
    _fitCols(titleHeight, labelFont, boxWidth, _itemHeight) {
        const { ctx, maxHeight, options: { labels: { padding } } } = this;
        const hitboxes = this.legendHitBoxes = [];
        const columnSizes = this.columnSizes = [];
        const heightLimit = maxHeight - titleHeight;
        let totalWidth = padding;
        let currentColWidth = 0;
        let currentColHeight = 0;
        let left = 0;
        let col = 0;
        this.legendItems.forEach((legendItem, i)=>{
            const { itemWidth, itemHeight } = calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight);
            if (i > 0 && currentColHeight + itemHeight + 2 * padding > heightLimit) {
                totalWidth += currentColWidth + padding;
                columnSizes.push({
                    width: currentColWidth,
                    height: currentColHeight
                });
                left += currentColWidth + padding;
                col++;
                currentColWidth = currentColHeight = 0;
            }
            hitboxes[i] = {
                left,
                top: currentColHeight,
                col,
                width: itemWidth,
                height: itemHeight
            };
            currentColWidth = Math.max(currentColWidth, itemWidth);
            currentColHeight += itemHeight + padding;
        });
        totalWidth += currentColWidth;
        columnSizes.push({
            width: currentColWidth,
            height: currentColHeight
        });
        return totalWidth;
    }
    adjustHitBoxes() {
        if (!this.options.display) return;
        const titleHeight = this._computeTitleHeight();
        const { legendHitBoxes: hitboxes, options: { align, labels: { padding }, rtl } } = this;
        const rtlHelper = (0, _helpersSegmentJs.az)(rtl, this.left, this.width);
        if (this.isHorizontal()) {
            let row = 0;
            let left = (0, _helpersSegmentJs.a2)(align, this.left + padding, this.right - this.lineWidths[row]);
            for (const hitbox of hitboxes){
                if (row !== hitbox.row) {
                    row = hitbox.row;
                    left = (0, _helpersSegmentJs.a2)(align, this.left + padding, this.right - this.lineWidths[row]);
                }
                hitbox.top += this.top + titleHeight + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(left), hitbox.width);
                left += hitbox.width + padding;
            }
        } else {
            let col = 0;
            let top = (0, _helpersSegmentJs.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
            for (const hitbox of hitboxes){
                if (hitbox.col !== col) {
                    col = hitbox.col;
                    top = (0, _helpersSegmentJs.a2)(align, this.top + titleHeight + padding, this.bottom - this.columnSizes[col].height);
                }
                hitbox.top = top;
                hitbox.left += this.left + padding;
                hitbox.left = rtlHelper.leftForLtr(rtlHelper.x(hitbox.left), hitbox.width);
                top += hitbox.height + padding;
            }
        }
    }
    isHorizontal() {
        return this.options.position === "top" || this.options.position === "bottom";
    }
    draw() {
        if (this.options.display) {
            const ctx = this.ctx;
            (0, _helpersSegmentJs.Y)(ctx, this);
            this._draw();
            (0, _helpersSegmentJs.$)(ctx);
        }
    }
    _draw() {
        const { options: opts, columnSizes, lineWidths, ctx } = this;
        const { align, labels: labelOpts } = opts;
        const defaultColor = (0, _helpersSegmentJs.d).color;
        const rtlHelper = (0, _helpersSegmentJs.az)(opts.rtl, this.left, this.width);
        const labelFont = (0, _helpersSegmentJs.a0)(labelOpts.font);
        const { padding } = labelOpts;
        const fontSize = labelFont.size;
        const halfFontSize = fontSize / 2;
        let cursor;
        this.drawTitle();
        ctx.textAlign = rtlHelper.textAlign("left");
        ctx.textBaseline = "middle";
        ctx.lineWidth = 0.5;
        ctx.font = labelFont.string;
        const { boxWidth, boxHeight, itemHeight } = getBoxSize(labelOpts, fontSize);
        const drawLegendBox = function(x, y, legendItem) {
            if (isNaN(boxWidth) || boxWidth <= 0 || isNaN(boxHeight) || boxHeight < 0) return;
            ctx.save();
            const lineWidth = (0, _helpersSegmentJs.v)(legendItem.lineWidth, 1);
            ctx.fillStyle = (0, _helpersSegmentJs.v)(legendItem.fillStyle, defaultColor);
            ctx.lineCap = (0, _helpersSegmentJs.v)(legendItem.lineCap, "butt");
            ctx.lineDashOffset = (0, _helpersSegmentJs.v)(legendItem.lineDashOffset, 0);
            ctx.lineJoin = (0, _helpersSegmentJs.v)(legendItem.lineJoin, "miter");
            ctx.lineWidth = lineWidth;
            ctx.strokeStyle = (0, _helpersSegmentJs.v)(legendItem.strokeStyle, defaultColor);
            ctx.setLineDash((0, _helpersSegmentJs.v)(legendItem.lineDash, []));
            if (labelOpts.usePointStyle) {
                const drawOptions = {
                    radius: boxHeight * Math.SQRT2 / 2,
                    pointStyle: legendItem.pointStyle,
                    rotation: legendItem.rotation,
                    borderWidth: lineWidth
                };
                const centerX = rtlHelper.xPlus(x, boxWidth / 2);
                const centerY = y + halfFontSize;
                (0, _helpersSegmentJs.aD)(ctx, drawOptions, centerX, centerY, labelOpts.pointStyleWidth && boxWidth);
            } else {
                const yBoxTop = y + Math.max((fontSize - boxHeight) / 2, 0);
                const xBoxLeft = rtlHelper.leftForLtr(x, boxWidth);
                const borderRadius = (0, _helpersSegmentJs.aw)(legendItem.borderRadius);
                ctx.beginPath();
                if (Object.values(borderRadius).some((v)=>v !== 0)) (0, _helpersSegmentJs.au)(ctx, {
                    x: xBoxLeft,
                    y: yBoxTop,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                else ctx.rect(xBoxLeft, yBoxTop, boxWidth, boxHeight);
                ctx.fill();
                if (lineWidth !== 0) ctx.stroke();
            }
            ctx.restore();
        };
        const fillText = function(x, y, legendItem) {
            (0, _helpersSegmentJs.Z)(ctx, legendItem.text, x, y + itemHeight / 2, labelFont, {
                strikethrough: legendItem.hidden,
                textAlign: rtlHelper.textAlign(legendItem.textAlign)
            });
        };
        const isHorizontal = this.isHorizontal();
        const titleHeight = this._computeTitleHeight();
        if (isHorizontal) cursor = {
            x: (0, _helpersSegmentJs.a2)(align, this.left + padding, this.right - lineWidths[0]),
            y: this.top + padding + titleHeight,
            line: 0
        };
        else cursor = {
            x: this.left + padding,
            y: (0, _helpersSegmentJs.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[0].height),
            line: 0
        };
        (0, _helpersSegmentJs.aA)(this.ctx, opts.textDirection);
        const lineHeight = itemHeight + padding;
        this.legendItems.forEach((legendItem, i)=>{
            ctx.strokeStyle = legendItem.fontColor;
            ctx.fillStyle = legendItem.fontColor;
            const textWidth = ctx.measureText(legendItem.text).width;
            const textAlign = rtlHelper.textAlign(legendItem.textAlign || (legendItem.textAlign = labelOpts.textAlign));
            const width = boxWidth + halfFontSize + textWidth;
            let x = cursor.x;
            let y = cursor.y;
            rtlHelper.setWidth(this.width);
            if (isHorizontal) {
                if (i > 0 && x + width + padding > this.right) {
                    y = cursor.y += lineHeight;
                    cursor.line++;
                    x = cursor.x = (0, _helpersSegmentJs.a2)(align, this.left + padding, this.right - lineWidths[cursor.line]);
                }
            } else if (i > 0 && y + lineHeight > this.bottom) {
                x = cursor.x = x + columnSizes[cursor.line].width + padding;
                cursor.line++;
                y = cursor.y = (0, _helpersSegmentJs.a2)(align, this.top + titleHeight + padding, this.bottom - columnSizes[cursor.line].height);
            }
            const realX = rtlHelper.x(x);
            drawLegendBox(realX, y, legendItem);
            x = (0, _helpersSegmentJs.aB)(textAlign, x + boxWidth + halfFontSize, isHorizontal ? x + width : this.right, opts.rtl);
            fillText(rtlHelper.x(x), y, legendItem);
            if (isHorizontal) cursor.x += width + padding;
            else if (typeof legendItem.text !== "string") {
                const fontLineHeight = labelFont.lineHeight;
                cursor.y += calculateLegendItemHeight(legendItem, fontLineHeight) + padding;
            } else cursor.y += lineHeight;
        });
        (0, _helpersSegmentJs.aC)(this.ctx, opts.textDirection);
    }
    drawTitle() {
        const opts = this.options;
        const titleOpts = opts.title;
        const titleFont = (0, _helpersSegmentJs.a0)(titleOpts.font);
        const titlePadding = (0, _helpersSegmentJs.E)(titleOpts.padding);
        if (!titleOpts.display) return;
        const rtlHelper = (0, _helpersSegmentJs.az)(opts.rtl, this.left, this.width);
        const ctx = this.ctx;
        const position = titleOpts.position;
        const halfFontSize = titleFont.size / 2;
        const topPaddingPlusHalfFontSize = titlePadding.top + halfFontSize;
        let y;
        let left = this.left;
        let maxWidth = this.width;
        if (this.isHorizontal()) {
            maxWidth = Math.max(...this.lineWidths);
            y = this.top + topPaddingPlusHalfFontSize;
            left = (0, _helpersSegmentJs.a2)(opts.align, left, this.right - maxWidth);
        } else {
            const maxHeight = this.columnSizes.reduce((acc, size)=>Math.max(acc, size.height), 0);
            y = topPaddingPlusHalfFontSize + (0, _helpersSegmentJs.a2)(opts.align, this.top, this.bottom - maxHeight - opts.labels.padding - this._computeTitleHeight());
        }
        const x = (0, _helpersSegmentJs.a2)(position, left, left + maxWidth);
        ctx.textAlign = rtlHelper.textAlign((0, _helpersSegmentJs.a1)(position));
        ctx.textBaseline = "middle";
        ctx.strokeStyle = titleOpts.color;
        ctx.fillStyle = titleOpts.color;
        ctx.font = titleFont.string;
        (0, _helpersSegmentJs.Z)(ctx, titleOpts.text, x, y, titleFont);
    }
    _computeTitleHeight() {
        const titleOpts = this.options.title;
        const titleFont = (0, _helpersSegmentJs.a0)(titleOpts.font);
        const titlePadding = (0, _helpersSegmentJs.E)(titleOpts.padding);
        return titleOpts.display ? titleFont.lineHeight + titlePadding.height : 0;
    }
    _getLegendItemAt(x, y) {
        let i, hitBox, lh;
        if ((0, _helpersSegmentJs.aj)(x, this.left, this.right) && (0, _helpersSegmentJs.aj)(y, this.top, this.bottom)) {
            lh = this.legendHitBoxes;
            for(i = 0; i < lh.length; ++i){
                hitBox = lh[i];
                if ((0, _helpersSegmentJs.aj)(x, hitBox.left, hitBox.left + hitBox.width) && (0, _helpersSegmentJs.aj)(y, hitBox.top, hitBox.top + hitBox.height)) return this.legendItems[i];
            }
        }
        return null;
    }
    handleEvent(e) {
        const opts = this.options;
        if (!isListened(e.type, opts)) return;
        const hoveredItem = this._getLegendItemAt(e.x, e.y);
        if (e.type === "mousemove" || e.type === "mouseout") {
            const previous = this._hoveredItem;
            const sameItem = itemsEqual(previous, hoveredItem);
            if (previous && !sameItem) (0, _helpersSegmentJs.Q)(opts.onLeave, [
                e,
                previous,
                this
            ], this);
            this._hoveredItem = hoveredItem;
            if (hoveredItem && !sameItem) (0, _helpersSegmentJs.Q)(opts.onHover, [
                e,
                hoveredItem,
                this
            ], this);
        } else if (hoveredItem) (0, _helpersSegmentJs.Q)(opts.onClick, [
            e,
            hoveredItem,
            this
        ], this);
    }
}
function calculateItemSize(boxWidth, labelFont, ctx, legendItem, _itemHeight) {
    const itemWidth = calculateItemWidth(legendItem, boxWidth, labelFont, ctx);
    const itemHeight = calculateItemHeight(_itemHeight, legendItem, labelFont.lineHeight);
    return {
        itemWidth,
        itemHeight
    };
}
function calculateItemWidth(legendItem, boxWidth, labelFont, ctx) {
    let legendItemText = legendItem.text;
    if (legendItemText && typeof legendItemText !== "string") legendItemText = legendItemText.reduce((a, b)=>a.length > b.length ? a : b);
    return boxWidth + labelFont.size / 2 + ctx.measureText(legendItemText).width;
}
function calculateItemHeight(_itemHeight, legendItem, fontLineHeight) {
    let itemHeight = _itemHeight;
    if (typeof legendItem.text !== "string") itemHeight = calculateLegendItemHeight(legendItem, fontLineHeight);
    return itemHeight;
}
function calculateLegendItemHeight(legendItem, fontLineHeight) {
    const labelHeight = legendItem.text ? legendItem.text.length : 0;
    return fontLineHeight * labelHeight;
}
function isListened(type, opts) {
    if ((type === "mousemove" || type === "mouseout") && (opts.onHover || opts.onLeave)) return true;
    if (opts.onClick && (type === "click" || type === "mouseup")) return true;
    return false;
}
var plugin_legend = {
    id: "legend",
    _element: Legend,
    start (chart, _args, options) {
        const legend = chart.legend = new Legend({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, legend, options);
        layouts.addBox(chart, legend);
    },
    stop (chart) {
        layouts.removeBox(chart, chart.legend);
        delete chart.legend;
    },
    beforeUpdate (chart, _args, options) {
        const legend = chart.legend;
        layouts.configure(chart, legend, options);
        legend.options = options;
    },
    afterUpdate (chart) {
        const legend = chart.legend;
        legend.buildLabels();
        legend.adjustHitBoxes();
    },
    afterEvent (chart, args) {
        if (!args.replay) chart.legend.handleEvent(args.event);
    },
    defaults: {
        display: true,
        position: "top",
        align: "center",
        fullSize: true,
        reverse: false,
        weight: 1000,
        onClick (e, legendItem, legend) {
            const index = legendItem.datasetIndex;
            const ci = legend.chart;
            if (ci.isDatasetVisible(index)) {
                ci.hide(index);
                legendItem.hidden = true;
            } else {
                ci.show(index);
                legendItem.hidden = false;
            }
        },
        onHover: null,
        onLeave: null,
        labels: {
            color: (ctx)=>ctx.chart.options.color,
            boxWidth: 40,
            padding: 10,
            generateLabels (chart) {
                const datasets = chart.data.datasets;
                const { labels: { usePointStyle, pointStyle, textAlign, color, useBorderRadius, borderRadius } } = chart.legend.options;
                return chart._getSortedDatasetMetas().map((meta)=>{
                    const style = meta.controller.getStyle(usePointStyle ? 0 : undefined);
                    const borderWidth = (0, _helpersSegmentJs.E)(style.borderWidth);
                    return {
                        text: datasets[meta.index].label,
                        fillStyle: style.backgroundColor,
                        fontColor: color,
                        hidden: !meta.visible,
                        lineCap: style.borderCapStyle,
                        lineDash: style.borderDash,
                        lineDashOffset: style.borderDashOffset,
                        lineJoin: style.borderJoinStyle,
                        lineWidth: (borderWidth.width + borderWidth.height) / 4,
                        strokeStyle: style.borderColor,
                        pointStyle: pointStyle || style.pointStyle,
                        rotation: style.rotation,
                        textAlign: textAlign || style.textAlign,
                        borderRadius: useBorderRadius && (borderRadius || style.borderRadius),
                        datasetIndex: meta.index
                    };
                }, this);
            }
        },
        title: {
            color: (ctx)=>ctx.chart.options.color,
            display: false,
            position: "center",
            text: ""
        }
    },
    descriptors: {
        _scriptable: (name)=>!name.startsWith("on"),
        labels: {
            _scriptable: (name)=>![
                    "generateLabels",
                    "filter",
                    "sort"
                ].includes(name)
        }
    }
};
class Title extends Element {
    constructor(config){
        super();
        this.chart = config.chart;
        this.options = config.options;
        this.ctx = config.ctx;
        this._padding = undefined;
        this.top = undefined;
        this.bottom = undefined;
        this.left = undefined;
        this.right = undefined;
        this.width = undefined;
        this.height = undefined;
        this.position = undefined;
        this.weight = undefined;
        this.fullSize = undefined;
    }
    update(maxWidth, maxHeight) {
        const opts = this.options;
        this.left = 0;
        this.top = 0;
        if (!opts.display) {
            this.width = this.height = this.right = this.bottom = 0;
            return;
        }
        this.width = this.right = maxWidth;
        this.height = this.bottom = maxHeight;
        const lineCount = (0, _helpersSegmentJs.b)(opts.text) ? opts.text.length : 1;
        this._padding = (0, _helpersSegmentJs.E)(opts.padding);
        const textSize = lineCount * (0, _helpersSegmentJs.a0)(opts.font).lineHeight + this._padding.height;
        if (this.isHorizontal()) this.height = textSize;
        else this.width = textSize;
    }
    isHorizontal() {
        const pos = this.options.position;
        return pos === "top" || pos === "bottom";
    }
    _drawArgs(offset) {
        const { top, left, bottom, right, options } = this;
        const align = options.align;
        let rotation = 0;
        let maxWidth, titleX, titleY;
        if (this.isHorizontal()) {
            titleX = (0, _helpersSegmentJs.a2)(align, left, right);
            titleY = top + offset;
            maxWidth = right - left;
        } else {
            if (options.position === "left") {
                titleX = left + offset;
                titleY = (0, _helpersSegmentJs.a2)(align, bottom, top);
                rotation = (0, _helpersSegmentJs.P) * -0.5;
            } else {
                titleX = right - offset;
                titleY = (0, _helpersSegmentJs.a2)(align, top, bottom);
                rotation = (0, _helpersSegmentJs.P) * 0.5;
            }
            maxWidth = bottom - top;
        }
        return {
            titleX,
            titleY,
            maxWidth,
            rotation
        };
    }
    draw() {
        const ctx = this.ctx;
        const opts = this.options;
        if (!opts.display) return;
        const fontOpts = (0, _helpersSegmentJs.a0)(opts.font);
        const lineHeight = fontOpts.lineHeight;
        const offset = lineHeight / 2 + this._padding.top;
        const { titleX, titleY, maxWidth, rotation } = this._drawArgs(offset);
        (0, _helpersSegmentJs.Z)(ctx, opts.text, 0, 0, fontOpts, {
            color: opts.color,
            maxWidth,
            rotation,
            textAlign: (0, _helpersSegmentJs.a1)(opts.align),
            textBaseline: "middle",
            translation: [
                titleX,
                titleY
            ]
        });
    }
}
function createTitle(chart, titleOpts) {
    const title = new Title({
        ctx: chart.ctx,
        options: titleOpts,
        chart
    });
    layouts.configure(chart, title, titleOpts);
    layouts.addBox(chart, title);
    chart.titleBlock = title;
}
var plugin_title = {
    id: "title",
    _element: Title,
    start (chart, _args, options) {
        createTitle(chart, options);
    },
    stop (chart) {
        const titleBlock = chart.titleBlock;
        layouts.removeBox(chart, titleBlock);
        delete chart.titleBlock;
    },
    beforeUpdate (chart, _args, options) {
        const title = chart.titleBlock;
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: "center",
        display: false,
        font: {
            weight: "bold"
        },
        fullSize: true,
        padding: 10,
        position: "top",
        text: "",
        weight: 2000
    },
    defaultRoutes: {
        color: "color"
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const map = new WeakMap();
var plugin_subtitle = {
    id: "subtitle",
    start (chart, _args, options) {
        const title = new Title({
            ctx: chart.ctx,
            options,
            chart
        });
        layouts.configure(chart, title, options);
        layouts.addBox(chart, title);
        map.set(chart, title);
    },
    stop (chart) {
        layouts.removeBox(chart, map.get(chart));
        map.delete(chart);
    },
    beforeUpdate (chart, _args, options) {
        const title = map.get(chart);
        layouts.configure(chart, title, options);
        title.options = options;
    },
    defaults: {
        align: "center",
        display: false,
        font: {
            weight: "normal"
        },
        fullSize: true,
        padding: 0,
        position: "top",
        text: "",
        weight: 1500
    },
    defaultRoutes: {
        color: "color"
    },
    descriptors: {
        _scriptable: true,
        _indexable: false
    }
};
const positioners = {
    average (items) {
        if (!items.length) return false;
        let i, len;
        let xSet = new Set();
        let y = 0;
        let count = 0;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const pos = el.tooltipPosition();
                xSet.add(pos.x);
                y += pos.y;
                ++count;
            }
        }
        const xAverage = [
            ...xSet
        ].reduce((a, b)=>a + b) / xSet.size;
        return {
            x: xAverage,
            y: y / count
        };
    },
    nearest (items, eventPosition) {
        if (!items.length) return false;
        let x = eventPosition.x;
        let y = eventPosition.y;
        let minDistance = Number.POSITIVE_INFINITY;
        let i, len, nearestElement;
        for(i = 0, len = items.length; i < len; ++i){
            const el = items[i].element;
            if (el && el.hasValue()) {
                const center = el.getCenterPoint();
                const d = (0, _helpersSegmentJs.aE)(eventPosition, center);
                if (d < minDistance) {
                    minDistance = d;
                    nearestElement = el;
                }
            }
        }
        if (nearestElement) {
            const tp = nearestElement.tooltipPosition();
            x = tp.x;
            y = tp.y;
        }
        return {
            x,
            y
        };
    }
};
function pushOrConcat(base, toPush) {
    if (toPush) {
        if ((0, _helpersSegmentJs.b)(toPush)) Array.prototype.push.apply(base, toPush);
        else base.push(toPush);
    }
    return base;
}
function splitNewlines(str) {
    if ((typeof str === "string" || str instanceof String) && str.indexOf("\n") > -1) return str.split("\n");
    return str;
}
function createTooltipItem(chart, item) {
    const { element, datasetIndex, index } = item;
    const controller = chart.getDatasetMeta(datasetIndex).controller;
    const { label, value } = controller.getLabelAndValue(index);
    return {
        chart,
        label,
        parsed: controller.getParsed(index),
        raw: chart.data.datasets[datasetIndex].data[index],
        formattedValue: value,
        dataset: controller.getDataset(),
        dataIndex: index,
        datasetIndex,
        element
    };
}
function getTooltipSize(tooltip, options) {
    const ctx = tooltip.chart.ctx;
    const { body, footer, title } = tooltip;
    const { boxWidth, boxHeight } = options;
    const bodyFont = (0, _helpersSegmentJs.a0)(options.bodyFont);
    const titleFont = (0, _helpersSegmentJs.a0)(options.titleFont);
    const footerFont = (0, _helpersSegmentJs.a0)(options.footerFont);
    const titleLineCount = title.length;
    const footerLineCount = footer.length;
    const bodyLineItemCount = body.length;
    const padding = (0, _helpersSegmentJs.E)(options.padding);
    let height = padding.height;
    let width = 0;
    let combinedBodyLength = body.reduce((count, bodyItem)=>count + bodyItem.before.length + bodyItem.lines.length + bodyItem.after.length, 0);
    combinedBodyLength += tooltip.beforeBody.length + tooltip.afterBody.length;
    if (titleLineCount) height += titleLineCount * titleFont.lineHeight + (titleLineCount - 1) * options.titleSpacing + options.titleMarginBottom;
    if (combinedBodyLength) {
        const bodyLineHeight = options.displayColors ? Math.max(boxHeight, bodyFont.lineHeight) : bodyFont.lineHeight;
        height += bodyLineItemCount * bodyLineHeight + (combinedBodyLength - bodyLineItemCount) * bodyFont.lineHeight + (combinedBodyLength - 1) * options.bodySpacing;
    }
    if (footerLineCount) height += options.footerMarginTop + footerLineCount * footerFont.lineHeight + (footerLineCount - 1) * options.footerSpacing;
    let widthPadding = 0;
    const maxLineWidth = function(line) {
        width = Math.max(width, ctx.measureText(line).width + widthPadding);
    };
    ctx.save();
    ctx.font = titleFont.string;
    (0, _helpersSegmentJs.F)(tooltip.title, maxLineWidth);
    ctx.font = bodyFont.string;
    (0, _helpersSegmentJs.F)(tooltip.beforeBody.concat(tooltip.afterBody), maxLineWidth);
    widthPadding = options.displayColors ? boxWidth + 2 + options.boxPadding : 0;
    (0, _helpersSegmentJs.F)(body, (bodyItem)=>{
        (0, _helpersSegmentJs.F)(bodyItem.before, maxLineWidth);
        (0, _helpersSegmentJs.F)(bodyItem.lines, maxLineWidth);
        (0, _helpersSegmentJs.F)(bodyItem.after, maxLineWidth);
    });
    widthPadding = 0;
    ctx.font = footerFont.string;
    (0, _helpersSegmentJs.F)(tooltip.footer, maxLineWidth);
    ctx.restore();
    width += padding.width;
    return {
        width,
        height
    };
}
function determineYAlign(chart, size) {
    const { y, height } = size;
    if (y < height / 2) return "top";
    else if (y > chart.height - height / 2) return "bottom";
    return "center";
}
function doesNotFitWithAlign(xAlign, chart, options, size) {
    const { x, width } = size;
    const caret = options.caretSize + options.caretPadding;
    if (xAlign === "left" && x + width + caret > chart.width) return true;
    if (xAlign === "right" && x - width - caret < 0) return true;
}
function determineXAlign(chart, options, size, yAlign) {
    const { x, width } = size;
    const { width: chartWidth, chartArea: { left, right } } = chart;
    let xAlign = "center";
    if (yAlign === "center") xAlign = x <= (left + right) / 2 ? "left" : "right";
    else if (x <= width / 2) xAlign = "left";
    else if (x >= chartWidth - width / 2) xAlign = "right";
    if (doesNotFitWithAlign(xAlign, chart, options, size)) xAlign = "center";
    return xAlign;
}
function determineAlignment(chart, options, size) {
    const yAlign = size.yAlign || options.yAlign || determineYAlign(chart, size);
    return {
        xAlign: size.xAlign || options.xAlign || determineXAlign(chart, options, size, yAlign),
        yAlign
    };
}
function alignX(size, xAlign) {
    let { x, width } = size;
    if (xAlign === "right") x -= width;
    else if (xAlign === "center") x -= width / 2;
    return x;
}
function alignY(size, yAlign, paddingAndSize) {
    let { y, height } = size;
    if (yAlign === "top") y += paddingAndSize;
    else if (yAlign === "bottom") y -= height + paddingAndSize;
    else y -= height / 2;
    return y;
}
function getBackgroundPoint(options, size, alignment, chart) {
    const { caretSize, caretPadding, cornerRadius } = options;
    const { xAlign, yAlign } = alignment;
    const paddingAndSize = caretSize + caretPadding;
    const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentJs.aw)(cornerRadius);
    let x = alignX(size, xAlign);
    const y = alignY(size, yAlign, paddingAndSize);
    if (yAlign === "center") {
        if (xAlign === "left") x += paddingAndSize;
        else if (xAlign === "right") x -= paddingAndSize;
    } else if (xAlign === "left") x -= Math.max(topLeft, bottomLeft) + caretSize;
    else if (xAlign === "right") x += Math.max(topRight, bottomRight) + caretSize;
    return {
        x: (0, _helpersSegmentJs.S)(x, 0, chart.width - size.width),
        y: (0, _helpersSegmentJs.S)(y, 0, chart.height - size.height)
    };
}
function getAlignedX(tooltip, align, options) {
    const padding = (0, _helpersSegmentJs.E)(options.padding);
    return align === "center" ? tooltip.x + tooltip.width / 2 : align === "right" ? tooltip.x + tooltip.width - padding.right : tooltip.x + padding.left;
}
function getBeforeAfterBodyLines(callback) {
    return pushOrConcat([], splitNewlines(callback));
}
function createTooltipContext(parent, tooltip, tooltipItems) {
    return (0, _helpersSegmentJs.j)(parent, {
        tooltip,
        tooltipItems,
        type: "tooltip"
    });
}
function overrideCallbacks(callbacks, context) {
    const override = context && context.dataset && context.dataset.tooltip && context.dataset.tooltip.callbacks;
    return override ? callbacks.override(override) : callbacks;
}
const defaultCallbacks = {
    beforeTitle: (0, _helpersSegmentJs.aF),
    title (tooltipItems) {
        if (tooltipItems.length > 0) {
            const item = tooltipItems[0];
            const labels = item.chart.data.labels;
            const labelCount = labels ? labels.length : 0;
            if (this && this.options && this.options.mode === "dataset") return item.dataset.label || "";
            else if (item.label) return item.label;
            else if (labelCount > 0 && item.dataIndex < labelCount) return labels[item.dataIndex];
        }
        return "";
    },
    afterTitle: (0, _helpersSegmentJs.aF),
    beforeBody: (0, _helpersSegmentJs.aF),
    beforeLabel: (0, _helpersSegmentJs.aF),
    label (tooltipItem) {
        if (this && this.options && this.options.mode === "dataset") return tooltipItem.label + ": " + tooltipItem.formattedValue || tooltipItem.formattedValue;
        let label = tooltipItem.dataset.label || "";
        if (label) label += ": ";
        const value = tooltipItem.formattedValue;
        if (!(0, _helpersSegmentJs.k)(value)) label += value;
        return label;
    },
    labelColor (tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
            borderColor: options.borderColor,
            backgroundColor: options.backgroundColor,
            borderWidth: options.borderWidth,
            borderDash: options.borderDash,
            borderDashOffset: options.borderDashOffset,
            borderRadius: 0
        };
    },
    labelTextColor () {
        return this.options.bodyColor;
    },
    labelPointStyle (tooltipItem) {
        const meta = tooltipItem.chart.getDatasetMeta(tooltipItem.datasetIndex);
        const options = meta.controller.getStyle(tooltipItem.dataIndex);
        return {
            pointStyle: options.pointStyle,
            rotation: options.rotation
        };
    },
    afterLabel: (0, _helpersSegmentJs.aF),
    afterBody: (0, _helpersSegmentJs.aF),
    beforeFooter: (0, _helpersSegmentJs.aF),
    footer: (0, _helpersSegmentJs.aF),
    afterFooter: (0, _helpersSegmentJs.aF)
};
function invokeCallbackWithFallback(callbacks, name, ctx, arg) {
    const result = callbacks[name].call(ctx, arg);
    if (typeof result === "undefined") return defaultCallbacks[name].call(ctx, arg);
    return result;
}
class Tooltip extends Element {
    static positioners = positioners;
    constructor(config){
        super();
        this.opacity = 0;
        this._active = [];
        this._eventPosition = undefined;
        this._size = undefined;
        this._cachedAnimations = undefined;
        this._tooltipItems = [];
        this.$animations = undefined;
        this.$context = undefined;
        this.chart = config.chart;
        this.options = config.options;
        this.dataPoints = undefined;
        this.title = undefined;
        this.beforeBody = undefined;
        this.body = undefined;
        this.afterBody = undefined;
        this.footer = undefined;
        this.xAlign = undefined;
        this.yAlign = undefined;
        this.x = undefined;
        this.y = undefined;
        this.height = undefined;
        this.width = undefined;
        this.caretX = undefined;
        this.caretY = undefined;
        this.labelColors = undefined;
        this.labelPointStyles = undefined;
        this.labelTextColors = undefined;
    }
    initialize(options) {
        this.options = options;
        this._cachedAnimations = undefined;
        this.$context = undefined;
    }
    _resolveAnimations() {
        const cached = this._cachedAnimations;
        if (cached) return cached;
        const chart = this.chart;
        const options = this.options.setContext(this.getContext());
        const opts = options.enabled && chart.options.animation && options.animations;
        const animations = new Animations(this.chart, opts);
        if (opts._cacheable) this._cachedAnimations = Object.freeze(animations);
        return animations;
    }
    getContext() {
        return this.$context || (this.$context = createTooltipContext(this.chart.getContext(), this, this._tooltipItems));
    }
    getTitle(context, options) {
        const { callbacks } = options;
        const beforeTitle = invokeCallbackWithFallback(callbacks, "beforeTitle", this, context);
        const title = invokeCallbackWithFallback(callbacks, "title", this, context);
        const afterTitle = invokeCallbackWithFallback(callbacks, "afterTitle", this, context);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeTitle));
        lines = pushOrConcat(lines, splitNewlines(title));
        lines = pushOrConcat(lines, splitNewlines(afterTitle));
        return lines;
    }
    getBeforeBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "beforeBody", this, tooltipItems));
    }
    getBody(tooltipItems, options) {
        const { callbacks } = options;
        const bodyItems = [];
        (0, _helpersSegmentJs.F)(tooltipItems, (context)=>{
            const bodyItem = {
                before: [],
                lines: [],
                after: []
            };
            const scoped = overrideCallbacks(callbacks, context);
            pushOrConcat(bodyItem.before, splitNewlines(invokeCallbackWithFallback(scoped, "beforeLabel", this, context)));
            pushOrConcat(bodyItem.lines, invokeCallbackWithFallback(scoped, "label", this, context));
            pushOrConcat(bodyItem.after, splitNewlines(invokeCallbackWithFallback(scoped, "afterLabel", this, context)));
            bodyItems.push(bodyItem);
        });
        return bodyItems;
    }
    getAfterBody(tooltipItems, options) {
        return getBeforeAfterBodyLines(invokeCallbackWithFallback(options.callbacks, "afterBody", this, tooltipItems));
    }
    getFooter(tooltipItems, options) {
        const { callbacks } = options;
        const beforeFooter = invokeCallbackWithFallback(callbacks, "beforeFooter", this, tooltipItems);
        const footer = invokeCallbackWithFallback(callbacks, "footer", this, tooltipItems);
        const afterFooter = invokeCallbackWithFallback(callbacks, "afterFooter", this, tooltipItems);
        let lines = [];
        lines = pushOrConcat(lines, splitNewlines(beforeFooter));
        lines = pushOrConcat(lines, splitNewlines(footer));
        lines = pushOrConcat(lines, splitNewlines(afterFooter));
        return lines;
    }
    _createItems(options) {
        const active = this._active;
        const data = this.chart.data;
        const labelColors = [];
        const labelPointStyles = [];
        const labelTextColors = [];
        let tooltipItems = [];
        let i, len;
        for(i = 0, len = active.length; i < len; ++i)tooltipItems.push(createTooltipItem(this.chart, active[i]));
        if (options.filter) tooltipItems = tooltipItems.filter((element, index, array)=>options.filter(element, index, array, data));
        if (options.itemSort) tooltipItems = tooltipItems.sort((a, b)=>options.itemSort(a, b, data));
        (0, _helpersSegmentJs.F)(tooltipItems, (context)=>{
            const scoped = overrideCallbacks(options.callbacks, context);
            labelColors.push(invokeCallbackWithFallback(scoped, "labelColor", this, context));
            labelPointStyles.push(invokeCallbackWithFallback(scoped, "labelPointStyle", this, context));
            labelTextColors.push(invokeCallbackWithFallback(scoped, "labelTextColor", this, context));
        });
        this.labelColors = labelColors;
        this.labelPointStyles = labelPointStyles;
        this.labelTextColors = labelTextColors;
        this.dataPoints = tooltipItems;
        return tooltipItems;
    }
    update(changed, replay) {
        const options = this.options.setContext(this.getContext());
        const active = this._active;
        let properties;
        let tooltipItems = [];
        if (!active.length) {
            if (this.opacity !== 0) properties = {
                opacity: 0
            };
        } else {
            const position = positioners[options.position].call(this, active, this._eventPosition);
            tooltipItems = this._createItems(options);
            this.title = this.getTitle(tooltipItems, options);
            this.beforeBody = this.getBeforeBody(tooltipItems, options);
            this.body = this.getBody(tooltipItems, options);
            this.afterBody = this.getAfterBody(tooltipItems, options);
            this.footer = this.getFooter(tooltipItems, options);
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, size);
            const alignment = determineAlignment(this.chart, options, positionAndSize);
            const backgroundPoint = getBackgroundPoint(options, positionAndSize, alignment, this.chart);
            this.xAlign = alignment.xAlign;
            this.yAlign = alignment.yAlign;
            properties = {
                opacity: 1,
                x: backgroundPoint.x,
                y: backgroundPoint.y,
                width: size.width,
                height: size.height,
                caretX: position.x,
                caretY: position.y
            };
        }
        this._tooltipItems = tooltipItems;
        this.$context = undefined;
        if (properties) this._resolveAnimations().update(this, properties);
        if (changed && options.external) options.external.call(this, {
            chart: this.chart,
            tooltip: this,
            replay
        });
    }
    drawCaret(tooltipPoint, ctx, size, options) {
        const caretPosition = this.getCaretPosition(tooltipPoint, size, options);
        ctx.lineTo(caretPosition.x1, caretPosition.y1);
        ctx.lineTo(caretPosition.x2, caretPosition.y2);
        ctx.lineTo(caretPosition.x3, caretPosition.y3);
    }
    getCaretPosition(tooltipPoint, size, options) {
        const { xAlign, yAlign } = this;
        const { caretSize, cornerRadius } = options;
        const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentJs.aw)(cornerRadius);
        const { x: ptX, y: ptY } = tooltipPoint;
        const { width, height } = size;
        let x1, x2, x3, y1, y2, y3;
        if (yAlign === "center") {
            y2 = ptY + height / 2;
            if (xAlign === "left") {
                x1 = ptX;
                x2 = x1 - caretSize;
                y1 = y2 + caretSize;
                y3 = y2 - caretSize;
            } else {
                x1 = ptX + width;
                x2 = x1 + caretSize;
                y1 = y2 - caretSize;
                y3 = y2 + caretSize;
            }
            x3 = x1;
        } else {
            if (xAlign === "left") x2 = ptX + Math.max(topLeft, bottomLeft) + caretSize;
            else if (xAlign === "right") x2 = ptX + width - Math.max(topRight, bottomRight) - caretSize;
            else x2 = this.caretX;
            if (yAlign === "top") {
                y1 = ptY;
                y2 = y1 - caretSize;
                x1 = x2 - caretSize;
                x3 = x2 + caretSize;
            } else {
                y1 = ptY + height;
                y2 = y1 + caretSize;
                x1 = x2 + caretSize;
                x3 = x2 - caretSize;
            }
            y3 = y1;
        }
        return {
            x1,
            x2,
            x3,
            y1,
            y2,
            y3
        };
    }
    drawTitle(pt, ctx, options) {
        const title = this.title;
        const length = title.length;
        let titleFont, titleSpacing, i;
        if (length) {
            const rtlHelper = (0, _helpersSegmentJs.az)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.titleAlign, options);
            ctx.textAlign = rtlHelper.textAlign(options.titleAlign);
            ctx.textBaseline = "middle";
            titleFont = (0, _helpersSegmentJs.a0)(options.titleFont);
            titleSpacing = options.titleSpacing;
            ctx.fillStyle = options.titleColor;
            ctx.font = titleFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(title[i], rtlHelper.x(pt.x), pt.y + titleFont.lineHeight / 2);
                pt.y += titleFont.lineHeight + titleSpacing;
                if (i + 1 === length) pt.y += options.titleMarginBottom - titleSpacing;
            }
        }
    }
    _drawColorBox(ctx, pt, i, rtlHelper, options) {
        const labelColor = this.labelColors[i];
        const labelPointStyle = this.labelPointStyles[i];
        const { boxHeight, boxWidth } = options;
        const bodyFont = (0, _helpersSegmentJs.a0)(options.bodyFont);
        const colorX = getAlignedX(this, "left", options);
        const rtlColorX = rtlHelper.x(colorX);
        const yOffSet = boxHeight < bodyFont.lineHeight ? (bodyFont.lineHeight - boxHeight) / 2 : 0;
        const colorY = pt.y + yOffSet;
        if (options.usePointStyle) {
            const drawOptions = {
                radius: Math.min(boxWidth, boxHeight) / 2,
                pointStyle: labelPointStyle.pointStyle,
                rotation: labelPointStyle.rotation,
                borderWidth: 1
            };
            const centerX = rtlHelper.leftForLtr(rtlColorX, boxWidth) + boxWidth / 2;
            const centerY = colorY + boxHeight / 2;
            ctx.strokeStyle = options.multiKeyBackground;
            ctx.fillStyle = options.multiKeyBackground;
            (0, _helpersSegmentJs.at)(ctx, drawOptions, centerX, centerY);
            ctx.strokeStyle = labelColor.borderColor;
            ctx.fillStyle = labelColor.backgroundColor;
            (0, _helpersSegmentJs.at)(ctx, drawOptions, centerX, centerY);
        } else {
            ctx.lineWidth = (0, _helpersSegmentJs.i)(labelColor.borderWidth) ? Math.max(...Object.values(labelColor.borderWidth)) : labelColor.borderWidth || 1;
            ctx.strokeStyle = labelColor.borderColor;
            ctx.setLineDash(labelColor.borderDash || []);
            ctx.lineDashOffset = labelColor.borderDashOffset || 0;
            const outerX = rtlHelper.leftForLtr(rtlColorX, boxWidth);
            const innerX = rtlHelper.leftForLtr(rtlHelper.xPlus(rtlColorX, 1), boxWidth - 2);
            const borderRadius = (0, _helpersSegmentJs.aw)(labelColor.borderRadius);
            if (Object.values(borderRadius).some((v)=>v !== 0)) {
                ctx.beginPath();
                ctx.fillStyle = options.multiKeyBackground;
                (0, _helpersSegmentJs.au)(ctx, {
                    x: outerX,
                    y: colorY,
                    w: boxWidth,
                    h: boxHeight,
                    radius: borderRadius
                });
                ctx.fill();
                ctx.stroke();
                ctx.fillStyle = labelColor.backgroundColor;
                ctx.beginPath();
                (0, _helpersSegmentJs.au)(ctx, {
                    x: innerX,
                    y: colorY + 1,
                    w: boxWidth - 2,
                    h: boxHeight - 2,
                    radius: borderRadius
                });
                ctx.fill();
            } else {
                ctx.fillStyle = options.multiKeyBackground;
                ctx.fillRect(outerX, colorY, boxWidth, boxHeight);
                ctx.strokeRect(outerX, colorY, boxWidth, boxHeight);
                ctx.fillStyle = labelColor.backgroundColor;
                ctx.fillRect(innerX, colorY + 1, boxWidth - 2, boxHeight - 2);
            }
        }
        ctx.fillStyle = this.labelTextColors[i];
    }
    drawBody(pt, ctx, options) {
        const { body } = this;
        const { bodySpacing, bodyAlign, displayColors, boxHeight, boxWidth, boxPadding } = options;
        const bodyFont = (0, _helpersSegmentJs.a0)(options.bodyFont);
        let bodyLineHeight = bodyFont.lineHeight;
        let xLinePadding = 0;
        const rtlHelper = (0, _helpersSegmentJs.az)(options.rtl, this.x, this.width);
        const fillLineOfText = function(line) {
            ctx.fillText(line, rtlHelper.x(pt.x + xLinePadding), pt.y + bodyLineHeight / 2);
            pt.y += bodyLineHeight + bodySpacing;
        };
        const bodyAlignForCalculation = rtlHelper.textAlign(bodyAlign);
        let bodyItem, textColor, lines, i, j, ilen, jlen;
        ctx.textAlign = bodyAlign;
        ctx.textBaseline = "middle";
        ctx.font = bodyFont.string;
        pt.x = getAlignedX(this, bodyAlignForCalculation, options);
        ctx.fillStyle = options.bodyColor;
        (0, _helpersSegmentJs.F)(this.beforeBody, fillLineOfText);
        xLinePadding = displayColors && bodyAlignForCalculation !== "right" ? bodyAlign === "center" ? boxWidth / 2 + boxPadding : boxWidth + 2 + boxPadding : 0;
        for(i = 0, ilen = body.length; i < ilen; ++i){
            bodyItem = body[i];
            textColor = this.labelTextColors[i];
            ctx.fillStyle = textColor;
            (0, _helpersSegmentJs.F)(bodyItem.before, fillLineOfText);
            lines = bodyItem.lines;
            if (displayColors && lines.length) {
                this._drawColorBox(ctx, pt, i, rtlHelper, options);
                bodyLineHeight = Math.max(bodyFont.lineHeight, boxHeight);
            }
            for(j = 0, jlen = lines.length; j < jlen; ++j){
                fillLineOfText(lines[j]);
                bodyLineHeight = bodyFont.lineHeight;
            }
            (0, _helpersSegmentJs.F)(bodyItem.after, fillLineOfText);
        }
        xLinePadding = 0;
        bodyLineHeight = bodyFont.lineHeight;
        (0, _helpersSegmentJs.F)(this.afterBody, fillLineOfText);
        pt.y -= bodySpacing;
    }
    drawFooter(pt, ctx, options) {
        const footer = this.footer;
        const length = footer.length;
        let footerFont, i;
        if (length) {
            const rtlHelper = (0, _helpersSegmentJs.az)(options.rtl, this.x, this.width);
            pt.x = getAlignedX(this, options.footerAlign, options);
            pt.y += options.footerMarginTop;
            ctx.textAlign = rtlHelper.textAlign(options.footerAlign);
            ctx.textBaseline = "middle";
            footerFont = (0, _helpersSegmentJs.a0)(options.footerFont);
            ctx.fillStyle = options.footerColor;
            ctx.font = footerFont.string;
            for(i = 0; i < length; ++i){
                ctx.fillText(footer[i], rtlHelper.x(pt.x), pt.y + footerFont.lineHeight / 2);
                pt.y += footerFont.lineHeight + options.footerSpacing;
            }
        }
    }
    drawBackground(pt, ctx, tooltipSize, options) {
        const { xAlign, yAlign } = this;
        const { x, y } = pt;
        const { width, height } = tooltipSize;
        const { topLeft, topRight, bottomLeft, bottomRight } = (0, _helpersSegmentJs.aw)(options.cornerRadius);
        ctx.fillStyle = options.backgroundColor;
        ctx.strokeStyle = options.borderColor;
        ctx.lineWidth = options.borderWidth;
        ctx.beginPath();
        ctx.moveTo(x + topLeft, y);
        if (yAlign === "top") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width - topRight, y);
        ctx.quadraticCurveTo(x + width, y, x + width, y + topRight);
        if (yAlign === "center" && xAlign === "right") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + width, y + height - bottomRight);
        ctx.quadraticCurveTo(x + width, y + height, x + width - bottomRight, y + height);
        if (yAlign === "bottom") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x + bottomLeft, y + height);
        ctx.quadraticCurveTo(x, y + height, x, y + height - bottomLeft);
        if (yAlign === "center" && xAlign === "left") this.drawCaret(pt, ctx, tooltipSize, options);
        ctx.lineTo(x, y + topLeft);
        ctx.quadraticCurveTo(x, y, x + topLeft, y);
        ctx.closePath();
        ctx.fill();
        if (options.borderWidth > 0) ctx.stroke();
    }
    _updateAnimationTarget(options) {
        const chart = this.chart;
        const anims = this.$animations;
        const animX = anims && anims.x;
        const animY = anims && anims.y;
        if (animX || animY) {
            const position = positioners[options.position].call(this, this._active, this._eventPosition);
            if (!position) return;
            const size = this._size = getTooltipSize(this, options);
            const positionAndSize = Object.assign({}, position, this._size);
            const alignment = determineAlignment(chart, options, positionAndSize);
            const point = getBackgroundPoint(options, positionAndSize, alignment, chart);
            if (animX._to !== point.x || animY._to !== point.y) {
                this.xAlign = alignment.xAlign;
                this.yAlign = alignment.yAlign;
                this.width = size.width;
                this.height = size.height;
                this.caretX = position.x;
                this.caretY = position.y;
                this._resolveAnimations().update(this, point);
            }
        }
    }
    _willRender() {
        return !!this.opacity;
    }
    draw(ctx) {
        const options = this.options.setContext(this.getContext());
        let opacity = this.opacity;
        if (!opacity) return;
        this._updateAnimationTarget(options);
        const tooltipSize = {
            width: this.width,
            height: this.height
        };
        const pt = {
            x: this.x,
            y: this.y
        };
        opacity = Math.abs(opacity) < 1e-3 ? 0 : opacity;
        const padding = (0, _helpersSegmentJs.E)(options.padding);
        const hasTooltipContent = this.title.length || this.beforeBody.length || this.body.length || this.afterBody.length || this.footer.length;
        if (options.enabled && hasTooltipContent) {
            ctx.save();
            ctx.globalAlpha = opacity;
            this.drawBackground(pt, ctx, tooltipSize, options);
            (0, _helpersSegmentJs.aA)(ctx, options.textDirection);
            pt.y += padding.top;
            this.drawTitle(pt, ctx, options);
            this.drawBody(pt, ctx, options);
            this.drawFooter(pt, ctx, options);
            (0, _helpersSegmentJs.aC)(ctx, options.textDirection);
            ctx.restore();
        }
    }
    getActiveElements() {
        return this._active || [];
    }
    setActiveElements(activeElements, eventPosition) {
        const lastActive = this._active;
        const active = activeElements.map(({ datasetIndex, index })=>{
            const meta = this.chart.getDatasetMeta(datasetIndex);
            if (!meta) throw new Error("Cannot find a dataset at index " + datasetIndex);
            return {
                datasetIndex,
                element: meta.data[index],
                index
            };
        });
        const changed = !(0, _helpersSegmentJs.ah)(lastActive, active);
        const positionChanged = this._positionChanged(active, eventPosition);
        if (changed || positionChanged) {
            this._active = active;
            this._eventPosition = eventPosition;
            this._ignoreReplayEvents = true;
            this.update(true);
        }
    }
    handleEvent(e, replay, inChartArea = true) {
        if (replay && this._ignoreReplayEvents) return false;
        this._ignoreReplayEvents = false;
        const options = this.options;
        const lastActive = this._active || [];
        const active = this._getActiveElements(e, lastActive, replay, inChartArea);
        const positionChanged = this._positionChanged(active, e);
        const changed = replay || !(0, _helpersSegmentJs.ah)(active, lastActive) || positionChanged;
        if (changed) {
            this._active = active;
            if (options.enabled || options.external) {
                this._eventPosition = {
                    x: e.x,
                    y: e.y
                };
                this.update(true, replay);
            }
        }
        return changed;
    }
    _getActiveElements(e, lastActive, replay, inChartArea) {
        const options = this.options;
        if (e.type === "mouseout") return [];
        if (!inChartArea) return lastActive.filter((i)=>this.chart.data.datasets[i.datasetIndex] && this.chart.getDatasetMeta(i.datasetIndex).controller.getParsed(i.index) !== undefined);
        const active = this.chart.getElementsAtEventForMode(e, options.mode, options, replay);
        if (options.reverse) active.reverse();
        return active;
    }
    _positionChanged(active, e) {
        const { caretX, caretY, options } = this;
        const position = positioners[options.position].call(this, active, e);
        return position !== false && (caretX !== position.x || caretY !== position.y);
    }
}
var plugin_tooltip = {
    id: "tooltip",
    _element: Tooltip,
    positioners,
    afterInit (chart, _args, options) {
        if (options) chart.tooltip = new Tooltip({
            chart,
            options
        });
    },
    beforeUpdate (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    reset (chart, _args, options) {
        if (chart.tooltip) chart.tooltip.initialize(options);
    },
    afterDraw (chart) {
        const tooltip = chart.tooltip;
        if (tooltip && tooltip._willRender()) {
            const args = {
                tooltip
            };
            if (chart.notifyPlugins("beforeTooltipDraw", {
                ...args,
                cancelable: true
            }) === false) return;
            tooltip.draw(chart.ctx);
            chart.notifyPlugins("afterTooltipDraw", args);
        }
    },
    afterEvent (chart, args) {
        if (chart.tooltip) {
            const useFinalPosition = args.replay;
            if (chart.tooltip.handleEvent(args.event, useFinalPosition, args.inChartArea)) args.changed = true;
        }
    },
    defaults: {
        enabled: true,
        external: null,
        position: "average",
        backgroundColor: "rgba(0,0,0,0.8)",
        titleColor: "#fff",
        titleFont: {
            weight: "bold"
        },
        titleSpacing: 2,
        titleMarginBottom: 6,
        titleAlign: "left",
        bodyColor: "#fff",
        bodySpacing: 2,
        bodyFont: {},
        bodyAlign: "left",
        footerColor: "#fff",
        footerSpacing: 2,
        footerMarginTop: 6,
        footerFont: {
            weight: "bold"
        },
        footerAlign: "left",
        padding: 6,
        caretPadding: 2,
        caretSize: 5,
        cornerRadius: 6,
        boxHeight: (ctx, opts)=>opts.bodyFont.size,
        boxWidth: (ctx, opts)=>opts.bodyFont.size,
        multiKeyBackground: "#fff",
        displayColors: true,
        boxPadding: 0,
        borderColor: "rgba(0,0,0,0)",
        borderWidth: 0,
        animation: {
            duration: 400,
            easing: "easeOutQuart"
        },
        animations: {
            numbers: {
                type: "number",
                properties: [
                    "x",
                    "y",
                    "width",
                    "height",
                    "caretX",
                    "caretY"
                ]
            },
            opacity: {
                easing: "linear",
                duration: 200
            }
        },
        callbacks: defaultCallbacks
    },
    defaultRoutes: {
        bodyFont: "font",
        footerFont: "font",
        titleFont: "font"
    },
    descriptors: {
        _scriptable: (name)=>name !== "filter" && name !== "itemSort" && name !== "external",
        _indexable: false,
        callbacks: {
            _scriptable: false,
            _indexable: false
        },
        animation: {
            _fallback: false
        },
        animations: {
            _fallback: "animation"
        }
    },
    additionalOptionScopes: [
        "interaction"
    ]
};
var plugins = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    Colors: plugin_colors,
    Decimation: plugin_decimation,
    Filler: index,
    Legend: plugin_legend,
    SubTitle: plugin_subtitle,
    Title: plugin_title,
    Tooltip: plugin_tooltip
});
const addIfString = (labels, raw, index, addedLabels)=>{
    if (typeof raw === "string") {
        index = labels.push(raw) - 1;
        addedLabels.unshift({
            index,
            label: raw
        });
    } else if (isNaN(raw)) index = null;
    return index;
};
function findOrAddLabel(labels, raw, index, addedLabels) {
    const first = labels.indexOf(raw);
    if (first === -1) return addIfString(labels, raw, index, addedLabels);
    const last = labels.lastIndexOf(raw);
    return first !== last ? index : first;
}
const validIndex = (index, max)=>index === null ? null : (0, _helpersSegmentJs.S)(Math.round(index), 0, max);
function _getLabelForValue(value) {
    const labels = this.getLabels();
    if (value >= 0 && value < labels.length) return labels[value];
    return value;
}
class CategoryScale extends Scale {
    static id = "category";
    static defaults = {
        ticks: {
            callback: _getLabelForValue
        }
    };
    constructor(cfg){
        super(cfg);
        this._startValue = undefined;
        this._valueRange = 0;
        this._addedLabels = [];
    }
    init(scaleOptions) {
        const added = this._addedLabels;
        if (added.length) {
            const labels = this.getLabels();
            for (const { index, label } of added)if (labels[index] === label) labels.splice(index, 1);
            this._addedLabels = [];
        }
        super.init(scaleOptions);
    }
    parse(raw, index) {
        if ((0, _helpersSegmentJs.k)(raw)) return null;
        const labels = this.getLabels();
        index = isFinite(index) && labels[index] === raw ? index : findOrAddLabel(labels, raw, (0, _helpersSegmentJs.v)(index, raw), this._addedLabels);
        return validIndex(index, labels.length - 1);
    }
    determineDataLimits() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min, max } = this.getMinMax(true);
        if (this.options.bounds === "ticks") {
            if (!minDefined) min = 0;
            if (!maxDefined) max = this.getLabels().length - 1;
        }
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const min = this.min;
        const max = this.max;
        const offset = this.options.offset;
        const ticks = [];
        let labels = this.getLabels();
        labels = min === 0 && max === labels.length - 1 ? labels : labels.slice(min, max + 1);
        this._valueRange = Math.max(labels.length - (offset ? 0 : 1), 1);
        this._startValue = this.min - (offset ? 0.5 : 0);
        for(let value = min; value <= max; value++)ticks.push({
            value
        });
        return ticks;
    }
    getLabelForValue(value) {
        return _getLabelForValue.call(this, value);
    }
    configure() {
        super.configure();
        if (!this.isHorizontal()) this._reversePixels = !this._reversePixels;
    }
    getPixelForValue(value) {
        if (typeof value !== "number") value = this.parse(value);
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getPixelForTick(index) {
        const ticks = this.ticks;
        if (index < 0 || index > ticks.length - 1) return null;
        return this.getPixelForValue(ticks[index].value);
    }
    getValueForPixel(pixel) {
        return Math.round(this._startValue + this.getDecimalForPixel(pixel) * this._valueRange);
    }
    getBasePixel() {
        return this.bottom;
    }
}
function generateTicks$1(generationOptions, dataRange) {
    const ticks = [];
    const MIN_SPACING = 1e-14;
    const { bounds, step, min, max, precision, count, maxTicks, maxDigits, includeBounds } = generationOptions;
    const unit = step || 1;
    const maxSpaces = maxTicks - 1;
    const { min: rmin, max: rmax } = dataRange;
    const minDefined = !(0, _helpersSegmentJs.k)(min);
    const maxDefined = !(0, _helpersSegmentJs.k)(max);
    const countDefined = !(0, _helpersSegmentJs.k)(count);
    const minSpacing = (rmax - rmin) / (maxDigits + 1);
    let spacing = (0, _helpersSegmentJs.aH)((rmax - rmin) / maxSpaces / unit) * unit;
    let factor, niceMin, niceMax, numSpaces;
    if (spacing < MIN_SPACING && !minDefined && !maxDefined) return [
        {
            value: rmin
        },
        {
            value: rmax
        }
    ];
    numSpaces = Math.ceil(rmax / spacing) - Math.floor(rmin / spacing);
    if (numSpaces > maxSpaces) spacing = (0, _helpersSegmentJs.aH)(numSpaces * spacing / maxSpaces / unit) * unit;
    if (!(0, _helpersSegmentJs.k)(precision)) {
        factor = Math.pow(10, precision);
        spacing = Math.ceil(spacing * factor) / factor;
    }
    if (bounds === "ticks") {
        niceMin = Math.floor(rmin / spacing) * spacing;
        niceMax = Math.ceil(rmax / spacing) * spacing;
    } else {
        niceMin = rmin;
        niceMax = rmax;
    }
    if (minDefined && maxDefined && step && (0, _helpersSegmentJs.aI)((max - min) / step, spacing / 1000)) {
        numSpaces = Math.round(Math.min((max - min) / spacing, maxTicks));
        spacing = (max - min) / numSpaces;
        niceMin = min;
        niceMax = max;
    } else if (countDefined) {
        niceMin = minDefined ? min : niceMin;
        niceMax = maxDefined ? max : niceMax;
        numSpaces = count - 1;
        spacing = (niceMax - niceMin) / numSpaces;
    } else {
        numSpaces = (niceMax - niceMin) / spacing;
        if ((0, _helpersSegmentJs.aJ)(numSpaces, Math.round(numSpaces), spacing / 1000)) numSpaces = Math.round(numSpaces);
        else numSpaces = Math.ceil(numSpaces);
    }
    const decimalPlaces = Math.max((0, _helpersSegmentJs.aK)(spacing), (0, _helpersSegmentJs.aK)(niceMin));
    factor = Math.pow(10, (0, _helpersSegmentJs.k)(precision) ? decimalPlaces : precision);
    niceMin = Math.round(niceMin * factor) / factor;
    niceMax = Math.round(niceMax * factor) / factor;
    let j = 0;
    if (minDefined) {
        if (includeBounds && niceMin !== min) {
            ticks.push({
                value: min
            });
            if (niceMin < min) j++;
            if ((0, _helpersSegmentJs.aJ)(Math.round((niceMin + j * spacing) * factor) / factor, min, relativeLabelSize(min, minSpacing, generationOptions))) j++;
        } else if (niceMin < min) j++;
    }
    for(; j < numSpaces; ++j){
        const tickValue = Math.round((niceMin + j * spacing) * factor) / factor;
        if (maxDefined && tickValue > max) break;
        ticks.push({
            value: tickValue
        });
    }
    if (maxDefined && includeBounds && niceMax !== max) {
        if (ticks.length && (0, _helpersSegmentJs.aJ)(ticks[ticks.length - 1].value, max, relativeLabelSize(max, minSpacing, generationOptions))) ticks[ticks.length - 1].value = max;
        else ticks.push({
            value: max
        });
    } else if (!maxDefined || niceMax === max) ticks.push({
        value: niceMax
    });
    return ticks;
}
function relativeLabelSize(value, minSpacing, { horizontal, minRotation }) {
    const rad = (0, _helpersSegmentJs.t)(minRotation);
    const ratio = (horizontal ? Math.sin(rad) : Math.cos(rad)) || 0.001;
    const length = 0.75 * minSpacing * ("" + value).length;
    return Math.min(minSpacing / ratio, length);
}
class LinearScaleBase extends Scale {
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._endValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        if ((0, _helpersSegmentJs.k)(raw)) return null;
        if ((typeof raw === "number" || raw instanceof Number) && !isFinite(+raw)) return null;
        return +raw;
    }
    handleTickRangeOptions() {
        const { beginAtZero } = this.options;
        const { minDefined, maxDefined } = this.getUserBounds();
        let { min, max } = this;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (beginAtZero) {
            const minSign = (0, _helpersSegmentJs.s)(min);
            const maxSign = (0, _helpersSegmentJs.s)(max);
            if (minSign < 0 && maxSign < 0) setMax(0);
            else if (minSign > 0 && maxSign > 0) setMin(0);
        }
        if (min === max) {
            let offset = max === 0 ? 1 : Math.abs(max * 0.05);
            setMax(max + offset);
            if (!beginAtZero) setMin(min - offset);
        }
        this.min = min;
        this.max = max;
    }
    getTickLimit() {
        const tickOpts = this.options.ticks;
        let { maxTicksLimit, stepSize } = tickOpts;
        let maxTicks;
        if (stepSize) {
            maxTicks = Math.ceil(this.max / stepSize) - Math.floor(this.min / stepSize) + 1;
            if (maxTicks > 1000) {
                console.warn(`scales.${this.id}.ticks.stepSize: ${stepSize} would result generating up to ${maxTicks} ticks. Limiting to 1000.`);
                maxTicks = 1000;
            }
        } else {
            maxTicks = this.computeTickLimit();
            maxTicksLimit = maxTicksLimit || 11;
        }
        if (maxTicksLimit) maxTicks = Math.min(maxTicksLimit, maxTicks);
        return maxTicks;
    }
    computeTickLimit() {
        return Number.POSITIVE_INFINITY;
    }
    buildTicks() {
        const opts = this.options;
        const tickOpts = opts.ticks;
        let maxTicks = this.getTickLimit();
        maxTicks = Math.max(2, maxTicks);
        const numericGeneratorOptions = {
            maxTicks,
            bounds: opts.bounds,
            min: opts.min,
            max: opts.max,
            precision: tickOpts.precision,
            step: tickOpts.stepSize,
            count: tickOpts.count,
            maxDigits: this._maxDigits(),
            horizontal: this.isHorizontal(),
            minRotation: tickOpts.minRotation || 0,
            includeBounds: tickOpts.includeBounds !== false
        };
        const dataRange = this._range || this;
        const ticks = generateTicks$1(numericGeneratorOptions, dataRange);
        if (opts.bounds === "ticks") (0, _helpersSegmentJs.aG)(ticks, this, "value");
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    configure() {
        const ticks = this.ticks;
        let start = this.min;
        let end = this.max;
        super.configure();
        if (this.options.offset && ticks.length) {
            const offset = (end - start) / Math.max(ticks.length - 1, 1) / 2;
            start -= offset;
            end += offset;
        }
        this._startValue = start;
        this._endValue = end;
        this._valueRange = end - start;
    }
    getLabelForValue(value) {
        return (0, _helpersSegmentJs.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
}
class LinearScale extends LinearScaleBase {
    static id = "linear";
    static defaults = {
        ticks: {
            callback: (0, _helpersSegmentJs.aL).formatters.numeric
        }
    };
    determineDataLimits() {
        const { min, max } = this.getMinMax(true);
        this.min = (0, _helpersSegmentJs.g)(min) ? min : 0;
        this.max = (0, _helpersSegmentJs.g)(max) ? max : 1;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        const horizontal = this.isHorizontal();
        const length = horizontal ? this.width : this.height;
        const minRotation = (0, _helpersSegmentJs.t)(this.options.ticks.minRotation);
        const ratio = (horizontal ? Math.sin(minRotation) : Math.cos(minRotation)) || 0.001;
        const tickFont = this._resolveTickFontOptions(0);
        return Math.ceil(length / Math.min(40, tickFont.lineHeight / ratio));
    }
    getPixelForValue(value) {
        return value === null ? NaN : this.getPixelForDecimal((value - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        return this._startValue + this.getDecimalForPixel(pixel) * this._valueRange;
    }
}
const log10Floor = (v)=>Math.floor((0, _helpersSegmentJs.aM)(v));
const changeExponent = (v, m)=>Math.pow(10, log10Floor(v) + m);
function isMajor(tickVal) {
    const remain = tickVal / Math.pow(10, log10Floor(tickVal));
    return remain === 1;
}
function steps(min, max, rangeExp) {
    const rangeStep = Math.pow(10, rangeExp);
    const start = Math.floor(min / rangeStep);
    const end = Math.ceil(max / rangeStep);
    return end - start;
}
function startExp(min, max) {
    const range = max - min;
    let rangeExp = log10Floor(range);
    while(steps(min, max, rangeExp) > 10)rangeExp++;
    while(steps(min, max, rangeExp) < 10)rangeExp--;
    return Math.min(rangeExp, log10Floor(min));
}
function generateTicks(generationOptions, { min, max }) {
    min = (0, _helpersSegmentJs.O)(generationOptions.min, min);
    const ticks = [];
    const minExp = log10Floor(min);
    let exp = startExp(min, max);
    let precision = exp < 0 ? Math.pow(10, Math.abs(exp)) : 1;
    const stepSize = Math.pow(10, exp);
    const base = minExp > exp ? Math.pow(10, minExp) : 0;
    const start = Math.round((min - base) * precision) / precision;
    const offset = Math.floor((min - base) / stepSize / 10) * stepSize * 10;
    let significand = Math.floor((start - offset) / Math.pow(10, exp));
    let value = (0, _helpersSegmentJs.O)(generationOptions.min, Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision);
    while(value < max){
        ticks.push({
            value,
            major: isMajor(value),
            significand
        });
        if (significand >= 10) significand = significand < 15 ? 15 : 20;
        else significand++;
        if (significand >= 20) {
            exp++;
            significand = 2;
            precision = exp >= 0 ? 1 : precision;
        }
        value = Math.round((base + offset + significand * Math.pow(10, exp)) * precision) / precision;
    }
    const lastTick = (0, _helpersSegmentJs.O)(generationOptions.max, value);
    ticks.push({
        value: lastTick,
        major: isMajor(lastTick),
        significand
    });
    return ticks;
}
class LogarithmicScale extends Scale {
    static id = "logarithmic";
    static defaults = {
        ticks: {
            callback: (0, _helpersSegmentJs.aL).formatters.logarithmic,
            major: {
                enabled: true
            }
        }
    };
    constructor(cfg){
        super(cfg);
        this.start = undefined;
        this.end = undefined;
        this._startValue = undefined;
        this._valueRange = 0;
    }
    parse(raw, index) {
        const value = LinearScaleBase.prototype.parse.apply(this, [
            raw,
            index
        ]);
        if (value === 0) {
            this._zero = true;
            return undefined;
        }
        return (0, _helpersSegmentJs.g)(value) && value > 0 ? value : null;
    }
    determineDataLimits() {
        const { min, max } = this.getMinMax(true);
        this.min = (0, _helpersSegmentJs.g)(min) ? Math.max(0, min) : null;
        this.max = (0, _helpersSegmentJs.g)(max) ? Math.max(0, max) : null;
        if (this.options.beginAtZero) this._zero = true;
        if (this._zero && this.min !== this._suggestedMin && !(0, _helpersSegmentJs.g)(this._userMin)) this.min = min === changeExponent(this.min, 0) ? changeExponent(this.min, -1) : changeExponent(this.min, 0);
        this.handleTickRangeOptions();
    }
    handleTickRangeOptions() {
        const { minDefined, maxDefined } = this.getUserBounds();
        let min = this.min;
        let max = this.max;
        const setMin = (v)=>min = minDefined ? min : v;
        const setMax = (v)=>max = maxDefined ? max : v;
        if (min === max) {
            if (min <= 0) {
                setMin(1);
                setMax(10);
            } else {
                setMin(changeExponent(min, -1));
                setMax(changeExponent(max, 1));
            }
        }
        if (min <= 0) setMin(changeExponent(max, -1));
        if (max <= 0) setMax(changeExponent(min, 1));
        this.min = min;
        this.max = max;
    }
    buildTicks() {
        const opts = this.options;
        const generationOptions = {
            min: this._userMin,
            max: this._userMax
        };
        const ticks = generateTicks(generationOptions, this);
        if (opts.bounds === "ticks") (0, _helpersSegmentJs.aG)(ticks, this, "value");
        if (opts.reverse) {
            ticks.reverse();
            this.start = this.max;
            this.end = this.min;
        } else {
            this.start = this.min;
            this.end = this.max;
        }
        return ticks;
    }
    getLabelForValue(value) {
        return value === undefined ? "0" : (0, _helpersSegmentJs.o)(value, this.chart.options.locale, this.options.ticks.format);
    }
    configure() {
        const start = this.min;
        super.configure();
        this._startValue = (0, _helpersSegmentJs.aM)(start);
        this._valueRange = (0, _helpersSegmentJs.aM)(this.max) - (0, _helpersSegmentJs.aM)(start);
    }
    getPixelForValue(value) {
        if (value === undefined || value === 0) value = this.min;
        if (value === null || isNaN(value)) return NaN;
        return this.getPixelForDecimal(value === this.min ? 0 : ((0, _helpersSegmentJs.aM)(value) - this._startValue) / this._valueRange);
    }
    getValueForPixel(pixel) {
        const decimal = this.getDecimalForPixel(pixel);
        return Math.pow(10, this._startValue + decimal * this._valueRange);
    }
}
function getTickBackdropHeight(opts) {
    const tickOpts = opts.ticks;
    if (tickOpts.display && opts.display) {
        const padding = (0, _helpersSegmentJs.E)(tickOpts.backdropPadding);
        return (0, _helpersSegmentJs.v)(tickOpts.font && tickOpts.font.size, (0, _helpersSegmentJs.d).font.size) + padding.height;
    }
    return 0;
}
function measureLabelSize(ctx, font, label) {
    label = (0, _helpersSegmentJs.b)(label) ? label : [
        label
    ];
    return {
        w: (0, _helpersSegmentJs.aN)(ctx, font.string, label),
        h: label.length * font.lineHeight
    };
}
function determineLimits(angle, pos, size, min, max) {
    if (angle === min || angle === max) return {
        start: pos - size / 2,
        end: pos + size / 2
    };
    else if (angle < min || angle > max) return {
        start: pos - size,
        end: pos
    };
    return {
        start: pos,
        end: pos + size
    };
}
function fitWithPointLabels(scale) {
    const orig = {
        l: scale.left + scale._padding.left,
        r: scale.right - scale._padding.right,
        t: scale.top + scale._padding.top,
        b: scale.bottom - scale._padding.bottom
    };
    const limits = Object.assign({}, orig);
    const labelSizes = [];
    const padding = [];
    const valueCount = scale._pointLabels.length;
    const pointLabelOpts = scale.options.pointLabels;
    const additionalAngle = pointLabelOpts.centerPointLabels ? (0, _helpersSegmentJs.P) / valueCount : 0;
    for(let i = 0; i < valueCount; i++){
        const opts = pointLabelOpts.setContext(scale.getPointLabelContext(i));
        padding[i] = opts.padding;
        const pointPosition = scale.getPointPosition(i, scale.drawingArea + padding[i], additionalAngle);
        const plFont = (0, _helpersSegmentJs.a0)(opts.font);
        const textSize = measureLabelSize(scale.ctx, plFont, scale._pointLabels[i]);
        labelSizes[i] = textSize;
        const angleRadians = (0, _helpersSegmentJs.ay)(scale.getIndexAngle(i) + additionalAngle);
        const angle = Math.round((0, _helpersSegmentJs.U)(angleRadians));
        const hLimits = determineLimits(angle, pointPosition.x, textSize.w, 0, 180);
        const vLimits = determineLimits(angle, pointPosition.y, textSize.h, 90, 270);
        updateLimits(limits, orig, angleRadians, hLimits, vLimits);
    }
    scale.setCenterPoint(orig.l - limits.l, limits.r - orig.r, orig.t - limits.t, limits.b - orig.b);
    scale._pointLabelItems = buildPointLabelItems(scale, labelSizes, padding);
}
function updateLimits(limits, orig, angle, hLimits, vLimits) {
    const sin = Math.abs(Math.sin(angle));
    const cos = Math.abs(Math.cos(angle));
    let x = 0;
    let y = 0;
    if (hLimits.start < orig.l) {
        x = (orig.l - hLimits.start) / sin;
        limits.l = Math.min(limits.l, orig.l - x);
    } else if (hLimits.end > orig.r) {
        x = (hLimits.end - orig.r) / sin;
        limits.r = Math.max(limits.r, orig.r + x);
    }
    if (vLimits.start < orig.t) {
        y = (orig.t - vLimits.start) / cos;
        limits.t = Math.min(limits.t, orig.t - y);
    } else if (vLimits.end > orig.b) {
        y = (vLimits.end - orig.b) / cos;
        limits.b = Math.max(limits.b, orig.b + y);
    }
}
function createPointLabelItem(scale, index, itemOpts) {
    const outerDistance = scale.drawingArea;
    const { extra, additionalAngle, padding, size } = itemOpts;
    const pointLabelPosition = scale.getPointPosition(index, outerDistance + extra + padding, additionalAngle);
    const angle = Math.round((0, _helpersSegmentJs.U)((0, _helpersSegmentJs.ay)(pointLabelPosition.angle + (0, _helpersSegmentJs.H))));
    const y = yForAngle(pointLabelPosition.y, size.h, angle);
    const textAlign = getTextAlignForAngle(angle);
    const left = leftForTextAlign(pointLabelPosition.x, size.w, textAlign);
    return {
        visible: true,
        x: pointLabelPosition.x,
        y,
        textAlign,
        left,
        top: y,
        right: left + size.w,
        bottom: y + size.h
    };
}
function isNotOverlapped(item, area) {
    if (!area) return true;
    const { left, top, right, bottom } = item;
    const apexesInArea = (0, _helpersSegmentJs.C)({
        x: left,
        y: top
    }, area) || (0, _helpersSegmentJs.C)({
        x: left,
        y: bottom
    }, area) || (0, _helpersSegmentJs.C)({
        x: right,
        y: top
    }, area) || (0, _helpersSegmentJs.C)({
        x: right,
        y: bottom
    }, area);
    return !apexesInArea;
}
function buildPointLabelItems(scale, labelSizes, padding) {
    const items = [];
    const valueCount = scale._pointLabels.length;
    const opts = scale.options;
    const { centerPointLabels, display } = opts.pointLabels;
    const itemOpts = {
        extra: getTickBackdropHeight(opts) / 2,
        additionalAngle: centerPointLabels ? (0, _helpersSegmentJs.P) / valueCount : 0
    };
    let area;
    for(let i = 0; i < valueCount; i++){
        itemOpts.padding = padding[i];
        itemOpts.size = labelSizes[i];
        const item = createPointLabelItem(scale, i, itemOpts);
        items.push(item);
        if (display === "auto") {
            item.visible = isNotOverlapped(item, area);
            if (item.visible) area = item;
        }
    }
    return items;
}
function getTextAlignForAngle(angle) {
    if (angle === 0 || angle === 180) return "center";
    else if (angle < 180) return "left";
    return "right";
}
function leftForTextAlign(x, w, align) {
    if (align === "right") x -= w;
    else if (align === "center") x -= w / 2;
    return x;
}
function yForAngle(y, h, angle) {
    if (angle === 90 || angle === 270) y -= h / 2;
    else if (angle > 270 || angle < 90) y -= h;
    return y;
}
function drawPointLabelBox(ctx, opts, item) {
    const { left, top, right, bottom } = item;
    const { backdropColor } = opts;
    if (!(0, _helpersSegmentJs.k)(backdropColor)) {
        const borderRadius = (0, _helpersSegmentJs.aw)(opts.borderRadius);
        const padding = (0, _helpersSegmentJs.E)(opts.backdropPadding);
        ctx.fillStyle = backdropColor;
        const backdropLeft = left - padding.left;
        const backdropTop = top - padding.top;
        const backdropWidth = right - left + padding.width;
        const backdropHeight = bottom - top + padding.height;
        if (Object.values(borderRadius).some((v)=>v !== 0)) {
            ctx.beginPath();
            (0, _helpersSegmentJs.au)(ctx, {
                x: backdropLeft,
                y: backdropTop,
                w: backdropWidth,
                h: backdropHeight,
                radius: borderRadius
            });
            ctx.fill();
        } else ctx.fillRect(backdropLeft, backdropTop, backdropWidth, backdropHeight);
    }
}
function drawPointLabels(scale, labelCount) {
    const { ctx, options: { pointLabels } } = scale;
    for(let i = labelCount - 1; i >= 0; i--){
        const item = scale._pointLabelItems[i];
        if (!item.visible) continue;
        const optsAtIndex = pointLabels.setContext(scale.getPointLabelContext(i));
        drawPointLabelBox(ctx, optsAtIndex, item);
        const plFont = (0, _helpersSegmentJs.a0)(optsAtIndex.font);
        const { x, y, textAlign } = item;
        (0, _helpersSegmentJs.Z)(ctx, scale._pointLabels[i], x, y + plFont.lineHeight / 2, plFont, {
            color: optsAtIndex.color,
            textAlign: textAlign,
            textBaseline: "middle"
        });
    }
}
function pathRadiusLine(scale, radius, circular, labelCount) {
    const { ctx } = scale;
    if (circular) ctx.arc(scale.xCenter, scale.yCenter, radius, 0, (0, _helpersSegmentJs.T));
    else {
        let pointPosition = scale.getPointPosition(0, radius);
        ctx.moveTo(pointPosition.x, pointPosition.y);
        for(let i = 1; i < labelCount; i++){
            pointPosition = scale.getPointPosition(i, radius);
            ctx.lineTo(pointPosition.x, pointPosition.y);
        }
    }
}
function drawRadiusLine(scale, gridLineOpts, radius, labelCount, borderOpts) {
    const ctx = scale.ctx;
    const circular = gridLineOpts.circular;
    const { color, lineWidth } = gridLineOpts;
    if (!circular && !labelCount || !color || !lineWidth || radius < 0) return;
    ctx.save();
    ctx.strokeStyle = color;
    ctx.lineWidth = lineWidth;
    ctx.setLineDash(borderOpts.dash);
    ctx.lineDashOffset = borderOpts.dashOffset;
    ctx.beginPath();
    pathRadiusLine(scale, radius, circular, labelCount);
    ctx.closePath();
    ctx.stroke();
    ctx.restore();
}
function createPointLabelContext(parent, index, label) {
    return (0, _helpersSegmentJs.j)(parent, {
        label,
        index,
        type: "pointLabel"
    });
}
class RadialLinearScale extends LinearScaleBase {
    static id = "radialLinear";
    static defaults = {
        display: true,
        animate: true,
        position: "chartArea",
        angleLines: {
            display: true,
            lineWidth: 1,
            borderDash: [],
            borderDashOffset: 0.0
        },
        grid: {
            circular: false
        },
        startAngle: 0,
        ticks: {
            showLabelBackdrop: true,
            callback: (0, _helpersSegmentJs.aL).formatters.numeric
        },
        pointLabels: {
            backdropColor: undefined,
            backdropPadding: 2,
            display: true,
            font: {
                size: 10
            },
            callback (label) {
                return label;
            },
            padding: 5,
            centerPointLabels: false
        }
    };
    static defaultRoutes = {
        "angleLines.color": "borderColor",
        "pointLabels.color": "color",
        "ticks.color": "color"
    };
    static descriptors = {
        angleLines: {
            _fallback: "grid"
        }
    };
    constructor(cfg){
        super(cfg);
        this.xCenter = undefined;
        this.yCenter = undefined;
        this.drawingArea = undefined;
        this._pointLabels = [];
        this._pointLabelItems = [];
    }
    setDimensions() {
        const padding = this._padding = (0, _helpersSegmentJs.E)(getTickBackdropHeight(this.options) / 2);
        const w = this.width = this.maxWidth - padding.width;
        const h = this.height = this.maxHeight - padding.height;
        this.xCenter = Math.floor(this.left + w / 2 + padding.left);
        this.yCenter = Math.floor(this.top + h / 2 + padding.top);
        this.drawingArea = Math.floor(Math.min(w, h) / 2);
    }
    determineDataLimits() {
        const { min, max } = this.getMinMax(false);
        this.min = (0, _helpersSegmentJs.g)(min) && !isNaN(min) ? min : 0;
        this.max = (0, _helpersSegmentJs.g)(max) && !isNaN(max) ? max : 0;
        this.handleTickRangeOptions();
    }
    computeTickLimit() {
        return Math.ceil(this.drawingArea / getTickBackdropHeight(this.options));
    }
    generateTickLabels(ticks) {
        LinearScaleBase.prototype.generateTickLabels.call(this, ticks);
        this._pointLabels = this.getLabels().map((value, index)=>{
            const label = (0, _helpersSegmentJs.Q)(this.options.pointLabels.callback, [
                value,
                index
            ], this);
            return label || label === 0 ? label : "";
        }).filter((v, i)=>this.chart.getDataVisibility(i));
    }
    fit() {
        const opts = this.options;
        if (opts.display && opts.pointLabels.display) fitWithPointLabels(this);
        else this.setCenterPoint(0, 0, 0, 0);
    }
    setCenterPoint(leftMovement, rightMovement, topMovement, bottomMovement) {
        this.xCenter += Math.floor((leftMovement - rightMovement) / 2);
        this.yCenter += Math.floor((topMovement - bottomMovement) / 2);
        this.drawingArea -= Math.min(this.drawingArea / 2, Math.max(leftMovement, rightMovement, topMovement, bottomMovement));
    }
    getIndexAngle(index) {
        const angleMultiplier = (0, _helpersSegmentJs.T) / (this._pointLabels.length || 1);
        const startAngle = this.options.startAngle || 0;
        return (0, _helpersSegmentJs.ay)(index * angleMultiplier + (0, _helpersSegmentJs.t)(startAngle));
    }
    getDistanceFromCenterForValue(value) {
        if ((0, _helpersSegmentJs.k)(value)) return NaN;
        const scalingFactor = this.drawingArea / (this.max - this.min);
        if (this.options.reverse) return (this.max - value) * scalingFactor;
        return (value - this.min) * scalingFactor;
    }
    getValueForDistanceFromCenter(distance) {
        if ((0, _helpersSegmentJs.k)(distance)) return NaN;
        const scaledDistance = distance / (this.drawingArea / (this.max - this.min));
        return this.options.reverse ? this.max - scaledDistance : this.min + scaledDistance;
    }
    getPointLabelContext(index) {
        const pointLabels = this._pointLabels || [];
        if (index >= 0 && index < pointLabels.length) {
            const pointLabel = pointLabels[index];
            return createPointLabelContext(this.getContext(), index, pointLabel);
        }
    }
    getPointPosition(index, distanceFromCenter, additionalAngle = 0) {
        const angle = this.getIndexAngle(index) - (0, _helpersSegmentJs.H) + additionalAngle;
        return {
            x: Math.cos(angle) * distanceFromCenter + this.xCenter,
            y: Math.sin(angle) * distanceFromCenter + this.yCenter,
            angle
        };
    }
    getPointPositionForValue(index, value) {
        return this.getPointPosition(index, this.getDistanceFromCenterForValue(value));
    }
    getBasePosition(index) {
        return this.getPointPositionForValue(index || 0, this.getBaseValue());
    }
    getPointLabelPosition(index) {
        const { left, top, right, bottom } = this._pointLabelItems[index];
        return {
            left,
            top,
            right,
            bottom
        };
    }
    drawBackground() {
        const { backgroundColor, grid: { circular } } = this.options;
        if (backgroundColor) {
            const ctx = this.ctx;
            ctx.save();
            ctx.beginPath();
            pathRadiusLine(this, this.getDistanceFromCenterForValue(this._endValue), circular, this._pointLabels.length);
            ctx.closePath();
            ctx.fillStyle = backgroundColor;
            ctx.fill();
            ctx.restore();
        }
    }
    drawGrid() {
        const ctx = this.ctx;
        const opts = this.options;
        const { angleLines, grid, border } = opts;
        const labelCount = this._pointLabels.length;
        let i, offset, position;
        if (opts.pointLabels.display) drawPointLabels(this, labelCount);
        if (grid.display) this.ticks.forEach((tick, index)=>{
            if (index !== 0 || index === 0 && this.min < 0) {
                offset = this.getDistanceFromCenterForValue(tick.value);
                const context = this.getContext(index);
                const optsAtIndex = grid.setContext(context);
                const optsAtIndexBorder = border.setContext(context);
                drawRadiusLine(this, optsAtIndex, offset, labelCount, optsAtIndexBorder);
            }
        });
        if (angleLines.display) {
            ctx.save();
            for(i = labelCount - 1; i >= 0; i--){
                const optsAtIndex = angleLines.setContext(this.getPointLabelContext(i));
                const { color, lineWidth } = optsAtIndex;
                if (!lineWidth || !color) continue;
                ctx.lineWidth = lineWidth;
                ctx.strokeStyle = color;
                ctx.setLineDash(optsAtIndex.borderDash);
                ctx.lineDashOffset = optsAtIndex.borderDashOffset;
                offset = this.getDistanceFromCenterForValue(opts.ticks.reverse ? this.min : this.max);
                position = this.getPointPosition(i, offset);
                ctx.beginPath();
                ctx.moveTo(this.xCenter, this.yCenter);
                ctx.lineTo(position.x, position.y);
                ctx.stroke();
            }
            ctx.restore();
        }
    }
    drawBorder() {}
    drawLabels() {
        const ctx = this.ctx;
        const opts = this.options;
        const tickOpts = opts.ticks;
        if (!tickOpts.display) return;
        const startAngle = this.getIndexAngle(0);
        let offset, width;
        ctx.save();
        ctx.translate(this.xCenter, this.yCenter);
        ctx.rotate(startAngle);
        ctx.textAlign = "center";
        ctx.textBaseline = "middle";
        this.ticks.forEach((tick, index)=>{
            if (index === 0 && this.min >= 0 && !opts.reverse) return;
            const optsAtIndex = tickOpts.setContext(this.getContext(index));
            const tickFont = (0, _helpersSegmentJs.a0)(optsAtIndex.font);
            offset = this.getDistanceFromCenterForValue(this.ticks[index].value);
            if (optsAtIndex.showLabelBackdrop) {
                ctx.font = tickFont.string;
                width = ctx.measureText(tick.label).width;
                ctx.fillStyle = optsAtIndex.backdropColor;
                const padding = (0, _helpersSegmentJs.E)(optsAtIndex.backdropPadding);
                ctx.fillRect(-width / 2 - padding.left, -offset - tickFont.size / 2 - padding.top, width + padding.width, tickFont.size + padding.height);
            }
            (0, _helpersSegmentJs.Z)(ctx, tick.label, 0, -offset, tickFont, {
                color: optsAtIndex.color,
                strokeColor: optsAtIndex.textStrokeColor,
                strokeWidth: optsAtIndex.textStrokeWidth
            });
        });
        ctx.restore();
    }
    drawTitle() {}
}
const INTERVALS = {
    millisecond: {
        common: true,
        size: 1,
        steps: 1000
    },
    second: {
        common: true,
        size: 1000,
        steps: 60
    },
    minute: {
        common: true,
        size: 60000,
        steps: 60
    },
    hour: {
        common: true,
        size: 3600000,
        steps: 24
    },
    day: {
        common: true,
        size: 86400000,
        steps: 30
    },
    week: {
        common: false,
        size: 604800000,
        steps: 4
    },
    month: {
        common: true,
        size: 2.628e9,
        steps: 12
    },
    quarter: {
        common: false,
        size: 7.884e9,
        steps: 4
    },
    year: {
        common: true,
        size: 3.154e10
    }
};
const UNITS = /* #__PURE__ */ Object.keys(INTERVALS);
function sorter(a, b) {
    return a - b;
}
function parse(scale, input) {
    if ((0, _helpersSegmentJs.k)(input)) return null;
    const adapter = scale._adapter;
    const { parser, round, isoWeekday } = scale._parseOpts;
    let value = input;
    if (typeof parser === "function") value = parser(value);
    if (!(0, _helpersSegmentJs.g)(value)) value = typeof parser === "string" ? adapter.parse(value, parser) : adapter.parse(value);
    if (value === null) return null;
    if (round) value = round === "week" && ((0, _helpersSegmentJs.x)(isoWeekday) || isoWeekday === true) ? adapter.startOf(value, "isoWeek", isoWeekday) : adapter.startOf(value, round);
    return +value;
}
function determineUnitForAutoTicks(minUnit, min, max, capacity) {
    const ilen = UNITS.length;
    for(let i = UNITS.indexOf(minUnit); i < ilen - 1; ++i){
        const interval = INTERVALS[UNITS[i]];
        const factor = interval.steps ? interval.steps : Number.MAX_SAFE_INTEGER;
        if (interval.common && Math.ceil((max - min) / (factor * interval.size)) <= capacity) return UNITS[i];
    }
    return UNITS[ilen - 1];
}
function determineUnitForFormatting(scale, numTicks, minUnit, min, max) {
    for(let i = UNITS.length - 1; i >= UNITS.indexOf(minUnit); i--){
        const unit = UNITS[i];
        if (INTERVALS[unit].common && scale._adapter.diff(max, min, unit) >= numTicks - 1) return unit;
    }
    return UNITS[minUnit ? UNITS.indexOf(minUnit) : 0];
}
function determineMajorUnit(unit) {
    for(let i = UNITS.indexOf(unit) + 1, ilen = UNITS.length; i < ilen; ++i){
        if (INTERVALS[UNITS[i]].common) return UNITS[i];
    }
}
function addTick(ticks, time, timestamps) {
    if (!timestamps) ticks[time] = true;
    else if (timestamps.length) {
        const { lo, hi } = (0, _helpersSegmentJs.aP)(timestamps, time);
        const timestamp = timestamps[lo] >= time ? timestamps[lo] : timestamps[hi];
        ticks[timestamp] = true;
    }
}
function setMajorTicks(scale, ticks, map, majorUnit) {
    const adapter = scale._adapter;
    const first = +adapter.startOf(ticks[0].value, majorUnit);
    const last = ticks[ticks.length - 1].value;
    let major, index;
    for(major = first; major <= last; major = +adapter.add(major, 1, majorUnit)){
        index = map[major];
        if (index >= 0) ticks[index].major = true;
    }
    return ticks;
}
function ticksFromTimestamps(scale, values, majorUnit) {
    const ticks = [];
    const map = {};
    const ilen = values.length;
    let i, value;
    for(i = 0; i < ilen; ++i){
        value = values[i];
        map[value] = i;
        ticks.push({
            value,
            major: false
        });
    }
    return ilen === 0 || !majorUnit ? ticks : setMajorTicks(scale, ticks, map, majorUnit);
}
class TimeScale extends Scale {
    static id = "time";
    static defaults = {
        bounds: "data",
        adapters: {},
        time: {
            parser: false,
            unit: false,
            round: false,
            isoWeekday: false,
            minUnit: "millisecond",
            displayFormats: {}
        },
        ticks: {
            source: "auto",
            callback: false,
            major: {
                enabled: false
            }
        }
    };
    constructor(props){
        super(props);
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
        this._unit = "day";
        this._majorUnit = undefined;
        this._offsets = {};
        this._normalized = false;
        this._parseOpts = undefined;
    }
    init(scaleOpts, opts = {}) {
        const time = scaleOpts.time || (scaleOpts.time = {});
        const adapter = this._adapter = new adapters._date(scaleOpts.adapters.date);
        adapter.init(opts);
        (0, _helpersSegmentJs.ab)(time.displayFormats, adapter.formats());
        this._parseOpts = {
            parser: time.parser,
            round: time.round,
            isoWeekday: time.isoWeekday
        };
        super.init(scaleOpts);
        this._normalized = opts.normalized;
    }
    parse(raw, index) {
        if (raw === undefined) return null;
        return parse(this, raw);
    }
    beforeLayout() {
        super.beforeLayout();
        this._cache = {
            data: [],
            labels: [],
            all: []
        };
    }
    determineDataLimits() {
        const options = this.options;
        const adapter = this._adapter;
        const unit = options.time.unit || "day";
        let { min, max, minDefined, maxDefined } = this.getUserBounds();
        function _applyBounds(bounds) {
            if (!minDefined && !isNaN(bounds.min)) min = Math.min(min, bounds.min);
            if (!maxDefined && !isNaN(bounds.max)) max = Math.max(max, bounds.max);
        }
        if (!minDefined || !maxDefined) {
            _applyBounds(this._getLabelBounds());
            if (options.bounds !== "ticks" || options.ticks.source !== "labels") _applyBounds(this.getMinMax(false));
        }
        min = (0, _helpersSegmentJs.g)(min) && !isNaN(min) ? min : +adapter.startOf(Date.now(), unit);
        max = (0, _helpersSegmentJs.g)(max) && !isNaN(max) ? max : +adapter.endOf(Date.now(), unit) + 1;
        this.min = Math.min(min, max - 1);
        this.max = Math.max(min + 1, max);
    }
    _getLabelBounds() {
        const arr = this.getLabelTimestamps();
        let min = Number.POSITIVE_INFINITY;
        let max = Number.NEGATIVE_INFINITY;
        if (arr.length) {
            min = arr[0];
            max = arr[arr.length - 1];
        }
        return {
            min,
            max
        };
    }
    buildTicks() {
        const options = this.options;
        const timeOpts = options.time;
        const tickOpts = options.ticks;
        const timestamps = tickOpts.source === "labels" ? this.getLabelTimestamps() : this._generate();
        if (options.bounds === "ticks" && timestamps.length) {
            this.min = this._userMin || timestamps[0];
            this.max = this._userMax || timestamps[timestamps.length - 1];
        }
        const min = this.min;
        const max = this.max;
        const ticks = (0, _helpersSegmentJs.aO)(timestamps, min, max);
        this._unit = timeOpts.unit || (tickOpts.autoSkip ? determineUnitForAutoTicks(timeOpts.minUnit, this.min, this.max, this._getLabelCapacity(min)) : determineUnitForFormatting(this, ticks.length, timeOpts.minUnit, this.min, this.max));
        this._majorUnit = !tickOpts.major.enabled || this._unit === "year" ? undefined : determineMajorUnit(this._unit);
        this.initOffsets(timestamps);
        if (options.reverse) ticks.reverse();
        return ticksFromTimestamps(this, ticks, this._majorUnit);
    }
    afterAutoSkip() {
        if (this.options.offsetAfterAutoskip) this.initOffsets(this.ticks.map((tick)=>+tick.value));
    }
    initOffsets(timestamps = []) {
        let start = 0;
        let end = 0;
        let first, last;
        if (this.options.offset && timestamps.length) {
            first = this.getDecimalForValue(timestamps[0]);
            if (timestamps.length === 1) start = 1 - first;
            else start = (this.getDecimalForValue(timestamps[1]) - first) / 2;
            last = this.getDecimalForValue(timestamps[timestamps.length - 1]);
            if (timestamps.length === 1) end = last;
            else end = (last - this.getDecimalForValue(timestamps[timestamps.length - 2])) / 2;
        }
        const limit = timestamps.length < 3 ? 0.5 : 0.25;
        start = (0, _helpersSegmentJs.S)(start, 0, limit);
        end = (0, _helpersSegmentJs.S)(end, 0, limit);
        this._offsets = {
            start,
            end,
            factor: 1 / (start + 1 + end)
        };
    }
    _generate() {
        const adapter = this._adapter;
        const min = this.min;
        const max = this.max;
        const options = this.options;
        const timeOpts = options.time;
        const minor = timeOpts.unit || determineUnitForAutoTicks(timeOpts.minUnit, min, max, this._getLabelCapacity(min));
        const stepSize = (0, _helpersSegmentJs.v)(options.ticks.stepSize, 1);
        const weekday = minor === "week" ? timeOpts.isoWeekday : false;
        const hasWeekday = (0, _helpersSegmentJs.x)(weekday) || weekday === true;
        const ticks = {};
        let first = min;
        let time, count;
        if (hasWeekday) first = +adapter.startOf(first, "isoWeek", weekday);
        first = +adapter.startOf(first, hasWeekday ? "day" : minor);
        if (adapter.diff(max, min, minor) > 100000 * stepSize) throw new Error(min + " and " + max + " are too far apart with stepSize of " + stepSize + " " + minor);
        const timestamps = options.ticks.source === "data" && this.getDataTimestamps();
        for(time = first, count = 0; time < max; time = +adapter.add(time, stepSize, minor), count++)addTick(ticks, time, timestamps);
        if (time === max || options.bounds === "ticks" || count === 1) addTick(ticks, time, timestamps);
        return Object.keys(ticks).sort(sorter).map((x)=>+x);
    }
    getLabelForValue(value) {
        const adapter = this._adapter;
        const timeOpts = this.options.time;
        if (timeOpts.tooltipFormat) return adapter.format(value, timeOpts.tooltipFormat);
        return adapter.format(value, timeOpts.displayFormats.datetime);
    }
    format(value, format) {
        const options = this.options;
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const fmt = format || formats[unit];
        return this._adapter.format(value, fmt);
    }
    _tickFormatFunction(time, index, ticks, format) {
        const options = this.options;
        const formatter = options.ticks.callback;
        if (formatter) return (0, _helpersSegmentJs.Q)(formatter, [
            time,
            index,
            ticks
        ], this);
        const formats = options.time.displayFormats;
        const unit = this._unit;
        const majorUnit = this._majorUnit;
        const minorFormat = unit && formats[unit];
        const majorFormat = majorUnit && formats[majorUnit];
        const tick = ticks[index];
        const major = majorUnit && majorFormat && tick && tick.major;
        return this._adapter.format(time, format || (major ? majorFormat : minorFormat));
    }
    generateTickLabels(ticks) {
        let i, ilen, tick;
        for(i = 0, ilen = ticks.length; i < ilen; ++i){
            tick = ticks[i];
            tick.label = this._tickFormatFunction(tick.value, i, ticks);
        }
    }
    getDecimalForValue(value) {
        return value === null ? NaN : (value - this.min) / (this.max - this.min);
    }
    getPixelForValue(value) {
        const offsets = this._offsets;
        const pos = this.getDecimalForValue(value);
        return this.getPixelForDecimal((offsets.start + pos) * offsets.factor);
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const pos = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return this.min + pos * (this.max - this.min);
    }
    _getLabelSize(label) {
        const ticksOpts = this.options.ticks;
        const tickLabelWidth = this.ctx.measureText(label).width;
        const angle = (0, _helpersSegmentJs.t)(this.isHorizontal() ? ticksOpts.maxRotation : ticksOpts.minRotation);
        const cosRotation = Math.cos(angle);
        const sinRotation = Math.sin(angle);
        const tickFontSize = this._resolveTickFontOptions(0).size;
        return {
            w: tickLabelWidth * cosRotation + tickFontSize * sinRotation,
            h: tickLabelWidth * sinRotation + tickFontSize * cosRotation
        };
    }
    _getLabelCapacity(exampleTime) {
        const timeOpts = this.options.time;
        const displayFormats = timeOpts.displayFormats;
        const format = displayFormats[timeOpts.unit] || displayFormats.millisecond;
        const exampleLabel = this._tickFormatFunction(exampleTime, 0, ticksFromTimestamps(this, [
            exampleTime
        ], this._majorUnit), format);
        const size = this._getLabelSize(exampleLabel);
        const capacity = Math.floor(this.isHorizontal() ? this.width / size.w : this.height / size.h) - 1;
        return capacity > 0 ? capacity : 1;
    }
    getDataTimestamps() {
        let timestamps = this._cache.data || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const metas = this.getMatchingVisibleMetas();
        if (this._normalized && metas.length) return this._cache.data = metas[0].controller.getAllParsedValues(this);
        for(i = 0, ilen = metas.length; i < ilen; ++i)timestamps = timestamps.concat(metas[i].controller.getAllParsedValues(this));
        return this._cache.data = this.normalize(timestamps);
    }
    getLabelTimestamps() {
        const timestamps = this._cache.labels || [];
        let i, ilen;
        if (timestamps.length) return timestamps;
        const labels = this.getLabels();
        for(i = 0, ilen = labels.length; i < ilen; ++i)timestamps.push(parse(this, labels[i]));
        return this._cache.labels = this._normalized ? timestamps : this.normalize(timestamps);
    }
    normalize(values) {
        return (0, _helpersSegmentJs._)(values.sort(sorter));
    }
}
function interpolate(table, val, reverse) {
    let lo = 0;
    let hi = table.length - 1;
    let prevSource, nextSource, prevTarget, nextTarget;
    if (reverse) {
        if (val >= table[lo].pos && val <= table[hi].pos) ({ lo, hi } = (0, _helpersSegmentJs.B)(table, "pos", val));
        ({ pos: prevSource, time: prevTarget } = table[lo]);
        ({ pos: nextSource, time: nextTarget } = table[hi]);
    } else {
        if (val >= table[lo].time && val <= table[hi].time) ({ lo, hi } = (0, _helpersSegmentJs.B)(table, "time", val));
        ({ time: prevSource, pos: prevTarget } = table[lo]);
        ({ time: nextSource, pos: nextTarget } = table[hi]);
    }
    const span = nextSource - prevSource;
    return span ? prevTarget + (nextTarget - prevTarget) * (val - prevSource) / span : prevTarget;
}
class TimeSeriesScale extends TimeScale {
    static id = "timeseries";
    static defaults = TimeScale.defaults;
    constructor(props){
        super(props);
        this._table = [];
        this._minPos = undefined;
        this._tableRange = undefined;
    }
    initOffsets() {
        const timestamps = this._getTimestampsForTable();
        const table = this._table = this.buildLookupTable(timestamps);
        this._minPos = interpolate(table, this.min);
        this._tableRange = interpolate(table, this.max) - this._minPos;
        super.initOffsets(timestamps);
    }
    buildLookupTable(timestamps) {
        const { min, max } = this;
        const items = [];
        const table = [];
        let i, ilen, prev, curr, next;
        for(i = 0, ilen = timestamps.length; i < ilen; ++i){
            curr = timestamps[i];
            if (curr >= min && curr <= max) items.push(curr);
        }
        if (items.length < 2) return [
            {
                time: min,
                pos: 0
            },
            {
                time: max,
                pos: 1
            }
        ];
        for(i = 0, ilen = items.length; i < ilen; ++i){
            next = items[i + 1];
            prev = items[i - 1];
            curr = items[i];
            if (Math.round((next + prev) / 2) !== curr) table.push({
                time: curr,
                pos: i / (ilen - 1)
            });
        }
        return table;
    }
    _generate() {
        const min = this.min;
        const max = this.max;
        let timestamps = super.getDataTimestamps();
        if (!timestamps.includes(min) || !timestamps.length) timestamps.splice(0, 0, min);
        if (!timestamps.includes(max) || timestamps.length === 1) timestamps.push(max);
        return timestamps.sort((a, b)=>a - b);
    }
    _getTimestampsForTable() {
        let timestamps = this._cache.all || [];
        if (timestamps.length) return timestamps;
        const data = this.getDataTimestamps();
        const label = this.getLabelTimestamps();
        if (data.length && label.length) timestamps = this.normalize(data.concat(label));
        else timestamps = data.length ? data : label;
        timestamps = this._cache.all = timestamps;
        return timestamps;
    }
    getDecimalForValue(value) {
        return (interpolate(this._table, value) - this._minPos) / this._tableRange;
    }
    getValueForPixel(pixel) {
        const offsets = this._offsets;
        const decimal = this.getDecimalForPixel(pixel) / offsets.factor - offsets.end;
        return interpolate(this._table, decimal * this._tableRange + this._minPos, true);
    }
}
var scales = /*#__PURE__*/ Object.freeze({
    __proto__: null,
    CategoryScale: CategoryScale,
    LinearScale: LinearScale,
    LogarithmicScale: LogarithmicScale,
    RadialLinearScale: RadialLinearScale,
    TimeScale: TimeScale,
    TimeSeriesScale: TimeSeriesScale
});
const registerables = [
    controllers,
    elements,
    plugins,
    scales
];

},{"./chunks/helpers.segment.js":"7oQuk","@kurkle/color":"2aojw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"7oQuk":[function(require,module,exports) {
/*!
 * Chart.js v4.4.3
 * https://www.chartjs.org
 * (c) 2024 Chart.js Contributors
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "$", ()=>unclipArea);
parcelHelpers.export(exports, "A", ()=>_rlookupByKey);
parcelHelpers.export(exports, "B", ()=>_lookupByKey);
parcelHelpers.export(exports, "C", ()=>_isPointInArea);
parcelHelpers.export(exports, "D", ()=>getAngleFromPoint);
parcelHelpers.export(exports, "E", ()=>toPadding);
parcelHelpers.export(exports, "F", ()=>each);
parcelHelpers.export(exports, "G", ()=>getMaximumSize);
parcelHelpers.export(exports, "H", ()=>HALF_PI);
parcelHelpers.export(exports, "I", ()=>_getParentNode);
parcelHelpers.export(exports, "J", ()=>readUsedSize);
parcelHelpers.export(exports, "K", ()=>supportsEventListenerOptions);
parcelHelpers.export(exports, "L", ()=>throttled);
parcelHelpers.export(exports, "M", ()=>_isDomSupported);
parcelHelpers.export(exports, "N", ()=>_factorize);
parcelHelpers.export(exports, "O", ()=>finiteOrDefault);
parcelHelpers.export(exports, "P", ()=>PI);
parcelHelpers.export(exports, "Q", ()=>callback);
parcelHelpers.export(exports, "R", ()=>_addGrace);
parcelHelpers.export(exports, "S", ()=>_limitValue);
parcelHelpers.export(exports, "T", ()=>TAU);
parcelHelpers.export(exports, "U", ()=>toDegrees);
parcelHelpers.export(exports, "V", ()=>_measureText);
parcelHelpers.export(exports, "W", ()=>_int16Range);
parcelHelpers.export(exports, "X", ()=>_alignPixel);
parcelHelpers.export(exports, "Y", ()=>clipArea);
parcelHelpers.export(exports, "Z", ()=>renderText);
parcelHelpers.export(exports, "_", ()=>_arrayUnique);
parcelHelpers.export(exports, "a", ()=>resolve);
parcelHelpers.export(exports, "a$", ()=>fontString);
parcelHelpers.export(exports, "a0", ()=>toFont);
parcelHelpers.export(exports, "a1", ()=>_toLeftRightCenter);
parcelHelpers.export(exports, "a2", ()=>_alignStartEnd);
parcelHelpers.export(exports, "a3", ()=>overrides);
parcelHelpers.export(exports, "a4", ()=>merge);
parcelHelpers.export(exports, "a5", ()=>_capitalize);
parcelHelpers.export(exports, "a6", ()=>descriptors);
parcelHelpers.export(exports, "a7", ()=>isFunction);
parcelHelpers.export(exports, "a8", ()=>_attachContext);
parcelHelpers.export(exports, "a9", ()=>_createResolver);
parcelHelpers.export(exports, "aA", ()=>overrideTextDirection);
parcelHelpers.export(exports, "aB", ()=>_textX);
parcelHelpers.export(exports, "aC", ()=>restoreTextDirection);
parcelHelpers.export(exports, "aD", ()=>drawPointLegend);
parcelHelpers.export(exports, "aE", ()=>distanceBetweenPoints);
parcelHelpers.export(exports, "aF", ()=>noop);
parcelHelpers.export(exports, "aG", ()=>_setMinAndMaxByKey);
parcelHelpers.export(exports, "aH", ()=>niceNum);
parcelHelpers.export(exports, "aI", ()=>almostWhole);
parcelHelpers.export(exports, "aJ", ()=>almostEquals);
parcelHelpers.export(exports, "aK", ()=>_decimalPlaces);
parcelHelpers.export(exports, "aL", ()=>Ticks);
parcelHelpers.export(exports, "aM", ()=>log10);
parcelHelpers.export(exports, "aN", ()=>_longestText);
parcelHelpers.export(exports, "aO", ()=>_filterBetween);
parcelHelpers.export(exports, "aP", ()=>_lookup);
parcelHelpers.export(exports, "aQ", ()=>isPatternOrGradient);
parcelHelpers.export(exports, "aR", ()=>getHoverColor);
parcelHelpers.export(exports, "aS", ()=>clone);
parcelHelpers.export(exports, "aT", ()=>_merger);
parcelHelpers.export(exports, "aU", ()=>_mergerIf);
parcelHelpers.export(exports, "aV", ()=>_deprecated);
parcelHelpers.export(exports, "aW", ()=>_splitKey);
parcelHelpers.export(exports, "aX", ()=>toFontString);
parcelHelpers.export(exports, "aY", ()=>splineCurve);
parcelHelpers.export(exports, "aZ", ()=>splineCurveMonotone);
parcelHelpers.export(exports, "a_", ()=>getStyle);
parcelHelpers.export(exports, "aa", ()=>_descriptors);
parcelHelpers.export(exports, "ab", ()=>mergeIf);
parcelHelpers.export(exports, "ac", ()=>uid);
parcelHelpers.export(exports, "ad", ()=>debounce);
parcelHelpers.export(exports, "ae", ()=>retinaScale);
parcelHelpers.export(exports, "af", ()=>clearCanvas);
parcelHelpers.export(exports, "ag", ()=>setsEqual);
parcelHelpers.export(exports, "ah", ()=>_elementsEqual);
parcelHelpers.export(exports, "ai", ()=>_isClickEvent);
parcelHelpers.export(exports, "aj", ()=>_isBetween);
parcelHelpers.export(exports, "ak", ()=>_readValueToProps);
parcelHelpers.export(exports, "al", ()=>_updateBezierControlPoints);
parcelHelpers.export(exports, "am", ()=>_computeSegments);
parcelHelpers.export(exports, "an", ()=>_boundSegments);
parcelHelpers.export(exports, "ao", ()=>_steppedInterpolation);
parcelHelpers.export(exports, "ap", ()=>_bezierInterpolation);
parcelHelpers.export(exports, "aq", ()=>_pointInLine);
parcelHelpers.export(exports, "ar", ()=>_steppedLineTo);
parcelHelpers.export(exports, "as", ()=>_bezierCurveTo);
parcelHelpers.export(exports, "at", ()=>drawPoint);
parcelHelpers.export(exports, "au", ()=>addRoundedRectPath);
parcelHelpers.export(exports, "av", ()=>toTRBL);
parcelHelpers.export(exports, "aw", ()=>toTRBLCorners);
parcelHelpers.export(exports, "ax", ()=>_boundSegment);
parcelHelpers.export(exports, "ay", ()=>_normalizeAngle);
parcelHelpers.export(exports, "az", ()=>getRtlAdapter);
parcelHelpers.export(exports, "b", ()=>isArray);
parcelHelpers.export(exports, "b0", ()=>toLineHeight);
parcelHelpers.export(exports, "b1", ()=>PITAU);
parcelHelpers.export(exports, "b2", ()=>INFINITY);
parcelHelpers.export(exports, "b3", ()=>RAD_PER_DEG);
parcelHelpers.export(exports, "b4", ()=>QUARTER_PI);
parcelHelpers.export(exports, "b5", ()=>TWO_THIRDS_PI);
parcelHelpers.export(exports, "b6", ()=>_angleDiff);
parcelHelpers.export(exports, "c", ()=>color);
parcelHelpers.export(exports, "d", ()=>defaults);
parcelHelpers.export(exports, "e", ()=>effects);
parcelHelpers.export(exports, "f", ()=>resolveObjectKey);
parcelHelpers.export(exports, "g", ()=>isNumberFinite);
parcelHelpers.export(exports, "h", ()=>defined);
parcelHelpers.export(exports, "i", ()=>isObject);
parcelHelpers.export(exports, "j", ()=>createContext);
parcelHelpers.export(exports, "k", ()=>isNullOrUndef);
parcelHelpers.export(exports, "l", ()=>listenArrayEvents);
parcelHelpers.export(exports, "m", ()=>toPercentage);
parcelHelpers.export(exports, "n", ()=>toDimension);
parcelHelpers.export(exports, "o", ()=>formatNumber);
parcelHelpers.export(exports, "p", ()=>_angleBetween);
parcelHelpers.export(exports, "q", ()=>_getStartAndCountOfVisiblePoints);
parcelHelpers.export(exports, "r", ()=>requestAnimFrame);
parcelHelpers.export(exports, "s", ()=>sign);
parcelHelpers.export(exports, "t", ()=>toRadians);
parcelHelpers.export(exports, "u", ()=>unlistenArrayEvents);
parcelHelpers.export(exports, "v", ()=>valueOrDefault);
parcelHelpers.export(exports, "w", ()=>_scaleRangesChanged);
parcelHelpers.export(exports, "x", ()=>isNumber);
parcelHelpers.export(exports, "y", ()=>_parseObjectDataRadialScale);
parcelHelpers.export(exports, "z", ()=>getRelativePosition);
var _color = require("@kurkle/color");
/**
 * @namespace Chart.helpers
 */ /**
 * An empty function that can be used, for example, for optional callback.
 */ function noop() {
/* noop */ }
/**
 * Returns a unique id, sequentially generated from a global variable.
 */ const uid = (()=>{
    let id = 0;
    return ()=>id++;
})();
/**
 * Returns true if `value` is neither null nor undefined, else returns false.
 * @param value - The value to test.
 * @since 2.7.0
 */ function isNullOrUndef(value) {
    return value === null || typeof value === "undefined";
}
/**
 * Returns true if `value` is an array (including typed arrays), else returns false.
 * @param value - The value to test.
 * @function
 */ function isArray(value) {
    if (Array.isArray && Array.isArray(value)) return true;
    const type = Object.prototype.toString.call(value);
    if (type.slice(0, 7) === "[object" && type.slice(-6) === "Array]") return true;
    return false;
}
/**
 * Returns true if `value` is an object (excluding null), else returns false.
 * @param value - The value to test.
 * @since 2.7.0
 */ function isObject(value) {
    return value !== null && Object.prototype.toString.call(value) === "[object Object]";
}
/**
 * Returns true if `value` is a finite number, else returns false
 * @param value  - The value to test.
 */ function isNumberFinite(value) {
    return (typeof value === "number" || value instanceof Number) && isFinite(+value);
}
/**
 * Returns `value` if finite, else returns `defaultValue`.
 * @param value - The value to return if defined.
 * @param defaultValue - The value to return if `value` is not finite.
 */ function finiteOrDefault(value, defaultValue) {
    return isNumberFinite(value) ? value : defaultValue;
}
/**
 * Returns `value` if defined, else returns `defaultValue`.
 * @param value - The value to return if defined.
 * @param defaultValue - The value to return if `value` is undefined.
 */ function valueOrDefault(value, defaultValue) {
    return typeof value === "undefined" ? defaultValue : value;
}
const toPercentage = (value, dimension)=>typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 : +value / dimension;
const toDimension = (value, dimension)=>typeof value === "string" && value.endsWith("%") ? parseFloat(value) / 100 * dimension : +value;
/**
 * Calls `fn` with the given `args` in the scope defined by `thisArg` and returns the
 * value returned by `fn`. If `fn` is not a function, this method returns undefined.
 * @param fn - The function to call.
 * @param args - The arguments with which `fn` should be called.
 * @param [thisArg] - The value of `this` provided for the call to `fn`.
 */ function callback(fn, args, thisArg) {
    if (fn && typeof fn.call === "function") return fn.apply(thisArg, args);
}
function each(loopable, fn, thisArg, reverse) {
    let i, len, keys;
    if (isArray(loopable)) {
        len = loopable.length;
        if (reverse) for(i = len - 1; i >= 0; i--)fn.call(thisArg, loopable[i], i);
        else for(i = 0; i < len; i++)fn.call(thisArg, loopable[i], i);
    } else if (isObject(loopable)) {
        keys = Object.keys(loopable);
        len = keys.length;
        for(i = 0; i < len; i++)fn.call(thisArg, loopable[keys[i]], keys[i]);
    }
}
/**
 * Returns true if the `a0` and `a1` arrays have the same content, else returns false.
 * @param a0 - The array to compare
 * @param a1 - The array to compare
 * @private
 */ function _elementsEqual(a0, a1) {
    let i, ilen, v0, v1;
    if (!a0 || !a1 || a0.length !== a1.length) return false;
    for(i = 0, ilen = a0.length; i < ilen; ++i){
        v0 = a0[i];
        v1 = a1[i];
        if (v0.datasetIndex !== v1.datasetIndex || v0.index !== v1.index) return false;
    }
    return true;
}
/**
 * Returns a deep copy of `source` without keeping references on objects and arrays.
 * @param source - The value to clone.
 */ function clone(source) {
    if (isArray(source)) return source.map(clone);
    if (isObject(source)) {
        const target = Object.create(null);
        const keys = Object.keys(source);
        const klen = keys.length;
        let k = 0;
        for(; k < klen; ++k)target[keys[k]] = clone(source[keys[k]]);
        return target;
    }
    return source;
}
function isValidKey(key) {
    return [
        "__proto__",
        "prototype",
        "constructor"
    ].indexOf(key) === -1;
}
/**
 * The default merger when Chart.helpers.merge is called without merger option.
 * Note(SB): also used by mergeConfig and mergeScaleConfig as fallback.
 * @private
 */ function _merger(key, target, source, options) {
    if (!isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) // eslint-disable-next-line @typescript-eslint/no-use-before-define
    merge(tval, sval, options);
    else target[key] = clone(sval);
}
function merge(target, source, options) {
    const sources = isArray(source) ? source : [
        source
    ];
    const ilen = sources.length;
    if (!isObject(target)) return target;
    options = options || {};
    const merger = options.merger || _merger;
    let current;
    for(let i = 0; i < ilen; ++i){
        current = sources[i];
        if (!isObject(current)) continue;
        const keys = Object.keys(current);
        for(let k = 0, klen = keys.length; k < klen; ++k)merger(keys[k], target, current, options);
    }
    return target;
}
function mergeIf(target, source) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    return merge(target, source, {
        merger: _mergerIf
    });
}
/**
 * Merges source[key] in target[key] only if target[key] is undefined.
 * @private
 */ function _mergerIf(key, target, source) {
    if (!isValidKey(key)) return;
    const tval = target[key];
    const sval = source[key];
    if (isObject(tval) && isObject(sval)) mergeIf(tval, sval);
    else if (!Object.prototype.hasOwnProperty.call(target, key)) target[key] = clone(sval);
}
/**
 * @private
 */ function _deprecated(scope, value, previous, current) {
    if (value !== undefined) console.warn(scope + ': "' + previous + '" is deprecated. Please use "' + current + '" instead');
}
// resolveObjectKey resolver cache
const keyResolvers = {
    // Chart.helpers.core resolveObjectKey should resolve empty key to root object
    "": (v)=>v,
    // default resolvers
    x: (o)=>o.x,
    y: (o)=>o.y
};
/**
 * @private
 */ function _splitKey(key) {
    const parts = key.split(".");
    const keys = [];
    let tmp = "";
    for (const part of parts){
        tmp += part;
        if (tmp.endsWith("\\")) tmp = tmp.slice(0, -1) + ".";
        else {
            keys.push(tmp);
            tmp = "";
        }
    }
    return keys;
}
function _getKeyResolver(key) {
    const keys = _splitKey(key);
    return (obj)=>{
        for (const k of keys){
            if (k === "") break;
            obj = obj && obj[k];
        }
        return obj;
    };
}
function resolveObjectKey(obj, key) {
    const resolver = keyResolvers[key] || (keyResolvers[key] = _getKeyResolver(key));
    return resolver(obj);
}
/**
 * @private
 */ function _capitalize(str) {
    return str.charAt(0).toUpperCase() + str.slice(1);
}
const defined = (value)=>typeof value !== "undefined";
const isFunction = (value)=>typeof value === "function";
// Adapted from https://stackoverflow.com/questions/31128855/comparing-ecma6-sets-for-equality#31129384
const setsEqual = (a, b)=>{
    if (a.size !== b.size) return false;
    for (const item of a){
        if (!b.has(item)) return false;
    }
    return true;
};
/**
 * @param e - The event
 * @private
 */ function _isClickEvent(e) {
    return e.type === "mouseup" || e.type === "click" || e.type === "contextmenu";
}
/**
 * @alias Chart.helpers.math
 * @namespace
 */ const PI = Math.PI;
const TAU = 2 * PI;
const PITAU = TAU + PI;
const INFINITY = Number.POSITIVE_INFINITY;
const RAD_PER_DEG = PI / 180;
const HALF_PI = PI / 2;
const QUARTER_PI = PI / 4;
const TWO_THIRDS_PI = PI * 2 / 3;
const log10 = Math.log10;
const sign = Math.sign;
function almostEquals(x, y, epsilon) {
    return Math.abs(x - y) < epsilon;
}
/**
 * Implementation of the nice number algorithm used in determining where axis labels will go
 */ function niceNum(range) {
    const roundedRange = Math.round(range);
    range = almostEquals(range, roundedRange, range / 1000) ? roundedRange : range;
    const niceRange = Math.pow(10, Math.floor(log10(range)));
    const fraction = range / niceRange;
    const niceFraction = fraction <= 1 ? 1 : fraction <= 2 ? 2 : fraction <= 5 ? 5 : 10;
    return niceFraction * niceRange;
}
/**
 * Returns an array of factors sorted from 1 to sqrt(value)
 * @private
 */ function _factorize(value) {
    const result = [];
    const sqrt = Math.sqrt(value);
    let i;
    for(i = 1; i < sqrt; i++)if (value % i === 0) {
        result.push(i);
        result.push(value / i);
    }
    if (sqrt === (sqrt | 0)) result.push(sqrt);
    result.sort((a, b)=>a - b).pop();
    return result;
}
function isNumber(n) {
    return !isNaN(parseFloat(n)) && isFinite(n);
}
function almostWhole(x, epsilon) {
    const rounded = Math.round(x);
    return rounded - epsilon <= x && rounded + epsilon >= x;
}
/**
 * @private
 */ function _setMinAndMaxByKey(array, target, property) {
    let i, ilen, value;
    for(i = 0, ilen = array.length; i < ilen; i++){
        value = array[i][property];
        if (!isNaN(value)) {
            target.min = Math.min(target.min, value);
            target.max = Math.max(target.max, value);
        }
    }
}
function toRadians(degrees) {
    return degrees * (PI / 180);
}
function toDegrees(radians) {
    return radians * (180 / PI);
}
/**
 * Returns the number of decimal places
 * i.e. the number of digits after the decimal point, of the value of this Number.
 * @param x - A number.
 * @returns The number of decimal places.
 * @private
 */ function _decimalPlaces(x) {
    if (!isNumberFinite(x)) return;
    let e = 1;
    let p = 0;
    while(Math.round(x * e) / e !== x){
        e *= 10;
        p++;
    }
    return p;
}
// Gets the angle from vertical upright to the point about a centre.
function getAngleFromPoint(centrePoint, anglePoint) {
    const distanceFromXCenter = anglePoint.x - centrePoint.x;
    const distanceFromYCenter = anglePoint.y - centrePoint.y;
    const radialDistanceFromCenter = Math.sqrt(distanceFromXCenter * distanceFromXCenter + distanceFromYCenter * distanceFromYCenter);
    let angle = Math.atan2(distanceFromYCenter, distanceFromXCenter);
    if (angle < -0.5 * PI) angle += TAU; // make sure the returned angle is in the range of (-PI/2, 3PI/2]
    return {
        angle,
        distance: radialDistanceFromCenter
    };
}
function distanceBetweenPoints(pt1, pt2) {
    return Math.sqrt(Math.pow(pt2.x - pt1.x, 2) + Math.pow(pt2.y - pt1.y, 2));
}
/**
 * Shortest distance between angles, in either direction.
 * @private
 */ function _angleDiff(a, b) {
    return (a - b + PITAU) % TAU - PI;
}
/**
 * Normalize angle to be between 0 and 2*PI
 * @private
 */ function _normalizeAngle(a) {
    return (a % TAU + TAU) % TAU;
}
/**
 * @private
 */ function _angleBetween(angle, start, end, sameAngleIsFullCircle) {
    const a = _normalizeAngle(angle);
    const s = _normalizeAngle(start);
    const e = _normalizeAngle(end);
    const angleToStart = _normalizeAngle(s - a);
    const angleToEnd = _normalizeAngle(e - a);
    const startToAngle = _normalizeAngle(a - s);
    const endToAngle = _normalizeAngle(a - e);
    return a === s || a === e || sameAngleIsFullCircle && s === e || angleToStart > angleToEnd && startToAngle < endToAngle;
}
/**
 * Limit `value` between `min` and `max`
 * @param value
 * @param min
 * @param max
 * @private
 */ function _limitValue(value, min, max) {
    return Math.max(min, Math.min(max, value));
}
/**
 * @param {number} value
 * @private
 */ function _int16Range(value) {
    return _limitValue(value, -32768, 32767);
}
/**
 * @param value
 * @param start
 * @param end
 * @param [epsilon]
 * @private
 */ function _isBetween(value, start, end, epsilon = 1e-6) {
    return value >= Math.min(start, end) - epsilon && value <= Math.max(start, end) + epsilon;
}
function _lookup(table, value, cmp) {
    cmp = cmp || ((index)=>table[index] < value);
    let hi = table.length - 1;
    let lo = 0;
    let mid;
    while(hi - lo > 1){
        mid = lo + hi >> 1;
        if (cmp(mid)) lo = mid;
        else hi = mid;
    }
    return {
        lo,
        hi
    };
}
/**
 * Binary search
 * @param table - the table search. must be sorted!
 * @param key - property name for the value in each entry
 * @param value - value to find
 * @param last - lookup last index
 * @private
 */ const _lookupByKey = (table, key, value, last)=>_lookup(table, value, last ? (index)=>{
        const ti = table[index][key];
        return ti < value || ti === value && table[index + 1][key] === value;
    } : (index)=>table[index][key] < value);
/**
 * Reverse binary search
 * @param table - the table search. must be sorted!
 * @param key - property name for the value in each entry
 * @param value - value to find
 * @private
 */ const _rlookupByKey = (table, key, value)=>_lookup(table, value, (index)=>table[index][key] >= value);
/**
 * Return subset of `values` between `min` and `max` inclusive.
 * Values are assumed to be in sorted order.
 * @param values - sorted array of values
 * @param min - min value
 * @param max - max value
 */ function _filterBetween(values, min, max) {
    let start = 0;
    let end = values.length;
    while(start < end && values[start] < min)start++;
    while(end > start && values[end - 1] > max)end--;
    return start > 0 || end < values.length ? values.slice(start, end) : values;
}
const arrayEvents = [
    "push",
    "pop",
    "shift",
    "splice",
    "unshift"
];
function listenArrayEvents(array, listener) {
    if (array._chartjs) {
        array._chartjs.listeners.push(listener);
        return;
    }
    Object.defineProperty(array, "_chartjs", {
        configurable: true,
        enumerable: false,
        value: {
            listeners: [
                listener
            ]
        }
    });
    arrayEvents.forEach((key)=>{
        const method = "_onData" + _capitalize(key);
        const base = array[key];
        Object.defineProperty(array, key, {
            configurable: true,
            enumerable: false,
            value (...args) {
                const res = base.apply(this, args);
                array._chartjs.listeners.forEach((object)=>{
                    if (typeof object[method] === "function") object[method](...args);
                });
                return res;
            }
        });
    });
}
function unlistenArrayEvents(array, listener) {
    const stub = array._chartjs;
    if (!stub) return;
    const listeners = stub.listeners;
    const index = listeners.indexOf(listener);
    if (index !== -1) listeners.splice(index, 1);
    if (listeners.length > 0) return;
    arrayEvents.forEach((key)=>{
        delete array[key];
    });
    delete array._chartjs;
}
/**
 * @param items
 */ function _arrayUnique(items) {
    const set = new Set(items);
    if (set.size === items.length) return items;
    return Array.from(set);
}
function fontString(pixelSize, fontStyle, fontFamily) {
    return fontStyle + " " + pixelSize + "px " + fontFamily;
}
/**
* Request animation polyfill
*/ const requestAnimFrame = function() {
    if (typeof window === "undefined") return function(callback) {
        return callback();
    };
    return window.requestAnimationFrame;
}();
/**
 * Throttles calling `fn` once per animation frame
 * Latest arguments are used on the actual call
 */ function throttled(fn, thisArg) {
    let argsToUse = [];
    let ticking = false;
    return function(...args) {
        // Save the args for use later
        argsToUse = args;
        if (!ticking) {
            ticking = true;
            requestAnimFrame.call(window, ()=>{
                ticking = false;
                fn.apply(thisArg, argsToUse);
            });
        }
    };
}
/**
 * Debounces calling `fn` for `delay` ms
 */ function debounce(fn, delay) {
    let timeout;
    return function(...args) {
        if (delay) {
            clearTimeout(timeout);
            timeout = setTimeout(fn, delay, args);
        } else fn.apply(this, args);
        return delay;
    };
}
/**
 * Converts 'start' to 'left', 'end' to 'right' and others to 'center'
 * @private
 */ const _toLeftRightCenter = (align)=>align === "start" ? "left" : align === "end" ? "right" : "center";
/**
 * Returns `start`, `end` or `(start + end) / 2` depending on `align`. Defaults to `center`
 * @private
 */ const _alignStartEnd = (align, start, end)=>align === "start" ? start : align === "end" ? end : (start + end) / 2;
/**
 * Returns `left`, `right` or `(left + right) / 2` depending on `align`. Defaults to `left`
 * @private
 */ const _textX = (align, left, right, rtl)=>{
    const check = rtl ? "left" : "right";
    return align === check ? right : align === "center" ? (left + right) / 2 : left;
};
/**
 * Return start and count of visible points.
 * @private
 */ function _getStartAndCountOfVisiblePoints(meta, points, animationsDisabled) {
    const pointCount = points.length;
    let start = 0;
    let count = pointCount;
    if (meta._sorted) {
        const { iScale, _parsed } = meta;
        const axis = iScale.axis;
        const { min, max, minDefined, maxDefined } = iScale.getUserBounds();
        if (minDefined) start = _limitValue(Math.min(_lookupByKey(_parsed, axis, min).lo, animationsDisabled ? pointCount : _lookupByKey(points, axis, iScale.getPixelForValue(min)).lo), 0, pointCount - 1);
        if (maxDefined) count = _limitValue(Math.max(_lookupByKey(_parsed, iScale.axis, max, true).hi + 1, animationsDisabled ? 0 : _lookupByKey(points, axis, iScale.getPixelForValue(max), true).hi + 1), start, pointCount) - start;
        else count = pointCount - start;
    }
    return {
        start,
        count
    };
}
/**
 * Checks if the scale ranges have changed.
 * @param {object} meta - dataset meta.
 * @returns {boolean}
 * @private
 */ function _scaleRangesChanged(meta) {
    const { xScale, yScale, _scaleRanges } = meta;
    const newRanges = {
        xmin: xScale.min,
        xmax: xScale.max,
        ymin: yScale.min,
        ymax: yScale.max
    };
    if (!_scaleRanges) {
        meta._scaleRanges = newRanges;
        return true;
    }
    const changed = _scaleRanges.xmin !== xScale.min || _scaleRanges.xmax !== xScale.max || _scaleRanges.ymin !== yScale.min || _scaleRanges.ymax !== yScale.max;
    Object.assign(_scaleRanges, newRanges);
    return changed;
}
const atEdge = (t)=>t === 0 || t === 1;
const elasticIn = (t, s, p)=>-(Math.pow(2, 10 * (t -= 1)) * Math.sin((t - s) * TAU / p));
const elasticOut = (t, s, p)=>Math.pow(2, -10 * t) * Math.sin((t - s) * TAU / p) + 1;
/**
 * Easing functions adapted from Robert Penner's easing equations.
 * @namespace Chart.helpers.easing.effects
 * @see http://www.robertpenner.com/easing/
 */ const effects = {
    linear: (t)=>t,
    easeInQuad: (t)=>t * t,
    easeOutQuad: (t)=>-t * (t - 2),
    easeInOutQuad: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t : -0.5 * (--t * (t - 2) - 1),
    easeInCubic: (t)=>t * t * t,
    easeOutCubic: (t)=>(t -= 1) * t * t + 1,
    easeInOutCubic: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t : 0.5 * ((t -= 2) * t * t + 2),
    easeInQuart: (t)=>t * t * t * t,
    easeOutQuart: (t)=>-((t -= 1) * t * t * t - 1),
    easeInOutQuart: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t : -0.5 * ((t -= 2) * t * t * t - 2),
    easeInQuint: (t)=>t * t * t * t * t,
    easeOutQuint: (t)=>(t -= 1) * t * t * t * t + 1,
    easeInOutQuint: (t)=>(t /= 0.5) < 1 ? 0.5 * t * t * t * t * t : 0.5 * ((t -= 2) * t * t * t * t + 2),
    easeInSine: (t)=>-Math.cos(t * HALF_PI) + 1,
    easeOutSine: (t)=>Math.sin(t * HALF_PI),
    easeInOutSine: (t)=>-0.5 * (Math.cos(PI * t) - 1),
    easeInExpo: (t)=>t === 0 ? 0 : Math.pow(2, 10 * (t - 1)),
    easeOutExpo: (t)=>t === 1 ? 1 : -Math.pow(2, -10 * t) + 1,
    easeInOutExpo: (t)=>atEdge(t) ? t : t < 0.5 ? 0.5 * Math.pow(2, 10 * (t * 2 - 1)) : 0.5 * (-Math.pow(2, -10 * (t * 2 - 1)) + 2),
    easeInCirc: (t)=>t >= 1 ? t : -(Math.sqrt(1 - t * t) - 1),
    easeOutCirc: (t)=>Math.sqrt(1 - (t -= 1) * t),
    easeInOutCirc: (t)=>(t /= 0.5) < 1 ? -0.5 * (Math.sqrt(1 - t * t) - 1) : 0.5 * (Math.sqrt(1 - (t -= 2) * t) + 1),
    easeInElastic: (t)=>atEdge(t) ? t : elasticIn(t, 0.075, 0.3),
    easeOutElastic: (t)=>atEdge(t) ? t : elasticOut(t, 0.075, 0.3),
    easeInOutElastic (t) {
        const s = 0.1125;
        const p = 0.45;
        return atEdge(t) ? t : t < 0.5 ? 0.5 * elasticIn(t * 2, s, p) : 0.5 + 0.5 * elasticOut(t * 2 - 1, s, p);
    },
    easeInBack (t) {
        const s = 1.70158;
        return t * t * ((s + 1) * t - s);
    },
    easeOutBack (t) {
        const s = 1.70158;
        return (t -= 1) * t * ((s + 1) * t + s) + 1;
    },
    easeInOutBack (t) {
        let s = 1.70158;
        if ((t /= 0.5) < 1) return 0.5 * (t * t * (((s *= 1.525) + 1) * t - s));
        return 0.5 * ((t -= 2) * t * (((s *= 1.525) + 1) * t + s) + 2);
    },
    easeInBounce: (t)=>1 - effects.easeOutBounce(1 - t),
    easeOutBounce (t) {
        const m = 7.5625;
        const d = 2.75;
        if (t < 1 / d) return m * t * t;
        if (t < 2 / d) return m * (t -= 1.5 / d) * t + 0.75;
        if (t < 2.5 / d) return m * (t -= 2.25 / d) * t + 0.9375;
        return m * (t -= 2.625 / d) * t + 0.984375;
    },
    easeInOutBounce: (t)=>t < 0.5 ? effects.easeInBounce(t * 2) * 0.5 : effects.easeOutBounce(t * 2 - 1) * 0.5 + 0.5
};
function isPatternOrGradient(value) {
    if (value && typeof value === "object") {
        const type = value.toString();
        return type === "[object CanvasPattern]" || type === "[object CanvasGradient]";
    }
    return false;
}
function color(value) {
    return isPatternOrGradient(value) ? value : new (0, _color.Color)(value);
}
function getHoverColor(value) {
    return isPatternOrGradient(value) ? value : new (0, _color.Color)(value).saturate(0.5).darken(0.1).hexString();
}
const numbers = [
    "x",
    "y",
    "borderWidth",
    "radius",
    "tension"
];
const colors = [
    "color",
    "borderColor",
    "backgroundColor"
];
function applyAnimationsDefaults(defaults) {
    defaults.set("animation", {
        delay: undefined,
        duration: 1000,
        easing: "easeOutQuart",
        fn: undefined,
        from: undefined,
        loop: undefined,
        to: undefined,
        type: undefined
    });
    defaults.describe("animation", {
        _fallback: false,
        _indexable: false,
        _scriptable: (name)=>name !== "onProgress" && name !== "onComplete" && name !== "fn"
    });
    defaults.set("animations", {
        colors: {
            type: "color",
            properties: colors
        },
        numbers: {
            type: "number",
            properties: numbers
        }
    });
    defaults.describe("animations", {
        _fallback: "animation"
    });
    defaults.set("transitions", {
        active: {
            animation: {
                duration: 400
            }
        },
        resize: {
            animation: {
                duration: 0
            }
        },
        show: {
            animations: {
                colors: {
                    from: "transparent"
                },
                visible: {
                    type: "boolean",
                    duration: 0
                }
            }
        },
        hide: {
            animations: {
                colors: {
                    to: "transparent"
                },
                visible: {
                    type: "boolean",
                    easing: "linear",
                    fn: (v)=>v | 0
                }
            }
        }
    });
}
function applyLayoutsDefaults(defaults) {
    defaults.set("layout", {
        autoPadding: true,
        padding: {
            top: 0,
            right: 0,
            bottom: 0,
            left: 0
        }
    });
}
const intlCache = new Map();
function getNumberFormat(locale, options) {
    options = options || {};
    const cacheKey = locale + JSON.stringify(options);
    let formatter = intlCache.get(cacheKey);
    if (!formatter) {
        formatter = new Intl.NumberFormat(locale, options);
        intlCache.set(cacheKey, formatter);
    }
    return formatter;
}
function formatNumber(num, locale, options) {
    return getNumberFormat(locale, options).format(num);
}
const formatters = {
    values (value) {
        return isArray(value) ? value : "" + value;
    },
    numeric (tickValue, index, ticks) {
        if (tickValue === 0) return "0";
        const locale = this.chart.options.locale;
        let notation;
        let delta = tickValue;
        if (ticks.length > 1) {
            const maxTick = Math.max(Math.abs(ticks[0].value), Math.abs(ticks[ticks.length - 1].value));
            if (maxTick < 1e-4 || maxTick > 1e+15) notation = "scientific";
            delta = calculateDelta(tickValue, ticks);
        }
        const logDelta = log10(Math.abs(delta));
        const numDecimal = isNaN(logDelta) ? 1 : Math.max(Math.min(-1 * Math.floor(logDelta), 20), 0);
        const options = {
            notation,
            minimumFractionDigits: numDecimal,
            maximumFractionDigits: numDecimal
        };
        Object.assign(options, this.options.ticks.format);
        return formatNumber(tickValue, locale, options);
    },
    logarithmic (tickValue, index, ticks) {
        if (tickValue === 0) return "0";
        const remain = ticks[index].significand || tickValue / Math.pow(10, Math.floor(log10(tickValue)));
        if ([
            1,
            2,
            3,
            5,
            10,
            15
        ].includes(remain) || index > 0.8 * ticks.length) return formatters.numeric.call(this, tickValue, index, ticks);
        return "";
    }
};
function calculateDelta(tickValue, ticks) {
    let delta = ticks.length > 3 ? ticks[2].value - ticks[1].value : ticks[1].value - ticks[0].value;
    if (Math.abs(delta) >= 1 && tickValue !== Math.floor(tickValue)) delta = tickValue - Math.floor(tickValue);
    return delta;
}
var Ticks = {
    formatters
};
function applyScaleDefaults(defaults) {
    defaults.set("scale", {
        display: true,
        offset: false,
        reverse: false,
        beginAtZero: false,
        bounds: "ticks",
        clip: true,
        grace: 0,
        grid: {
            display: true,
            lineWidth: 1,
            drawOnChartArea: true,
            drawTicks: true,
            tickLength: 8,
            tickWidth: (_ctx, options)=>options.lineWidth,
            tickColor: (_ctx, options)=>options.color,
            offset: false
        },
        border: {
            display: true,
            dash: [],
            dashOffset: 0.0,
            width: 1
        },
        title: {
            display: false,
            text: "",
            padding: {
                top: 4,
                bottom: 4
            }
        },
        ticks: {
            minRotation: 0,
            maxRotation: 50,
            mirror: false,
            textStrokeWidth: 0,
            textStrokeColor: "",
            padding: 3,
            display: true,
            autoSkip: true,
            autoSkipPadding: 3,
            labelOffset: 0,
            callback: Ticks.formatters.values,
            minor: {},
            major: {},
            align: "center",
            crossAlign: "near",
            showLabelBackdrop: false,
            backdropColor: "rgba(255, 255, 255, 0.75)",
            backdropPadding: 2
        }
    });
    defaults.route("scale.ticks", "color", "", "color");
    defaults.route("scale.grid", "color", "", "borderColor");
    defaults.route("scale.border", "color", "", "borderColor");
    defaults.route("scale.title", "color", "", "color");
    defaults.describe("scale", {
        _fallback: false,
        _scriptable: (name)=>!name.startsWith("before") && !name.startsWith("after") && name !== "callback" && name !== "parser",
        _indexable: (name)=>name !== "borderDash" && name !== "tickBorderDash" && name !== "dash"
    });
    defaults.describe("scales", {
        _fallback: "scale"
    });
    defaults.describe("scale.ticks", {
        _scriptable: (name)=>name !== "backdropPadding" && name !== "callback",
        _indexable: (name)=>name !== "backdropPadding"
    });
}
const overrides = Object.create(null);
const descriptors = Object.create(null);
function getScope$1(node, key) {
    if (!key) return node;
    const keys = key.split(".");
    for(let i = 0, n = keys.length; i < n; ++i){
        const k = keys[i];
        node = node[k] || (node[k] = Object.create(null));
    }
    return node;
}
function set(root, scope, values) {
    if (typeof scope === "string") return merge(getScope$1(root, scope), values);
    return merge(getScope$1(root, ""), scope);
}
class Defaults {
    constructor(_descriptors, _appliers){
        this.animation = undefined;
        this.backgroundColor = "rgba(0,0,0,0.1)";
        this.borderColor = "rgba(0,0,0,0.1)";
        this.color = "#666";
        this.datasets = {};
        this.devicePixelRatio = (context)=>context.chart.platform.getDevicePixelRatio();
        this.elements = {};
        this.events = [
            "mousemove",
            "mouseout",
            "click",
            "touchstart",
            "touchmove"
        ];
        this.font = {
            family: "'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",
            size: 12,
            style: "normal",
            lineHeight: 1.2,
            weight: null
        };
        this.hover = {};
        this.hoverBackgroundColor = (ctx, options)=>getHoverColor(options.backgroundColor);
        this.hoverBorderColor = (ctx, options)=>getHoverColor(options.borderColor);
        this.hoverColor = (ctx, options)=>getHoverColor(options.color);
        this.indexAxis = "x";
        this.interaction = {
            mode: "nearest",
            intersect: true,
            includeInvisible: false
        };
        this.maintainAspectRatio = true;
        this.onHover = null;
        this.onClick = null;
        this.parsing = true;
        this.plugins = {};
        this.responsive = true;
        this.scale = undefined;
        this.scales = {};
        this.showLine = true;
        this.drawActiveElementsOnTop = true;
        this.describe(_descriptors);
        this.apply(_appliers);
    }
    set(scope, values) {
        return set(this, scope, values);
    }
    get(scope) {
        return getScope$1(this, scope);
    }
    describe(scope, values) {
        return set(descriptors, scope, values);
    }
    override(scope, values) {
        return set(overrides, scope, values);
    }
    route(scope, name, targetScope, targetName) {
        const scopeObject = getScope$1(this, scope);
        const targetScopeObject = getScope$1(this, targetScope);
        const privateName = "_" + name;
        Object.defineProperties(scopeObject, {
            [privateName]: {
                value: scopeObject[name],
                writable: true
            },
            [name]: {
                enumerable: true,
                get () {
                    const local = this[privateName];
                    const target = targetScopeObject[targetName];
                    if (isObject(local)) return Object.assign({}, target, local);
                    return valueOrDefault(local, target);
                },
                set (value) {
                    this[privateName] = value;
                }
            }
        });
    }
    apply(appliers) {
        appliers.forEach((apply)=>apply(this));
    }
}
var defaults = /* #__PURE__ */ new Defaults({
    _scriptable: (name)=>!name.startsWith("on"),
    _indexable: (name)=>name !== "events",
    hover: {
        _fallback: "interaction"
    },
    interaction: {
        _scriptable: false,
        _indexable: false
    }
}, [
    applyAnimationsDefaults,
    applyLayoutsDefaults,
    applyScaleDefaults
]);
/**
 * Converts the given font object into a CSS font string.
 * @param font - A font object.
 * @return The CSS font string. See https://developer.mozilla.org/en-US/docs/Web/CSS/font
 * @private
 */ function toFontString(font) {
    if (!font || isNullOrUndef(font.size) || isNullOrUndef(font.family)) return null;
    return (font.style ? font.style + " " : "") + (font.weight ? font.weight + " " : "") + font.size + "px " + font.family;
}
/**
 * @private
 */ function _measureText(ctx, data, gc, longest, string) {
    let textWidth = data[string];
    if (!textWidth) {
        textWidth = data[string] = ctx.measureText(string).width;
        gc.push(string);
    }
    if (textWidth > longest) longest = textWidth;
    return longest;
}
/**
 * @private
 */ // eslint-disable-next-line complexity
function _longestText(ctx, font, arrayOfThings, cache) {
    cache = cache || {};
    let data = cache.data = cache.data || {};
    let gc = cache.garbageCollect = cache.garbageCollect || [];
    if (cache.font !== font) {
        data = cache.data = {};
        gc = cache.garbageCollect = [];
        cache.font = font;
    }
    ctx.save();
    ctx.font = font;
    let longest = 0;
    const ilen = arrayOfThings.length;
    let i, j, jlen, thing, nestedThing;
    for(i = 0; i < ilen; i++){
        thing = arrayOfThings[i];
        // Undefined strings and arrays should not be measured
        if (thing !== undefined && thing !== null && !isArray(thing)) longest = _measureText(ctx, data, gc, longest, thing);
        else if (isArray(thing)) // if it is an array lets measure each element
        // to do maybe simplify this function a bit so we can do this more recursively?
        for(j = 0, jlen = thing.length; j < jlen; j++){
            nestedThing = thing[j];
            // Undefined strings and arrays should not be measured
            if (nestedThing !== undefined && nestedThing !== null && !isArray(nestedThing)) longest = _measureText(ctx, data, gc, longest, nestedThing);
        }
    }
    ctx.restore();
    const gcLen = gc.length / 2;
    if (gcLen > arrayOfThings.length) {
        for(i = 0; i < gcLen; i++)delete data[gc[i]];
        gc.splice(0, gcLen);
    }
    return longest;
}
/**
 * Returns the aligned pixel value to avoid anti-aliasing blur
 * @param chart - The chart instance.
 * @param pixel - A pixel value.
 * @param width - The width of the element.
 * @returns The aligned pixel value.
 * @private
 */ function _alignPixel(chart, pixel, width) {
    const devicePixelRatio = chart.currentDevicePixelRatio;
    const halfWidth = width !== 0 ? Math.max(width / 2, 0.5) : 0;
    return Math.round((pixel - halfWidth) * devicePixelRatio) / devicePixelRatio + halfWidth;
}
/**
 * Clears the entire canvas.
 */ function clearCanvas(canvas, ctx) {
    if (!ctx && !canvas) return;
    ctx = ctx || canvas.getContext("2d");
    ctx.save();
    // canvas.width and canvas.height do not consider the canvas transform,
    // while clearRect does
    ctx.resetTransform();
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.restore();
}
function drawPoint(ctx, options, x, y) {
    // eslint-disable-next-line @typescript-eslint/no-use-before-define
    drawPointLegend(ctx, options, x, y, null);
}
// eslint-disable-next-line complexity
function drawPointLegend(ctx, options, x, y, w) {
    let type, xOffset, yOffset, size, cornerRadius, width, xOffsetW, yOffsetW;
    const style = options.pointStyle;
    const rotation = options.rotation;
    const radius = options.radius;
    let rad = (rotation || 0) * RAD_PER_DEG;
    if (style && typeof style === "object") {
        type = style.toString();
        if (type === "[object HTMLImageElement]" || type === "[object HTMLCanvasElement]") {
            ctx.save();
            ctx.translate(x, y);
            ctx.rotate(rad);
            ctx.drawImage(style, -style.width / 2, -style.height / 2, style.width, style.height);
            ctx.restore();
            return;
        }
    }
    if (isNaN(radius) || radius <= 0) return;
    ctx.beginPath();
    switch(style){
        // Default includes circle
        default:
            if (w) ctx.ellipse(x, y, w / 2, radius, 0, 0, TAU);
            else ctx.arc(x, y, radius, 0, TAU);
            ctx.closePath();
            break;
        case "triangle":
            width = w ? w / 2 : radius;
            ctx.moveTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            rad += TWO_THIRDS_PI;
            ctx.lineTo(x + Math.sin(rad) * width, y - Math.cos(rad) * radius);
            ctx.closePath();
            break;
        case "rectRounded":
            // NOTE: the rounded rect implementation changed to use `arc` instead of
            // `quadraticCurveTo` since it generates better results when rect is
            // almost a circle. 0.516 (instead of 0.5) produces results with visually
            // closer proportion to the previous impl and it is inscribed in the
            // circle with `radius`. For more details, see the following PRs:
            // https://github.com/chartjs/Chart.js/issues/5597
            // https://github.com/chartjs/Chart.js/issues/5858
            cornerRadius = radius * 0.516;
            size = radius - cornerRadius;
            xOffset = Math.cos(rad + QUARTER_PI) * size;
            xOffsetW = Math.cos(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
            yOffset = Math.sin(rad + QUARTER_PI) * size;
            yOffsetW = Math.sin(rad + QUARTER_PI) * (w ? w / 2 - cornerRadius : size);
            ctx.arc(x - xOffsetW, y - yOffset, cornerRadius, rad - PI, rad - HALF_PI);
            ctx.arc(x + yOffsetW, y - xOffset, cornerRadius, rad - HALF_PI, rad);
            ctx.arc(x + xOffsetW, y + yOffset, cornerRadius, rad, rad + HALF_PI);
            ctx.arc(x - yOffsetW, y + xOffset, cornerRadius, rad + HALF_PI, rad + PI);
            ctx.closePath();
            break;
        case "rect":
            if (!rotation) {
                size = Math.SQRT1_2 * radius;
                width = w ? w / 2 : size;
                ctx.rect(x - width, y - size, 2 * width, 2 * size);
                break;
            }
            rad += QUARTER_PI;
        /* falls through */ case "rectRot":
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            ctx.closePath();
            break;
        case "crossRot":
            rad += QUARTER_PI;
        /* falls through */ case "cross":
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            break;
        case "star":
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            rad += QUARTER_PI;
            xOffsetW = Math.cos(rad) * (w ? w / 2 : radius);
            xOffset = Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            yOffsetW = Math.sin(rad) * (w ? w / 2 : radius);
            ctx.moveTo(x - xOffsetW, y - yOffset);
            ctx.lineTo(x + xOffsetW, y + yOffset);
            ctx.moveTo(x + yOffsetW, y - xOffset);
            ctx.lineTo(x - yOffsetW, y + xOffset);
            break;
        case "line":
            xOffset = w ? w / 2 : Math.cos(rad) * radius;
            yOffset = Math.sin(rad) * radius;
            ctx.moveTo(x - xOffset, y - yOffset);
            ctx.lineTo(x + xOffset, y + yOffset);
            break;
        case "dash":
            ctx.moveTo(x, y);
            ctx.lineTo(x + Math.cos(rad) * (w ? w / 2 : radius), y + Math.sin(rad) * radius);
            break;
        case false:
            ctx.closePath();
            break;
    }
    ctx.fill();
    if (options.borderWidth > 0) ctx.stroke();
}
/**
 * Returns true if the point is inside the rectangle
 * @param point - The point to test
 * @param area - The rectangle
 * @param margin - allowed margin
 * @private
 */ function _isPointInArea(point, area, margin) {
    margin = margin || 0.5; // margin - default is to match rounded decimals
    return !area || point && point.x > area.left - margin && point.x < area.right + margin && point.y > area.top - margin && point.y < area.bottom + margin;
}
function clipArea(ctx, area) {
    ctx.save();
    ctx.beginPath();
    ctx.rect(area.left, area.top, area.right - area.left, area.bottom - area.top);
    ctx.clip();
}
function unclipArea(ctx) {
    ctx.restore();
}
/**
 * @private
 */ function _steppedLineTo(ctx, previous, target, flip, mode) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    if (mode === "middle") {
        const midpoint = (previous.x + target.x) / 2.0;
        ctx.lineTo(midpoint, previous.y);
        ctx.lineTo(midpoint, target.y);
    } else if (mode === "after" !== !!flip) ctx.lineTo(previous.x, target.y);
    else ctx.lineTo(target.x, previous.y);
    ctx.lineTo(target.x, target.y);
}
/**
 * @private
 */ function _bezierCurveTo(ctx, previous, target, flip) {
    if (!previous) return ctx.lineTo(target.x, target.y);
    ctx.bezierCurveTo(flip ? previous.cp1x : previous.cp2x, flip ? previous.cp1y : previous.cp2y, flip ? target.cp2x : target.cp1x, flip ? target.cp2y : target.cp1y, target.x, target.y);
}
function setRenderOpts(ctx, opts) {
    if (opts.translation) ctx.translate(opts.translation[0], opts.translation[1]);
    if (!isNullOrUndef(opts.rotation)) ctx.rotate(opts.rotation);
    if (opts.color) ctx.fillStyle = opts.color;
    if (opts.textAlign) ctx.textAlign = opts.textAlign;
    if (opts.textBaseline) ctx.textBaseline = opts.textBaseline;
}
function decorateText(ctx, x, y, line, opts) {
    if (opts.strikethrough || opts.underline) {
        /**
     * Now that IE11 support has been dropped, we can use more
     * of the TextMetrics object. The actual bounding boxes
     * are unflagged in Chrome, Firefox, Edge, and Safari so they
     * can be safely used.
     * See https://developer.mozilla.org/en-US/docs/Web/API/TextMetrics#Browser_compatibility
     */ const metrics = ctx.measureText(line);
        const left = x - metrics.actualBoundingBoxLeft;
        const right = x + metrics.actualBoundingBoxRight;
        const top = y - metrics.actualBoundingBoxAscent;
        const bottom = y + metrics.actualBoundingBoxDescent;
        const yDecoration = opts.strikethrough ? (top + bottom) / 2 : bottom;
        ctx.strokeStyle = ctx.fillStyle;
        ctx.beginPath();
        ctx.lineWidth = opts.decorationWidth || 2;
        ctx.moveTo(left, yDecoration);
        ctx.lineTo(right, yDecoration);
        ctx.stroke();
    }
}
function drawBackdrop(ctx, opts) {
    const oldColor = ctx.fillStyle;
    ctx.fillStyle = opts.color;
    ctx.fillRect(opts.left, opts.top, opts.width, opts.height);
    ctx.fillStyle = oldColor;
}
/**
 * Render text onto the canvas
 */ function renderText(ctx, text, x, y, font, opts = {}) {
    const lines = isArray(text) ? text : [
        text
    ];
    const stroke = opts.strokeWidth > 0 && opts.strokeColor !== "";
    let i, line;
    ctx.save();
    ctx.font = font.string;
    setRenderOpts(ctx, opts);
    for(i = 0; i < lines.length; ++i){
        line = lines[i];
        if (opts.backdrop) drawBackdrop(ctx, opts.backdrop);
        if (stroke) {
            if (opts.strokeColor) ctx.strokeStyle = opts.strokeColor;
            if (!isNullOrUndef(opts.strokeWidth)) ctx.lineWidth = opts.strokeWidth;
            ctx.strokeText(line, x, y, opts.maxWidth);
        }
        ctx.fillText(line, x, y, opts.maxWidth);
        decorateText(ctx, x, y, line, opts);
        y += Number(font.lineHeight);
    }
    ctx.restore();
}
/**
 * Add a path of a rectangle with rounded corners to the current sub-path
 * @param ctx - Context
 * @param rect - Bounding rect
 */ function addRoundedRectPath(ctx, rect) {
    const { x, y, w, h, radius } = rect;
    // top left arc
    ctx.arc(x + radius.topLeft, y + radius.topLeft, radius.topLeft, 1.5 * PI, PI, true);
    // line from top left to bottom left
    ctx.lineTo(x, y + h - radius.bottomLeft);
    // bottom left arc
    ctx.arc(x + radius.bottomLeft, y + h - radius.bottomLeft, radius.bottomLeft, PI, HALF_PI, true);
    // line from bottom left to bottom right
    ctx.lineTo(x + w - radius.bottomRight, y + h);
    // bottom right arc
    ctx.arc(x + w - radius.bottomRight, y + h - radius.bottomRight, radius.bottomRight, HALF_PI, 0, true);
    // line from bottom right to top right
    ctx.lineTo(x + w, y + radius.topRight);
    // top right arc
    ctx.arc(x + w - radius.topRight, y + radius.topRight, radius.topRight, 0, -HALF_PI, true);
    // line from top right to top left
    ctx.lineTo(x + radius.topLeft, y);
}
const LINE_HEIGHT = /^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/;
const FONT_STYLE = /^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/;
/**
 * @alias Chart.helpers.options
 * @namespace
 */ /**
 * Converts the given line height `value` in pixels for a specific font `size`.
 * @param value - The lineHeight to parse (eg. 1.6, '14px', '75%', '1.6em').
 * @param size - The font size (in pixels) used to resolve relative `value`.
 * @returns The effective line height in pixels (size * 1.2 if value is invalid).
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/line-height
 * @since 2.7.0
 */ function toLineHeight(value, size) {
    const matches = ("" + value).match(LINE_HEIGHT);
    if (!matches || matches[1] === "normal") return size * 1.2;
    value = +matches[2];
    switch(matches[3]){
        case "px":
            return value;
        case "%":
            value /= 100;
            break;
    }
    return size * value;
}
const numberOrZero = (v)=>+v || 0;
function _readValueToProps(value, props) {
    const ret = {};
    const objProps = isObject(props);
    const keys = objProps ? Object.keys(props) : props;
    const read = isObject(value) ? objProps ? (prop)=>valueOrDefault(value[prop], value[props[prop]]) : (prop)=>value[prop] : ()=>value;
    for (const prop of keys)ret[prop] = numberOrZero(read(prop));
    return ret;
}
/**
 * Converts the given value into a TRBL object.
 * @param value - If a number, set the value to all TRBL component,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 *  x / y are shorthands for same value for left/right and top/bottom.
 * @returns The padding values (top, right, bottom, left)
 * @since 3.0.0
 */ function toTRBL(value) {
    return _readValueToProps(value, {
        top: "y",
        right: "x",
        bottom: "y",
        left: "x"
    });
}
/**
 * Converts the given value into a TRBL corners object (similar with css border-radius).
 * @param value - If a number, set the value to all TRBL corner components,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 * @returns The TRBL corner values (topLeft, topRight, bottomLeft, bottomRight)
 * @since 3.0.0
 */ function toTRBLCorners(value) {
    return _readValueToProps(value, [
        "topLeft",
        "topRight",
        "bottomLeft",
        "bottomRight"
    ]);
}
/**
 * Converts the given value into a padding object with pre-computed width/height.
 * @param value - If a number, set the value to all TRBL component,
 *  else, if an object, use defined properties and sets undefined ones to 0.
 *  x / y are shorthands for same value for left/right and top/bottom.
 * @returns The padding values (top, right, bottom, left, width, height)
 * @since 2.7.0
 */ function toPadding(value) {
    const obj = toTRBL(value);
    obj.width = obj.left + obj.right;
    obj.height = obj.top + obj.bottom;
    return obj;
}
/**
 * Parses font options and returns the font object.
 * @param options - A object that contains font options to be parsed.
 * @param fallback - A object that contains fallback font options.
 * @return The font object.
 * @private
 */ function toFont(options, fallback) {
    options = options || {};
    fallback = fallback || defaults.font;
    let size = valueOrDefault(options.size, fallback.size);
    if (typeof size === "string") size = parseInt(size, 10);
    let style = valueOrDefault(options.style, fallback.style);
    if (style && !("" + style).match(FONT_STYLE)) {
        console.warn('Invalid font style specified: "' + style + '"');
        style = undefined;
    }
    const font = {
        family: valueOrDefault(options.family, fallback.family),
        lineHeight: toLineHeight(valueOrDefault(options.lineHeight, fallback.lineHeight), size),
        size,
        style,
        weight: valueOrDefault(options.weight, fallback.weight),
        string: ""
    };
    font.string = toFontString(font);
    return font;
}
/**
 * Evaluates the given `inputs` sequentially and returns the first defined value.
 * @param inputs - An array of values, falling back to the last value.
 * @param context - If defined and the current value is a function, the value
 * is called with `context` as first argument and the result becomes the new input.
 * @param index - If defined and the current value is an array, the value
 * at `index` become the new input.
 * @param info - object to return information about resolution in
 * @param info.cacheable - Will be set to `false` if option is not cacheable.
 * @since 2.7.0
 */ function resolve(inputs, context, index, info) {
    let cacheable = true;
    let i, ilen, value;
    for(i = 0, ilen = inputs.length; i < ilen; ++i){
        value = inputs[i];
        if (value === undefined) continue;
        if (context !== undefined && typeof value === "function") {
            value = value(context);
            cacheable = false;
        }
        if (index !== undefined && isArray(value)) {
            value = value[index % value.length];
            cacheable = false;
        }
        if (value !== undefined) {
            if (info && !cacheable) info.cacheable = false;
            return value;
        }
    }
}
/**
 * @param minmax
 * @param grace
 * @param beginAtZero
 * @private
 */ function _addGrace(minmax, grace, beginAtZero) {
    const { min, max } = minmax;
    const change = toDimension(grace, (max - min) / 2);
    const keepZero = (value, add)=>beginAtZero && value === 0 ? 0 : value + add;
    return {
        min: keepZero(min, -Math.abs(change)),
        max: keepZero(max, change)
    };
}
function createContext(parentContext, context) {
    return Object.assign(Object.create(parentContext), context);
}
/**
 * Creates a Proxy for resolving raw values for options.
 * @param scopes - The option scopes to look for values, in resolution order
 * @param prefixes - The prefixes for values, in resolution order.
 * @param rootScopes - The root option scopes
 * @param fallback - Parent scopes fallback
 * @param getTarget - callback for getting the target for changed values
 * @returns Proxy
 * @private
 */ function _createResolver(scopes, prefixes = [
    ""
], rootScopes, fallback, getTarget = ()=>scopes[0]) {
    const finalRootScopes = rootScopes || scopes;
    if (typeof fallback === "undefined") fallback = _resolve("_fallback", scopes);
    const cache = {
        [Symbol.toStringTag]: "Object",
        _cacheable: true,
        _scopes: scopes,
        _rootScopes: finalRootScopes,
        _fallback: fallback,
        _getTarget: getTarget,
        override: (scope)=>_createResolver([
                scope,
                ...scopes
            ], prefixes, finalRootScopes, fallback)
    };
    return new Proxy(cache, {
        /**
     * A trap for the delete operator.
     */ deleteProperty (target, prop) {
            delete target[prop]; // remove from cache
            delete target._keys; // remove cached keys
            delete scopes[0][prop]; // remove from top level scope
            return true;
        },
        /**
     * A trap for getting property values.
     */ get (target, prop) {
            return _cached(target, prop, ()=>_resolveWithPrefixes(prop, prefixes, scopes, target));
        },
        /**
     * A trap for Object.getOwnPropertyDescriptor.
     * Also used by Object.hasOwnProperty.
     */ getOwnPropertyDescriptor (target, prop) {
            return Reflect.getOwnPropertyDescriptor(target._scopes[0], prop);
        },
        /**
     * A trap for Object.getPrototypeOf.
     */ getPrototypeOf () {
            return Reflect.getPrototypeOf(scopes[0]);
        },
        /**
     * A trap for the in operator.
     */ has (target, prop) {
            return getKeysFromAllScopes(target).includes(prop);
        },
        /**
     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
     */ ownKeys (target) {
            return getKeysFromAllScopes(target);
        },
        /**
     * A trap for setting property values.
     */ set (target, prop, value) {
            const storage = target._storage || (target._storage = getTarget());
            target[prop] = storage[prop] = value; // set to top level scope + cache
            delete target._keys; // remove cached keys
            return true;
        }
    });
}
/**
 * Returns an Proxy for resolving option values with context.
 * @param proxy - The Proxy returned by `_createResolver`
 * @param context - Context object for scriptable/indexable options
 * @param subProxy - The proxy provided for scriptable options
 * @param descriptorDefaults - Defaults for descriptors
 * @private
 */ function _attachContext(proxy, context, subProxy, descriptorDefaults) {
    const cache = {
        _cacheable: false,
        _proxy: proxy,
        _context: context,
        _subProxy: subProxy,
        _stack: new Set(),
        _descriptors: _descriptors(proxy, descriptorDefaults),
        setContext: (ctx)=>_attachContext(proxy, ctx, subProxy, descriptorDefaults),
        override: (scope)=>_attachContext(proxy.override(scope), context, subProxy, descriptorDefaults)
    };
    return new Proxy(cache, {
        /**
     * A trap for the delete operator.
     */ deleteProperty (target, prop) {
            delete target[prop]; // remove from cache
            delete proxy[prop]; // remove from proxy
            return true;
        },
        /**
     * A trap for getting property values.
     */ get (target, prop, receiver) {
            return _cached(target, prop, ()=>_resolveWithContext(target, prop, receiver));
        },
        /**
     * A trap for Object.getOwnPropertyDescriptor.
     * Also used by Object.hasOwnProperty.
     */ getOwnPropertyDescriptor (target, prop) {
            return target._descriptors.allKeys ? Reflect.has(proxy, prop) ? {
                enumerable: true,
                configurable: true
            } : undefined : Reflect.getOwnPropertyDescriptor(proxy, prop);
        },
        /**
     * A trap for Object.getPrototypeOf.
     */ getPrototypeOf () {
            return Reflect.getPrototypeOf(proxy);
        },
        /**
     * A trap for the in operator.
     */ has (target, prop) {
            return Reflect.has(proxy, prop);
        },
        /**
     * A trap for Object.getOwnPropertyNames and Object.getOwnPropertySymbols.
     */ ownKeys () {
            return Reflect.ownKeys(proxy);
        },
        /**
     * A trap for setting property values.
     */ set (target, prop, value) {
            proxy[prop] = value; // set to proxy
            delete target[prop]; // remove from cache
            return true;
        }
    });
}
/**
 * @private
 */ function _descriptors(proxy, defaults = {
    scriptable: true,
    indexable: true
}) {
    const { _scriptable = defaults.scriptable, _indexable = defaults.indexable, _allKeys = defaults.allKeys } = proxy;
    return {
        allKeys: _allKeys,
        scriptable: _scriptable,
        indexable: _indexable,
        isScriptable: isFunction(_scriptable) ? _scriptable : ()=>_scriptable,
        isIndexable: isFunction(_indexable) ? _indexable : ()=>_indexable
    };
}
const readKey = (prefix, name)=>prefix ? prefix + _capitalize(name) : name;
const needsSubResolver = (prop, value)=>isObject(value) && prop !== "adapters" && (Object.getPrototypeOf(value) === null || value.constructor === Object);
function _cached(target, prop, resolve) {
    if (Object.prototype.hasOwnProperty.call(target, prop) || prop === "constructor") return target[prop];
    const value = resolve();
    // cache the resolved value
    target[prop] = value;
    return value;
}
function _resolveWithContext(target, prop, receiver) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;
    let value = _proxy[prop]; // resolve from proxy
    // resolve with context
    if (isFunction(value) && descriptors.isScriptable(prop)) value = _resolveScriptable(prop, value, target, receiver);
    if (isArray(value) && value.length) value = _resolveArray(prop, value, target, descriptors.isIndexable);
    if (needsSubResolver(prop, value)) // if the resolved value is an object, create a sub resolver for it
    value = _attachContext(value, _context, _subProxy && _subProxy[prop], descriptors);
    return value;
}
function _resolveScriptable(prop, getValue, target, receiver) {
    const { _proxy, _context, _subProxy, _stack } = target;
    if (_stack.has(prop)) throw new Error("Recursion detected: " + Array.from(_stack).join("->") + "->" + prop);
    _stack.add(prop);
    let value = getValue(_context, _subProxy || receiver);
    _stack.delete(prop);
    if (needsSubResolver(prop, value)) // When scriptable option returns an object, create a resolver on that.
    value = createSubResolver(_proxy._scopes, _proxy, prop, value);
    return value;
}
function _resolveArray(prop, value, target, isIndexable) {
    const { _proxy, _context, _subProxy, _descriptors: descriptors } = target;
    if (typeof _context.index !== "undefined" && isIndexable(prop)) return value[_context.index % value.length];
    else if (isObject(value[0])) {
        // Array of objects, return array or resolvers
        const arr = value;
        const scopes = _proxy._scopes.filter((s)=>s !== arr);
        value = [];
        for (const item of arr){
            const resolver = createSubResolver(scopes, _proxy, prop, item);
            value.push(_attachContext(resolver, _context, _subProxy && _subProxy[prop], descriptors));
        }
    }
    return value;
}
function resolveFallback(fallback, prop, value) {
    return isFunction(fallback) ? fallback(prop, value) : fallback;
}
const getScope = (key, parent)=>key === true ? parent : typeof key === "string" ? resolveObjectKey(parent, key) : undefined;
function addScopes(set, parentScopes, key, parentFallback, value) {
    for (const parent of parentScopes){
        const scope = getScope(key, parent);
        if (scope) {
            set.add(scope);
            const fallback = resolveFallback(scope._fallback, key, value);
            if (typeof fallback !== "undefined" && fallback !== key && fallback !== parentFallback) // When we reach the descriptor that defines a new _fallback, return that.
            // The fallback will resume to that new scope.
            return fallback;
        } else if (scope === false && typeof parentFallback !== "undefined" && key !== parentFallback) // Fallback to `false` results to `false`, when falling back to different key.
        // For example `interaction` from `hover` or `plugins.tooltip` and `animation` from `animations`
        return null;
    }
    return false;
}
function createSubResolver(parentScopes, resolver, prop, value) {
    const rootScopes = resolver._rootScopes;
    const fallback = resolveFallback(resolver._fallback, prop, value);
    const allScopes = [
        ...parentScopes,
        ...rootScopes
    ];
    const set = new Set();
    set.add(value);
    let key = addScopesFromKey(set, allScopes, prop, fallback || prop, value);
    if (key === null) return false;
    if (typeof fallback !== "undefined" && fallback !== prop) {
        key = addScopesFromKey(set, allScopes, fallback, key, value);
        if (key === null) return false;
    }
    return _createResolver(Array.from(set), [
        ""
    ], rootScopes, fallback, ()=>subGetTarget(resolver, prop, value));
}
function addScopesFromKey(set, allScopes, key, fallback, item) {
    while(key)key = addScopes(set, allScopes, key, fallback, item);
    return key;
}
function subGetTarget(resolver, prop, value) {
    const parent = resolver._getTarget();
    if (!(prop in parent)) parent[prop] = {};
    const target = parent[prop];
    if (isArray(target) && isObject(value)) // For array of objects, the object is used to store updated values
    return value;
    return target || {};
}
function _resolveWithPrefixes(prop, prefixes, scopes, proxy) {
    let value;
    for (const prefix of prefixes){
        value = _resolve(readKey(prefix, prop), scopes);
        if (typeof value !== "undefined") return needsSubResolver(prop, value) ? createSubResolver(scopes, proxy, prop, value) : value;
    }
}
function _resolve(key, scopes) {
    for (const scope of scopes){
        if (!scope) continue;
        const value = scope[key];
        if (typeof value !== "undefined") return value;
    }
}
function getKeysFromAllScopes(target) {
    let keys = target._keys;
    if (!keys) keys = target._keys = resolveKeysFromAllScopes(target._scopes);
    return keys;
}
function resolveKeysFromAllScopes(scopes) {
    const set = new Set();
    for (const scope of scopes)for (const key of Object.keys(scope).filter((k)=>!k.startsWith("_")))set.add(key);
    return Array.from(set);
}
function _parseObjectDataRadialScale(meta, data, start, count) {
    const { iScale } = meta;
    const { key = "r" } = this._parsing;
    const parsed = new Array(count);
    let i, ilen, index, item;
    for(i = 0, ilen = count; i < ilen; ++i){
        index = i + start;
        item = data[index];
        parsed[i] = {
            r: iScale.parse(resolveObjectKey(item, key), index)
        };
    }
    return parsed;
}
const EPSILON = Number.EPSILON || 1e-14;
const getPoint = (points, i)=>i < points.length && !points[i].skip && points[i];
const getValueAxis = (indexAxis)=>indexAxis === "x" ? "y" : "x";
function splineCurve(firstPoint, middlePoint, afterPoint, t) {
    // Props to Rob Spencer at scaled innovation for his post on splining between points
    // http://scaledinnovation.com/analytics/splines/aboutSplines.html
    // This function must also respect "skipped" points
    const previous = firstPoint.skip ? middlePoint : firstPoint;
    const current = middlePoint;
    const next = afterPoint.skip ? middlePoint : afterPoint;
    const d01 = distanceBetweenPoints(current, previous);
    const d12 = distanceBetweenPoints(next, current);
    let s01 = d01 / (d01 + d12);
    let s12 = d12 / (d01 + d12);
    // If all points are the same, s01 & s02 will be inf
    s01 = isNaN(s01) ? 0 : s01;
    s12 = isNaN(s12) ? 0 : s12;
    const fa = t * s01; // scaling factor for triangle Ta
    const fb = t * s12;
    return {
        previous: {
            x: current.x - fa * (next.x - previous.x),
            y: current.y - fa * (next.y - previous.y)
        },
        next: {
            x: current.x + fb * (next.x - previous.x),
            y: current.y + fb * (next.y - previous.y)
        }
    };
}
/**
 * Adjust tangents to ensure monotonic properties
 */ function monotoneAdjust(points, deltaK, mK) {
    const pointsLen = points.length;
    let alphaK, betaK, tauK, squaredMagnitude, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen - 1; ++i){
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent || !pointAfter) continue;
        if (almostEquals(deltaK[i], 0, EPSILON)) {
            mK[i] = mK[i + 1] = 0;
            continue;
        }
        alphaK = mK[i] / deltaK[i];
        betaK = mK[i + 1] / deltaK[i];
        squaredMagnitude = Math.pow(alphaK, 2) + Math.pow(betaK, 2);
        if (squaredMagnitude <= 9) continue;
        tauK = 3 / Math.sqrt(squaredMagnitude);
        mK[i] = alphaK * tauK * deltaK[i];
        mK[i + 1] = betaK * tauK * deltaK[i];
    }
}
function monotoneCompute(points, mK, indexAxis = "x") {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    let delta, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(let i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) continue;
        const iPixel = pointCurrent[indexAxis];
        const vPixel = pointCurrent[valueAxis];
        if (pointBefore) {
            delta = (iPixel - pointBefore[indexAxis]) / 3;
            pointCurrent[`cp1${indexAxis}`] = iPixel - delta;
            pointCurrent[`cp1${valueAxis}`] = vPixel - delta * mK[i];
        }
        if (pointAfter) {
            delta = (pointAfter[indexAxis] - iPixel) / 3;
            pointCurrent[`cp2${indexAxis}`] = iPixel + delta;
            pointCurrent[`cp2${valueAxis}`] = vPixel + delta * mK[i];
        }
    }
}
/**
 * This function calculates Bézier control points in a similar way than |splineCurve|,
 * but preserves monotonicity of the provided data and ensures no local extremums are added
 * between the dataset discrete points due to the interpolation.
 * See : https://en.wikipedia.org/wiki/Monotone_cubic_interpolation
 */ function splineCurveMonotone(points, indexAxis = "x") {
    const valueAxis = getValueAxis(indexAxis);
    const pointsLen = points.length;
    const deltaK = Array(pointsLen).fill(0);
    const mK = Array(pointsLen);
    // Calculate slopes (deltaK) and initialize tangents (mK)
    let i, pointBefore, pointCurrent;
    let pointAfter = getPoint(points, 0);
    for(i = 0; i < pointsLen; ++i){
        pointBefore = pointCurrent;
        pointCurrent = pointAfter;
        pointAfter = getPoint(points, i + 1);
        if (!pointCurrent) continue;
        if (pointAfter) {
            const slopeDelta = pointAfter[indexAxis] - pointCurrent[indexAxis];
            // In the case of two points that appear at the same x pixel, slopeDeltaX is 0
            deltaK[i] = slopeDelta !== 0 ? (pointAfter[valueAxis] - pointCurrent[valueAxis]) / slopeDelta : 0;
        }
        mK[i] = !pointBefore ? deltaK[i] : !pointAfter ? deltaK[i - 1] : sign(deltaK[i - 1]) !== sign(deltaK[i]) ? 0 : (deltaK[i - 1] + deltaK[i]) / 2;
    }
    monotoneAdjust(points, deltaK, mK);
    monotoneCompute(points, mK, indexAxis);
}
function capControlPoint(pt, min, max) {
    return Math.max(Math.min(pt, max), min);
}
function capBezierPoints(points, area) {
    let i, ilen, point, inArea, inAreaPrev;
    let inAreaNext = _isPointInArea(points[0], area);
    for(i = 0, ilen = points.length; i < ilen; ++i){
        inAreaPrev = inArea;
        inArea = inAreaNext;
        inAreaNext = i < ilen - 1 && _isPointInArea(points[i + 1], area);
        if (!inArea) continue;
        point = points[i];
        if (inAreaPrev) {
            point.cp1x = capControlPoint(point.cp1x, area.left, area.right);
            point.cp1y = capControlPoint(point.cp1y, area.top, area.bottom);
        }
        if (inAreaNext) {
            point.cp2x = capControlPoint(point.cp2x, area.left, area.right);
            point.cp2y = capControlPoint(point.cp2y, area.top, area.bottom);
        }
    }
}
/**
 * @private
 */ function _updateBezierControlPoints(points, options, area, loop, indexAxis) {
    let i, ilen, point, controlPoints;
    // Only consider points that are drawn in case the spanGaps option is used
    if (options.spanGaps) points = points.filter((pt)=>!pt.skip);
    if (options.cubicInterpolationMode === "monotone") splineCurveMonotone(points, indexAxis);
    else {
        let prev = loop ? points[points.length - 1] : points[0];
        for(i = 0, ilen = points.length; i < ilen; ++i){
            point = points[i];
            controlPoints = splineCurve(prev, point, points[Math.min(i + 1, ilen - (loop ? 0 : 1)) % ilen], options.tension);
            point.cp1x = controlPoints.previous.x;
            point.cp1y = controlPoints.previous.y;
            point.cp2x = controlPoints.next.x;
            point.cp2y = controlPoints.next.y;
            prev = point;
        }
    }
    if (options.capBezierPoints) capBezierPoints(points, area);
}
/**
 * Note: typedefs are auto-exported, so use a made-up `dom` namespace where
 * necessary to avoid duplicates with `export * from './helpers`; see
 * https://github.com/microsoft/TypeScript/issues/46011
 * @typedef { import('../core/core.controller.js').default } dom.Chart
 * @typedef { import('../../types').ChartEvent } ChartEvent
 */ /**
 * @private
 */ function _isDomSupported() {
    return typeof window !== "undefined" && typeof document !== "undefined";
}
/**
 * @private
 */ function _getParentNode(domNode) {
    let parent = domNode.parentNode;
    if (parent && parent.toString() === "[object ShadowRoot]") parent = parent.host;
    return parent;
}
/**
 * convert max-width/max-height values that may be percentages into a number
 * @private
 */ function parseMaxStyle(styleValue, node, parentProperty) {
    let valueInPixels;
    if (typeof styleValue === "string") {
        valueInPixels = parseInt(styleValue, 10);
        if (styleValue.indexOf("%") !== -1) // percentage * size in dimension
        valueInPixels = valueInPixels / 100 * node.parentNode[parentProperty];
    } else valueInPixels = styleValue;
    return valueInPixels;
}
const getComputedStyle = (element)=>element.ownerDocument.defaultView.getComputedStyle(element, null);
function getStyle(el, property) {
    return getComputedStyle(el).getPropertyValue(property);
}
const positions = [
    "top",
    "right",
    "bottom",
    "left"
];
function getPositionedStyle(styles, style, suffix) {
    const result = {};
    suffix = suffix ? "-" + suffix : "";
    for(let i = 0; i < 4; i++){
        const pos = positions[i];
        result[pos] = parseFloat(styles[style + "-" + pos + suffix]) || 0;
    }
    result.width = result.left + result.right;
    result.height = result.top + result.bottom;
    return result;
}
const useOffsetPos = (x, y, target)=>(x > 0 || y > 0) && (!target || !target.shadowRoot);
/**
 * @param e
 * @param canvas
 * @returns Canvas position
 */ function getCanvasPosition(e, canvas) {
    const touches = e.touches;
    const source = touches && touches.length ? touches[0] : e;
    const { offsetX, offsetY } = source;
    let box = false;
    let x, y;
    if (useOffsetPos(offsetX, offsetY, e.target)) {
        x = offsetX;
        y = offsetY;
    } else {
        const rect = canvas.getBoundingClientRect();
        x = source.clientX - rect.left;
        y = source.clientY - rect.top;
        box = true;
    }
    return {
        x,
        y,
        box
    };
}
/**
 * Gets an event's x, y coordinates, relative to the chart area
 * @param event
 * @param chart
 * @returns x and y coordinates of the event
 */ function getRelativePosition(event, chart) {
    if ("native" in event) return event;
    const { canvas, currentDevicePixelRatio } = chart;
    const style = getComputedStyle(canvas);
    const borderBox = style.boxSizing === "border-box";
    const paddings = getPositionedStyle(style, "padding");
    const borders = getPositionedStyle(style, "border", "width");
    const { x, y, box } = getCanvasPosition(event, canvas);
    const xOffset = paddings.left + (box && borders.left);
    const yOffset = paddings.top + (box && borders.top);
    let { width, height } = chart;
    if (borderBox) {
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    return {
        x: Math.round((x - xOffset) / width * canvas.width / currentDevicePixelRatio),
        y: Math.round((y - yOffset) / height * canvas.height / currentDevicePixelRatio)
    };
}
function getContainerSize(canvas, width, height) {
    let maxWidth, maxHeight;
    if (width === undefined || height === undefined) {
        const container = canvas && _getParentNode(canvas);
        if (!container) {
            width = canvas.clientWidth;
            height = canvas.clientHeight;
        } else {
            const rect = container.getBoundingClientRect(); // this is the border box of the container
            const containerStyle = getComputedStyle(container);
            const containerBorder = getPositionedStyle(containerStyle, "border", "width");
            const containerPadding = getPositionedStyle(containerStyle, "padding");
            width = rect.width - containerPadding.width - containerBorder.width;
            height = rect.height - containerPadding.height - containerBorder.height;
            maxWidth = parseMaxStyle(containerStyle.maxWidth, container, "clientWidth");
            maxHeight = parseMaxStyle(containerStyle.maxHeight, container, "clientHeight");
        }
    }
    return {
        width,
        height,
        maxWidth: maxWidth || INFINITY,
        maxHeight: maxHeight || INFINITY
    };
}
const round1 = (v)=>Math.round(v * 10) / 10;
// eslint-disable-next-line complexity
function getMaximumSize(canvas, bbWidth, bbHeight, aspectRatio) {
    const style = getComputedStyle(canvas);
    const margins = getPositionedStyle(style, "margin");
    const maxWidth = parseMaxStyle(style.maxWidth, canvas, "clientWidth") || INFINITY;
    const maxHeight = parseMaxStyle(style.maxHeight, canvas, "clientHeight") || INFINITY;
    const containerSize = getContainerSize(canvas, bbWidth, bbHeight);
    let { width, height } = containerSize;
    if (style.boxSizing === "content-box") {
        const borders = getPositionedStyle(style, "border", "width");
        const paddings = getPositionedStyle(style, "padding");
        width -= paddings.width + borders.width;
        height -= paddings.height + borders.height;
    }
    width = Math.max(0, width - margins.width);
    height = Math.max(0, aspectRatio ? width / aspectRatio : height - margins.height);
    width = round1(Math.min(width, maxWidth, containerSize.maxWidth));
    height = round1(Math.min(height, maxHeight, containerSize.maxHeight));
    if (width && !height) // https://github.com/chartjs/Chart.js/issues/4659
    // If the canvas has width, but no height, default to aspectRatio of 2 (canvas default)
    height = round1(width / 2);
    const maintainHeight = bbWidth !== undefined || bbHeight !== undefined;
    if (maintainHeight && aspectRatio && containerSize.height && height > containerSize.height) {
        height = containerSize.height;
        width = round1(Math.floor(height * aspectRatio));
    }
    return {
        width,
        height
    };
}
/**
 * @param chart
 * @param forceRatio
 * @param forceStyle
 * @returns True if the canvas context size or transformation has changed.
 */ function retinaScale(chart, forceRatio, forceStyle) {
    const pixelRatio = forceRatio || 1;
    const deviceHeight = Math.floor(chart.height * pixelRatio);
    const deviceWidth = Math.floor(chart.width * pixelRatio);
    chart.height = Math.floor(chart.height);
    chart.width = Math.floor(chart.width);
    const canvas = chart.canvas;
    // If no style has been set on the canvas, the render size is used as display size,
    // making the chart visually bigger, so let's enforce it to the "correct" values.
    // See https://github.com/chartjs/Chart.js/issues/3575
    if (canvas.style && (forceStyle || !canvas.style.height && !canvas.style.width)) {
        canvas.style.height = `${chart.height}px`;
        canvas.style.width = `${chart.width}px`;
    }
    if (chart.currentDevicePixelRatio !== pixelRatio || canvas.height !== deviceHeight || canvas.width !== deviceWidth) {
        chart.currentDevicePixelRatio = pixelRatio;
        canvas.height = deviceHeight;
        canvas.width = deviceWidth;
        chart.ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);
        return true;
    }
    return false;
}
/**
 * Detects support for options object argument in addEventListener.
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Safely_detecting_option_support
 * @private
 */ const supportsEventListenerOptions = function() {
    let passiveSupported = false;
    try {
        const options = {
            get passive () {
                passiveSupported = true;
                return false;
            }
        };
        if (_isDomSupported()) {
            window.addEventListener("test", null, options);
            window.removeEventListener("test", null, options);
        }
    } catch (e) {
    // continue regardless of error
    }
    return passiveSupported;
}();
/**
 * The "used" size is the final value of a dimension property after all calculations have
 * been performed. This method uses the computed style of `element` but returns undefined
 * if the computed style is not expressed in pixels. That can happen in some cases where
 * `element` has a size relative to its parent and this last one is not yet displayed,
 * for example because of `display: none` on a parent node.
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/used_value
 * @returns Size in pixels or undefined if unknown.
 */ function readUsedSize(element, property) {
    const value = getStyle(element, property);
    const matches = value && value.match(/^(\d+)(\.\d+)?px$/);
    return matches ? +matches[1] : undefined;
}
/**
 * @private
 */ function _pointInLine(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: p1.y + t * (p2.y - p1.y)
    };
}
/**
 * @private
 */ function _steppedInterpolation(p1, p2, t, mode) {
    return {
        x: p1.x + t * (p2.x - p1.x),
        y: mode === "middle" ? t < 0.5 ? p1.y : p2.y : mode === "after" ? t < 1 ? p1.y : p2.y : t > 0 ? p2.y : p1.y
    };
}
/**
 * @private
 */ function _bezierInterpolation(p1, p2, t, mode) {
    const cp1 = {
        x: p1.cp2x,
        y: p1.cp2y
    };
    const cp2 = {
        x: p2.cp1x,
        y: p2.cp1y
    };
    const a = _pointInLine(p1, cp1, t);
    const b = _pointInLine(cp1, cp2, t);
    const c = _pointInLine(cp2, p2, t);
    const d = _pointInLine(a, b, t);
    const e = _pointInLine(b, c, t);
    return _pointInLine(d, e, t);
}
const getRightToLeftAdapter = function(rectX, width) {
    return {
        x (x) {
            return rectX + rectX + width - x;
        },
        setWidth (w) {
            width = w;
        },
        textAlign (align) {
            if (align === "center") return align;
            return align === "right" ? "left" : "right";
        },
        xPlus (x, value) {
            return x - value;
        },
        leftForLtr (x, itemWidth) {
            return x - itemWidth;
        }
    };
};
const getLeftToRightAdapter = function() {
    return {
        x (x) {
            return x;
        },
        setWidth (w) {},
        textAlign (align) {
            return align;
        },
        xPlus (x, value) {
            return x + value;
        },
        leftForLtr (x, _itemWidth) {
            return x;
        }
    };
};
function getRtlAdapter(rtl, rectX, width) {
    return rtl ? getRightToLeftAdapter(rectX, width) : getLeftToRightAdapter();
}
function overrideTextDirection(ctx, direction) {
    let style, original;
    if (direction === "ltr" || direction === "rtl") {
        style = ctx.canvas.style;
        original = [
            style.getPropertyValue("direction"),
            style.getPropertyPriority("direction")
        ];
        style.setProperty("direction", direction, "important");
        ctx.prevTextDirection = original;
    }
}
function restoreTextDirection(ctx, original) {
    if (original !== undefined) {
        delete ctx.prevTextDirection;
        ctx.canvas.style.setProperty("direction", original[0], original[1]);
    }
}
function propertyFn(property) {
    if (property === "angle") return {
        between: _angleBetween,
        compare: _angleDiff,
        normalize: _normalizeAngle
    };
    return {
        between: _isBetween,
        compare: (a, b)=>a - b,
        normalize: (x)=>x
    };
}
function normalizeSegment({ start, end, count, loop, style }) {
    return {
        start: start % count,
        end: end % count,
        loop: loop && (end - start + 1) % count === 0,
        style
    };
}
function getSegment(segment, points, bounds) {
    const { property, start: startBound, end: endBound } = bounds;
    const { between, normalize } = propertyFn(property);
    const count = points.length;
    let { start, end, loop } = segment;
    let i, ilen;
    if (loop) {
        start += count;
        end += count;
        for(i = 0, ilen = count; i < ilen; ++i){
            if (!between(normalize(points[start % count][property]), startBound, endBound)) break;
            start--;
            end--;
        }
        start %= count;
        end %= count;
    }
    if (end < start) end += count;
    return {
        start,
        end,
        loop,
        style: segment.style
    };
}
function _boundSegment(segment, points, bounds) {
    if (!bounds) return [
        segment
    ];
    const { property, start: startBound, end: endBound } = bounds;
    const count = points.length;
    const { compare, between, normalize } = propertyFn(property);
    const { start, end, loop, style } = getSegment(segment, points, bounds);
    const result = [];
    let inside = false;
    let subStart = null;
    let value, point, prevValue;
    const startIsBefore = ()=>between(startBound, prevValue, value) && compare(startBound, prevValue) !== 0;
    const endIsBefore = ()=>compare(endBound, value) === 0 || between(endBound, prevValue, value);
    const shouldStart = ()=>inside || startIsBefore();
    const shouldStop = ()=>!inside || endIsBefore();
    for(let i = start, prev = start; i <= end; ++i){
        point = points[i % count];
        if (point.skip) continue;
        value = normalize(point[property]);
        if (value === prevValue) continue;
        inside = between(value, startBound, endBound);
        if (subStart === null && shouldStart()) subStart = compare(value, startBound) === 0 ? i : prev;
        if (subStart !== null && shouldStop()) {
            result.push(normalizeSegment({
                start: subStart,
                end: i,
                loop,
                count,
                style
            }));
            subStart = null;
        }
        prev = i;
        prevValue = value;
    }
    if (subStart !== null) result.push(normalizeSegment({
        start: subStart,
        end,
        loop,
        count,
        style
    }));
    return result;
}
function _boundSegments(line, bounds) {
    const result = [];
    const segments = line.segments;
    for(let i = 0; i < segments.length; i++){
        const sub = _boundSegment(segments[i], line.points, bounds);
        if (sub.length) result.push(...sub);
    }
    return result;
}
function findStartAndEnd(points, count, loop, spanGaps) {
    let start = 0;
    let end = count - 1;
    if (loop && !spanGaps) while(start < count && !points[start].skip)start++;
    while(start < count && points[start].skip)start++;
    start %= count;
    if (loop) end += start;
    while(end > start && points[end % count].skip)end--;
    end %= count;
    return {
        start,
        end
    };
}
function solidSegments(points, start, max, loop) {
    const count = points.length;
    const result = [];
    let last = start;
    let prev = points[start];
    let end;
    for(end = start + 1; end <= max; ++end){
        const cur = points[end % count];
        if (cur.skip || cur.stop) {
            if (!prev.skip) {
                loop = false;
                result.push({
                    start: start % count,
                    end: (end - 1) % count,
                    loop
                });
                start = last = cur.stop ? end : null;
            }
        } else {
            last = end;
            if (prev.skip) start = end;
        }
        prev = cur;
    }
    if (last !== null) result.push({
        start: start % count,
        end: last % count,
        loop
    });
    return result;
}
function _computeSegments(line, segmentOptions) {
    const points = line.points;
    const spanGaps = line.options.spanGaps;
    const count = points.length;
    if (!count) return [];
    const loop = !!line._loop;
    const { start, end } = findStartAndEnd(points, count, loop, spanGaps);
    if (spanGaps === true) return splitByStyles(line, [
        {
            start,
            end,
            loop
        }
    ], points, segmentOptions);
    const max = end < start ? end + count : end;
    const completeLoop = !!line._fullLoop && start === 0 && end === count - 1;
    return splitByStyles(line, solidSegments(points, start, max, completeLoop), points, segmentOptions);
}
function splitByStyles(line, segments, points, segmentOptions) {
    if (!segmentOptions || !segmentOptions.setContext || !points) return segments;
    return doSplitByStyles(line, segments, points, segmentOptions);
}
function doSplitByStyles(line, segments, points, segmentOptions) {
    const chartContext = line._chart.getContext();
    const baseStyle = readStyle(line.options);
    const { _datasetIndex: datasetIndex, options: { spanGaps } } = line;
    const count = points.length;
    const result = [];
    let prevStyle = baseStyle;
    let start = segments[0].start;
    let i = start;
    function addStyle(s, e, l, st) {
        const dir = spanGaps ? -1 : 1;
        if (s === e) return;
        s += count;
        while(points[s % count].skip)s -= dir;
        while(points[e % count].skip)e += dir;
        if (s % count !== e % count) {
            result.push({
                start: s % count,
                end: e % count,
                loop: l,
                style: st
            });
            prevStyle = st;
            start = e % count;
        }
    }
    for (const segment of segments){
        start = spanGaps ? start : segment.start;
        let prev = points[start % count];
        let style;
        for(i = start + 1; i <= segment.end; i++){
            const pt = points[i % count];
            style = readStyle(segmentOptions.setContext(createContext(chartContext, {
                type: "segment",
                p0: prev,
                p1: pt,
                p0DataIndex: (i - 1) % count,
                p1DataIndex: i % count,
                datasetIndex
            })));
            if (styleChanged(style, prevStyle)) addStyle(start, i - 1, segment.loop, prevStyle);
            prev = pt;
            prevStyle = style;
        }
        if (start < i - 1) addStyle(start, i - 1, segment.loop, prevStyle);
    }
    return result;
}
function readStyle(options) {
    return {
        backgroundColor: options.backgroundColor,
        borderCapStyle: options.borderCapStyle,
        borderDash: options.borderDash,
        borderDashOffset: options.borderDashOffset,
        borderJoinStyle: options.borderJoinStyle,
        borderWidth: options.borderWidth,
        borderColor: options.borderColor
    };
}
function styleChanged(style, prevStyle) {
    if (!prevStyle) return false;
    const cache = [];
    const replacer = function(key, value) {
        if (!isPatternOrGradient(value)) return value;
        if (!cache.includes(value)) cache.push(value);
        return cache.indexOf(value);
    };
    return JSON.stringify(style, replacer) !== JSON.stringify(prevStyle, replacer);
}

},{"@kurkle/color":"2aojw","@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"2aojw":[function(require,module,exports) {
/*!
 * @kurkle/color v0.3.2
 * https://github.com/kurkle/color#readme
 * (c) 2023 Jukka Kurkela
 * Released under the MIT License
 */ var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "Color", ()=>Color);
parcelHelpers.export(exports, "b2n", ()=>b2n);
parcelHelpers.export(exports, "b2p", ()=>b2p);
parcelHelpers.export(exports, "default", ()=>index_esm);
parcelHelpers.export(exports, "hexParse", ()=>hexParse);
parcelHelpers.export(exports, "hexString", ()=>hexString);
parcelHelpers.export(exports, "hsl2rgb", ()=>hsl2rgb);
parcelHelpers.export(exports, "hslString", ()=>hslString);
parcelHelpers.export(exports, "hsv2rgb", ()=>hsv2rgb);
parcelHelpers.export(exports, "hueParse", ()=>hueParse);
parcelHelpers.export(exports, "hwb2rgb", ()=>hwb2rgb);
parcelHelpers.export(exports, "lim", ()=>lim);
parcelHelpers.export(exports, "n2b", ()=>n2b);
parcelHelpers.export(exports, "n2p", ()=>n2p);
parcelHelpers.export(exports, "nameParse", ()=>nameParse);
parcelHelpers.export(exports, "p2b", ()=>p2b);
parcelHelpers.export(exports, "rgb2hsl", ()=>rgb2hsl);
parcelHelpers.export(exports, "rgbParse", ()=>rgbParse);
parcelHelpers.export(exports, "rgbString", ()=>rgbString);
parcelHelpers.export(exports, "rotate", ()=>rotate);
parcelHelpers.export(exports, "round", ()=>round);
function round(v) {
    return v + 0.5 | 0;
}
const lim = (v, l, h)=>Math.max(Math.min(v, h), l);
function p2b(v) {
    return lim(round(v * 2.55), 0, 255);
}
function b2p(v) {
    return lim(round(v / 2.55), 0, 100);
}
function n2b(v) {
    return lim(round(v * 255), 0, 255);
}
function b2n(v) {
    return lim(round(v / 2.55) / 100, 0, 1);
}
function n2p(v) {
    return lim(round(v * 100), 0, 100);
}
const map$1 = {
    0: 0,
    1: 1,
    2: 2,
    3: 3,
    4: 4,
    5: 5,
    6: 6,
    7: 7,
    8: 8,
    9: 9,
    A: 10,
    B: 11,
    C: 12,
    D: 13,
    E: 14,
    F: 15,
    a: 10,
    b: 11,
    c: 12,
    d: 13,
    e: 14,
    f: 15
};
const hex = [
    ..."0123456789ABCDEF"
];
const h1 = (b)=>hex[b & 0xF];
const h2 = (b)=>hex[(b & 0xF0) >> 4] + hex[b & 0xF];
const eq = (b)=>(b & 0xF0) >> 4 === (b & 0xF);
const isShort = (v)=>eq(v.r) && eq(v.g) && eq(v.b) && eq(v.a);
function hexParse(str) {
    var len = str.length;
    var ret;
    if (str[0] === "#") {
        if (len === 4 || len === 5) ret = {
            r: 255 & map$1[str[1]] * 17,
            g: 255 & map$1[str[2]] * 17,
            b: 255 & map$1[str[3]] * 17,
            a: len === 5 ? map$1[str[4]] * 17 : 255
        };
        else if (len === 7 || len === 9) ret = {
            r: map$1[str[1]] << 4 | map$1[str[2]],
            g: map$1[str[3]] << 4 | map$1[str[4]],
            b: map$1[str[5]] << 4 | map$1[str[6]],
            a: len === 9 ? map$1[str[7]] << 4 | map$1[str[8]] : 255
        };
    }
    return ret;
}
const alpha = (a, f)=>a < 255 ? f(a) : "";
function hexString(v) {
    var f = isShort(v) ? h1 : h2;
    return v ? "#" + f(v.r) + f(v.g) + f(v.b) + alpha(v.a, f) : undefined;
}
const HUE_RE = /^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;
function hsl2rgbn(h, s, l) {
    const a = s * Math.min(l, 1 - l);
    const f = (n, k = (n + h / 30) % 12)=>l - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
    return [
        f(0),
        f(8),
        f(4)
    ];
}
function hsv2rgbn(h, s, v) {
    const f = (n, k = (n + h / 60) % 6)=>v - v * s * Math.max(Math.min(k, 4 - k, 1), 0);
    return [
        f(5),
        f(3),
        f(1)
    ];
}
function hwb2rgbn(h, w, b) {
    const rgb = hsl2rgbn(h, 1, 0.5);
    let i;
    if (w + b > 1) {
        i = 1 / (w + b);
        w *= i;
        b *= i;
    }
    for(i = 0; i < 3; i++){
        rgb[i] *= 1 - w - b;
        rgb[i] += w;
    }
    return rgb;
}
function hueValue(r, g, b, d, max) {
    if (r === max) return (g - b) / d + (g < b ? 6 : 0);
    if (g === max) return (b - r) / d + 2;
    return (r - g) / d + 4;
}
function rgb2hsl(v) {
    const range = 255;
    const r = v.r / range;
    const g = v.g / range;
    const b = v.b / range;
    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    const l = (max + min) / 2;
    let h, s, d;
    if (max !== min) {
        d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        h = hueValue(r, g, b, d, max);
        h = h * 60 + 0.5;
    }
    return [
        h | 0,
        s || 0,
        l
    ];
}
function calln(f, a, b, c) {
    return (Array.isArray(a) ? f(a[0], a[1], a[2]) : f(a, b, c)).map(n2b);
}
function hsl2rgb(h, s, l) {
    return calln(hsl2rgbn, h, s, l);
}
function hwb2rgb(h, w, b) {
    return calln(hwb2rgbn, h, w, b);
}
function hsv2rgb(h, s, v) {
    return calln(hsv2rgbn, h, s, v);
}
function hue(h) {
    return (h % 360 + 360) % 360;
}
function hueParse(str) {
    const m = HUE_RE.exec(str);
    let a = 255;
    let v;
    if (!m) return;
    if (m[5] !== v) a = m[6] ? p2b(+m[5]) : n2b(+m[5]);
    const h = hue(+m[2]);
    const p1 = +m[3] / 100;
    const p2 = +m[4] / 100;
    if (m[1] === "hwb") v = hwb2rgb(h, p1, p2);
    else if (m[1] === "hsv") v = hsv2rgb(h, p1, p2);
    else v = hsl2rgb(h, p1, p2);
    return {
        r: v[0],
        g: v[1],
        b: v[2],
        a: a
    };
}
function rotate(v, deg) {
    var h = rgb2hsl(v);
    h[0] = hue(h[0] + deg);
    h = hsl2rgb(h);
    v.r = h[0];
    v.g = h[1];
    v.b = h[2];
}
function hslString(v) {
    if (!v) return;
    const a = rgb2hsl(v);
    const h = a[0];
    const s = n2p(a[1]);
    const l = n2p(a[2]);
    return v.a < 255 ? `hsla(${h}, ${s}%, ${l}%, ${b2n(v.a)})` : `hsl(${h}, ${s}%, ${l}%)`;
}
const map = {
    x: "dark",
    Z: "light",
    Y: "re",
    X: "blu",
    W: "gr",
    V: "medium",
    U: "slate",
    A: "ee",
    T: "ol",
    S: "or",
    B: "ra",
    C: "lateg",
    D: "ights",
    R: "in",
    Q: "turquois",
    E: "hi",
    P: "ro",
    O: "al",
    N: "le",
    M: "de",
    L: "yello",
    F: "en",
    K: "ch",
    G: "arks",
    H: "ea",
    I: "ightg",
    J: "wh"
};
const names$1 = {
    OiceXe: "f0f8ff",
    antiquewEte: "faebd7",
    aqua: "ffff",
    aquamarRe: "7fffd4",
    azuY: "f0ffff",
    beige: "f5f5dc",
    bisque: "ffe4c4",
    black: "0",
    blanKedOmond: "ffebcd",
    Xe: "ff",
    XeviTet: "8a2be2",
    bPwn: "a52a2a",
    burlywood: "deb887",
    caMtXe: "5f9ea0",
    KartYuse: "7fff00",
    KocTate: "d2691e",
    cSO: "ff7f50",
    cSnflowerXe: "6495ed",
    cSnsilk: "fff8dc",
    crimson: "dc143c",
    cyan: "ffff",
    xXe: "8b",
    xcyan: "8b8b",
    xgTMnPd: "b8860b",
    xWay: "a9a9a9",
    xgYF: "6400",
    xgYy: "a9a9a9",
    xkhaki: "bdb76b",
    xmagFta: "8b008b",
    xTivegYF: "556b2f",
    xSange: "ff8c00",
    xScEd: "9932cc",
    xYd: "8b0000",
    xsOmon: "e9967a",
    xsHgYF: "8fbc8f",
    xUXe: "483d8b",
    xUWay: "2f4f4f",
    xUgYy: "2f4f4f",
    xQe: "ced1",
    xviTet: "9400d3",
    dAppRk: "ff1493",
    dApskyXe: "bfff",
    dimWay: "696969",
    dimgYy: "696969",
    dodgerXe: "1e90ff",
    fiYbrick: "b22222",
    flSOwEte: "fffaf0",
    foYstWAn: "228b22",
    fuKsia: "ff00ff",
    gaRsbSo: "dcdcdc",
    ghostwEte: "f8f8ff",
    gTd: "ffd700",
    gTMnPd: "daa520",
    Way: "808080",
    gYF: "8000",
    gYFLw: "adff2f",
    gYy: "808080",
    honeyMw: "f0fff0",
    hotpRk: "ff69b4",
    RdianYd: "cd5c5c",
    Rdigo: "4b0082",
    ivSy: "fffff0",
    khaki: "f0e68c",
    lavFMr: "e6e6fa",
    lavFMrXsh: "fff0f5",
    lawngYF: "7cfc00",
    NmoncEffon: "fffacd",
    ZXe: "add8e6",
    ZcSO: "f08080",
    Zcyan: "e0ffff",
    ZgTMnPdLw: "fafad2",
    ZWay: "d3d3d3",
    ZgYF: "90ee90",
    ZgYy: "d3d3d3",
    ZpRk: "ffb6c1",
    ZsOmon: "ffa07a",
    ZsHgYF: "20b2aa",
    ZskyXe: "87cefa",
    ZUWay: "778899",
    ZUgYy: "778899",
    ZstAlXe: "b0c4de",
    ZLw: "ffffe0",
    lime: "ff00",
    limegYF: "32cd32",
    lRF: "faf0e6",
    magFta: "ff00ff",
    maPon: "800000",
    VaquamarRe: "66cdaa",
    VXe: "cd",
    VScEd: "ba55d3",
    VpurpN: "9370db",
    VsHgYF: "3cb371",
    VUXe: "7b68ee",
    VsprRggYF: "fa9a",
    VQe: "48d1cc",
    VviTetYd: "c71585",
    midnightXe: "191970",
    mRtcYam: "f5fffa",
    mistyPse: "ffe4e1",
    moccasR: "ffe4b5",
    navajowEte: "ffdead",
    navy: "80",
    Tdlace: "fdf5e6",
    Tive: "808000",
    TivedBb: "6b8e23",
    Sange: "ffa500",
    SangeYd: "ff4500",
    ScEd: "da70d6",
    pOegTMnPd: "eee8aa",
    pOegYF: "98fb98",
    pOeQe: "afeeee",
    pOeviTetYd: "db7093",
    papayawEp: "ffefd5",
    pHKpuff: "ffdab9",
    peru: "cd853f",
    pRk: "ffc0cb",
    plum: "dda0dd",
    powMrXe: "b0e0e6",
    purpN: "800080",
    YbeccapurpN: "663399",
    Yd: "ff0000",
    Psybrown: "bc8f8f",
    PyOXe: "4169e1",
    saddNbPwn: "8b4513",
    sOmon: "fa8072",
    sandybPwn: "f4a460",
    sHgYF: "2e8b57",
    sHshell: "fff5ee",
    siFna: "a0522d",
    silver: "c0c0c0",
    skyXe: "87ceeb",
    UXe: "6a5acd",
    UWay: "708090",
    UgYy: "708090",
    snow: "fffafa",
    sprRggYF: "ff7f",
    stAlXe: "4682b4",
    tan: "d2b48c",
    teO: "8080",
    tEstN: "d8bfd8",
    tomato: "ff6347",
    Qe: "40e0d0",
    viTet: "ee82ee",
    JHt: "f5deb3",
    wEte: "ffffff",
    wEtesmoke: "f5f5f5",
    Lw: "ffff00",
    LwgYF: "9acd32"
};
function unpack() {
    const unpacked = {};
    const keys = Object.keys(names$1);
    const tkeys = Object.keys(map);
    let i, j, k, ok, nk;
    for(i = 0; i < keys.length; i++){
        ok = nk = keys[i];
        for(j = 0; j < tkeys.length; j++){
            k = tkeys[j];
            nk = nk.replace(k, map[k]);
        }
        k = parseInt(names$1[ok], 16);
        unpacked[nk] = [
            k >> 16 & 0xFF,
            k >> 8 & 0xFF,
            k & 0xFF
        ];
    }
    return unpacked;
}
let names;
function nameParse(str) {
    if (!names) {
        names = unpack();
        names.transparent = [
            0,
            0,
            0,
            0
        ];
    }
    const a = names[str.toLowerCase()];
    return a && {
        r: a[0],
        g: a[1],
        b: a[2],
        a: a.length === 4 ? a[3] : 255
    };
}
const RGB_RE = /^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/;
function rgbParse(str) {
    const m = RGB_RE.exec(str);
    let a = 255;
    let r, g, b;
    if (!m) return;
    if (m[7] !== r) {
        const v = +m[7];
        a = m[8] ? p2b(v) : lim(v * 255, 0, 255);
    }
    r = +m[1];
    g = +m[3];
    b = +m[5];
    r = 255 & (m[2] ? p2b(r) : lim(r, 0, 255));
    g = 255 & (m[4] ? p2b(g) : lim(g, 0, 255));
    b = 255 & (m[6] ? p2b(b) : lim(b, 0, 255));
    return {
        r: r,
        g: g,
        b: b,
        a: a
    };
}
function rgbString(v) {
    return v && (v.a < 255 ? `rgba(${v.r}, ${v.g}, ${v.b}, ${b2n(v.a)})` : `rgb(${v.r}, ${v.g}, ${v.b})`);
}
const to = (v)=>v <= 0.0031308 ? v * 12.92 : Math.pow(v, 1.0 / 2.4) * 1.055 - 0.055;
const from = (v)=>v <= 0.04045 ? v / 12.92 : Math.pow((v + 0.055) / 1.055, 2.4);
function interpolate(rgb1, rgb2, t) {
    const r = from(b2n(rgb1.r));
    const g = from(b2n(rgb1.g));
    const b = from(b2n(rgb1.b));
    return {
        r: n2b(to(r + t * (from(b2n(rgb2.r)) - r))),
        g: n2b(to(g + t * (from(b2n(rgb2.g)) - g))),
        b: n2b(to(b + t * (from(b2n(rgb2.b)) - b))),
        a: rgb1.a + t * (rgb2.a - rgb1.a)
    };
}
function modHSL(v, i, ratio) {
    if (v) {
        let tmp = rgb2hsl(v);
        tmp[i] = Math.max(0, Math.min(tmp[i] + tmp[i] * ratio, i === 0 ? 360 : 1));
        tmp = hsl2rgb(tmp);
        v.r = tmp[0];
        v.g = tmp[1];
        v.b = tmp[2];
    }
}
function clone(v, proto) {
    return v ? Object.assign(proto || {}, v) : v;
}
function fromObject(input) {
    var v = {
        r: 0,
        g: 0,
        b: 0,
        a: 255
    };
    if (Array.isArray(input)) {
        if (input.length >= 3) {
            v = {
                r: input[0],
                g: input[1],
                b: input[2],
                a: 255
            };
            if (input.length > 3) v.a = n2b(input[3]);
        }
    } else {
        v = clone(input, {
            r: 0,
            g: 0,
            b: 0,
            a: 1
        });
        v.a = n2b(v.a);
    }
    return v;
}
function functionParse(str) {
    if (str.charAt(0) === "r") return rgbParse(str);
    return hueParse(str);
}
class Color {
    constructor(input){
        if (input instanceof Color) return input;
        const type = typeof input;
        let v;
        if (type === "object") v = fromObject(input);
        else if (type === "string") v = hexParse(input) || nameParse(input) || functionParse(input);
        this._rgb = v;
        this._valid = !!v;
    }
    get valid() {
        return this._valid;
    }
    get rgb() {
        var v = clone(this._rgb);
        if (v) v.a = b2n(v.a);
        return v;
    }
    set rgb(obj) {
        this._rgb = fromObject(obj);
    }
    rgbString() {
        return this._valid ? rgbString(this._rgb) : undefined;
    }
    hexString() {
        return this._valid ? hexString(this._rgb) : undefined;
    }
    hslString() {
        return this._valid ? hslString(this._rgb) : undefined;
    }
    mix(color, weight) {
        if (color) {
            const c1 = this.rgb;
            const c2 = color.rgb;
            let w2;
            const p = weight === w2 ? 0.5 : weight;
            const w = 2 * p - 1;
            const a = c1.a - c2.a;
            const w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
            w2 = 1 - w1;
            c1.r = 0xFF & w1 * c1.r + w2 * c2.r + 0.5;
            c1.g = 0xFF & w1 * c1.g + w2 * c2.g + 0.5;
            c1.b = 0xFF & w1 * c1.b + w2 * c2.b + 0.5;
            c1.a = p * c1.a + (1 - p) * c2.a;
            this.rgb = c1;
        }
        return this;
    }
    interpolate(color, t) {
        if (color) this._rgb = interpolate(this._rgb, color._rgb, t);
        return this;
    }
    clone() {
        return new Color(this.rgb);
    }
    alpha(a) {
        this._rgb.a = n2b(a);
        return this;
    }
    clearer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 - ratio;
        return this;
    }
    greyscale() {
        const rgb = this._rgb;
        const val = round(rgb.r * 0.3 + rgb.g * 0.59 + rgb.b * 0.11);
        rgb.r = rgb.g = rgb.b = val;
        return this;
    }
    opaquer(ratio) {
        const rgb = this._rgb;
        rgb.a *= 1 + ratio;
        return this;
    }
    negate() {
        const v = this._rgb;
        v.r = 255 - v.r;
        v.g = 255 - v.g;
        v.b = 255 - v.b;
        return this;
    }
    lighten(ratio) {
        modHSL(this._rgb, 2, ratio);
        return this;
    }
    darken(ratio) {
        modHSL(this._rgb, 2, -ratio);
        return this;
    }
    saturate(ratio) {
        modHSL(this._rgb, 1, ratio);
        return this;
    }
    desaturate(ratio) {
        modHSL(this._rgb, 1, -ratio);
        return this;
    }
    rotate(deg) {
        rotate(this._rgb, deg);
        return this;
    }
}
function index_esm(input) {
    return new Color(input);
}

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"gkKU3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, "__esModule", {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === "default" || key === "__esModule" || Object.prototype.hasOwnProperty.call(dest, key)) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"i07uf":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = data = [
    {
        "date": "2024-05-25 11:00:26",
        "count": 58
    },
    {
        "date": "2024-05-25 11:05:27",
        "count": 57
    },
    {
        "date": "2024-05-25 11:10:28",
        "count": 59
    },
    {
        "date": "2024-05-25 11:15:29",
        "count": 60
    },
    {
        "date": "2024-05-25 11:20:30",
        "count": 61
    },
    {
        "date": "2024-05-25 11:25:31",
        "count": 62
    },
    {
        "date": "2024-05-25 11:30:34",
        "count": 62
    },
    {
        "date": "2024-05-25 11:35:35",
        "count": 63
    },
    {
        "date": "2024-05-25 11:40:36",
        "count": 65
    },
    {
        "date": "2024-05-25 11:45:37",
        "count": 67
    },
    {
        "date": "2024-05-25 11:50:38",
        "count": 66
    },
    {
        "date": "2024-05-25 11:55:39",
        "count": 67
    },
    {
        "date": "2024-05-25 12:00:42",
        "count": 70
    },
    {
        "date": "2024-05-25 12:05:43",
        "count": 69
    },
    {
        "date": "2024-05-25 12:10:44",
        "count": 72
    },
    {
        "date": "2024-05-25 12:15:45",
        "count": 69
    },
    {
        "date": "2024-05-25 12:20:46",
        "count": 67
    },
    {
        "date": "2024-05-25 12:25:47",
        "count": 67
    },
    {
        "date": "2024-05-25 12:30:50",
        "count": 65
    },
    {
        "date": "2024-05-25 12:35:51",
        "count": 66
    },
    {
        "date": "2024-05-25 12:40:52",
        "count": 70
    },
    {
        "date": "2024-05-25 12:45:53",
        "count": 72
    },
    {
        "date": "2024-05-25 12:50:54",
        "count": 70
    },
    {
        "date": "2024-05-25 12:55:55",
        "count": 69
    },
    {
        "date": "2024-05-25 13:00:59",
        "count": 68
    },
    {
        "date": "2024-05-25 13:06:00",
        "count": 69
    },
    {
        "date": "2024-05-25 13:11:01",
        "count": 68
    },
    {
        "date": "2024-05-25 13:16:02",
        "count": 68
    },
    {
        "date": "2024-05-25 13:21:03",
        "count": 65
    },
    {
        "date": "2024-05-25 13:26:04",
        "count": 66
    },
    {
        "date": "2024-05-25 13:31:07",
        "count": 66
    },
    {
        "date": "2024-05-25 13:36:08",
        "count": 76
    },
    {
        "date": "2024-05-25 13:41:09",
        "count": 77
    },
    {
        "date": "2024-05-25 13:46:10",
        "count": 79
    },
    {
        "date": "2024-05-25 13:51:10",
        "count": 77
    },
    {
        "date": "2024-05-25 13:56:12",
        "count": 79
    },
    {
        "date": "2024-05-25 14:01:15",
        "count": 81
    },
    {
        "date": "2024-05-25 14:06:16",
        "count": 80
    },
    {
        "date": "2024-05-25 14:11:17",
        "count": 82
    },
    {
        "date": "2024-05-25 14:16:18",
        "count": 77
    },
    {
        "date": "2024-05-25 14:21:19",
        "count": 83
    },
    {
        "date": "2024-05-25 14:26:20",
        "count": 79
    },
    {
        "date": "2024-05-25 14:31:23",
        "count": 85
    },
    {
        "date": "2024-05-25 14:36:24",
        "count": 86
    },
    {
        "date": "2024-05-25 14:41:25",
        "count": 82
    },
    {
        "date": "2024-05-25 14:46:25",
        "count": 80
    },
    {
        "date": "2024-05-25 14:51:26",
        "count": 81
    },
    {
        "date": "2024-05-25 14:56:28",
        "count": 84
    },
    {
        "date": "2024-05-25 15:01:31",
        "count": 90
    },
    {
        "date": "2024-05-25 15:06:32",
        "count": 84
    },
    {
        "date": "2024-05-25 15:11:33",
        "count": 81
    },
    {
        "date": "2024-05-25 15:16:34",
        "count": 74
    },
    {
        "date": "2024-05-25 15:21:35",
        "count": 75
    },
    {
        "date": "2024-05-25 15:26:36",
        "count": 73
    },
    {
        "date": "2024-05-25 15:31:39",
        "count": 78
    },
    {
        "date": "2024-05-25 15:36:40",
        "count": 73
    },
    {
        "date": "2024-05-25 15:41:41",
        "count": 70
    },
    {
        "date": "2024-05-25 15:46:41",
        "count": 68
    },
    {
        "date": "2024-05-25 15:51:42",
        "count": 66
    },
    {
        "date": "2024-05-25 15:56:44",
        "count": 66
    },
    {
        "date": "2024-05-25 16:01:47",
        "count": 66
    },
    {
        "date": "2024-05-25 16:06:48",
        "count": 65
    },
    {
        "date": "2024-05-25 16:11:49",
        "count": 62
    },
    {
        "date": "2024-05-25 16:16:50",
        "count": 59
    },
    {
        "date": "2024-05-25 16:21:51",
        "count": 57
    },
    {
        "date": "2024-05-25 16:26:52",
        "count": 57
    },
    {
        "date": "2024-05-25 16:31:55",
        "count": 55
    },
    {
        "date": "2024-05-25 16:36:56",
        "count": 56
    },
    {
        "date": "2024-05-25 16:41:57",
        "count": 51
    },
    {
        "date": "2024-05-25 16:46:58",
        "count": 51
    },
    {
        "date": "2024-05-25 16:51:59",
        "count": 51
    },
    {
        "date": "2024-05-25 16:57:00",
        "count": 49
    },
    {
        "date": "2024-05-25 17:02:04",
        "count": 50
    },
    {
        "date": "2024-05-25 17:07:05",
        "count": 53
    },
    {
        "date": "2024-05-25 17:12:06",
        "count": 52
    },
    {
        "date": "2024-05-25 17:17:07",
        "count": 55
    },
    {
        "date": "2024-05-25 17:22:08",
        "count": 53
    },
    {
        "date": "2024-05-25 17:27:09",
        "count": 52
    },
    {
        "date": "2024-05-25 17:32:13",
        "count": 51
    },
    {
        "date": "2024-05-25 17:37:14",
        "count": 50
    },
    {
        "date": "2024-05-25 17:42:15",
        "count": 49
    },
    {
        "date": "2024-05-25 17:47:16",
        "count": 49
    },
    {
        "date": "2024-05-25 17:52:17",
        "count": 51
    },
    {
        "date": "2024-05-25 17:57:18",
        "count": 49
    },
    {
        "date": "2024-05-25 18:02:21",
        "count": 54
    },
    {
        "date": "2024-05-25 18:07:22",
        "count": 53
    },
    {
        "date": "2024-05-25 18:12:23",
        "count": 52
    },
    {
        "date": "2024-05-25 18:17:25",
        "count": 53
    },
    {
        "date": "2024-05-25 18:22:26",
        "count": 50
    },
    {
        "date": "2024-05-25 18:27:27",
        "count": 49
    },
    {
        "date": "2024-05-25 18:32:30",
        "count": 47
    },
    {
        "date": "2024-05-25 18:37:31",
        "count": 52
    },
    {
        "date": "2024-05-25 18:42:32",
        "count": 55
    },
    {
        "date": "2024-05-25 18:47:33",
        "count": 59
    },
    {
        "date": "2024-05-25 18:52:34",
        "count": 60
    },
    {
        "date": "2024-05-25 18:57:35",
        "count": 63
    },
    {
        "date": "2024-05-25 19:02:38",
        "count": 62
    },
    {
        "date": "2024-05-25 19:07:39",
        "count": 57
    },
    {
        "date": "2024-05-25 19:12:40",
        "count": 55
    },
    {
        "date": "2024-05-25 19:17:41",
        "count": 58
    },
    {
        "date": "2024-05-25 19:22:41",
        "count": 57
    },
    {
        "date": "2024-05-25 19:27:42",
        "count": 56
    },
    {
        "date": "2024-05-25 19:32:46",
        "count": 52
    },
    {
        "date": "2024-05-25 19:37:46",
        "count": 49
    },
    {
        "date": "2024-05-25 19:42:47",
        "count": 45
    },
    {
        "date": "2024-05-25 19:47:48",
        "count": 48
    },
    {
        "date": "2024-05-25 19:52:49",
        "count": 50
    },
    {
        "date": "2024-05-25 19:57:50",
        "count": 46
    },
    {
        "date": "2024-05-25 20:02:53",
        "count": 43
    },
    {
        "date": "2024-05-25 20:07:54",
        "count": 45
    },
    {
        "date": "2024-05-25 20:12:55",
        "count": 41
    },
    {
        "date": "2024-05-25 20:17:56",
        "count": 40
    },
    {
        "date": "2024-05-25 20:22:57",
        "count": 38
    },
    {
        "date": "2024-05-25 20:27:57",
        "count": 38
    },
    {
        "date": "2024-05-25 20:33:01",
        "count": 37
    },
    {
        "date": "2024-05-25 20:38:02",
        "count": 34
    },
    {
        "date": "2024-05-25 20:43:03",
        "count": 31
    },
    {
        "date": "2024-05-25 20:48:04",
        "count": 31
    },
    {
        "date": "2024-05-25 20:53:04",
        "count": 32
    },
    {
        "date": "2024-05-25 20:58:05",
        "count": 34
    },
    {
        "date": "2024-05-25 21:03:08",
        "count": 38
    },
    {
        "date": "2024-05-25 21:08:09",
        "count": 38
    },
    {
        "date": "2024-05-25 21:13:10",
        "count": 36
    },
    {
        "date": "2024-05-25 21:18:11",
        "count": 32
    },
    {
        "date": "2024-05-25 21:23:13",
        "count": 33
    },
    {
        "date": "2024-05-25 21:28:13",
        "count": 33
    },
    {
        "date": "2024-05-25 21:33:17",
        "count": 33
    },
    {
        "date": "2024-05-25 21:38:18",
        "count": 33
    },
    {
        "date": "2024-05-25 21:43:19",
        "count": 30
    },
    {
        "date": "2024-05-25 21:48:20",
        "count": 29
    },
    {
        "date": "2024-05-25 21:53:20",
        "count": 33
    },
    {
        "date": "2024-05-25 21:58:21",
        "count": 33
    },
    {
        "date": "2024-05-25 22:03:24",
        "count": 28
    },
    {
        "date": "2024-05-25 22:08:25",
        "count": 27
    },
    {
        "date": "2024-05-25 22:13:26",
        "count": 27
    },
    {
        "date": "2024-05-25 22:18:27",
        "count": 27
    },
    {
        "date": "2024-05-25 22:23:27",
        "count": 26
    },
    {
        "date": "2024-05-25 22:28:28",
        "count": 26
    },
    {
        "date": "2024-05-25 22:33:31",
        "count": 26
    },
    {
        "date": "2024-05-25 22:38:32",
        "count": 25
    },
    {
        "date": "2024-05-25 22:43:33",
        "count": 24
    },
    {
        "date": "2024-05-25 22:48:34",
        "count": 21
    },
    {
        "date": "2024-05-25 22:53:35",
        "count": 20
    },
    {
        "date": "2024-05-25 22:58:36",
        "count": 21
    },
    {
        "date": "2024-05-25 23:03:39",
        "count": 19
    },
    {
        "date": "2024-05-25 23:08:40",
        "count": 18
    },
    {
        "date": "2024-05-25 23:13:41",
        "count": 18
    },
    {
        "date": "2024-05-25 23:18:41",
        "count": 17
    },
    {
        "date": "2024-05-25 23:23:42",
        "count": 13
    },
    {
        "date": "2024-05-25 23:28:43",
        "count": 13
    },
    {
        "date": "2024-05-25 23:33:46",
        "count": 12
    },
    {
        "date": "2024-05-25 23:38:47",
        "count": 12
    },
    {
        "date": "2024-05-25 23:43:48",
        "count": 11
    },
    {
        "date": "2024-05-25 23:48:49",
        "count": 9
    },
    {
        "date": "2024-05-25 23:53:49",
        "count": 9
    },
    {
        "date": "2024-05-25 23:58:50",
        "count": 9
    },
    {
        "date": "2024-05-26 00:03:53",
        "count": 9
    },
    {
        "date": "2024-05-26 00:08:53",
        "count": 9
    },
    {
        "date": "2024-05-26 00:13:54",
        "count": 9
    },
    {
        "date": "2024-05-26 00:18:55",
        "count": 9
    },
    {
        "date": "2024-05-26 00:23:56",
        "count": 9
    },
    {
        "date": "2024-05-26 00:28:57",
        "count": 8
    },
    {
        "date": "2024-05-26 00:34:00",
        "count": 8
    },
    {
        "date": "2024-05-26 00:39:01",
        "count": 8
    },
    {
        "date": "2024-05-26 00:44:01",
        "count": 8
    },
    {
        "date": "2024-05-26 00:49:02",
        "count": 8
    },
    {
        "date": "2024-05-26 00:54:03",
        "count": 8
    },
    {
        "date": "2024-05-26 00:59:04",
        "count": 8
    },
    {
        "date": "2024-05-26 01:04:07",
        "count": 8
    },
    {
        "date": "2024-05-26 01:09:08",
        "count": 8
    },
    {
        "date": "2024-05-26 01:14:08",
        "count": 8
    },
    {
        "date": "2024-05-26 01:19:09",
        "count": 8
    },
    {
        "date": "2024-05-26 01:24:10",
        "count": 8
    },
    {
        "date": "2024-05-26 01:29:11",
        "count": 7
    },
    {
        "date": "2024-05-26 01:34:14",
        "count": 7
    },
    {
        "date": "2024-05-26 01:39:14",
        "count": 8
    },
    {
        "date": "2024-05-26 01:44:15",
        "count": 8
    },
    {
        "date": "2024-05-26 01:49:16",
        "count": 8
    },
    {
        "date": "2024-05-26 01:54:17",
        "count": 8
    },
    {
        "date": "2024-05-26 01:59:17",
        "count": 8
    },
    {
        "date": "2024-05-26 02:04:21",
        "count": 8
    },
    {
        "date": "2024-05-26 02:09:21",
        "count": 8
    },
    {
        "date": "2024-05-26 02:14:22",
        "count": 8
    },
    {
        "date": "2024-05-26 02:19:23",
        "count": 9
    },
    {
        "date": "2024-05-26 02:24:24",
        "count": 11
    },
    {
        "date": "2024-05-26 02:29:24",
        "count": 11
    },
    {
        "date": "2024-05-26 02:34:27",
        "count": 11
    },
    {
        "date": "2024-05-26 02:39:28",
        "count": 11
    },
    {
        "date": "2024-05-26 02:44:29",
        "count": 11
    },
    {
        "date": "2024-05-26 02:49:29",
        "count": 11
    },
    {
        "date": "2024-05-26 02:54:30",
        "count": 11
    },
    {
        "date": "2024-05-26 02:59:31",
        "count": 11
    },
    {
        "date": "2024-05-26 03:04:34",
        "count": 11
    },
    {
        "date": "2024-05-26 03:09:35",
        "count": 12
    },
    {
        "date": "2024-05-26 03:14:36",
        "count": 12
    },
    {
        "date": "2024-05-26 03:19:36",
        "count": 12
    },
    {
        "date": "2024-05-26 03:24:37",
        "count": 12
    },
    {
        "date": "2024-05-26 03:29:38",
        "count": 14
    },
    {
        "date": "2024-05-26 03:34:41",
        "count": 14
    },
    {
        "date": "2024-05-26 03:39:41",
        "count": 14
    },
    {
        "date": "2024-05-26 03:44:42",
        "count": 13
    },
    {
        "date": "2024-05-26 03:49:43",
        "count": 13
    },
    {
        "date": "2024-05-26 03:54:44",
        "count": 11
    },
    {
        "date": "2024-05-26 03:59:44",
        "count": 12
    },
    {
        "date": "2024-05-26 04:04:47",
        "count": 12
    },
    {
        "date": "2024-05-26 04:09:48",
        "count": 13
    },
    {
        "date": "2024-05-26 04:14:49",
        "count": 15
    },
    {
        "date": "2024-05-26 04:19:50",
        "count": 16
    },
    {
        "date": "2024-05-26 04:24:51",
        "count": 17
    },
    {
        "date": "2024-05-26 04:29:52",
        "count": 17
    },
    {
        "date": "2024-05-26 04:34:55",
        "count": 17
    },
    {
        "date": "2024-05-26 04:39:56",
        "count": 20
    },
    {
        "date": "2024-05-26 04:44:56",
        "count": 20
    },
    {
        "date": "2024-05-26 04:49:57",
        "count": 19
    },
    {
        "date": "2024-05-26 04:54:58",
        "count": 17
    },
    {
        "date": "2024-05-26 04:59:58",
        "count": 16
    },
    {
        "date": "2024-05-26 05:05:02",
        "count": 12
    },
    {
        "date": "2024-05-26 05:10:02",
        "count": 12
    },
    {
        "date": "2024-05-26 05:15:03",
        "count": 14
    },
    {
        "date": "2024-05-26 05:20:04",
        "count": 14
    },
    {
        "date": "2024-05-26 05:25:05",
        "count": 15
    },
    {
        "date": "2024-05-26 05:30:06",
        "count": 15
    },
    {
        "date": "2024-05-26 05:35:08",
        "count": 17
    },
    {
        "date": "2024-05-26 05:40:09",
        "count": 18
    },
    {
        "date": "2024-05-26 05:45:10",
        "count": 19
    },
    {
        "date": "2024-05-26 05:50:11",
        "count": 21
    },
    {
        "date": "2024-05-26 05:55:11",
        "count": 21
    },
    {
        "date": "2024-05-26 06:00:12",
        "count": 24
    },
    {
        "date": "2024-05-26 06:05:15",
        "count": 24
    },
    {
        "date": "2024-05-26 06:10:16",
        "count": 24
    },
    {
        "date": "2024-05-26 06:15:17",
        "count": 27
    },
    {
        "date": "2024-05-26 06:20:18",
        "count": 31
    },
    {
        "date": "2024-05-26 06:25:18",
        "count": 31
    },
    {
        "date": "2024-05-26 06:30:19",
        "count": 33
    },
    {
        "date": "2024-05-26 06:35:22",
        "count": 31
    },
    {
        "date": "2024-05-26 06:40:23",
        "count": 29
    },
    {
        "date": "2024-05-26 06:45:23",
        "count": 30
    },
    {
        "date": "2024-05-26 06:50:24",
        "count": 34
    },
    {
        "date": "2024-05-26 06:55:25",
        "count": 37
    },
    {
        "date": "2024-05-26 07:00:26",
        "count": 38
    },
    {
        "date": "2024-05-26 07:05:29",
        "count": 40
    },
    {
        "date": "2024-05-26 07:10:29",
        "count": 41
    },
    {
        "date": "2024-05-26 07:15:30",
        "count": 44
    },
    {
        "date": "2024-05-26 07:20:31",
        "count": 47
    },
    {
        "date": "2024-05-26 07:25:32",
        "count": 51
    },
    {
        "date": "2024-05-26 07:30:34",
        "count": 53
    },
    {
        "date": "2024-05-26 07:35:37",
        "count": 54
    },
    {
        "date": "2024-05-26 07:40:38",
        "count": 58
    },
    {
        "date": "2024-05-26 07:45:38",
        "count": 60
    },
    {
        "date": "2024-05-26 07:50:39",
        "count": 70
    },
    {
        "date": "2024-05-26 07:55:40",
        "count": 78
    },
    {
        "date": "2024-05-26 08:00:41",
        "count": 85
    },
    {
        "date": "2024-05-26 08:05:43",
        "count": 86
    },
    {
        "date": "2024-05-26 08:10:44",
        "count": 89
    },
    {
        "date": "2024-05-26 08:15:45",
        "count": 94
    },
    {
        "date": "2024-05-26 08:20:49",
        "count": 100
    },
    {
        "date": "2024-05-26 08:25:50",
        "count": 106
    },
    {
        "date": "2024-05-26 08:30:51",
        "count": 107
    },
    {
        "date": "2024-05-26 08:35:54",
        "count": 110
    },
    {
        "date": "2024-05-26 08:40:55",
        "count": 112
    },
    {
        "date": "2024-05-26 08:45:56",
        "count": 114
    },
    {
        "date": "2024-05-26 08:50:57",
        "count": 109
    },
    {
        "date": "2024-05-26 08:55:58",
        "count": 109
    },
    {
        "date": "2024-05-26 09:00:59",
        "count": 111
    },
    {
        "date": "2024-05-26 09:06:03",
        "count": 103
    },
    {
        "date": "2024-05-26 09:11:03",
        "count": 100
    },
    {
        "date": "2024-05-26 09:16:04",
        "count": 96
    },
    {
        "date": "2024-05-26 09:21:05",
        "count": 92
    },
    {
        "date": "2024-05-26 09:26:06",
        "count": 90
    },
    {
        "date": "2024-05-26 09:31:07",
        "count": 88
    },
    {
        "date": "2024-05-26 09:36:10",
        "count": 77
    },
    {
        "date": "2024-05-26 09:41:11",
        "count": 80
    },
    {
        "date": "2024-05-26 09:46:13",
        "count": 80
    },
    {
        "date": "2024-05-26 09:51:14",
        "count": 77
    },
    {
        "date": "2024-05-26 09:56:15",
        "count": 77
    },
    {
        "date": "2024-05-26 10:01:16",
        "count": 84
    },
    {
        "date": "2024-05-26 10:06:20",
        "count": 84
    },
    {
        "date": "2024-05-26 10:11:21",
        "count": 87
    },
    {
        "date": "2024-05-26 10:16:22",
        "count": 80
    },
    {
        "date": "2024-05-26 10:21:22",
        "count": 84
    },
    {
        "date": "2024-05-26 10:26:23",
        "count": 86
    },
    {
        "date": "2024-05-26 10:31:24",
        "count": 86
    },
    {
        "date": "2024-05-26 10:36:27",
        "count": 86
    },
    {
        "date": "2024-05-26 10:41:28",
        "count": 85
    },
    {
        "date": "2024-05-26 10:46:29",
        "count": 85
    },
    {
        "date": "2024-05-26 10:51:30",
        "count": 83
    },
    {
        "date": "2024-05-26 10:56:31",
        "count": 80
    },
    {
        "date": "2024-05-26 11:01:31",
        "count": 82
    },
    {
        "date": "2024-05-26 11:06:35",
        "count": 85
    },
    {
        "date": "2024-05-26 11:11:36",
        "count": 92
    },
    {
        "date": "2024-05-26 11:16:37",
        "count": 90
    },
    {
        "date": "2024-05-26 11:21:38",
        "count": 89
    },
    {
        "date": "2024-05-26 11:26:39",
        "count": 85
    },
    {
        "date": "2024-05-26 11:31:40",
        "count": 80
    },
    {
        "date": "2024-05-26 11:36:43",
        "count": 77
    },
    {
        "date": "2024-05-26 11:41:44",
        "count": 80
    },
    {
        "date": "2024-05-26 11:46:45",
        "count": 74
    },
    {
        "date": "2024-05-26 11:51:46",
        "count": 72
    },
    {
        "date": "2024-05-26 11:56:47",
        "count": 72
    },
    {
        "date": "2024-05-26 12:01:48",
        "count": 70
    },
    {
        "date": "2024-05-26 12:06:51",
        "count": 73
    },
    {
        "date": "2024-05-26 12:11:52",
        "count": 76
    },
    {
        "date": "2024-05-26 12:16:53",
        "count": 72
    },
    {
        "date": "2024-05-26 12:21:54",
        "count": 70
    },
    {
        "date": "2024-05-26 12:26:55",
        "count": 65
    },
    {
        "date": "2024-05-26 12:31:56",
        "count": 67
    },
    {
        "date": "2024-05-26 12:36:59",
        "count": 69
    },
    {
        "date": "2024-05-26 12:42:00",
        "count": 67
    },
    {
        "date": "2024-05-26 12:47:01",
        "count": 71
    },
    {
        "date": "2024-05-26 12:52:02",
        "count": 70
    },
    {
        "date": "2024-05-26 12:57:03",
        "count": 68
    },
    {
        "date": "2024-05-26 13:02:04",
        "count": 69
    },
    {
        "date": "2024-05-26 13:07:08",
        "count": 68
    },
    {
        "date": "2024-05-26 13:12:08",
        "count": 70
    },
    {
        "date": "2024-05-26 13:17:09",
        "count": 69
    },
    {
        "date": "2024-05-26 13:22:11",
        "count": 67
    },
    {
        "date": "2024-05-26 13:27:12",
        "count": 68
    },
    {
        "date": "2024-05-26 13:32:13",
        "count": 68
    },
    {
        "date": "2024-05-26 13:37:17",
        "count": 66
    },
    {
        "date": "2024-05-26 13:42:18",
        "count": 74
    },
    {
        "date": "2024-05-26 13:47:19",
        "count": 74
    },
    {
        "date": "2024-05-26 13:52:20",
        "count": 81
    },
    {
        "date": "2024-05-26 13:57:20",
        "count": 80
    },
    {
        "date": "2024-05-26 14:02:21",
        "count": 80
    },
    {
        "date": "2024-05-26 14:07:25",
        "count": 81
    },
    {
        "date": "2024-05-26 14:12:25",
        "count": 87
    },
    {
        "date": "2024-05-26 14:17:27",
        "count": 90
    },
    {
        "date": "2024-05-26 14:22:28",
        "count": 99
    },
    {
        "date": "2024-05-26 14:27:28",
        "count": 99
    },
    {
        "date": "2024-05-26 14:32:29",
        "count": 99
    },
    {
        "date": "2024-05-26 14:37:33",
        "count": 98
    },
    {
        "date": "2024-05-26 14:42:34",
        "count": 96
    },
    {
        "date": "2024-05-26 14:47:35",
        "count": 93
    },
    {
        "date": "2024-05-26 14:52:36",
        "count": 88
    },
    {
        "date": "2024-05-26 14:57:37",
        "count": 87
    },
    {
        "date": "2024-05-26 15:02:38",
        "count": 90
    },
    {
        "date": "2024-05-26 15:07:41",
        "count": 89
    },
    {
        "date": "2024-05-26 15:12:42",
        "count": 90
    },
    {
        "date": "2024-05-26 15:17:43",
        "count": 97
    },
    {
        "date": "2024-05-26 15:22:44",
        "count": 103
    },
    {
        "date": "2024-05-26 15:27:45",
        "count": 102
    },
    {
        "date": "2024-05-26 15:32:46",
        "count": 102
    },
    {
        "date": "2024-05-26 15:37:49",
        "count": 98
    },
    {
        "date": "2024-05-26 15:42:50",
        "count": 99
    },
    {
        "date": "2024-05-26 15:47:51",
        "count": 103
    },
    {
        "date": "2024-05-26 15:52:52",
        "count": 102
    },
    {
        "date": "2024-05-26 15:57:53",
        "count": 108
    },
    {
        "date": "2024-05-26 16:02:54",
        "count": 105
    },
    {
        "date": "2024-05-26 16:07:58",
        "count": 102
    },
    {
        "date": "2024-05-26 16:12:59",
        "count": 100
    },
    {
        "date": "2024-05-26 16:18:00",
        "count": 97
    },
    {
        "date": "2024-05-26 16:23:02",
        "count": 99
    },
    {
        "date": "2024-05-26 16:28:03",
        "count": 98
    },
    {
        "date": "2024-05-26 16:33:04",
        "count": 102
    },
    {
        "date": "2024-05-26 16:38:08",
        "count": 103
    },
    {
        "date": "2024-05-26 16:43:09",
        "count": 89
    },
    {
        "date": "2024-05-26 16:48:10",
        "count": 84
    },
    {
        "date": "2024-05-26 16:53:11",
        "count": 84
    },
    {
        "date": "2024-05-26 16:58:12",
        "count": 84
    },
    {
        "date": "2024-05-26 17:03:14",
        "count": 79
    },
    {
        "date": "2024-05-26 17:08:18",
        "count": 83
    },
    {
        "date": "2024-05-26 17:13:20",
        "count": 81
    },
    {
        "date": "2024-05-26 17:18:21",
        "count": 95
    },
    {
        "date": "2024-05-26 17:23:22",
        "count": 97
    },
    {
        "date": "2024-05-26 17:28:23",
        "count": 99
    },
    {
        "date": "2024-05-26 17:33:24",
        "count": 97
    },
    {
        "date": "2024-05-26 17:38:27",
        "count": 100
    },
    {
        "date": "2024-05-26 17:43:28",
        "count": 100
    },
    {
        "date": "2024-05-26 17:48:29",
        "count": 104
    },
    {
        "date": "2024-05-26 17:53:30",
        "count": 108
    },
    {
        "date": "2024-05-26 17:58:31",
        "count": 114
    },
    {
        "date": "2024-05-26 18:03:32",
        "count": 116
    },
    {
        "date": "2024-05-26 18:08:36",
        "count": 112
    },
    {
        "date": "2024-05-26 18:13:37",
        "count": 114
    },
    {
        "date": "2024-05-26 18:18:38",
        "count": 109
    },
    {
        "date": "2024-05-26 18:23:39",
        "count": 108
    },
    {
        "date": "2024-05-26 18:28:40",
        "count": 111
    },
    {
        "date": "2024-05-26 18:33:41",
        "count": 109
    },
    {
        "date": "2024-05-26 18:38:45",
        "count": 111
    },
    {
        "date": "2024-05-26 18:43:46",
        "count": 107
    },
    {
        "date": "2024-05-26 18:48:47",
        "count": 101
    },
    {
        "date": "2024-05-26 18:53:48",
        "count": 94
    },
    {
        "date": "2024-05-26 18:58:49",
        "count": 86
    },
    {
        "date": "2024-05-26 19:03:50",
        "count": 84
    },
    {
        "date": "2024-05-26 19:08:54",
        "count": 84
    },
    {
        "date": "2024-05-26 19:13:55",
        "count": 84
    },
    {
        "date": "2024-05-26 19:18:56",
        "count": 86
    },
    {
        "date": "2024-05-26 19:23:57",
        "count": 84
    },
    {
        "date": "2024-05-26 19:28:58",
        "count": 79
    },
    {
        "date": "2024-05-26 19:34:00",
        "count": 71
    },
    {
        "date": "2024-05-26 19:39:04",
        "count": 66
    },
    {
        "date": "2024-05-26 19:44:05",
        "count": 66
    },
    {
        "date": "2024-05-26 19:49:05",
        "count": 69
    },
    {
        "date": "2024-05-26 19:54:06",
        "count": 63
    },
    {
        "date": "2024-05-26 19:59:07",
        "count": 61
    },
    {
        "date": "2024-05-26 20:04:08",
        "count": 60
    },
    {
        "date": "2024-05-26 20:09:12",
        "count": 53
    },
    {
        "date": "2024-05-26 20:14:13",
        "count": 51
    },
    {
        "date": "2024-05-26 20:19:14",
        "count": 49
    },
    {
        "date": "2024-05-26 20:24:15",
        "count": 45
    },
    {
        "date": "2024-05-26 20:29:16",
        "count": 44
    },
    {
        "date": "2024-05-26 20:34:16",
        "count": 43
    },
    {
        "date": "2024-05-26 20:39:20",
        "count": 46
    },
    {
        "date": "2024-05-26 20:44:21",
        "count": 45
    },
    {
        "date": "2024-05-26 20:49:22",
        "count": 43
    },
    {
        "date": "2024-05-26 20:54:23",
        "count": 42
    },
    {
        "date": "2024-05-26 20:59:24",
        "count": 41
    },
    {
        "date": "2024-05-26 21:04:25",
        "count": 42
    },
    {
        "date": "2024-05-26 21:09:28",
        "count": 39
    },
    {
        "date": "2024-05-26 21:14:29",
        "count": 35
    },
    {
        "date": "2024-05-26 21:19:30",
        "count": 31
    },
    {
        "date": "2024-05-26 21:24:30",
        "count": 30
    },
    {
        "date": "2024-05-26 21:29:31",
        "count": 29
    },
    {
        "date": "2024-05-26 21:34:32",
        "count": 30
    },
    {
        "date": "2024-05-26 21:39:35",
        "count": 28
    },
    {
        "date": "2024-05-26 21:44:36",
        "count": 26
    },
    {
        "date": "2024-05-26 21:49:36",
        "count": 24
    },
    {
        "date": "2024-05-26 21:54:37",
        "count": 22
    },
    {
        "date": "2024-05-26 21:59:38",
        "count": 21
    },
    {
        "date": "2024-05-26 22:04:38",
        "count": 21
    },
    {
        "date": "2024-05-26 22:09:41",
        "count": 20
    },
    {
        "date": "2024-05-26 22:14:42",
        "count": 17
    },
    {
        "date": "2024-05-26 22:19:43",
        "count": 14
    },
    {
        "date": "2024-05-26 22:24:43",
        "count": 14
    },
    {
        "date": "2024-05-26 22:29:44",
        "count": 14
    },
    {
        "date": "2024-05-26 22:34:45",
        "count": 13
    },
    {
        "date": "2024-05-26 22:39:48",
        "count": 12
    },
    {
        "date": "2024-05-26 22:44:49",
        "count": 13
    },
    {
        "date": "2024-05-26 22:49:50",
        "count": 12
    },
    {
        "date": "2024-05-26 22:54:50",
        "count": 9
    },
    {
        "date": "2024-05-26 22:59:51",
        "count": 9
    },
    {
        "date": "2024-05-26 23:04:52",
        "count": 8
    },
    {
        "date": "2024-05-26 23:09:55",
        "count": 9
    },
    {
        "date": "2024-05-26 23:14:56",
        "count": 9
    },
    {
        "date": "2024-05-26 23:19:56",
        "count": 9
    },
    {
        "date": "2024-05-26 23:24:57",
        "count": 11
    },
    {
        "date": "2024-05-26 23:29:58",
        "count": 11
    },
    {
        "date": "2024-05-26 23:34:59",
        "count": 10
    },
    {
        "date": "2024-05-26 23:40:02",
        "count": 10
    },
    {
        "date": "2024-05-26 23:45:02",
        "count": 9
    },
    {
        "date": "2024-05-26 23:50:03",
        "count": 8
    },
    {
        "date": "2024-05-26 23:55:04",
        "count": 8
    },
    {
        "date": "2024-05-27 00:00:05",
        "count": 8
    },
    {
        "date": "2024-05-27 00:05:06",
        "count": 8
    },
    {
        "date": "2024-05-27 00:10:09",
        "count": 8
    },
    {
        "date": "2024-05-27 00:15:09",
        "count": 8
    },
    {
        "date": "2024-05-27 00:20:10",
        "count": 7
    },
    {
        "date": "2024-05-27 00:25:11",
        "count": 6
    },
    {
        "date": "2024-05-27 00:30:12",
        "count": 6
    },
    {
        "date": "2024-05-27 00:35:13",
        "count": 6
    },
    {
        "date": "2024-05-27 00:40:16",
        "count": 5
    },
    {
        "date": "2024-05-27 00:45:17",
        "count": 5
    },
    {
        "date": "2024-05-27 00:50:17",
        "count": 5
    },
    {
        "date": "2024-05-27 00:55:18",
        "count": 5
    },
    {
        "date": "2024-05-27 01:00:19",
        "count": 5
    },
    {
        "date": "2024-05-27 01:05:20",
        "count": 6
    },
    {
        "date": "2024-05-27 01:10:23",
        "count": 6
    },
    {
        "date": "2024-05-27 01:15:23",
        "count": 5
    },
    {
        "date": "2024-05-27 01:20:24",
        "count": 5
    },
    {
        "date": "2024-05-27 01:25:25",
        "count": 6
    },
    {
        "date": "2024-05-27 01:30:25",
        "count": 6
    },
    {
        "date": "2024-05-27 01:35:26",
        "count": 6
    },
    {
        "date": "2024-05-27 01:40:29",
        "count": 6
    },
    {
        "date": "2024-05-27 01:45:30",
        "count": 6
    },
    {
        "date": "2024-05-27 01:50:31",
        "count": 5
    },
    {
        "date": "2024-05-27 01:55:31",
        "count": 5
    },
    {
        "date": "2024-05-27 02:00:32",
        "count": 5
    },
    {
        "date": "2024-05-27 02:05:33",
        "count": 6
    },
    {
        "date": "2024-05-27 02:10:36",
        "count": 8
    },
    {
        "date": "2024-05-27 02:15:37",
        "count": 7
    },
    {
        "date": "2024-05-27 02:20:38",
        "count": 7
    },
    {
        "date": "2024-05-27 02:25:39",
        "count": 7
    },
    {
        "date": "2024-05-27 02:30:39",
        "count": 8
    },
    {
        "date": "2024-05-27 02:35:40",
        "count": 8
    },
    {
        "date": "2024-05-27 02:40:43",
        "count": 9
    },
    {
        "date": "2024-05-27 02:45:44",
        "count": 9
    },
    {
        "date": "2024-05-27 02:50:45",
        "count": 10
    },
    {
        "date": "2024-05-27 02:55:46",
        "count": 10
    },
    {
        "date": "2024-05-27 03:00:46",
        "count": 10
    },
    {
        "date": "2024-05-27 03:05:47",
        "count": 10
    },
    {
        "date": "2024-05-27 03:10:50",
        "count": 11
    },
    {
        "date": "2024-05-27 03:15:51",
        "count": 12
    },
    {
        "date": "2024-05-27 03:20:52",
        "count": 13
    },
    {
        "date": "2024-05-27 03:25:53",
        "count": 14
    },
    {
        "date": "2024-05-27 03:30:53",
        "count": 17
    },
    {
        "date": "2024-05-27 03:35:54",
        "count": 21
    },
    {
        "date": "2024-05-27 03:40:57",
        "count": 21
    },
    {
        "date": "2024-05-27 03:45:58",
        "count": 23
    },
    {
        "date": "2024-05-27 03:50:59",
        "count": 23
    },
    {
        "date": "2024-05-27 03:55:59",
        "count": 23
    },
    {
        "date": "2024-05-27 04:01:00",
        "count": 26
    },
    {
        "date": "2024-05-27 04:06:01",
        "count": 26
    },
    {
        "date": "2024-05-27 04:11:04",
        "count": 30
    },
    {
        "date": "2024-05-27 04:16:04",
        "count": 30
    },
    {
        "date": "2024-05-27 04:21:06",
        "count": 28
    },
    {
        "date": "2024-05-27 04:26:06",
        "count": 28
    },
    {
        "date": "2024-05-27 04:31:07",
        "count": 28
    },
    {
        "date": "2024-05-27 04:36:08",
        "count": 30
    },
    {
        "date": "2024-05-27 04:41:11",
        "count": 29
    },
    {
        "date": "2024-05-27 04:46:12",
        "count": 28
    },
    {
        "date": "2024-05-27 04:51:13",
        "count": 33
    },
    {
        "date": "2024-05-27 04:56:13",
        "count": 35
    },
    {
        "date": "2024-05-27 05:01:14",
        "count": 38
    },
    {
        "date": "2024-05-27 05:06:15",
        "count": 38
    },
    {
        "date": "2024-05-27 05:11:18",
        "count": 45
    },
    {
        "date": "2024-05-27 05:16:19",
        "count": 48
    },
    {
        "date": "2024-05-27 05:21:20",
        "count": 47
    },
    {
        "date": "2024-05-27 05:26:21",
        "count": 49
    },
    {
        "date": "2024-05-27 05:31:21",
        "count": 47
    },
    {
        "date": "2024-05-27 05:36:22",
        "count": 46
    },
    {
        "date": "2024-05-27 05:41:25",
        "count": 49
    },
    {
        "date": "2024-05-27 05:46:26",
        "count": 54
    },
    {
        "date": "2024-05-27 05:51:27",
        "count": 53
    },
    {
        "date": "2024-05-27 05:56:27",
        "count": 54
    },
    {
        "date": "2024-05-27 06:01:28",
        "count": 55
    },
    {
        "date": "2024-05-27 06:06:29",
        "count": 56
    },
    {
        "date": "2024-05-27 06:11:32",
        "count": 53
    },
    {
        "date": "2024-05-27 06:16:32",
        "count": 54
    },
    {
        "date": "2024-05-27 06:21:33",
        "count": 50
    },
    {
        "date": "2024-05-27 06:26:34",
        "count": 50
    },
    {
        "date": "2024-05-27 06:31:35",
        "count": 52
    },
    {
        "date": "2024-05-27 06:36:36",
        "count": 51
    },
    {
        "date": "2024-05-27 06:41:39",
        "count": 52
    },
    {
        "date": "2024-05-27 06:46:39",
        "count": 53
    },
    {
        "date": "2024-05-27 06:51:40",
        "count": 56
    },
    {
        "date": "2024-05-27 06:56:41",
        "count": 55
    },
    {
        "date": "2024-05-27 07:01:42",
        "count": 57
    },
    {
        "date": "2024-05-27 07:06:43",
        "count": 57
    },
    {
        "date": "2024-05-27 07:11:46",
        "count": 51
    },
    {
        "date": "2024-05-27 07:16:46",
        "count": 53
    },
    {
        "date": "2024-05-27 07:21:47",
        "count": 51
    },
    {
        "date": "2024-05-27 07:26:48",
        "count": 54
    },
    {
        "date": "2024-05-27 07:31:50",
        "count": 57
    },
    {
        "date": "2024-05-27 07:36:51",
        "count": 58
    },
    {
        "date": "2024-05-27 07:41:54",
        "count": 58
    },
    {
        "date": "2024-05-27 07:46:55",
        "count": 58
    },
    {
        "date": "2024-05-27 07:51:56",
        "count": 56
    },
    {
        "date": "2024-05-27 07:56:56",
        "count": 54
    },
    {
        "date": "2024-05-27 08:01:57",
        "count": 58
    },
    {
        "date": "2024-05-27 08:06:58",
        "count": 53
    },
    {
        "date": "2024-05-27 08:12:01",
        "count": 51
    },
    {
        "date": "2024-05-27 08:17:02",
        "count": 50
    },
    {
        "date": "2024-05-27 08:22:03",
        "count": 46
    },
    {
        "date": "2024-05-27 08:27:04",
        "count": 49
    },
    {
        "date": "2024-05-27 08:32:05",
        "count": 48
    },
    {
        "date": "2024-05-27 08:37:05",
        "count": 46
    },
    {
        "date": "2024-05-27 08:42:09",
        "count": 48
    },
    {
        "date": "2024-05-27 08:47:10",
        "count": 45
    },
    {
        "date": "2024-05-27 08:52:11",
        "count": 49
    },
    {
        "date": "2024-05-27 08:57:12",
        "count": 55
    },
    {
        "date": "2024-05-27 09:02:13",
        "count": 52
    },
    {
        "date": "2024-05-27 09:07:14",
        "count": 49
    },
    {
        "date": "2024-05-27 09:12:18",
        "count": 48
    },
    {
        "date": "2024-05-27 09:17:19",
        "count": 49
    },
    {
        "date": "2024-05-27 09:22:21",
        "count": 47
    },
    {
        "date": "2024-05-27 09:27:22",
        "count": 51
    },
    {
        "date": "2024-05-27 09:32:23",
        "count": 56
    },
    {
        "date": "2024-05-27 09:37:24",
        "count": 57
    },
    {
        "date": "2024-05-27 09:42:28",
        "count": 56
    },
    {
        "date": "2024-05-27 09:47:29",
        "count": 57
    },
    {
        "date": "2024-05-27 09:52:30",
        "count": 54
    },
    {
        "date": "2024-05-27 09:57:31",
        "count": 54
    },
    {
        "date": "2024-05-27 10:02:32",
        "count": 57
    },
    {
        "date": "2024-05-27 10:07:33",
        "count": 55
    },
    {
        "date": "2024-05-27 10:12:37",
        "count": 55
    },
    {
        "date": "2024-05-27 10:17:38",
        "count": 58
    },
    {
        "date": "2024-05-27 10:22:40",
        "count": 59
    },
    {
        "date": "2024-05-27 10:27:41",
        "count": 56
    },
    {
        "date": "2024-05-27 10:32:41",
        "count": 57
    },
    {
        "date": "2024-05-27 10:37:42",
        "count": 55
    },
    {
        "date": "2024-05-27 10:42:46",
        "count": 54
    },
    {
        "date": "2024-05-27 10:47:47",
        "count": 53
    },
    {
        "date": "2024-05-27 10:52:49",
        "count": 53
    },
    {
        "date": "2024-05-27 10:57:50",
        "count": 52
    },
    {
        "date": "2024-05-27 11:02:51",
        "count": 51
    },
    {
        "date": "2024-05-27 11:07:52",
        "count": 52
    },
    {
        "date": "2024-05-27 11:12:56",
        "count": 52
    },
    {
        "date": "2024-05-27 11:17:57",
        "count": 55
    },
    {
        "date": "2024-05-27 11:22:58",
        "count": 54
    },
    {
        "date": "2024-05-27 11:27:59",
        "count": 51
    },
    {
        "date": "2024-05-27 11:33:00",
        "count": 56
    },
    {
        "date": "2024-05-27 11:38:02",
        "count": 53
    },
    {
        "date": "2024-05-27 11:43:05",
        "count": 53
    },
    {
        "date": "2024-05-27 11:48:06",
        "count": 54
    },
    {
        "date": "2024-05-27 11:53:07",
        "count": 55
    },
    {
        "date": "2024-05-27 11:58:08",
        "count": 60
    },
    {
        "date": "2024-05-27 12:03:09",
        "count": 61
    },
    {
        "date": "2024-05-27 12:08:10",
        "count": 69
    },
    {
        "date": "2024-05-27 12:13:15",
        "count": 74
    },
    {
        "date": "2024-05-27 12:18:16",
        "count": 73
    },
    {
        "date": "2024-05-27 12:23:17",
        "count": 77
    },
    {
        "date": "2024-05-27 12:28:18",
        "count": 79
    },
    {
        "date": "2024-05-27 12:33:19",
        "count": 75
    },
    {
        "date": "2024-05-27 12:38:20",
        "count": 80
    },
    {
        "date": "2024-05-27 12:43:24",
        "count": 82
    },
    {
        "date": "2024-05-27 12:48:25",
        "count": 87
    },
    {
        "date": "2024-05-27 12:53:25",
        "count": 78
    },
    {
        "date": "2024-05-27 12:58:27",
        "count": 85
    },
    {
        "date": "2024-05-27 13:03:28",
        "count": 83
    },
    {
        "date": "2024-05-27 13:08:29",
        "count": 81
    },
    {
        "date": "2024-05-27 13:13:32",
        "count": 82
    },
    {
        "date": "2024-05-27 13:18:33",
        "count": 79
    },
    {
        "date": "2024-05-27 13:23:34",
        "count": 84
    },
    {
        "date": "2024-05-27 13:28:36",
        "count": 83
    },
    {
        "date": "2024-05-27 13:33:37",
        "count": 84
    },
    {
        "date": "2024-05-27 13:38:38",
        "count": 80
    },
    {
        "date": "2024-05-27 13:43:42",
        "count": 82
    },
    {
        "date": "2024-05-27 13:48:43",
        "count": 82
    },
    {
        "date": "2024-05-27 13:53:44",
        "count": 86
    },
    {
        "date": "2024-05-27 13:58:45",
        "count": 90
    },
    {
        "date": "2024-05-27 14:03:46",
        "count": 92
    },
    {
        "date": "2024-05-27 14:08:47",
        "count": 94
    },
    {
        "date": "2024-05-27 14:13:51",
        "count": 94
    },
    {
        "date": "2024-05-27 14:18:52",
        "count": 99
    },
    {
        "date": "2024-05-27 14:23:53",
        "count": 107
    },
    {
        "date": "2024-05-27 14:28:54",
        "count": 111
    },
    {
        "date": "2024-05-27 14:33:55",
        "count": 111
    },
    {
        "date": "2024-05-27 14:38:56",
        "count": 120
    },
    {
        "date": "2024-05-27 14:43:59",
        "count": 119
    },
    {
        "date": "2024-05-27 14:49:01",
        "count": 116
    },
    {
        "date": "2024-05-27 14:54:02",
        "count": 114
    },
    {
        "date": "2024-05-27 14:59:03",
        "count": 117
    },
    {
        "date": "2024-05-27 15:04:04",
        "count": 119
    },
    {
        "date": "2024-05-27 15:09:05",
        "count": 127
    },
    {
        "date": "2024-05-27 15:14:09",
        "count": 131
    },
    {
        "date": "2024-05-27 15:19:10",
        "count": 144
    },
    {
        "date": "2024-05-27 15:24:12",
        "count": 159
    },
    {
        "date": "2024-05-27 15:29:13",
        "count": 166
    },
    {
        "date": "2024-05-27 15:34:15",
        "count": 174
    },
    {
        "date": "2024-05-27 15:39:16",
        "count": 175
    },
    {
        "date": "2024-05-27 15:44:20",
        "count": 180
    },
    {
        "date": "2024-05-27 15:49:21",
        "count": 187
    },
    {
        "date": "2024-05-27 15:54:22",
        "count": 193
    },
    {
        "date": "2024-05-27 15:59:24",
        "count": 196
    },
    {
        "date": "2024-05-27 16:04:24",
        "count": 198
    },
    {
        "date": "2024-05-27 16:09:26",
        "count": 203
    },
    {
        "date": "2024-05-27 16:14:29",
        "count": 198
    },
    {
        "date": "2024-05-27 16:19:30",
        "count": 204
    },
    {
        "date": "2024-05-27 16:24:32",
        "count": 212
    },
    {
        "date": "2024-05-27 16:29:33",
        "count": 212
    },
    {
        "date": "2024-05-27 16:34:34",
        "count": 209
    },
    {
        "date": "2024-05-27 16:39:35",
        "count": 198
    },
    {
        "date": "2024-05-27 16:44:39",
        "count": 196
    },
    {
        "date": "2024-05-27 16:49:40",
        "count": 205
    },
    {
        "date": "2024-05-27 16:54:42",
        "count": 216
    },
    {
        "date": "2024-05-27 16:59:43",
        "count": 224
    },
    {
        "date": "2024-05-27 17:04:44",
        "count": 212
    },
    {
        "date": "2024-05-27 17:09:45",
        "count": 208
    },
    {
        "date": "2024-05-27 17:14:49",
        "count": 202
    },
    {
        "date": "2024-05-27 17:19:50",
        "count": 201
    },
    {
        "date": "2024-05-27 17:24:51",
        "count": 202
    },
    {
        "date": "2024-05-27 17:29:52",
        "count": 204
    },
    {
        "date": "2024-05-27 17:34:53",
        "count": 205
    },
    {
        "date": "2024-05-27 17:39:55",
        "count": 209
    },
    {
        "date": "2024-05-27 17:44:58",
        "count": 213
    },
    {
        "date": "2024-05-27 17:50:00",
        "count": 226
    },
    {
        "date": "2024-05-27 17:55:01",
        "count": 232
    },
    {
        "date": "2024-05-27 18:00:03",
        "count": 240
    },
    {
        "date": "2024-05-27 18:05:04",
        "count": 231
    },
    {
        "date": "2024-05-27 18:10:05",
        "count": 228
    },
    {
        "date": "2024-05-27 18:15:09",
        "count": 217
    },
    {
        "date": "2024-05-27 18:20:10",
        "count": 212
    },
    {
        "date": "2024-05-27 18:25:12",
        "count": 199
    },
    {
        "date": "2024-05-27 18:30:13",
        "count": 192
    },
    {
        "date": "2024-05-27 18:35:15",
        "count": 195
    },
    {
        "date": "2024-05-27 18:40:16",
        "count": 189
    },
    {
        "date": "2024-05-27 18:45:20",
        "count": 188
    },
    {
        "date": "2024-05-27 18:50:21",
        "count": 193
    },
    {
        "date": "2024-05-27 18:55:22",
        "count": 192
    },
    {
        "date": "2024-05-27 19:00:23",
        "count": 187
    },
    {
        "date": "2024-05-27 19:05:24",
        "count": 171
    },
    {
        "date": "2024-05-27 19:10:25",
        "count": 156
    },
    {
        "date": "2024-05-27 19:15:29",
        "count": 150
    },
    {
        "date": "2024-05-27 19:20:30",
        "count": 149
    },
    {
        "date": "2024-05-27 19:25:31",
        "count": 144
    },
    {
        "date": "2024-05-27 19:30:32",
        "count": 136
    },
    {
        "date": "2024-05-27 19:35:33",
        "count": 132
    },
    {
        "date": "2024-05-27 19:40:34",
        "count": 133
    },
    {
        "date": "2024-05-27 19:45:38",
        "count": 134
    },
    {
        "date": "2024-05-27 19:50:39",
        "count": 131
    },
    {
        "date": "2024-05-27 19:55:40",
        "count": 123
    },
    {
        "date": "2024-05-27 20:00:41",
        "count": 120
    },
    {
        "date": "2024-05-27 20:05:42",
        "count": 121
    },
    {
        "date": "2024-05-27 20:10:43",
        "count": 125
    },
    {
        "date": "2024-05-27 20:15:47",
        "count": 125
    },
    {
        "date": "2024-05-27 20:20:48",
        "count": 115
    },
    {
        "date": "2024-05-27 20:25:49",
        "count": 110
    },
    {
        "date": "2024-05-27 20:30:50",
        "count": 103
    },
    {
        "date": "2024-05-27 20:35:51",
        "count": 95
    },
    {
        "date": "2024-05-27 20:40:52",
        "count": 83
    },
    {
        "date": "2024-05-27 20:45:56",
        "count": 77
    },
    {
        "date": "2024-05-27 20:50:56",
        "count": 70
    },
    {
        "date": "2024-05-27 20:55:58",
        "count": 64
    },
    {
        "date": "2024-05-27 21:00:58",
        "count": 58
    },
    {
        "date": "2024-05-27 21:05:59",
        "count": 54
    },
    {
        "date": "2024-05-27 21:11:00",
        "count": 53
    },
    {
        "date": "2024-05-27 21:16:04",
        "count": 49
    },
    {
        "date": "2024-05-27 21:21:05",
        "count": 43
    },
    {
        "date": "2024-05-27 21:26:06",
        "count": 39
    },
    {
        "date": "2024-05-27 21:31:07",
        "count": 35
    },
    {
        "date": "2024-05-27 21:36:08",
        "count": 31
    },
    {
        "date": "2024-05-27 21:41:09",
        "count": 31
    },
    {
        "date": "2024-05-27 21:46:12",
        "count": 30
    },
    {
        "date": "2024-05-27 21:51:13",
        "count": 26
    },
    {
        "date": "2024-05-27 21:56:13",
        "count": 25
    },
    {
        "date": "2024-05-27 22:01:14",
        "count": 24
    },
    {
        "date": "2024-05-27 22:06:15",
        "count": 16
    },
    {
        "date": "2024-05-27 22:11:15",
        "count": 15
    },
    {
        "date": "2024-05-27 22:16:18",
        "count": 15
    },
    {
        "date": "2024-05-27 22:21:19",
        "count": 14
    },
    {
        "date": "2024-05-27 22:26:20",
        "count": 14
    },
    {
        "date": "2024-05-27 22:31:21",
        "count": 14
    },
    {
        "date": "2024-05-27 22:36:22",
        "count": 12
    },
    {
        "date": "2024-05-27 22:41:22",
        "count": 10
    },
    {
        "date": "2024-05-27 22:46:25",
        "count": 11
    },
    {
        "date": "2024-05-27 22:51:26",
        "count": 7
    },
    {
        "date": "2024-05-27 22:56:27",
        "count": 6
    },
    {
        "date": "2024-05-27 23:01:28",
        "count": 5
    },
    {
        "date": "2024-05-27 23:06:29",
        "count": 5
    },
    {
        "date": "2024-05-27 23:11:30",
        "count": 5
    },
    {
        "date": "2024-05-27 23:16:33",
        "count": 5
    },
    {
        "date": "2024-05-27 23:21:34",
        "count": 5
    },
    {
        "date": "2024-05-27 23:26:35",
        "count": 5
    },
    {
        "date": "2024-05-27 23:31:36",
        "count": 5
    },
    {
        "date": "2024-05-27 23:36:36",
        "count": 5
    },
    {
        "date": "2024-05-27 23:41:37",
        "count": 5
    },
    {
        "date": "2024-05-27 23:46:40",
        "count": 4
    },
    {
        "date": "2024-05-27 23:51:41",
        "count": 4
    },
    {
        "date": "2024-05-27 23:56:42",
        "count": 4
    },
    {
        "date": "2024-05-28 00:01:42",
        "count": 3
    },
    {
        "date": "2024-05-28 00:06:43",
        "count": 3
    },
    {
        "date": "2024-05-28 00:11:45",
        "count": 3
    },
    {
        "date": "2024-05-28 00:16:48",
        "count": 3
    },
    {
        "date": "2024-05-28 00:21:49",
        "count": 3
    },
    {
        "date": "2024-05-28 00:26:50",
        "count": 3
    },
    {
        "date": "2024-05-28 00:31:51",
        "count": 3
    },
    {
        "date": "2024-05-28 00:36:52",
        "count": 3
    },
    {
        "date": "2024-05-28 00:41:53",
        "count": 3
    },
    {
        "date": "2024-05-28 00:46:56",
        "count": 3
    },
    {
        "date": "2024-05-28 00:51:57",
        "count": 3
    },
    {
        "date": "2024-05-28 00:56:58",
        "count": 3
    },
    {
        "date": "2024-05-28 01:01:58",
        "count": 3
    },
    {
        "date": "2024-05-28 01:06:59",
        "count": 3
    },
    {
        "date": "2024-05-28 01:12:00",
        "count": 3
    },
    {
        "date": "2024-05-28 01:17:03",
        "count": 4
    },
    {
        "date": "2024-05-28 01:22:04",
        "count": 4
    },
    {
        "date": "2024-05-28 01:27:04",
        "count": 4
    },
    {
        "date": "2024-05-28 01:32:05",
        "count": 5
    },
    {
        "date": "2024-05-28 01:37:06",
        "count": 5
    },
    {
        "date": "2024-05-28 01:42:07",
        "count": 5
    },
    {
        "date": "2024-05-28 01:47:10",
        "count": 5
    },
    {
        "date": "2024-05-28 01:52:11",
        "count": 7
    },
    {
        "date": "2024-05-28 01:57:12",
        "count": 7
    },
    {
        "date": "2024-05-28 02:02:12",
        "count": 7
    },
    {
        "date": "2024-05-28 02:07:13",
        "count": 8
    },
    {
        "date": "2024-05-28 02:12:14",
        "count": 8
    },
    {
        "date": "2024-05-28 02:17:17",
        "count": 8
    },
    {
        "date": "2024-05-28 02:22:18",
        "count": 10
    },
    {
        "date": "2024-05-28 02:27:19",
        "count": 10
    },
    {
        "date": "2024-05-28 02:32:20",
        "count": 12
    },
    {
        "date": "2024-05-28 02:37:21",
        "count": 12
    },
    {
        "date": "2024-05-28 02:42:21",
        "count": 12
    },
    {
        "date": "2024-05-28 02:47:25",
        "count": 13
    },
    {
        "date": "2024-05-28 02:52:25",
        "count": 13
    },
    {
        "date": "2024-05-28 02:57:26",
        "count": 14
    },
    {
        "date": "2024-05-28 03:02:27",
        "count": 14
    },
    {
        "date": "2024-05-28 03:07:28",
        "count": 17
    },
    {
        "date": "2024-05-28 03:12:28",
        "count": 18
    },
    {
        "date": "2024-05-28 03:17:31",
        "count": 18
    },
    {
        "date": "2024-05-28 03:22:32",
        "count": 21
    },
    {
        "date": "2024-05-28 03:27:33",
        "count": 22
    },
    {
        "date": "2024-05-28 03:32:34",
        "count": 27
    },
    {
        "date": "2024-05-28 03:37:35",
        "count": 26
    },
    {
        "date": "2024-05-28 03:42:35",
        "count": 27
    },
    {
        "date": "2024-05-28 03:47:39",
        "count": 28
    },
    {
        "date": "2024-05-28 03:52:39",
        "count": 30
    },
    {
        "date": "2024-05-28 03:57:40",
        "count": 32
    },
    {
        "date": "2024-05-28 04:02:41",
        "count": 31
    },
    {
        "date": "2024-05-28 04:07:42",
        "count": 33
    },
    {
        "date": "2024-05-28 04:12:42",
        "count": 39
    },
    {
        "date": "2024-05-28 04:17:46",
        "count": 40
    },
    {
        "date": "2024-05-28 04:22:47",
        "count": 43
    },
    {
        "date": "2024-05-28 04:27:48",
        "count": 46
    },
    {
        "date": "2024-05-28 04:32:48",
        "count": 48
    },
    {
        "date": "2024-05-28 04:37:49",
        "count": 52
    },
    {
        "date": "2024-05-28 04:42:50",
        "count": 54
    },
    {
        "date": "2024-05-28 04:47:53",
        "count": 55
    },
    {
        "date": "2024-05-28 04:52:54",
        "count": 56
    },
    {
        "date": "2024-05-28 04:57:56",
        "count": 64
    },
    {
        "date": "2024-05-28 05:02:56",
        "count": 63
    },
    {
        "date": "2024-05-28 05:07:57",
        "count": 66
    },
    {
        "date": "2024-05-28 05:12:58",
        "count": 67
    },
    {
        "date": "2024-05-28 05:18:01",
        "count": 68
    },
    {
        "date": "2024-05-28 05:23:02",
        "count": 72
    },
    {
        "date": "2024-05-28 05:28:03",
        "count": 70
    },
    {
        "date": "2024-05-28 05:33:04",
        "count": 74
    },
    {
        "date": "2024-05-28 05:38:04",
        "count": 81
    },
    {
        "date": "2024-05-28 05:43:05",
        "count": 80
    },
    {
        "date": "2024-05-28 05:48:08",
        "count": 77
    },
    {
        "date": "2024-05-28 05:53:09",
        "count": 75
    },
    {
        "date": "2024-05-28 05:58:10",
        "count": 74
    },
    {
        "date": "2024-05-28 06:03:10",
        "count": 71
    },
    {
        "date": "2024-05-28 06:08:11",
        "count": 59
    },
    {
        "date": "2024-05-28 06:13:12",
        "count": 56
    },
    {
        "date": "2024-05-28 06:18:15",
        "count": 57
    },
    {
        "date": "2024-05-28 06:23:16",
        "count": 55
    },
    {
        "date": "2024-05-28 06:28:17",
        "count": 51
    },
    {
        "date": "2024-05-28 06:33:17",
        "count": 47
    },
    {
        "date": "2024-05-28 06:38:18",
        "count": 46
    },
    {
        "date": "2024-05-28 06:43:19",
        "count": 46
    },
    {
        "date": "2024-05-28 06:48:22",
        "count": 47
    },
    {
        "date": "2024-05-28 06:53:23",
        "count": 47
    },
    {
        "date": "2024-05-28 06:58:25",
        "count": 46
    },
    {
        "date": "2024-05-28 07:03:25",
        "count": 44
    },
    {
        "date": "2024-05-28 07:08:26",
        "count": 38
    },
    {
        "date": "2024-05-28 07:13:27",
        "count": 38
    },
    {
        "date": "2024-05-28 07:18:30",
        "count": 39
    },
    {
        "date": "2024-05-28 07:23:31",
        "count": 40
    },
    {
        "date": "2024-05-28 07:28:33",
        "count": 40
    },
    {
        "date": "2024-05-28 07:33:34",
        "count": 44
    },
    {
        "date": "2024-05-28 07:38:36",
        "count": 44
    },
    {
        "date": "2024-05-28 07:43:37",
        "count": 46
    },
    {
        "date": "2024-05-28 07:48:41",
        "count": 46
    },
    {
        "date": "2024-05-28 07:53:42",
        "count": 47
    },
    {
        "date": "2024-05-28 07:58:43",
        "count": 49
    },
    {
        "date": "2024-05-28 08:03:44",
        "count": 50
    },
    {
        "date": "2024-05-28 08:08:46",
        "count": 48
    },
    {
        "date": "2024-05-28 08:13:47",
        "count": 45
    },
    {
        "date": "2024-05-28 08:18:51",
        "count": 43
    },
    {
        "date": "2024-05-28 08:23:52",
        "count": 41
    },
    {
        "date": "2024-05-28 08:28:53",
        "count": 39
    },
    {
        "date": "2024-05-28 08:33:54",
        "count": 36
    },
    {
        "date": "2024-05-28 08:38:55",
        "count": 40
    },
    {
        "date": "2024-05-28 08:43:56",
        "count": 39
    },
    {
        "date": "2024-05-28 08:49:01",
        "count": 41
    },
    {
        "date": "2024-05-28 08:54:02",
        "count": 39
    },
    {
        "date": "2024-05-28 08:59:03",
        "count": 43
    },
    {
        "date": "2024-05-28 09:04:04",
        "count": 39
    },
    {
        "date": "2024-05-28 09:09:05",
        "count": 42
    },
    {
        "date": "2024-05-28 09:14:06",
        "count": 42
    },
    {
        "date": "2024-05-28 09:19:10",
        "count": 41
    },
    {
        "date": "2024-05-28 09:24:11",
        "count": 44
    },
    {
        "date": "2024-05-28 09:29:12",
        "count": 45
    },
    {
        "date": "2024-05-28 09:34:13",
        "count": 49
    },
    {
        "date": "2024-05-28 09:39:14",
        "count": 51
    },
    {
        "date": "2024-05-28 09:44:15",
        "count": 53
    },
    {
        "date": "2024-05-28 09:49:19",
        "count": 54
    },
    {
        "date": "2024-05-28 09:54:20",
        "count": 61
    },
    {
        "date": "2024-05-28 09:59:21",
        "count": 63
    },
    {
        "date": "2024-05-28 10:04:22",
        "count": 65
    },
    {
        "date": "2024-05-28 10:09:23",
        "count": 63
    },
    {
        "date": "2024-05-28 10:14:24",
        "count": 66
    },
    {
        "date": "2024-05-28 10:19:27",
        "count": 67
    },
    {
        "date": "2024-05-28 10:24:28",
        "count": 67
    },
    {
        "date": "2024-05-28 10:29:29",
        "count": 70
    },
    {
        "date": "2024-05-28 10:34:30",
        "count": 75
    },
    {
        "date": "2024-05-28 10:39:31",
        "count": 77
    },
    {
        "date": "2024-05-28 10:44:33",
        "count": 81
    },
    {
        "date": "2024-05-28 10:49:36",
        "count": 79
    },
    {
        "date": "2024-05-28 10:54:38",
        "count": 75
    },
    {
        "date": "2024-05-28 10:59:39",
        "count": 76
    },
    {
        "date": "2024-05-28 11:04:39",
        "count": 71
    },
    {
        "date": "2024-05-28 11:09:41",
        "count": 67
    },
    {
        "date": "2024-05-28 11:14:41",
        "count": 63
    },
    {
        "date": "2024-05-28 11:19:45",
        "count": 62
    },
    {
        "date": "2024-05-28 11:24:46",
        "count": 65
    },
    {
        "date": "2024-05-28 11:29:48",
        "count": 64
    },
    {
        "date": "2024-05-28 11:34:51",
        "count": 64
    },
    {
        "date": "2024-05-28 11:39:52",
        "count": 64
    },
    {
        "date": "2024-05-28 11:44:53",
        "count": 62
    },
    {
        "date": "2024-05-28 11:49:57",
        "count": 60
    },
    {
        "date": "2024-05-28 11:54:58",
        "count": 61
    },
    {
        "date": "2024-05-28 11:59:59",
        "count": 61
    },
    {
        "date": "2024-05-28 12:05:00",
        "count": 57
    },
    {
        "date": "2024-05-28 12:10:02",
        "count": 57
    },
    {
        "date": "2024-05-28 12:15:03",
        "count": 54
    },
    {
        "date": "2024-05-28 12:20:06",
        "count": 54
    },
    {
        "date": "2024-05-28 12:25:07",
        "count": 56
    },
    {
        "date": "2024-05-28 12:30:08",
        "count": 60
    },
    {
        "date": "2024-05-28 12:35:09",
        "count": 61
    },
    {
        "date": "2024-05-28 12:40:10",
        "count": 59
    },
    {
        "date": "2024-05-28 12:45:11",
        "count": 62
    },
    {
        "date": "2024-05-28 12:50:15",
        "count": 64
    },
    {
        "date": "2024-05-28 12:55:16",
        "count": 64
    },
    {
        "date": "2024-05-28 13:00:18",
        "count": 65
    },
    {
        "date": "2024-05-28 13:05:19",
        "count": 67
    },
    {
        "date": "2024-05-28 13:10:20",
        "count": 70
    },
    {
        "date": "2024-05-28 13:15:21",
        "count": 76
    },
    {
        "date": "2024-05-28 13:20:25",
        "count": 76
    },
    {
        "date": "2024-05-28 13:25:25",
        "count": 78
    },
    {
        "date": "2024-05-28 13:30:26",
        "count": 77
    },
    {
        "date": "2024-05-28 13:35:28",
        "count": 82
    },
    {
        "date": "2024-05-28 13:40:29",
        "count": 84
    },
    {
        "date": "2024-05-28 13:45:31",
        "count": 85
    },
    {
        "date": "2024-05-28 13:50:34",
        "count": 89
    },
    {
        "date": "2024-05-28 13:55:35",
        "count": 89
    },
    {
        "date": "2024-05-28 14:00:36",
        "count": 87
    },
    {
        "date": "2024-05-28 14:05:37",
        "count": 88
    },
    {
        "date": "2024-05-28 14:10:39",
        "count": 88
    },
    {
        "date": "2024-05-28 14:15:40",
        "count": 91
    },
    {
        "date": "2024-05-28 14:20:44",
        "count": 94
    },
    {
        "date": "2024-05-28 14:25:45",
        "count": 98
    },
    {
        "date": "2024-05-28 14:30:46",
        "count": 101
    },
    {
        "date": "2024-05-28 14:35:47",
        "count": 105
    },
    {
        "date": "2024-05-28 14:40:48",
        "count": 104
    },
    {
        "date": "2024-05-28 14:45:49",
        "count": 106
    },
    {
        "date": "2024-05-28 14:50:53",
        "count": 114
    },
    {
        "date": "2024-05-28 14:55:54",
        "count": 122
    },
    {
        "date": "2024-05-28 15:00:56",
        "count": 120
    },
    {
        "date": "2024-05-28 15:05:57",
        "count": 123
    },
    {
        "date": "2024-05-28 15:10:58",
        "count": 127
    },
    {
        "date": "2024-05-28 15:15:59",
        "count": 130
    },
    {
        "date": "2024-05-28 15:21:03",
        "count": 135
    },
    {
        "date": "2024-05-28 15:26:04",
        "count": 140
    },
    {
        "date": "2024-05-28 15:31:05",
        "count": 147
    },
    {
        "date": "2024-05-28 15:36:06",
        "count": 158
    },
    {
        "date": "2024-05-28 15:41:07",
        "count": 169
    },
    {
        "date": "2024-05-28 15:46:09",
        "count": 178
    },
    {
        "date": "2024-05-28 15:51:13",
        "count": 180
    },
    {
        "date": "2024-05-28 15:56:14",
        "count": 177
    },
    {
        "date": "2024-05-28 16:01:15",
        "count": 185
    },
    {
        "date": "2024-05-28 16:06:16",
        "count": 189
    },
    {
        "date": "2024-05-28 16:11:17",
        "count": 192
    },
    {
        "date": "2024-05-28 16:16:18",
        "count": 194
    },
    {
        "date": "2024-05-28 16:21:23",
        "count": 191
    },
    {
        "date": "2024-05-28 16:26:24",
        "count": 196
    },
    {
        "date": "2024-05-28 16:31:25",
        "count": 206
    },
    {
        "date": "2024-05-28 16:36:26",
        "count": 204
    },
    {
        "date": "2024-05-28 16:41:27",
        "count": 200
    },
    {
        "date": "2024-05-28 16:46:28",
        "count": 195
    },
    {
        "date": "2024-05-28 16:51:32",
        "count": 193
    },
    {
        "date": "2024-05-28 16:56:33",
        "count": 183
    },
    {
        "date": "2024-05-28 17:01:34",
        "count": 182
    },
    {
        "date": "2024-05-28 17:06:35",
        "count": 186
    },
    {
        "date": "2024-05-28 17:11:36",
        "count": 184
    },
    {
        "date": "2024-05-28 17:16:37",
        "count": 187
    },
    {
        "date": "2024-05-28 17:21:41",
        "count": 196
    },
    {
        "date": "2024-05-28 17:26:42",
        "count": 190
    },
    {
        "date": "2024-05-28 17:31:43",
        "count": 183
    },
    {
        "date": "2024-05-28 17:36:44",
        "count": 179
    },
    {
        "date": "2024-05-28 17:41:45",
        "count": 182
    },
    {
        "date": "2024-05-28 17:46:46",
        "count": 180
    },
    {
        "date": "2024-05-28 17:51:50",
        "count": 175
    },
    {
        "date": "2024-05-28 17:56:51",
        "count": 173
    },
    {
        "date": "2024-05-28 18:01:52",
        "count": 176
    },
    {
        "date": "2024-05-28 18:06:53",
        "count": 174
    },
    {
        "date": "2024-05-28 18:11:54",
        "count": 169
    },
    {
        "date": "2024-05-28 18:16:55",
        "count": 172
    },
    {
        "date": "2024-05-28 18:21:59",
        "count": 171
    },
    {
        "date": "2024-05-28 18:27:01",
        "count": 179
    },
    {
        "date": "2024-05-28 18:32:02",
        "count": 182
    },
    {
        "date": "2024-05-28 18:37:03",
        "count": 174
    },
    {
        "date": "2024-05-28 18:42:04",
        "count": 174
    },
    {
        "date": "2024-05-28 18:47:05",
        "count": 163
    },
    {
        "date": "2024-05-28 18:52:09",
        "count": 163
    },
    {
        "date": "2024-05-28 18:57:10",
        "count": 161
    },
    {
        "date": "2024-05-28 19:02:12",
        "count": 159
    },
    {
        "date": "2024-05-28 19:07:13",
        "count": 154
    },
    {
        "date": "2024-05-28 19:12:15",
        "count": 151
    },
    {
        "date": "2024-05-28 19:17:16",
        "count": 149
    },
    {
        "date": "2024-05-28 19:22:20",
        "count": 150
    },
    {
        "date": "2024-05-28 19:27:21",
        "count": 144
    },
    {
        "date": "2024-05-28 19:32:22",
        "count": 137
    },
    {
        "date": "2024-05-28 19:37:23",
        "count": 140
    },
    {
        "date": "2024-05-28 19:42:26",
        "count": 141
    },
    {
        "date": "2024-05-28 19:47:27",
        "count": 144
    },
    {
        "date": "2024-05-28 19:52:30",
        "count": 135
    },
    {
        "date": "2024-05-28 19:57:31",
        "count": 130
    },
    {
        "date": "2024-05-28 20:02:32",
        "count": 129
    },
    {
        "date": "2024-05-28 20:07:33",
        "count": 129
    },
    {
        "date": "2024-05-28 20:12:34",
        "count": 126
    },
    {
        "date": "2024-05-28 20:17:35",
        "count": 123
    },
    {
        "date": "2024-05-28 20:22:39",
        "count": 110
    },
    {
        "date": "2024-05-28 20:27:40",
        "count": 105
    },
    {
        "date": "2024-05-28 20:32:41",
        "count": 102
    },
    {
        "date": "2024-05-28 20:37:42",
        "count": 98
    },
    {
        "date": "2024-05-28 20:42:43",
        "count": 95
    },
    {
        "date": "2024-05-28 20:47:44",
        "count": 89
    },
    {
        "date": "2024-05-28 20:52:48",
        "count": 84
    },
    {
        "date": "2024-05-28 20:57:49",
        "count": 78
    },
    {
        "date": "2024-05-28 21:02:50",
        "count": 76
    },
    {
        "date": "2024-05-28 21:07:50",
        "count": 69
    },
    {
        "date": "2024-05-28 21:12:51",
        "count": 59
    },
    {
        "date": "2024-05-28 21:17:52",
        "count": 55
    },
    {
        "date": "2024-05-28 21:22:56",
        "count": 51
    },
    {
        "date": "2024-05-28 21:27:56",
        "count": 51
    },
    {
        "date": "2024-05-28 21:32:57",
        "count": 47
    },
    {
        "date": "2024-05-28 21:37:58",
        "count": 45
    },
    {
        "date": "2024-05-28 21:42:58",
        "count": 44
    },
    {
        "date": "2024-05-28 21:47:59",
        "count": 44
    },
    {
        "date": "2024-05-28 21:53:03",
        "count": 40
    },
    {
        "date": "2024-05-28 21:58:04",
        "count": 35
    },
    {
        "date": "2024-05-28 22:03:05",
        "count": 32
    },
    {
        "date": "2024-05-28 22:08:06",
        "count": 29
    },
    {
        "date": "2024-05-28 22:13:06",
        "count": 28
    },
    {
        "date": "2024-05-28 22:18:07",
        "count": 25
    },
    {
        "date": "2024-05-28 22:23:10",
        "count": 25
    },
    {
        "date": "2024-05-28 22:28:11",
        "count": 19
    },
    {
        "date": "2024-05-28 22:33:11",
        "count": 19
    },
    {
        "date": "2024-05-28 22:38:12",
        "count": 19
    },
    {
        "date": "2024-05-28 22:43:13",
        "count": 18
    },
    {
        "date": "2024-05-28 22:48:14",
        "count": 16
    },
    {
        "date": "2024-05-28 22:53:17",
        "count": 13
    },
    {
        "date": "2024-05-28 22:58:17",
        "count": 12
    },
    {
        "date": "2024-05-28 23:03:18",
        "count": 12
    },
    {
        "date": "2024-05-28 23:08:19",
        "count": 12
    },
    {
        "date": "2024-05-28 23:13:20",
        "count": 12
    },
    {
        "date": "2024-05-28 23:18:20",
        "count": 11
    },
    {
        "date": "2024-05-28 23:23:24",
        "count": 11
    },
    {
        "date": "2024-05-28 23:28:24",
        "count": 11
    },
    {
        "date": "2024-05-28 23:33:25",
        "count": 11
    },
    {
        "date": "2024-05-28 23:38:26",
        "count": 11
    },
    {
        "date": "2024-05-28 23:43:27",
        "count": 11
    },
    {
        "date": "2024-05-28 23:48:27",
        "count": 12
    },
    {
        "date": "2024-05-28 23:53:30",
        "count": 11
    },
    {
        "date": "2024-05-28 23:58:31",
        "count": 9
    },
    {
        "date": "2024-05-29 00:03:32",
        "count": 9
    },
    {
        "date": "2024-05-29 00:08:33",
        "count": 9
    },
    {
        "date": "2024-05-29 00:13:33",
        "count": 7
    },
    {
        "date": "2024-05-29 00:18:34",
        "count": 7
    },
    {
        "date": "2024-05-29 00:23:37",
        "count": 7
    },
    {
        "date": "2024-05-29 00:28:38",
        "count": 7
    },
    {
        "date": "2024-05-29 00:33:38",
        "count": 6
    },
    {
        "date": "2024-05-29 00:38:39",
        "count": 6
    },
    {
        "date": "2024-05-29 00:43:40",
        "count": 6
    },
    {
        "date": "2024-05-29 00:48:41",
        "count": 6
    },
    {
        "date": "2024-05-29 00:53:44",
        "count": 6
    },
    {
        "date": "2024-05-29 00:58:45",
        "count": 6
    },
    {
        "date": "2024-05-29 01:03:46",
        "count": 5
    },
    {
        "date": "2024-05-29 01:08:47",
        "count": 5
    },
    {
        "date": "2024-05-29 01:13:47",
        "count": 5
    },
    {
        "date": "2024-05-29 01:18:48",
        "count": 6
    },
    {
        "date": "2024-05-29 01:23:51",
        "count": 6
    },
    {
        "date": "2024-05-29 01:28:52",
        "count": 6
    },
    {
        "date": "2024-05-29 01:33:52",
        "count": 7
    },
    {
        "date": "2024-05-29 01:38:53",
        "count": 7
    },
    {
        "date": "2024-05-29 01:43:54",
        "count": 7
    },
    {
        "date": "2024-05-29 01:48:55",
        "count": 7
    },
    {
        "date": "2024-05-29 01:53:57",
        "count": 8
    },
    {
        "date": "2024-05-29 01:58:58",
        "count": 9
    },
    {
        "date": "2024-05-29 02:03:59",
        "count": 11
    },
    {
        "date": "2024-05-29 02:08:59",
        "count": 13
    },
    {
        "date": "2024-05-29 02:14:00",
        "count": 13
    },
    {
        "date": "2024-05-29 02:19:01",
        "count": 13
    },
    {
        "date": "2024-05-29 02:24:04",
        "count": 12
    },
    {
        "date": "2024-05-29 02:29:05",
        "count": 12
    },
    {
        "date": "2024-05-29 02:34:06",
        "count": 12
    },
    {
        "date": "2024-05-29 02:39:07",
        "count": 14
    },
    {
        "date": "2024-05-29 02:44:07",
        "count": 14
    },
    {
        "date": "2024-05-29 02:49:08",
        "count": 14
    },
    {
        "date": "2024-05-29 02:54:11",
        "count": 14
    },
    {
        "date": "2024-05-29 02:59:12",
        "count": 14
    },
    {
        "date": "2024-05-29 03:04:13",
        "count": 12
    },
    {
        "date": "2024-05-29 03:09:13",
        "count": 12
    },
    {
        "date": "2024-05-29 03:14:14",
        "count": 12
    },
    {
        "date": "2024-05-29 03:19:15",
        "count": 13
    },
    {
        "date": "2024-05-29 03:24:18",
        "count": 12
    },
    {
        "date": "2024-05-29 03:29:19",
        "count": 14
    },
    {
        "date": "2024-05-29 03:34:20",
        "count": 17
    },
    {
        "date": "2024-05-29 03:39:20",
        "count": 17
    },
    {
        "date": "2024-05-29 03:44:21",
        "count": 18
    },
    {
        "date": "2024-05-29 03:49:22",
        "count": 19
    },
    {
        "date": "2024-05-29 03:54:25",
        "count": 19
    },
    {
        "date": "2024-05-29 03:59:26",
        "count": 20
    },
    {
        "date": "2024-05-29 04:04:26",
        "count": 22
    },
    {
        "date": "2024-05-29 04:09:27",
        "count": 22
    },
    {
        "date": "2024-05-29 04:14:28",
        "count": 22
    },
    {
        "date": "2024-05-29 04:19:29",
        "count": 22
    },
    {
        "date": "2024-05-29 04:24:32",
        "count": 24
    },
    {
        "date": "2024-05-29 04:29:33",
        "count": 26
    },
    {
        "date": "2024-05-29 04:34:33",
        "count": 27
    },
    {
        "date": "2024-05-29 04:39:34",
        "count": 28
    },
    {
        "date": "2024-05-29 04:44:35",
        "count": 31
    },
    {
        "date": "2024-05-29 04:49:36",
        "count": 34
    },
    {
        "date": "2024-05-29 04:54:39",
        "count": 37
    },
    {
        "date": "2024-05-29 04:59:39",
        "count": 42
    },
    {
        "date": "2024-05-29 05:04:40",
        "count": 46
    },
    {
        "date": "2024-05-29 05:09:41",
        "count": 48
    },
    {
        "date": "2024-05-29 05:14:42",
        "count": 49
    },
    {
        "date": "2024-05-29 05:19:42",
        "count": 53
    },
    {
        "date": "2024-05-29 05:24:46",
        "count": 56
    },
    {
        "date": "2024-05-29 05:29:46",
        "count": 58
    },
    {
        "date": "2024-05-29 05:34:47",
        "count": 60
    },
    {
        "date": "2024-05-29 05:39:48",
        "count": 66
    },
    {
        "date": "2024-05-29 05:44:48",
        "count": 64
    },
    {
        "date": "2024-05-29 05:49:49",
        "count": 61
    },
    {
        "date": "2024-05-29 05:54:52",
        "count": 61
    },
    {
        "date": "2024-05-29 05:59:53",
        "count": 59
    },
    {
        "date": "2024-05-29 06:04:54",
        "count": 65
    },
    {
        "date": "2024-05-29 06:09:55",
        "count": 67
    },
    {
        "date": "2024-05-29 06:14:55",
        "count": 66
    },
    {
        "date": "2024-05-29 06:19:56",
        "count": 63
    },
    {
        "date": "2024-05-29 06:24:59",
        "count": 62
    },
    {
        "date": "2024-05-29 06:30:00",
        "count": 60
    },
    {
        "date": "2024-05-29 06:35:01",
        "count": 58
    },
    {
        "date": "2024-05-29 06:40:02",
        "count": 54
    },
    {
        "date": "2024-05-29 06:45:03",
        "count": 54
    },
    {
        "date": "2024-05-29 06:50:03",
        "count": 49
    },
    {
        "date": "2024-05-29 06:55:06",
        "count": 46
    },
    {
        "date": "2024-05-29 07:00:07",
        "count": 47
    },
    {
        "date": "2024-05-29 07:05:08",
        "count": 46
    },
    {
        "date": "2024-05-29 07:10:09",
        "count": 50
    },
    {
        "date": "2024-05-29 07:15:10",
        "count": 55
    },
    {
        "date": "2024-05-29 07:20:11",
        "count": 56
    },
    {
        "date": "2024-05-29 07:25:14",
        "count": 57
    },
    {
        "date": "2024-05-29 07:30:15",
        "count": 55
    },
    {
        "date": "2024-05-29 07:35:16",
        "count": 55
    },
    {
        "date": "2024-05-29 07:40:16",
        "count": 55
    },
    {
        "date": "2024-05-29 07:45:17",
        "count": 57
    },
    {
        "date": "2024-05-29 07:50:18",
        "count": 59
    },
    {
        "date": "2024-05-29 07:55:21",
        "count": 61
    },
    {
        "date": "2024-05-29 08:00:22",
        "count": 65
    },
    {
        "date": "2024-05-29 08:05:23",
        "count": 65
    },
    {
        "date": "2024-05-29 08:10:24",
        "count": 63
    },
    {
        "date": "2024-05-29 08:15:26",
        "count": 65
    },
    {
        "date": "2024-05-29 08:20:27",
        "count": 60
    },
    {
        "date": "2024-05-29 08:25:30",
        "count": 53
    },
    {
        "date": "2024-05-29 08:30:32",
        "count": 52
    },
    {
        "date": "2024-05-29 08:35:33",
        "count": 56
    },
    {
        "date": "2024-05-29 08:40:34",
        "count": 53
    },
    {
        "date": "2024-05-29 08:45:35",
        "count": 53
    },
    {
        "date": "2024-05-29 08:50:36",
        "count": 53
    },
    {
        "date": "2024-05-29 08:55:40",
        "count": 54
    },
    {
        "date": "2024-05-29 09:00:41",
        "count": 56
    },
    {
        "date": "2024-05-29 09:05:42",
        "count": 59
    },
    {
        "date": "2024-05-29 09:10:43",
        "count": 62
    },
    {
        "date": "2024-05-29 09:15:44",
        "count": 61
    },
    {
        "date": "2024-05-29 09:20:45",
        "count": 63
    },
    {
        "date": "2024-05-29 09:25:49",
        "count": 63
    },
    {
        "date": "2024-05-29 09:30:50",
        "count": 65
    },
    {
        "date": "2024-05-29 09:35:51",
        "count": 67
    },
    {
        "date": "2024-05-29 09:40:52",
        "count": 64
    },
    {
        "date": "2024-05-29 09:45:53",
        "count": 64
    },
    {
        "date": "2024-05-29 09:50:54",
        "count": 69
    },
    {
        "date": "2024-05-29 09:55:58",
        "count": 69
    },
    {
        "date": "2024-05-29 10:00:59",
        "count": 71
    },
    {
        "date": "2024-05-29 10:06:00",
        "count": 75
    },
    {
        "date": "2024-05-29 10:11:01",
        "count": 76
    },
    {
        "date": "2024-05-29 10:16:02",
        "count": 76
    },
    {
        "date": "2024-05-29 10:21:04",
        "count": 75
    },
    {
        "date": "2024-05-29 10:26:07",
        "count": 77
    },
    {
        "date": "2024-05-29 10:31:08",
        "count": 71
    },
    {
        "date": "2024-05-29 10:36:10",
        "count": 72
    },
    {
        "date": "2024-05-29 10:41:11",
        "count": 70
    },
    {
        "date": "2024-05-29 10:46:12",
        "count": 73
    },
    {
        "date": "2024-05-29 10:51:14",
        "count": 73
    },
    {
        "date": "2024-05-29 10:56:18",
        "count": 69
    },
    {
        "date": "2024-05-29 11:01:19",
        "count": 71
    },
    {
        "date": "2024-05-29 11:06:20",
        "count": 68
    },
    {
        "date": "2024-05-29 11:11:22",
        "count": 69
    },
    {
        "date": "2024-05-29 11:16:23",
        "count": 65
    },
    {
        "date": "2024-05-29 11:21:24",
        "count": 61
    },
    {
        "date": "2024-05-29 11:26:27",
        "count": 66
    },
    {
        "date": "2024-05-29 11:31:28",
        "count": 64
    },
    {
        "date": "2024-05-29 11:36:29",
        "count": 62
    },
    {
        "date": "2024-05-29 11:41:30",
        "count": 62
    },
    {
        "date": "2024-05-29 11:46:31",
        "count": 59
    },
    {
        "date": "2024-05-29 11:51:33",
        "count": 61
    },
    {
        "date": "2024-05-29 11:56:37",
        "count": 62
    },
    {
        "date": "2024-05-29 12:01:38",
        "count": 65
    },
    {
        "date": "2024-05-29 12:06:39",
        "count": 66
    },
    {
        "date": "2024-05-29 12:11:40",
        "count": 67
    },
    {
        "date": "2024-05-29 12:16:42",
        "count": 63
    },
    {
        "date": "2024-05-29 12:21:43",
        "count": 61
    },
    {
        "date": "2024-05-29 12:26:46",
        "count": 62
    },
    {
        "date": "2024-05-29 12:31:48",
        "count": 66
    },
    {
        "date": "2024-05-29 12:36:49",
        "count": 63
    },
    {
        "date": "2024-05-29 12:41:49",
        "count": 64
    },
    {
        "date": "2024-05-29 12:46:51",
        "count": 66
    },
    {
        "date": "2024-05-29 12:51:51",
        "count": 71
    },
    {
        "date": "2024-05-29 12:56:55",
        "count": 66
    },
    {
        "date": "2024-05-29 13:01:56",
        "count": 66
    },
    {
        "date": "2024-05-29 13:06:57",
        "count": 72
    },
    {
        "date": "2024-05-29 13:11:58",
        "count": 71
    },
    {
        "date": "2024-05-29 13:16:59",
        "count": 67
    },
    {
        "date": "2024-05-29 13:22:01",
        "count": 69
    },
    {
        "date": "2024-05-29 13:27:06",
        "count": 69
    },
    {
        "date": "2024-05-29 13:32:07",
        "count": 72
    },
    {
        "date": "2024-05-29 13:37:08",
        "count": 78
    },
    {
        "date": "2024-05-29 13:42:09",
        "count": 79
    },
    {
        "date": "2024-05-29 13:47:11",
        "count": 87
    },
    {
        "date": "2024-05-29 13:52:12",
        "count": 89
    },
    {
        "date": "2024-05-29 13:57:16",
        "count": 95
    },
    {
        "date": "2024-05-29 14:02:17",
        "count": 100
    },
    {
        "date": "2024-05-29 14:07:18",
        "count": 99
    },
    {
        "date": "2024-05-29 14:12:19",
        "count": 97
    },
    {
        "date": "2024-05-29 14:17:22",
        "count": 97
    },
    {
        "date": "2024-05-29 14:22:23",
        "count": 93
    },
    {
        "date": "2024-05-29 14:27:27",
        "count": 94
    },
    {
        "date": "2024-05-29 14:32:28",
        "count": 97
    },
    {
        "date": "2024-05-29 14:37:29",
        "count": 90
    },
    {
        "date": "2024-05-29 14:42:30",
        "count": 87
    },
    {
        "date": "2024-05-29 14:47:32",
        "count": 99
    },
    {
        "date": "2024-05-29 14:52:33",
        "count": 98
    },
    {
        "date": "2024-05-29 14:57:37",
        "count": 102
    },
    {
        "date": "2024-05-29 15:02:38",
        "count": 100
    },
    {
        "date": "2024-05-29 15:07:39",
        "count": 107
    },
    {
        "date": "2024-05-29 15:12:40",
        "count": 115
    },
    {
        "date": "2024-05-29 15:17:42",
        "count": 125
    },
    {
        "date": "2024-05-29 15:22:43",
        "count": 144
    },
    {
        "date": "2024-05-29 15:27:47",
        "count": 144
    },
    {
        "date": "2024-05-29 15:32:48",
        "count": 147
    },
    {
        "date": "2024-05-29 15:37:49",
        "count": 151
    },
    {
        "date": "2024-05-29 15:42:50",
        "count": 150
    },
    {
        "date": "2024-05-29 15:47:51",
        "count": 151
    },
    {
        "date": "2024-05-29 15:52:53",
        "count": 153
    },
    {
        "date": "2024-05-29 15:57:56",
        "count": 166
    },
    {
        "date": "2024-05-29 16:02:57",
        "count": 172
    },
    {
        "date": "2024-05-29 16:07:58",
        "count": 170
    },
    {
        "date": "2024-05-29 16:12:59",
        "count": 175
    },
    {
        "date": "2024-05-29 16:18:01",
        "count": 185
    },
    {
        "date": "2024-05-29 16:23:02",
        "count": 204
    },
    {
        "date": "2024-05-29 16:28:06",
        "count": 209
    },
    {
        "date": "2024-05-29 16:33:07",
        "count": 215
    },
    {
        "date": "2024-05-29 16:38:08",
        "count": 206
    },
    {
        "date": "2024-05-29 16:43:10",
        "count": 204
    },
    {
        "date": "2024-05-29 16:48:11",
        "count": 208
    },
    {
        "date": "2024-05-29 16:53:12",
        "count": 204
    },
    {
        "date": "2024-05-29 16:58:16",
        "count": 196
    },
    {
        "date": "2024-05-29 17:03:17",
        "count": 191
    },
    {
        "date": "2024-05-29 17:08:19",
        "count": 185
    },
    {
        "date": "2024-05-29 17:13:20",
        "count": 177
    },
    {
        "date": "2024-05-29 17:18:21",
        "count": 176
    },
    {
        "date": "2024-05-29 17:23:22",
        "count": 175
    },
    {
        "date": "2024-05-29 17:28:26",
        "count": 151
    },
    {
        "date": "2024-05-29 17:33:27",
        "count": 138
    },
    {
        "date": "2024-05-29 17:38:28",
        "count": 132
    },
    {
        "date": "2024-05-29 17:43:29",
        "count": 125
    },
    {
        "date": "2024-05-29 17:48:30",
        "count": 120
    },
    {
        "date": "2024-05-29 17:53:31",
        "count": 122
    },
    {
        "date": "2024-05-29 17:58:35",
        "count": 118
    },
    {
        "date": "2024-05-29 18:03:36",
        "count": 117
    },
    {
        "date": "2024-05-29 18:08:37",
        "count": 117
    },
    {
        "date": "2024-05-29 18:13:38",
        "count": 122
    },
    {
        "date": "2024-05-29 18:18:39",
        "count": 122
    },
    {
        "date": "2024-05-29 18:23:40",
        "count": 127
    },
    {
        "date": "2024-05-29 18:28:44",
        "count": 127
    },
    {
        "date": "2024-05-29 18:33:45",
        "count": 130
    },
    {
        "date": "2024-05-29 18:38:46",
        "count": 133
    },
    {
        "date": "2024-05-29 18:43:47",
        "count": 133
    },
    {
        "date": "2024-05-29 18:48:48",
        "count": 138
    },
    {
        "date": "2024-05-29 18:53:49",
        "count": 141
    },
    {
        "date": "2024-05-29 18:58:52",
        "count": 139
    },
    {
        "date": "2024-05-29 19:03:53",
        "count": 139
    },
    {
        "date": "2024-05-29 19:08:54",
        "count": 135
    },
    {
        "date": "2024-05-29 19:13:55",
        "count": 129
    },
    {
        "date": "2024-05-29 19:18:56",
        "count": 131
    },
    {
        "date": "2024-05-29 19:23:57",
        "count": 131
    },
    {
        "date": "2024-05-29 19:29:01",
        "count": 129
    },
    {
        "date": "2024-05-29 19:34:02",
        "count": 129
    },
    {
        "date": "2024-05-29 19:39:03",
        "count": 111
    },
    {
        "date": "2024-05-29 19:44:04",
        "count": 106
    },
    {
        "date": "2024-05-29 19:49:05",
        "count": 106
    },
    {
        "date": "2024-05-29 19:54:06",
        "count": 112
    },
    {
        "date": "2024-05-29 19:59:10",
        "count": 104
    },
    {
        "date": "2024-05-29 20:04:11",
        "count": 98
    },
    {
        "date": "2024-05-29 20:09:13",
        "count": 97
    },
    {
        "date": "2024-05-29 20:14:14",
        "count": 91
    },
    {
        "date": "2024-05-29 20:19:15",
        "count": 87
    },
    {
        "date": "2024-05-29 20:24:16",
        "count": 83
    },
    {
        "date": "2024-05-29 20:29:20",
        "count": 78
    },
    {
        "date": "2024-05-29 20:34:21",
        "count": 78
    },
    {
        "date": "2024-05-29 20:39:22",
        "count": 71
    },
    {
        "date": "2024-05-29 20:44:23",
        "count": 64
    },
    {
        "date": "2024-05-29 20:49:25",
        "count": 62
    },
    {
        "date": "2024-05-29 20:54:26",
        "count": 59
    },
    {
        "date": "2024-05-29 20:59:29",
        "count": 56
    },
    {
        "date": "2024-05-29 21:04:30",
        "count": 53
    },
    {
        "date": "2024-05-29 21:09:31",
        "count": 48
    },
    {
        "date": "2024-05-29 21:14:32",
        "count": 46
    },
    {
        "date": "2024-05-29 21:19:33",
        "count": 39
    },
    {
        "date": "2024-05-29 21:24:34",
        "count": 43
    },
    {
        "date": "2024-05-29 21:29:38",
        "count": 40
    },
    {
        "date": "2024-05-29 21:34:39",
        "count": 40
    },
    {
        "date": "2024-05-29 21:39:39",
        "count": 39
    },
    {
        "date": "2024-05-29 21:44:40",
        "count": 39
    },
    {
        "date": "2024-05-29 21:49:41",
        "count": 38
    },
    {
        "date": "2024-05-29 21:54:42",
        "count": 36
    },
    {
        "date": "2024-05-29 21:59:45",
        "count": 33
    },
    {
        "date": "2024-05-29 22:04:46",
        "count": 32
    },
    {
        "date": "2024-05-29 22:09:46",
        "count": 30
    },
    {
        "date": "2024-05-29 22:14:47",
        "count": 29
    },
    {
        "date": "2024-05-29 22:19:48",
        "count": 27
    },
    {
        "date": "2024-05-29 22:24:49",
        "count": 28
    },
    {
        "date": "2024-05-29 22:29:51",
        "count": 27
    },
    {
        "date": "2024-05-29 22:34:52",
        "count": 26
    },
    {
        "date": "2024-05-29 22:39:53",
        "count": 22
    },
    {
        "date": "2024-05-29 22:44:54",
        "count": 19
    },
    {
        "date": "2024-05-29 22:49:54",
        "count": 18
    },
    {
        "date": "2024-05-29 22:54:55",
        "count": 18
    },
    {
        "date": "2024-05-29 22:59:58",
        "count": 19
    },
    {
        "date": "2024-05-29 23:04:59",
        "count": 20
    },
    {
        "date": "2024-05-29 23:10:00",
        "count": 19
    },
    {
        "date": "2024-05-29 23:15:01",
        "count": 20
    },
    {
        "date": "2024-05-29 23:20:02",
        "count": 22
    },
    {
        "date": "2024-05-29 23:25:02",
        "count": 22
    },
    {
        "date": "2024-05-29 23:30:06",
        "count": 20
    },
    {
        "date": "2024-05-29 23:35:06",
        "count": 19
    },
    {
        "date": "2024-05-29 23:40:07",
        "count": 21
    },
    {
        "date": "2024-05-29 23:45:08",
        "count": 19
    },
    {
        "date": "2024-05-29 23:50:09",
        "count": 19
    },
    {
        "date": "2024-05-29 23:55:09",
        "count": 19
    },
    {
        "date": "2024-05-30 00:00:13",
        "count": 18
    },
    {
        "date": "2024-05-30 00:05:14",
        "count": 18
    },
    {
        "date": "2024-05-30 00:10:14",
        "count": 17
    },
    {
        "date": "2024-05-30 00:15:15",
        "count": 18
    },
    {
        "date": "2024-05-30 00:20:16",
        "count": 20
    },
    {
        "date": "2024-05-30 00:25:16",
        "count": 16
    },
    {
        "date": "2024-05-30 00:30:19",
        "count": 16
    },
    {
        "date": "2024-05-30 00:35:20",
        "count": 16
    },
    {
        "date": "2024-05-30 00:40:20",
        "count": 16
    },
    {
        "date": "2024-05-30 00:45:21",
        "count": 16
    },
    {
        "date": "2024-05-30 00:50:22",
        "count": 16
    },
    {
        "date": "2024-05-30 00:55:24",
        "count": 17
    },
    {
        "date": "2024-05-30 01:00:27",
        "count": 16
    },
    {
        "date": "2024-05-30 01:05:27",
        "count": 16
    },
    {
        "date": "2024-05-30 01:10:28",
        "count": 15
    },
    {
        "date": "2024-05-30 01:15:29",
        "count": 14
    },
    {
        "date": "2024-05-30 01:20:30",
        "count": 14
    },
    {
        "date": "2024-05-30 01:25:30",
        "count": 14
    },
    {
        "date": "2024-05-30 01:30:33",
        "count": 12
    },
    {
        "date": "2024-05-30 01:35:34",
        "count": 12
    },
    {
        "date": "2024-05-30 01:40:35",
        "count": 13
    },
    {
        "date": "2024-05-30 01:45:36",
        "count": 13
    },
    {
        "date": "2024-05-30 01:50:36",
        "count": 13
    },
    {
        "date": "2024-05-30 01:55:37",
        "count": 13
    },
    {
        "date": "2024-05-30 02:00:40",
        "count": 13
    },
    {
        "date": "2024-05-30 02:05:41",
        "count": 13
    },
    {
        "date": "2024-05-30 02:10:42",
        "count": 14
    },
    {
        "date": "2024-05-30 02:15:43",
        "count": 14
    },
    {
        "date": "2024-05-30 02:20:43",
        "count": 16
    },
    {
        "date": "2024-05-30 02:25:44",
        "count": 14
    },
    {
        "date": "2024-05-30 02:30:47",
        "count": 11
    },
    {
        "date": "2024-05-30 02:35:48",
        "count": 11
    },
    {
        "date": "2024-05-30 02:40:49",
        "count": 11
    },
    {
        "date": "2024-05-30 02:45:50",
        "count": 12
    },
    {
        "date": "2024-05-30 02:50:50",
        "count": 12
    },
    {
        "date": "2024-05-30 02:55:51",
        "count": 12
    },
    {
        "date": "2024-05-30 03:00:54",
        "count": 12
    },
    {
        "date": "2024-05-30 03:05:55",
        "count": 14
    },
    {
        "date": "2024-05-30 03:10:56",
        "count": 15
    },
    {
        "date": "2024-05-30 03:15:57",
        "count": 15
    },
    {
        "date": "2024-05-30 03:20:57",
        "count": 15
    },
    {
        "date": "2024-05-30 03:25:58",
        "count": 15
    },
    {
        "date": "2024-05-30 03:31:01",
        "count": 17
    },
    {
        "date": "2024-05-30 03:36:02",
        "count": 17
    },
    {
        "date": "2024-05-30 03:41:03",
        "count": 17
    },
    {
        "date": "2024-05-30 03:46:03",
        "count": 17
    },
    {
        "date": "2024-05-30 03:51:04",
        "count": 17
    },
    {
        "date": "2024-05-30 03:56:05",
        "count": 18
    },
    {
        "date": "2024-05-30 04:01:08",
        "count": 19
    },
    {
        "date": "2024-05-30 04:06:09",
        "count": 18
    },
    {
        "date": "2024-05-30 04:11:10",
        "count": 16
    },
    {
        "date": "2024-05-30 04:16:10",
        "count": 17
    },
    {
        "date": "2024-05-30 04:21:11",
        "count": 17
    },
    {
        "date": "2024-05-30 04:26:12",
        "count": 18
    },
    {
        "date": "2024-05-30 04:31:15",
        "count": 18
    },
    {
        "date": "2024-05-30 04:36:16",
        "count": 21
    },
    {
        "date": "2024-05-30 04:41:17",
        "count": 21
    },
    {
        "date": "2024-05-30 04:46:17",
        "count": 22
    },
    {
        "date": "2024-05-30 04:51:18",
        "count": 23
    },
    {
        "date": "2024-05-30 04:56:19",
        "count": 25
    },
    {
        "date": "2024-05-30 05:01:22",
        "count": 27
    },
    {
        "date": "2024-05-30 05:06:23",
        "count": 28
    },
    {
        "date": "2024-05-30 05:11:23",
        "count": 29
    },
    {
        "date": "2024-05-30 05:16:24",
        "count": 27
    },
    {
        "date": "2024-05-30 05:21:25",
        "count": 29
    },
    {
        "date": "2024-05-30 05:26:26",
        "count": 30
    },
    {
        "date": "2024-05-30 05:31:29",
        "count": 32
    },
    {
        "date": "2024-05-30 05:36:29",
        "count": 36
    },
    {
        "date": "2024-05-30 05:41:30",
        "count": 38
    },
    {
        "date": "2024-05-30 05:46:31",
        "count": 40
    },
    {
        "date": "2024-05-30 05:51:32",
        "count": 44
    },
    {
        "date": "2024-05-30 05:56:33",
        "count": 45
    },
    {
        "date": "2024-05-30 06:01:36",
        "count": 48
    },
    {
        "date": "2024-05-30 06:06:36",
        "count": 45
    },
    {
        "date": "2024-05-30 06:11:37",
        "count": 45
    },
    {
        "date": "2024-05-30 06:16:38",
        "count": 46
    },
    {
        "date": "2024-05-30 06:21:39",
        "count": 45
    },
    {
        "date": "2024-05-30 06:26:40",
        "count": 48
    },
    {
        "date": "2024-05-30 06:31:43",
        "count": 50
    },
    {
        "date": "2024-05-30 06:36:43",
        "count": 50
    },
    {
        "date": "2024-05-30 06:41:44",
        "count": 51
    },
    {
        "date": "2024-05-30 06:46:45",
        "count": 54
    },
    {
        "date": "2024-05-30 06:51:46",
        "count": 53
    },
    {
        "date": "2024-05-30 06:56:46",
        "count": 55
    },
    {
        "date": "2024-05-30 07:01:49",
        "count": 54
    },
    {
        "date": "2024-05-30 07:06:50",
        "count": 59
    },
    {
        "date": "2024-05-30 07:11:51",
        "count": 58
    },
    {
        "date": "2024-05-30 07:16:52",
        "count": 57
    },
    {
        "date": "2024-05-30 07:21:52",
        "count": 58
    },
    {
        "date": "2024-05-30 07:26:54",
        "count": 63
    },
    {
        "date": "2024-05-30 07:31:58",
        "count": 65
    },
    {
        "date": "2024-05-30 07:36:59",
        "count": 67
    },
    {
        "date": "2024-05-30 07:41:59",
        "count": 68
    },
    {
        "date": "2024-05-30 07:47:01",
        "count": 64
    },
    {
        "date": "2024-05-30 07:52:02",
        "count": 65
    },
    {
        "date": "2024-05-30 07:57:03",
        "count": 64
    },
    {
        "date": "2024-05-30 08:02:07",
        "count": 70
    },
    {
        "date": "2024-05-30 08:07:08",
        "count": 74
    },
    {
        "date": "2024-05-30 08:12:09",
        "count": 78
    },
    {
        "date": "2024-05-30 08:17:11",
        "count": 83
    },
    {
        "date": "2024-05-30 08:22:12",
        "count": 86
    },
    {
        "date": "2024-05-30 08:27:13",
        "count": 94
    },
    {
        "date": "2024-05-30 08:32:17",
        "count": 100
    },
    {
        "date": "2024-05-30 08:37:18",
        "count": 109
    },
    {
        "date": "2024-05-30 08:42:20",
        "count": 107
    },
    {
        "date": "2024-05-30 08:47:21",
        "count": 114
    },
    {
        "date": "2024-05-30 08:52:22",
        "count": 108
    },
    {
        "date": "2024-05-30 08:57:23",
        "count": 109
    },
    {
        "date": "2024-05-30 09:02:27",
        "count": 114
    },
    {
        "date": "2024-05-30 09:07:28",
        "count": 119
    },
    {
        "date": "2024-05-30 09:12:29",
        "count": 110
    },
    {
        "date": "2024-05-30 09:17:30",
        "count": 111
    },
    {
        "date": "2024-05-30 09:22:32",
        "count": 110
    },
    {
        "date": "2024-05-30 09:27:33",
        "count": 112
    },
    {
        "date": "2024-05-30 09:32:36",
        "count": 116
    },
    {
        "date": "2024-05-30 09:37:37",
        "count": 118
    },
    {
        "date": "2024-05-30 09:42:38",
        "count": 116
    },
    {
        "date": "2024-05-30 09:47:39",
        "count": 116
    },
    {
        "date": "2024-05-30 09:52:40",
        "count": 118
    },
    {
        "date": "2024-05-30 09:57:42",
        "count": 113
    },
    {
        "date": "2024-05-30 10:02:45",
        "count": 111
    },
    {
        "date": "2024-05-30 10:07:46",
        "count": 107
    },
    {
        "date": "2024-05-30 10:12:47",
        "count": 106
    },
    {
        "date": "2024-05-30 10:17:49",
        "count": 102
    },
    {
        "date": "2024-05-30 10:22:50",
        "count": 102
    },
    {
        "date": "2024-05-30 10:27:51",
        "count": 102
    },
    {
        "date": "2024-05-30 10:32:55",
        "count": 103
    },
    {
        "date": "2024-05-30 10:37:56",
        "count": 103
    },
    {
        "date": "2024-05-30 10:42:57",
        "count": 108
    },
    {
        "date": "2024-05-30 10:47:58",
        "count": 110
    },
    {
        "date": "2024-05-30 10:52:59",
        "count": 115
    },
    {
        "date": "2024-05-30 10:58:00",
        "count": 114
    },
    {
        "date": "2024-05-30 11:03:04",
        "count": 116
    },
    {
        "date": "2024-05-30 11:08:05",
        "count": 114
    },
    {
        "date": "2024-05-30 11:13:06",
        "count": 111
    },
    {
        "date": "2024-05-30 11:18:07",
        "count": 113
    },
    {
        "date": "2024-05-30 11:23:08",
        "count": 112
    },
    {
        "date": "2024-05-30 11:28:09",
        "count": 111
    },
    {
        "date": "2024-05-30 11:33:13",
        "count": 108
    },
    {
        "date": "2024-05-30 11:38:15",
        "count": 104
    },
    {
        "date": "2024-05-30 11:43:16",
        "count": 98
    },
    {
        "date": "2024-05-30 11:48:17",
        "count": 96
    },
    {
        "date": "2024-05-30 11:53:18",
        "count": 91
    },
    {
        "date": "2024-05-30 11:58:19",
        "count": 91
    },
    {
        "date": "2024-05-30 12:03:22",
        "count": 83
    },
    {
        "date": "2024-05-30 12:08:23",
        "count": 82
    },
    {
        "date": "2024-05-30 12:13:24",
        "count": 80
    },
    {
        "date": "2024-05-30 12:18:25",
        "count": 79
    },
    {
        "date": "2024-05-30 12:23:26",
        "count": 80
    },
    {
        "date": "2024-05-30 12:28:27",
        "count": 80
    },
    {
        "date": "2024-05-30 12:33:31",
        "count": 75
    },
    {
        "date": "2024-05-30 12:38:32",
        "count": 80
    },
    {
        "date": "2024-05-30 12:43:33",
        "count": 82
    },
    {
        "date": "2024-05-30 12:48:34",
        "count": 81
    },
    {
        "date": "2024-05-30 12:53:35",
        "count": 76
    },
    {
        "date": "2024-05-30 12:58:36",
        "count": 81
    },
    {
        "date": "2024-05-30 13:03:40",
        "count": 76
    },
    {
        "date": "2024-05-30 13:08:41",
        "count": 77
    },
    {
        "date": "2024-05-30 13:13:42",
        "count": 81
    },
    {
        "date": "2024-05-30 13:18:44",
        "count": 93
    },
    {
        "date": "2024-05-30 13:23:45",
        "count": 102
    },
    {
        "date": "2024-05-30 13:28:46",
        "count": 112
    },
    {
        "date": "2024-05-30 13:33:49",
        "count": 120
    },
    {
        "date": "2024-05-30 13:38:50",
        "count": 127
    },
    {
        "date": "2024-05-30 13:43:51",
        "count": 126
    },
    {
        "date": "2024-05-30 13:48:52",
        "count": 120
    },
    {
        "date": "2024-05-30 13:53:53",
        "count": 119
    },
    {
        "date": "2024-05-30 13:58:54",
        "count": 120
    },
    {
        "date": "2024-05-30 14:03:58",
        "count": 122
    },
    {
        "date": "2024-05-30 14:08:59",
        "count": 122
    },
    {
        "date": "2024-05-30 14:14:00",
        "count": 122
    },
    {
        "date": "2024-05-30 14:19:01",
        "count": 122
    },
    {
        "date": "2024-05-30 14:24:02",
        "count": 128
    },
    {
        "date": "2024-05-30 14:29:03",
        "count": 134
    },
    {
        "date": "2024-05-30 14:34:07",
        "count": 141
    },
    {
        "date": "2024-05-30 14:39:08",
        "count": 127
    },
    {
        "date": "2024-05-30 14:44:09",
        "count": 130
    },
    {
        "date": "2024-05-30 14:49:10",
        "count": 129
    },
    {
        "date": "2024-05-30 14:54:11",
        "count": 126
    },
    {
        "date": "2024-05-30 14:59:13",
        "count": 123
    },
    {
        "date": "2024-05-30 15:04:16",
        "count": 114
    },
    {
        "date": "2024-05-30 15:09:17",
        "count": 117
    },
    {
        "date": "2024-05-30 15:14:18",
        "count": 115
    },
    {
        "date": "2024-05-30 15:19:19",
        "count": 121
    },
    {
        "date": "2024-05-30 15:24:20",
        "count": 121
    },
    {
        "date": "2024-05-30 15:29:21",
        "count": 122
    },
    {
        "date": "2024-05-30 15:34:24",
        "count": 125
    },
    {
        "date": "2024-05-30 15:39:25",
        "count": 119
    },
    {
        "date": "2024-05-30 15:44:26",
        "count": 109
    },
    {
        "date": "2024-05-30 15:49:27",
        "count": 111
    },
    {
        "date": "2024-05-30 15:54:28",
        "count": 113
    },
    {
        "date": "2024-05-30 15:59:29",
        "count": 116
    },
    {
        "date": "2024-05-30 16:04:32",
        "count": 115
    },
    {
        "date": "2024-05-30 16:09:33",
        "count": 118
    },
    {
        "date": "2024-05-30 16:14:34",
        "count": 117
    },
    {
        "date": "2024-05-30 16:19:35",
        "count": 124
    },
    {
        "date": "2024-05-30 16:24:36",
        "count": 123
    },
    {
        "date": "2024-05-30 16:29:37",
        "count": 124
    },
    {
        "date": "2024-05-30 16:34:41",
        "count": 123
    },
    {
        "date": "2024-05-30 16:39:42",
        "count": 121
    },
    {
        "date": "2024-05-30 16:44:43",
        "count": 125
    },
    {
        "date": "2024-05-30 16:49:44",
        "count": 122
    },
    {
        "date": "2024-05-30 16:54:45",
        "count": 129
    },
    {
        "date": "2024-05-30 16:59:46",
        "count": 132
    },
    {
        "date": "2024-05-30 17:04:49",
        "count": 131
    },
    {
        "date": "2024-05-30 17:09:50",
        "count": 126
    },
    {
        "date": "2024-05-30 17:14:51",
        "count": 127
    },
    {
        "date": "2024-05-30 17:19:52",
        "count": 132
    },
    {
        "date": "2024-05-30 17:24:53",
        "count": 131
    },
    {
        "date": "2024-05-30 17:29:54",
        "count": 123
    },
    {
        "date": "2024-05-30 17:34:57",
        "count": 122
    },
    {
        "date": "2024-05-30 17:39:58",
        "count": 127
    },
    {
        "date": "2024-05-30 17:44:59",
        "count": 123
    },
    {
        "date": "2024-05-30 17:50:00",
        "count": 116
    },
    {
        "date": "2024-05-30 17:55:01",
        "count": 114
    },
    {
        "date": "2024-05-30 18:00:03",
        "count": 114
    },
    {
        "date": "2024-05-30 18:05:07",
        "count": 112
    },
    {
        "date": "2024-05-30 18:10:08",
        "count": 113
    },
    {
        "date": "2024-05-30 18:15:08",
        "count": 114
    },
    {
        "date": "2024-05-30 18:20:09",
        "count": 106
    },
    {
        "date": "2024-05-30 18:25:10",
        "count": 102
    },
    {
        "date": "2024-05-30 18:30:11",
        "count": 98
    },
    {
        "date": "2024-05-30 18:35:15",
        "count": 97
    },
    {
        "date": "2024-05-30 18:40:16",
        "count": 98
    },
    {
        "date": "2024-05-30 18:45:17",
        "count": 100
    },
    {
        "date": "2024-05-30 18:50:18",
        "count": 102
    },
    {
        "date": "2024-05-30 18:55:19",
        "count": 100
    },
    {
        "date": "2024-05-30 19:00:20",
        "count": 98
    },
    {
        "date": "2024-05-30 19:05:24",
        "count": 93
    },
    {
        "date": "2024-05-30 19:10:25",
        "count": 97
    },
    {
        "date": "2024-05-30 19:15:26",
        "count": 95
    },
    {
        "date": "2024-05-30 19:20:27",
        "count": 102
    },
    {
        "date": "2024-05-30 19:25:28",
        "count": 106
    },
    {
        "date": "2024-05-30 19:30:29",
        "count": 105
    },
    {
        "date": "2024-05-30 19:35:32",
        "count": 104
    },
    {
        "date": "2024-05-30 19:40:33",
        "count": 101
    },
    {
        "date": "2024-05-30 19:45:34",
        "count": 95
    },
    {
        "date": "2024-05-30 19:50:35",
        "count": 102
    },
    {
        "date": "2024-05-30 19:55:36",
        "count": 106
    },
    {
        "date": "2024-05-30 20:00:37",
        "count": 109
    },
    {
        "date": "2024-05-30 20:05:40",
        "count": 109
    },
    {
        "date": "2024-05-30 20:10:41",
        "count": 103
    },
    {
        "date": "2024-05-30 20:15:42",
        "count": 99
    },
    {
        "date": "2024-05-30 20:20:43",
        "count": 93
    },
    {
        "date": "2024-05-30 20:25:43",
        "count": 91
    },
    {
        "date": "2024-05-30 20:30:44",
        "count": 91
    },
    {
        "date": "2024-05-30 20:35:48",
        "count": 89
    },
    {
        "date": "2024-05-30 20:40:49",
        "count": 85
    },
    {
        "date": "2024-05-30 20:45:50",
        "count": 76
    },
    {
        "date": "2024-05-30 20:50:51",
        "count": 74
    },
    {
        "date": "2024-05-30 20:55:51",
        "count": 67
    },
    {
        "date": "2024-05-30 21:00:53",
        "count": 63
    },
    {
        "date": "2024-05-30 21:05:56",
        "count": 63
    },
    {
        "date": "2024-05-30 21:10:57",
        "count": 60
    },
    {
        "date": "2024-05-30 21:15:57",
        "count": 59
    },
    {
        "date": "2024-05-30 21:20:58",
        "count": 55
    },
    {
        "date": "2024-05-30 21:25:59",
        "count": 51
    },
    {
        "date": "2024-05-30 21:31:00",
        "count": 46
    },
    {
        "date": "2024-05-30 21:36:04",
        "count": 43
    },
    {
        "date": "2024-05-30 21:41:04",
        "count": 39
    },
    {
        "date": "2024-05-30 21:46:05",
        "count": 38
    },
    {
        "date": "2024-05-30 21:51:06",
        "count": 39
    },
    {
        "date": "2024-05-30 21:56:07",
        "count": 37
    },
    {
        "date": "2024-05-30 22:01:07",
        "count": 37
    },
    {
        "date": "2024-05-30 22:06:11",
        "count": 36
    },
    {
        "date": "2024-05-30 22:11:11",
        "count": 31
    },
    {
        "date": "2024-05-30 22:16:12",
        "count": 31
    },
    {
        "date": "2024-05-30 22:21:13",
        "count": 27
    },
    {
        "date": "2024-05-30 22:26:13",
        "count": 27
    },
    {
        "date": "2024-05-30 22:31:14",
        "count": 26
    },
    {
        "date": "2024-05-30 22:36:17",
        "count": 24
    },
    {
        "date": "2024-05-30 22:41:18",
        "count": 24
    },
    {
        "date": "2024-05-30 22:46:18",
        "count": 22
    },
    {
        "date": "2024-05-30 22:51:19",
        "count": 22
    },
    {
        "date": "2024-05-30 22:56:20",
        "count": 18
    },
    {
        "date": "2024-05-30 23:01:21",
        "count": 17
    },
    {
        "date": "2024-05-30 23:06:24",
        "count": 17
    },
    {
        "date": "2024-05-30 23:11:24",
        "count": 17
    },
    {
        "date": "2024-05-30 23:16:25",
        "count": 17
    },
    {
        "date": "2024-05-30 23:21:26",
        "count": 17
    },
    {
        "date": "2024-05-30 23:26:27",
        "count": 16
    },
    {
        "date": "2024-05-30 23:31:27",
        "count": 16
    },
    {
        "date": "2024-05-30 23:36:30",
        "count": 16
    },
    {
        "date": "2024-05-30 23:41:31",
        "count": 16
    },
    {
        "date": "2024-05-30 23:46:32",
        "count": 16
    },
    {
        "date": "2024-05-30 23:51:33",
        "count": 16
    },
    {
        "date": "2024-05-30 23:56:33",
        "count": 14
    },
    {
        "date": "2024-05-31 00:01:35",
        "count": 7
    },
    {
        "date": "2024-05-31 00:06:37",
        "count": 7
    },
    {
        "date": "2024-05-31 00:11:38",
        "count": 6
    },
    {
        "date": "2024-05-31 00:16:39",
        "count": 5
    },
    {
        "date": "2024-05-31 00:21:40",
        "count": 5
    },
    {
        "date": "2024-05-31 00:26:40",
        "count": 5
    },
    {
        "date": "2024-05-31 00:31:41",
        "count": 5
    },
    {
        "date": "2024-05-31 00:36:44",
        "count": 5
    },
    {
        "date": "2024-05-31 00:41:45",
        "count": 4
    },
    {
        "date": "2024-05-31 00:46:46",
        "count": 4
    },
    {
        "date": "2024-05-31 00:51:47",
        "count": 4
    },
    {
        "date": "2024-05-31 00:56:47",
        "count": 4
    },
    {
        "date": "2024-05-31 01:01:48",
        "count": 4
    },
    {
        "date": "2024-05-31 01:06:51",
        "count": 4
    },
    {
        "date": "2024-05-31 01:11:52",
        "count": 4
    },
    {
        "date": "2024-05-31 01:16:52",
        "count": 4
    },
    {
        "date": "2024-05-31 01:21:53",
        "count": 4
    },
    {
        "date": "2024-05-31 01:26:54",
        "count": 4
    },
    {
        "date": "2024-05-31 01:31:55",
        "count": 4
    },
    {
        "date": "2024-05-31 01:36:58",
        "count": 4
    },
    {
        "date": "2024-05-31 01:41:58",
        "count": 4
    },
    {
        "date": "2024-05-31 01:46:59",
        "count": 4
    },
    {
        "date": "2024-05-31 01:52:00",
        "count": 3
    },
    {
        "date": "2024-05-31 01:57:01",
        "count": 3
    },
    {
        "date": "2024-05-31 02:02:02",
        "count": 3
    },
    {
        "date": "2024-05-31 02:07:05",
        "count": 4
    },
    {
        "date": "2024-05-31 02:12:05",
        "count": 5
    },
    {
        "date": "2024-05-31 02:17:06",
        "count": 5
    },
    {
        "date": "2024-05-31 02:22:07",
        "count": 5
    },
    {
        "date": "2024-05-31 02:27:08",
        "count": 6
    },
    {
        "date": "2024-05-31 02:32:08",
        "count": 8
    },
    {
        "date": "2024-05-31 02:37:11",
        "count": 9
    },
    {
        "date": "2024-05-31 02:42:12",
        "count": 10
    },
    {
        "date": "2024-05-31 02:47:13",
        "count": 10
    },
    {
        "date": "2024-05-31 02:52:14",
        "count": 10
    },
    {
        "date": "2024-05-31 02:57:14",
        "count": 10
    },
    {
        "date": "2024-05-31 03:02:15",
        "count": 10
    },
    {
        "date": "2024-05-31 03:07:18",
        "count": 10
    },
    {
        "date": "2024-05-31 03:12:19",
        "count": 11
    },
    {
        "date": "2024-05-31 03:17:20",
        "count": 11
    },
    {
        "date": "2024-05-31 03:22:20",
        "count": 12
    },
    {
        "date": "2024-05-31 03:27:21",
        "count": 12
    },
    {
        "date": "2024-05-31 03:32:22",
        "count": 15
    },
    {
        "date": "2024-05-31 03:37:25",
        "count": 16
    },
    {
        "date": "2024-05-31 03:42:26",
        "count": 15
    },
    {
        "date": "2024-05-31 03:47:26",
        "count": 16
    },
    {
        "date": "2024-05-31 03:52:27",
        "count": 16
    },
    {
        "date": "2024-05-31 03:57:28",
        "count": 17
    },
    {
        "date": "2024-05-31 04:02:29",
        "count": 18
    },
    {
        "date": "2024-05-31 04:07:32",
        "count": 20
    },
    {
        "date": "2024-05-31 04:12:32",
        "count": 21
    },
    {
        "date": "2024-05-31 04:17:33",
        "count": 20
    },
    {
        "date": "2024-05-31 04:22:34",
        "count": 21
    },
    {
        "date": "2024-05-31 04:27:35",
        "count": 22
    },
    {
        "date": "2024-05-31 04:32:35",
        "count": 22
    },
    {
        "date": "2024-05-31 04:37:38",
        "count": 21
    },
    {
        "date": "2024-05-31 04:42:39",
        "count": 23
    },
    {
        "date": "2024-05-31 04:47:40",
        "count": 24
    },
    {
        "date": "2024-05-31 04:52:40",
        "count": 26
    },
    {
        "date": "2024-05-31 04:57:41",
        "count": 25
    },
    {
        "date": "2024-05-31 05:02:42",
        "count": 26
    },
    {
        "date": "2024-05-31 05:07:48",
        "count": 29
    },
    {
        "date": "2024-05-31 05:12:49",
        "count": 30
    },
    {
        "date": "2024-05-31 05:17:49",
        "count": 32
    },
    {
        "date": "2024-05-31 05:22:50",
        "count": 36
    },
    {
        "date": "2024-05-31 05:27:51",
        "count": 41
    },
    {
        "date": "2024-05-31 05:32:52",
        "count": 41
    },
    {
        "date": "2024-05-31 05:37:55",
        "count": 40
    },
    {
        "date": "2024-05-31 05:42:56",
        "count": 39
    },
    {
        "date": "2024-05-31 05:47:56",
        "count": 43
    },
    {
        "date": "2024-05-31 05:52:57",
        "count": 46
    },
    {
        "date": "2024-05-31 05:57:58",
        "count": 47
    },
    {
        "date": "2024-05-31 06:02:59",
        "count": 48
    },
    {
        "date": "2024-05-31 06:08:02",
        "count": 47
    },
    {
        "date": "2024-05-31 06:13:02",
        "count": 46
    },
    {
        "date": "2024-05-31 06:18:03",
        "count": 47
    },
    {
        "date": "2024-05-31 06:23:04",
        "count": 48
    },
    {
        "date": "2024-05-31 06:28:05",
        "count": 52
    },
    {
        "date": "2024-05-31 06:33:06",
        "count": 52
    },
    {
        "date": "2024-05-31 06:38:09",
        "count": 51
    },
    {
        "date": "2024-05-31 06:43:10",
        "count": 52
    },
    {
        "date": "2024-05-31 06:48:10",
        "count": 52
    },
    {
        "date": "2024-05-31 06:53:11",
        "count": 47
    },
    {
        "date": "2024-05-31 06:58:12",
        "count": 44
    },
    {
        "date": "2024-05-31 07:03:13",
        "count": 44
    },
    {
        "date": "2024-05-31 07:08:16",
        "count": 45
    },
    {
        "date": "2024-05-31 07:13:17",
        "count": 45
    },
    {
        "date": "2024-05-31 07:18:18",
        "count": 48
    },
    {
        "date": "2024-05-31 07:23:19",
        "count": 50
    },
    {
        "date": "2024-05-31 07:28:19",
        "count": 52
    }
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"gkKU3"}],"hmLQz":[function(require,module,exports) {
/*!
 * chartjs-adapter-date-fns v3.0.0
 * https://www.chartjs.org
 * (c) 2022 chartjs-adapter-date-fns Contributors
 * Released under the MIT license
 */ var _chartJs = require("chart.js");
var _dateFns = require("date-fns");
const FORMATS = {
    datetime: "MMM d, yyyy, h:mm:ss aaaa",
    millisecond: "h:mm:ss.SSS aaaa",
    second: "h:mm:ss aaaa",
    minute: "h:mm aaaa",
    hour: "ha",
    day: "MMM d",
    week: "PP",
    month: "MMM yyyy",
    quarter: "qqq - yyyy",
    year: "yyyy"
};
(0, _chartJs._adapters)._date.override({
    _id: "date-fns",
    formats: function() {
        return FORMATS;
    },
    parse: function(value, fmt) {
        if (value === null || typeof value === "undefined") return null;
        const type = typeof value;
        if (type === "number" || value instanceof Date) value = (0, _dateFns.toDate)(value);
        else if (type === "string") {
            if (typeof fmt === "string") value = (0, _dateFns.parse)(value, fmt, new Date(), this.options);
            else value = (0, _dateFns.parseISO)(value, this.options);
        }
        return (0, _dateFns.isValid)(value) ? value.getTime() : null;
    },
    format: function(time, fmt) {
        return (0, _dateFns.format)(time, fmt, this.options);
    },
    add: function(time, amount, unit) {
        switch(unit){
            case "millisecond":
                return (0, _dateFns.addMilliseconds)(time, amount);
            case "second":
                return (0, _dateFns.addSeconds)(time, amount);
            case "minute":
                return (0, _dateFns.addMinutes)(time, amount);
            case "hour":
                return (0, _dateFns.addHours)(time, amount);
            case "day":
                return (0, _dateFns.addDays)(time, amount);
            case "week":
                return (0, _dateFns.addWeeks)(time, amount);
            case "month":
                return (0, _dateFns.addMonths)(time, amount);
            case "quarter":
                return (0, _dateFns.addQuarters)(time, amount);
            case "year":
                return (0, _dateFns.addYears)(time, amount);
            default:
                return time;
        }
    },
    diff: function(max, min, unit) {
        switch(unit){
            case "millisecond":
                return (0, _dateFns.differenceInMilliseconds)(max, min);
            case "second":
                return (0, _dateFns.differenceInSeconds)(max, min);
            case "minute":
                return (0, _dateFns.differenceInMinutes)(max, min);
            case "hour":
                return (0, _dateFns.differenceInHours)(max, min);
            case "day":
                return (0, _dateFns.differenceInDays)(max, min);
            case "week":
                return (0, _dateFns.differenceInWeeks)(max, min);
            case "month":
                return (0, _dateFns.differenceInMonths)(max, min);
            case "quarter":
                return (0, _dateFns.differenceInQuarters)(max, min);
            case "year":
                return (0, _dateFns.differenceInYears)(max, min);
            default:
                return 0;
        }
    },
    startOf: function(time, unit, weekday) {
        switch(unit){
            case "second":
                return (0, _dateFns.startOfSecond)(time);
            case "minute":
                return (0, _dateFns.startOfMinute)(time);
            case "hour":
                return (0, _dateFns.startOfHour)(time);
            case "day":
                return (0, _dateFns.startOfDay)(time);
            case "week":
                return (0, _dateFns.startOfWeek)(time);
            case "isoWeek":
                return (0, _dateFns.startOfWeek)(time, {
                    weekStartsOn: +weekday
                });
            case "month":
                return (0, _dateFns.startOfMonth)(time);
            case "quarter":
                return (0, _dateFns.startOfQuarter)(time);
            case "year":
                return (0, _dateFns.startOfYear)(time);
            default:
                return time;
        }
    },
    endOf: function(time, unit) {
        switch(unit){
            case "second":
                return (0, _dateFns.endOfSecond)(time);
            case "minute":
                return (0, _dateFns.endOfMinute)(time);
            case "hour":
                return (0, _dateFns.endOfHour)(time);
            case "day":
                return (0, _dateFns.endOfDay)(time);
            case "week":
                return (0, _dateFns.endOfWeek)(time);
            case "month":
                return (0, _dateFns.endOfMonth)(time);
            case "quarter":
                return (0, _dateFns.endOfQuarter)(time);
            case "year":
                return (0, _dateFns.endOfYear)(time);
            default:
                return time;
        }
    }
});

},{"chart.js":"ipU8D","date-fns":"dU215"}],"dU215":[function(require,module,exports) {
"use strict";
var _index = require("bb476f479aec785f");
Object.keys(_index).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index[key];
        }
    });
});
var _index2 = require("f3c55fba68737491");
Object.keys(_index2).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index2[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index2[key];
        }
    });
});
var _index3 = require("4e06aa5c5a66ee79");
Object.keys(_index3).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index3[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index3[key];
        }
    });
});
var _index4 = require("320136604150f517");
Object.keys(_index4).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index4[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index4[key];
        }
    });
});
var _index5 = require("9bfe5668fe1279fd");
Object.keys(_index5).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index5[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index5[key];
        }
    });
});
var _index6 = require("8a5f15f49ef72b46");
Object.keys(_index6).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index6[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index6[key];
        }
    });
});
var _index7 = require("ad78344e087d5dce");
Object.keys(_index7).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index7[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index7[key];
        }
    });
});
var _index8 = require("c4f5940a947b78c");
Object.keys(_index8).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index8[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index8[key];
        }
    });
});
var _index9 = require("f66bb3ce3ddb423a");
Object.keys(_index9).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index9[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index9[key];
        }
    });
});
var _index10 = require("cf2ce1177f6f3085");
Object.keys(_index10).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index10[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index10[key];
        }
    });
});
var _index11 = require("ff27f5c5e825f426");
Object.keys(_index11).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index11[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index11[key];
        }
    });
});
var _index12 = require("9692908b0d3e69f3");
Object.keys(_index12).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index12[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index12[key];
        }
    });
});
var _index13 = require("c07b6490d53540ef");
Object.keys(_index13).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index13[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index13[key];
        }
    });
});
var _index14 = require("33ecb1182a4f61bc");
Object.keys(_index14).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index14[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index14[key];
        }
    });
});
var _index15 = require("eb6c645c302c3877");
Object.keys(_index15).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index15[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index15[key];
        }
    });
});
var _index16 = require("96a422b0dac4a654");
Object.keys(_index16).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index16[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index16[key];
        }
    });
});
var _index17 = require("41bd5ae6bd5c566d");
Object.keys(_index17).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index17[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index17[key];
        }
    });
});
var _index18 = require("1b492f1d94521a5d");
Object.keys(_index18).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index18[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index18[key];
        }
    });
});
var _index19 = require("c13fe358d89ecd81");
Object.keys(_index19).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index19[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index19[key];
        }
    });
});
var _index20 = require("ce109cc453253b85");
Object.keys(_index20).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index20[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index20[key];
        }
    });
});
var _index21 = require("d42674a0b7bfc434");
Object.keys(_index21).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index21[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index21[key];
        }
    });
});
var _index22 = require("fbdc79daa81b87b6");
Object.keys(_index22).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index22[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index22[key];
        }
    });
});
var _index23 = require("c2badf5a2b5ed454");
Object.keys(_index23).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index23[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index23[key];
        }
    });
});
var _index24 = require("9fd007b982125b9a");
Object.keys(_index24).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index24[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index24[key];
        }
    });
});
var _index25 = require("b695668577e1e7cb");
Object.keys(_index25).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index25[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index25[key];
        }
    });
});
var _index26 = require("6b399f6303d57295");
Object.keys(_index26).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index26[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index26[key];
        }
    });
});
var _index27 = require("6a61a2a843b91654");
Object.keys(_index27).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index27[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index27[key];
        }
    });
});
var _index28 = require("60b631dcb2f037ca");
Object.keys(_index28).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index28[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index28[key];
        }
    });
});
var _index29 = require("2ed27a2d4a3c6872");
Object.keys(_index29).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index29[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index29[key];
        }
    });
});
var _index30 = require("41d2eb1d2381e8a");
Object.keys(_index30).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index30[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index30[key];
        }
    });
});
var _index31 = require("c599317e8caae438");
Object.keys(_index31).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index31[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index31[key];
        }
    });
});
var _index32 = require("3b135e2b9118d1b");
Object.keys(_index32).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index32[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index32[key];
        }
    });
});
var _index33 = require("241ef3acf8caa33a");
Object.keys(_index33).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index33[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index33[key];
        }
    });
});
var _index34 = require("b76109f782422508");
Object.keys(_index34).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index34[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index34[key];
        }
    });
});
var _index35 = require("30e8f5ceefb905b2");
Object.keys(_index35).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index35[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index35[key];
        }
    });
});
var _index36 = require("20867c3d025aff9");
Object.keys(_index36).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index36[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index36[key];
        }
    });
});
var _index37 = require("366b2e75db11947a");
Object.keys(_index37).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index37[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index37[key];
        }
    });
});
var _index38 = require("4582c2f25445c44b");
Object.keys(_index38).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index38[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index38[key];
        }
    });
});
var _index39 = require("55c0b2733cdea4d1");
Object.keys(_index39).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index39[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index39[key];
        }
    });
});
var _index40 = require("74ff6cf808a390db");
Object.keys(_index40).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index40[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index40[key];
        }
    });
});
var _index41 = require("81c3475ead0f5b5a");
Object.keys(_index41).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index41[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index41[key];
        }
    });
});
var _index42 = require("cd10d76a84c94920");
Object.keys(_index42).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index42[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index42[key];
        }
    });
});
var _index43 = require("b58b90c359ac3c03");
Object.keys(_index43).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index43[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index43[key];
        }
    });
});
var _index44 = require("bcedf2167bbb0925");
Object.keys(_index44).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index44[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index44[key];
        }
    });
});
var _index45 = require("dd98d2de70848b38");
Object.keys(_index45).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index45[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index45[key];
        }
    });
});
var _index46 = require("e137338bdb2b9c68");
Object.keys(_index46).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index46[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index46[key];
        }
    });
});
var _index47 = require("d7d2b7f0a9f716a8");
Object.keys(_index47).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index47[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index47[key];
        }
    });
});
var _index48 = require("83b612a607feb7af");
Object.keys(_index48).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index48[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index48[key];
        }
    });
});
var _index49 = require("68777f2c425fee5d");
Object.keys(_index49).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index49[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index49[key];
        }
    });
});
var _index50 = require("5fe5471d81c79da6");
Object.keys(_index50).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index50[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index50[key];
        }
    });
});
var _index51 = require("c2cf95d448d96fcc");
Object.keys(_index51).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index51[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index51[key];
        }
    });
});
var _index52 = require("bdeffae0b4080a1e");
Object.keys(_index52).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index52[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index52[key];
        }
    });
});
var _index53 = require("b0814d5ce39f52b5");
Object.keys(_index53).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index53[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index53[key];
        }
    });
});
var _index54 = require("38c2fd7b5ab40bf0");
Object.keys(_index54).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index54[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index54[key];
        }
    });
});
var _index55 = require("216f5a0b7789e14");
Object.keys(_index55).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index55[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index55[key];
        }
    });
});
var _index56 = require("b3e5b40e0fbb1d44");
Object.keys(_index56).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index56[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index56[key];
        }
    });
});
var _index57 = require("e989ece2a2757bd2");
Object.keys(_index57).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index57[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index57[key];
        }
    });
});
var _index58 = require("610e7dd2284f5781");
Object.keys(_index58).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index58[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index58[key];
        }
    });
});
var _index59 = require("aee49e17aca40e68");
Object.keys(_index59).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index59[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index59[key];
        }
    });
});
var _index60 = require("ba659abbcc4b60fe");
Object.keys(_index60).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index60[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index60[key];
        }
    });
});
var _index61 = require("cc3f9c4f9c787ea6");
Object.keys(_index61).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index61[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index61[key];
        }
    });
});
var _index62 = require("40192b29822dee38");
Object.keys(_index62).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index62[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index62[key];
        }
    });
});
var _index63 = require("87e1741b0e0137ea");
Object.keys(_index63).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index63[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index63[key];
        }
    });
});
var _index64 = require("d634ea72aef4c86e");
Object.keys(_index64).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index64[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index64[key];
        }
    });
});
var _index65 = require("665bea9ec101ae55");
Object.keys(_index65).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index65[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index65[key];
        }
    });
});
var _index66 = require("4c745f864149cfd3");
Object.keys(_index66).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index66[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index66[key];
        }
    });
});
var _index67 = require("59e6129eee3b016c");
Object.keys(_index67).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index67[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index67[key];
        }
    });
});
var _index68 = require("88f236b6a61f4122");
Object.keys(_index68).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index68[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index68[key];
        }
    });
});
var _index69 = require("33f9f2f6d62dc6cc");
Object.keys(_index69).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index69[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index69[key];
        }
    });
});
var _index70 = require("5e181004291889f8");
Object.keys(_index70).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index70[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index70[key];
        }
    });
});
var _index71 = require("de24191615ebbb80");
Object.keys(_index71).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index71[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index71[key];
        }
    });
});
var _index72 = require("d63e27bbb84952ec");
Object.keys(_index72).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index72[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index72[key];
        }
    });
});
var _index73 = require("c2012a9ded2a05e4");
Object.keys(_index73).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index73[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index73[key];
        }
    });
});
var _index74 = require("6f70aef5356bf042");
Object.keys(_index74).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index74[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index74[key];
        }
    });
});
var _index75 = require("3fea09df6269258d");
Object.keys(_index75).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index75[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index75[key];
        }
    });
});
var _index76 = require("cf95b5833c75a113");
Object.keys(_index76).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index76[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index76[key];
        }
    });
});
var _index77 = require("198ca05f7c43d0c0");
Object.keys(_index77).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index77[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index77[key];
        }
    });
});
var _index78 = require("2a7b78bbeb9ac279");
Object.keys(_index78).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index78[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index78[key];
        }
    });
});
var _index79 = require("81ea02ff9efa6f86");
Object.keys(_index79).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index79[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index79[key];
        }
    });
});
var _index80 = require("129a78908bb8985b");
Object.keys(_index80).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index80[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index80[key];
        }
    });
});
var _index81 = require("f3c08909629e1f03");
Object.keys(_index81).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index81[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index81[key];
        }
    });
});
var _index82 = require("f78c22b2c30c3be8");
Object.keys(_index82).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index82[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index82[key];
        }
    });
});
var _index83 = require("885f4bbed816b7f7");
Object.keys(_index83).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index83[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index83[key];
        }
    });
});
var _index84 = require("72d271579509d098");
Object.keys(_index84).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index84[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index84[key];
        }
    });
});
var _index85 = require("dee4e1ab9bdde628");
Object.keys(_index85).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index85[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index85[key];
        }
    });
});
var _index86 = require("571218393678880d");
Object.keys(_index86).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index86[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index86[key];
        }
    });
});
var _index87 = require("2835d5a51730a5b3");
Object.keys(_index87).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index87[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index87[key];
        }
    });
});
var _index88 = require("3741eee35491c087");
Object.keys(_index88).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index88[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index88[key];
        }
    });
});
var _index89 = require("e92428f0f5974b5a");
Object.keys(_index89).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index89[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index89[key];
        }
    });
});
var _index90 = require("8523677aaea2cb20");
Object.keys(_index90).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index90[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index90[key];
        }
    });
});
var _index91 = require("22812cfff632fba0");
Object.keys(_index91).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index91[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index91[key];
        }
    });
});
var _index92 = require("a84bbb9e49250d10");
Object.keys(_index92).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index92[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index92[key];
        }
    });
});
var _index93 = require("ce1a93769edb9f74");
Object.keys(_index93).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index93[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index93[key];
        }
    });
});
var _index94 = require("c29e8ab5eeb7d4c0");
Object.keys(_index94).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index94[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index94[key];
        }
    });
});
var _index95 = require("417a881dca9183b4");
Object.keys(_index95).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index95[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index95[key];
        }
    });
});
var _index96 = require("ed18152d44e54a88");
Object.keys(_index96).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index96[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index96[key];
        }
    });
});
var _index97 = require("5ad8718b8ffbdc8");
Object.keys(_index97).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index97[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index97[key];
        }
    });
});
var _index98 = require("4885f3e1b4265446");
Object.keys(_index98).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index98[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index98[key];
        }
    });
});
var _index99 = require("21dc31ac6a839f01");
Object.keys(_index99).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index99[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index99[key];
        }
    });
});
var _index100 = require("ed69673c611caf3c");
Object.keys(_index100).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index100[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index100[key];
        }
    });
});
var _index101 = require("9a619fbde7ef4e46");
Object.keys(_index101).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index101[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index101[key];
        }
    });
});
var _index102 = require("5b4ec1d4ed18e2a5");
Object.keys(_index102).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index102[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index102[key];
        }
    });
});
var _index103 = require("ea293604faa53290");
Object.keys(_index103).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index103[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index103[key];
        }
    });
});
var _index104 = require("b884dd139cae152f");
Object.keys(_index104).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index104[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index104[key];
        }
    });
});
var _index105 = require("4c3ab9f336a7d51a");
Object.keys(_index105).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index105[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index105[key];
        }
    });
});
var _index106 = require("653e45499ad5f194");
Object.keys(_index106).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index106[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index106[key];
        }
    });
});
var _index107 = require("7ac77dc0818e9e94");
Object.keys(_index107).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index107[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index107[key];
        }
    });
});
var _index108 = require("9ebf799edec0800d");
Object.keys(_index108).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index108[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index108[key];
        }
    });
});
var _index109 = require("e9dba9b7ca1e9602");
Object.keys(_index109).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index109[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index109[key];
        }
    });
});
var _index110 = require("457b792b8a5c77fb");
Object.keys(_index110).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index110[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index110[key];
        }
    });
});
var _index111 = require("f0cf225cf98c3e8f");
Object.keys(_index111).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index111[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index111[key];
        }
    });
});
var _index112 = require("bf7e1cb6a8774a05");
Object.keys(_index112).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index112[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index112[key];
        }
    });
});
var _index113 = require("d5aea1feeaf1adbf");
Object.keys(_index113).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index113[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index113[key];
        }
    });
});
var _index114 = require("48e6ab9d727b91c9");
Object.keys(_index114).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index114[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index114[key];
        }
    });
});
var _index115 = require("c79cfd58c43d1fa4");
Object.keys(_index115).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index115[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index115[key];
        }
    });
});
var _index116 = require("c728316595f95974");
Object.keys(_index116).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index116[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index116[key];
        }
    });
});
var _index117 = require("2caa1112ba1b4508");
Object.keys(_index117).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index117[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index117[key];
        }
    });
});
var _index118 = require("9d5c85b5b30fda8b");
Object.keys(_index118).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index118[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index118[key];
        }
    });
});
var _index119 = require("c46fa1cec26cd22a");
Object.keys(_index119).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index119[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index119[key];
        }
    });
});
var _index120 = require("6c707c0047f553ac");
Object.keys(_index120).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index120[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index120[key];
        }
    });
});
var _index121 = require("b71a70253afe0556");
Object.keys(_index121).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index121[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index121[key];
        }
    });
});
var _index122 = require("e2f24260bdfcee8f");
Object.keys(_index122).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index122[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index122[key];
        }
    });
});
var _index123 = require("be2bf5e6a74e2283");
Object.keys(_index123).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index123[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index123[key];
        }
    });
});
var _index124 = require("e93db27a94ecd3d3");
Object.keys(_index124).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index124[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index124[key];
        }
    });
});
var _index125 = require("2aefde7c3914abfe");
Object.keys(_index125).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index125[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index125[key];
        }
    });
});
var _index126 = require("56b4c8eeea06f054");
Object.keys(_index126).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index126[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index126[key];
        }
    });
});
var _index127 = require("6449dde00b2f822c");
Object.keys(_index127).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index127[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index127[key];
        }
    });
});
var _index128 = require("467aa549567ca48");
Object.keys(_index128).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index128[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index128[key];
        }
    });
});
var _index129 = require("b3c68b9632f5847f");
Object.keys(_index129).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index129[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index129[key];
        }
    });
});
var _index130 = require("af086aa9222e7e7a");
Object.keys(_index130).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index130[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index130[key];
        }
    });
});
var _index131 = require("e5fdfd39e6fba6e7");
Object.keys(_index131).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index131[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index131[key];
        }
    });
});
var _index132 = require("abbe493c9dd29207");
Object.keys(_index132).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index132[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index132[key];
        }
    });
});
var _index133 = require("a5aa9970fda729b7");
Object.keys(_index133).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index133[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index133[key];
        }
    });
});
var _index134 = require("c06c3eadb4cdf4e3");
Object.keys(_index134).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index134[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index134[key];
        }
    });
});
var _index135 = require("cdc71995959dfbfa");
Object.keys(_index135).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index135[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index135[key];
        }
    });
});
var _index136 = require("4a9a53e9af17ff6f");
Object.keys(_index136).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index136[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index136[key];
        }
    });
});
var _index137 = require("59f886b13821bc45");
Object.keys(_index137).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index137[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index137[key];
        }
    });
});
var _index138 = require("f34570d87ce571d9");
Object.keys(_index138).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index138[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index138[key];
        }
    });
});
var _index139 = require("d33f52ea22bb7fd3");
Object.keys(_index139).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index139[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index139[key];
        }
    });
});
var _index140 = require("16489881fdd5bbdf");
Object.keys(_index140).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index140[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index140[key];
        }
    });
});
var _index141 = require("61b14f40f6d2e486");
Object.keys(_index141).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index141[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index141[key];
        }
    });
});
var _index142 = require("9aa6cb940f916d0a");
Object.keys(_index142).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index142[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index142[key];
        }
    });
});
var _index143 = require("b7eef910ecfacb18");
Object.keys(_index143).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index143[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index143[key];
        }
    });
});
var _index144 = require("686832f61553fbb3");
Object.keys(_index144).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index144[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index144[key];
        }
    });
});
var _index145 = require("86e637d32ee5d263");
Object.keys(_index145).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index145[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index145[key];
        }
    });
});
var _index146 = require("830824c7146bc058");
Object.keys(_index146).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index146[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index146[key];
        }
    });
});
var _index147 = require("4f0836001f7c5048");
Object.keys(_index147).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index147[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index147[key];
        }
    });
});
var _index148 = require("4d73f01e07ece752");
Object.keys(_index148).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index148[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index148[key];
        }
    });
});
var _index149 = require("423b6331ffa3e5d2");
Object.keys(_index149).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index149[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index149[key];
        }
    });
});
var _index150 = require("f9514135275b73a4");
Object.keys(_index150).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index150[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index150[key];
        }
    });
});
var _index151 = require("d2f2611a87dcb9e3");
Object.keys(_index151).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index151[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index151[key];
        }
    });
});
var _index152 = require("16575fe82c6eaba");
Object.keys(_index152).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index152[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index152[key];
        }
    });
});
var _index153 = require("123fc514f9f01a00");
Object.keys(_index153).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index153[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index153[key];
        }
    });
});
var _index154 = require("c86bcf67d45e9435");
Object.keys(_index154).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index154[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index154[key];
        }
    });
});
var _index155 = require("4821ca0dd2872a0f");
Object.keys(_index155).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index155[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index155[key];
        }
    });
});
var _index156 = require("85eb0bf7985aa70e");
Object.keys(_index156).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index156[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index156[key];
        }
    });
});
var _index157 = require("1a237db8f40f7128");
Object.keys(_index157).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index157[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index157[key];
        }
    });
});
var _index158 = require("806f1afed957366e");
Object.keys(_index158).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index158[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index158[key];
        }
    });
});
var _index159 = require("cad35743a000cb4");
Object.keys(_index159).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index159[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index159[key];
        }
    });
});
var _index160 = require("115f361c6735a6c0");
Object.keys(_index160).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index160[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index160[key];
        }
    });
});
var _index161 = require("80e94a4a0e176a8");
Object.keys(_index161).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index161[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index161[key];
        }
    });
});
var _index162 = require("780d37322e411839");
Object.keys(_index162).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index162[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index162[key];
        }
    });
});
var _index163 = require("7c96227bbd2ac57c");
Object.keys(_index163).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index163[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index163[key];
        }
    });
});
var _index164 = require("a60de3990361ba17");
Object.keys(_index164).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index164[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index164[key];
        }
    });
});
var _index165 = require("67038e2323e63ea9");
Object.keys(_index165).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index165[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index165[key];
        }
    });
});
var _index166 = require("f369bf768ced1809");
Object.keys(_index166).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index166[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index166[key];
        }
    });
});
var _index167 = require("8df5570f1a67899f");
Object.keys(_index167).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index167[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index167[key];
        }
    });
});
var _index168 = require("8be23c536e634067");
Object.keys(_index168).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index168[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index168[key];
        }
    });
});
var _index169 = require("970ab91418234ff6");
Object.keys(_index169).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index169[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index169[key];
        }
    });
});
var _index170 = require("bb6bd04224221f0f");
Object.keys(_index170).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index170[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index170[key];
        }
    });
});
var _index171 = require("83bc3c8b247c95ac");
Object.keys(_index171).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index171[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index171[key];
        }
    });
});
var _index172 = require("1b896d69ba284cd1");
Object.keys(_index172).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index172[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index172[key];
        }
    });
});
var _index173 = require("9e825321a9eac99d");
Object.keys(_index173).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index173[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index173[key];
        }
    });
});
var _index174 = require("e12f32189f9896fa");
Object.keys(_index174).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index174[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index174[key];
        }
    });
});
var _index175 = require("7679dd63eccebad1");
Object.keys(_index175).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index175[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index175[key];
        }
    });
});
var _index176 = require("a0e3c9611b9bf96c");
Object.keys(_index176).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index176[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index176[key];
        }
    });
});
var _index177 = require("eb624ca985ff10d8");
Object.keys(_index177).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index177[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index177[key];
        }
    });
});
var _index178 = require("b2b165aa2a86d7f0");
Object.keys(_index178).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index178[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index178[key];
        }
    });
});
var _index179 = require("caabce449eab8dd");
Object.keys(_index179).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index179[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index179[key];
        }
    });
});
var _index180 = require("5d1dd7f0f23ee603");
Object.keys(_index180).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index180[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index180[key];
        }
    });
});
var _index181 = require("647dcd5d2203f0b0");
Object.keys(_index181).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index181[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index181[key];
        }
    });
});
var _index182 = require("9cb02b8edba87fd");
Object.keys(_index182).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index182[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index182[key];
        }
    });
});
var _index183 = require("c3ed91fb195d875a");
Object.keys(_index183).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index183[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index183[key];
        }
    });
});
var _index184 = require("2c295112993dd62f");
Object.keys(_index184).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index184[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index184[key];
        }
    });
});
var _index185 = require("af1893c4359270d5");
Object.keys(_index185).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index185[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index185[key];
        }
    });
});
var _index186 = require("28e3998e2ecca01f");
Object.keys(_index186).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index186[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index186[key];
        }
    });
});
var _index187 = require("be774b00f21988d3");
Object.keys(_index187).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index187[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index187[key];
        }
    });
});
var _index188 = require("8b434ff09ce37dea");
Object.keys(_index188).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index188[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index188[key];
        }
    });
});
var _index189 = require("78a9f3780d7e41b8");
Object.keys(_index189).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index189[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index189[key];
        }
    });
});
var _index190 = require("fec986856a29d9dc");
Object.keys(_index190).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index190[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index190[key];
        }
    });
});
var _index191 = require("e1c425cdf1d55ab9");
Object.keys(_index191).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index191[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index191[key];
        }
    });
});
var _index192 = require("7fcca35af7611279");
Object.keys(_index192).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index192[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index192[key];
        }
    });
});
var _index193 = require("bc1b64da9d20b354");
Object.keys(_index193).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index193[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index193[key];
        }
    });
});
var _index194 = require("5ad4c5c7cdd2014a");
Object.keys(_index194).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index194[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index194[key];
        }
    });
});
var _index195 = require("9ba9585d1f939198");
Object.keys(_index195).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index195[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index195[key];
        }
    });
});
var _index196 = require("8dd9270e196da68a");
Object.keys(_index196).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index196[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index196[key];
        }
    });
});
var _index197 = require("26bfd84a78d86013");
Object.keys(_index197).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index197[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index197[key];
        }
    });
});
var _index198 = require("c7cc615446e6a2b7");
Object.keys(_index198).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index198[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index198[key];
        }
    });
});
var _index199 = require("21a79e95083ca1bc");
Object.keys(_index199).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index199[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index199[key];
        }
    });
});
var _index200 = require("20bbccaad70d3b36");
Object.keys(_index200).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index200[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index200[key];
        }
    });
});
var _index201 = require("1304f66658492899");
Object.keys(_index201).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index201[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index201[key];
        }
    });
});
var _index202 = require("e669135196dbe120");
Object.keys(_index202).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index202[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index202[key];
        }
    });
});
var _index203 = require("96e5466dc057addb");
Object.keys(_index203).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index203[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index203[key];
        }
    });
});
var _index204 = require("6511e433e11f2be4");
Object.keys(_index204).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index204[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index204[key];
        }
    });
});
var _index205 = require("f11dd2e4ce9106eb");
Object.keys(_index205).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index205[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index205[key];
        }
    });
});
var _index206 = require("d813fb5db6a646f6");
Object.keys(_index206).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index206[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index206[key];
        }
    });
});
var _index207 = require("f7134e17cdb98335");
Object.keys(_index207).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index207[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index207[key];
        }
    });
});
var _index208 = require("906e60f1e1a30c6a");
Object.keys(_index208).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index208[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index208[key];
        }
    });
});
var _index209 = require("8e42dbcd2222435d");
Object.keys(_index209).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index209[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index209[key];
        }
    });
});
var _index210 = require("3d08c235c5a0918");
Object.keys(_index210).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index210[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index210[key];
        }
    });
});
var _index211 = require("9ca3f5ebe5cbf2ef");
Object.keys(_index211).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index211[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index211[key];
        }
    });
});
var _index212 = require("9e076e569f3df020");
Object.keys(_index212).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index212[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index212[key];
        }
    });
});
var _index213 = require("997eaaf3105209be");
Object.keys(_index213).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index213[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index213[key];
        }
    });
});
var _index214 = require("5feb840f1bdd9cea");
Object.keys(_index214).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index214[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index214[key];
        }
    });
});
var _index215 = require("4437c29e1991dd08");
Object.keys(_index215).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index215[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index215[key];
        }
    });
});
var _index216 = require("faf9e1483266d8c5");
Object.keys(_index216).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index216[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index216[key];
        }
    });
});
var _index217 = require("894218cc13b5a21e");
Object.keys(_index217).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index217[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index217[key];
        }
    });
});
var _index218 = require("1ab522cddd985641");
Object.keys(_index218).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index218[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index218[key];
        }
    });
});
var _index219 = require("e30c032c55913541");
Object.keys(_index219).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index219[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index219[key];
        }
    });
});
var _index220 = require("d12684f12c863ead");
Object.keys(_index220).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index220[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index220[key];
        }
    });
});
var _index221 = require("e7e3ba1aec4ed01d");
Object.keys(_index221).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index221[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index221[key];
        }
    });
});
var _index222 = require("52ec6c389627d10b");
Object.keys(_index222).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index222[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index222[key];
        }
    });
});
var _index223 = require("8258136654b5f10e");
Object.keys(_index223).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index223[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index223[key];
        }
    });
});
var _index224 = require("b4177823b3e8302d");
Object.keys(_index224).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index224[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index224[key];
        }
    });
});
var _index225 = require("9960d9863cc3055e");
Object.keys(_index225).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index225[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index225[key];
        }
    });
});
var _index226 = require("e3c43ee26dfbcec1");
Object.keys(_index226).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index226[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index226[key];
        }
    });
});
var _index227 = require("73e772cf695ca2bb");
Object.keys(_index227).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index227[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index227[key];
        }
    });
});
var _index228 = require("ef2b183f3fde724e");
Object.keys(_index228).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index228[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index228[key];
        }
    });
});
var _index229 = require("15060203358a57e");
Object.keys(_index229).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index229[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index229[key];
        }
    });
});
var _index230 = require("67ef3ff6e2b76b4c");
Object.keys(_index230).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index230[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index230[key];
        }
    });
});
var _index231 = require("79880219f6de9c2a");
Object.keys(_index231).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index231[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index231[key];
        }
    });
});
var _index232 = require("b9bc07a05bbf8619");
Object.keys(_index232).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index232[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index232[key];
        }
    });
});
var _index233 = require("197104af79cd3bb0");
Object.keys(_index233).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index233[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index233[key];
        }
    });
});
var _index234 = require("30c7b44047d79a40");
Object.keys(_index234).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index234[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index234[key];
        }
    });
});
var _index235 = require("4285b426652f1063");
Object.keys(_index235).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index235[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index235[key];
        }
    });
});
var _index236 = require("11e1793b54905752");
Object.keys(_index236).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index236[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index236[key];
        }
    });
});
var _index237 = require("f5ad81df1b2e131c");
Object.keys(_index237).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index237[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index237[key];
        }
    });
});
var _index238 = require("f4f39753d3eb2c2");
Object.keys(_index238).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index238[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index238[key];
        }
    });
});
var _index239 = require("1562caa8174a1717");
Object.keys(_index239).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index239[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index239[key];
        }
    });
});
var _index240 = require("eea6fed85cd926ef");
Object.keys(_index240).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index240[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index240[key];
        }
    });
});
var _index241 = require("1285ad23358fbca7");
Object.keys(_index241).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index241[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index241[key];
        }
    });
});
var _index242 = require("4dba10434b646fa2");
Object.keys(_index242).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index242[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index242[key];
        }
    });
});
var _index243 = require("9a984f4c52af48f5");
Object.keys(_index243).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index243[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index243[key];
        }
    });
});
var _index244 = require("7e2283ebcb15c962");
Object.keys(_index244).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index244[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index244[key];
        }
    });
});
var _index245 = require("37dd3086962550e1");
Object.keys(_index245).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index245[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index245[key];
        }
    });
});

},{"bb476f479aec785f":"hboah","f3c55fba68737491":"475kI","4e06aa5c5a66ee79":"fL4dR","320136604150f517":"hzidA","9bfe5668fe1279fd":"eZQAV","8a5f15f49ef72b46":"03zTk","ad78344e087d5dce":"7jsut","c4f5940a947b78c":"alxIr","f66bb3ce3ddb423a":"jW81o","cf2ce1177f6f3085":"1jCRu","ff27f5c5e825f426":"6sRN6","9692908b0d3e69f3":"3IQD4","c07b6490d53540ef":"aub5m","33ecb1182a4f61bc":"3tdAJ","eb6c645c302c3877":"g75Mq","96a422b0dac4a654":"5V5JV","41bd5ae6bd5c566d":"fgd9M","1b492f1d94521a5d":"38snE","c13fe358d89ecd81":"hNMdA","ce109cc453253b85":"aJJt5","d42674a0b7bfc434":"jR9nm","fbdc79daa81b87b6":"cJL23","c2badf5a2b5ed454":"dvya7","9fd007b982125b9a":"1uuCg","b695668577e1e7cb":"5Kgvn","6b399f6303d57295":"21Qeg","6a61a2a843b91654":"kWjSX","60b631dcb2f037ca":"iWbGJ","2ed27a2d4a3c6872":"e0VtU","41d2eb1d2381e8a":"fJoFi","c599317e8caae438":"jnteW","3b135e2b9118d1b":"5PiM9","241ef3acf8caa33a":"jkwjj","b76109f782422508":"Z5oWO","30e8f5ceefb905b2":"i3gFX","20867c3d025aff9":"eSams","366b2e75db11947a":"3IvxJ","4582c2f25445c44b":"cy0mL","55c0b2733cdea4d1":"iFe68","74ff6cf808a390db":"g7D5W","81c3475ead0f5b5a":"kwHze","cd10d76a84c94920":"4V6M8","b58b90c359ac3c03":"i1Z2B","bcedf2167bbb0925":"aOi8Z","dd98d2de70848b38":"99wly","e137338bdb2b9c68":"5ViHa","d7d2b7f0a9f716a8":"51lqU","83b612a607feb7af":"deCgd","68777f2c425fee5d":"015Lr","5fe5471d81c79da6":"jtO7f","c2cf95d448d96fcc":"c7ju7","bdeffae0b4080a1e":"fGjDI","b0814d5ce39f52b5":"5qyrI","38c2fd7b5ab40bf0":"etxH3","216f5a0b7789e14":"jOlnb","b3e5b40e0fbb1d44":"kcCWM","e989ece2a2757bd2":"jhz7T","610e7dd2284f5781":"c9wPr","aee49e17aca40e68":"ab76B","ba659abbcc4b60fe":"9sHeD","cc3f9c4f9c787ea6":"3Ot4h","40192b29822dee38":"gmxYT","87e1741b0e0137ea":"7ud3X","d634ea72aef4c86e":"eeV53","665bea9ec101ae55":"aBg6Q","4c745f864149cfd3":"7aKP6","59e6129eee3b016c":"eLZ5b","88f236b6a61f4122":"4IPnK","33f9f2f6d62dc6cc":"03dpp","5e181004291889f8":"7QewX","de24191615ebbb80":"eOZFo","d63e27bbb84952ec":"6ZrQ5","c2012a9ded2a05e4":"4C2Wr","6f70aef5356bf042":"4iRjv","3fea09df6269258d":"3VMIL","cf95b5833c75a113":"4kcMW","198ca05f7c43d0c0":"5yhYa","2a7b78bbeb9ac279":"esFEi","81ea02ff9efa6f86":"lR8Io","129a78908bb8985b":"iS77p","f3c08909629e1f03":"f28wB","f78c22b2c30c3be8":"t2HDN","885f4bbed816b7f7":"fAxdh","72d271579509d098":"kRfdi","dee4e1ab9bdde628":"9d1Pg","571218393678880d":"fNkwc","2835d5a51730a5b3":"jWChc","3741eee35491c087":"gwH0c","e92428f0f5974b5a":"2axfx","8523677aaea2cb20":"jzd1E","22812cfff632fba0":"kio1B","a84bbb9e49250d10":"C2P0L","ce1a93769edb9f74":"cr73f","c29e8ab5eeb7d4c0":"22KCI","417a881dca9183b4":"2lNv1","ed18152d44e54a88":"hP8NA","5ad8718b8ffbdc8":"1zHej","4885f3e1b4265446":"S6fio","21dc31ac6a839f01":"7odmH","ed69673c611caf3c":"fqTdg","9a619fbde7ef4e46":"glolq","5b4ec1d4ed18e2a5":"1t8KQ","ea293604faa53290":"3agDO","b884dd139cae152f":"l9tWS","4c3ab9f336a7d51a":"iZrN8","653e45499ad5f194":"bpzaD","7ac77dc0818e9e94":"6yh4g","9ebf799edec0800d":"4dv0v","e9dba9b7ca1e9602":"2ogSo","457b792b8a5c77fb":"6AV3j","f0cf225cf98c3e8f":"c3MYB","bf7e1cb6a8774a05":"jqhPh","d5aea1feeaf1adbf":"9cexO","48e6ab9d727b91c9":"dyMIP","c79cfd58c43d1fa4":"jzcyi","c728316595f95974":"a6qf1","2caa1112ba1b4508":"9dpYu","9d5c85b5b30fda8b":"5jn07","c46fa1cec26cd22a":"dnyZz","6c707c0047f553ac":"8FUr6","b71a70253afe0556":"8QzC7","e2f24260bdfcee8f":"7FjQf","be2bf5e6a74e2283":"jSzvL","e93db27a94ecd3d3":"jri8s","2aefde7c3914abfe":"bat4E","56b4c8eeea06f054":"7whBx","6449dde00b2f822c":"1d9cq","467aa549567ca48":"fJJ3M","b3c68b9632f5847f":"j88au","af086aa9222e7e7a":"16SmB","e5fdfd39e6fba6e7":"jkjxd","abbe493c9dd29207":"c8KBS","a5aa9970fda729b7":"8cq2h","c06c3eadb4cdf4e3":"bUS6W","cdc71995959dfbfa":"4X4G2","4a9a53e9af17ff6f":"3IALF","59f886b13821bc45":"efMjU","f34570d87ce571d9":"7x5Jl","d33f52ea22bb7fd3":"d4Gae","16489881fdd5bbdf":"clx4b","61b14f40f6d2e486":"bMtqV","9aa6cb940f916d0a":"kwI0m","b7eef910ecfacb18":"7J3Q2","686832f61553fbb3":"2brVA","86e637d32ee5d263":"azgGe","830824c7146bc058":"gbOJY","4f0836001f7c5048":"fo6X0","4d73f01e07ece752":"hvqeH","423b6331ffa3e5d2":"lsZyH","f9514135275b73a4":"8fQcQ","d2f2611a87dcb9e3":"4SSWt","16575fe82c6eaba":"8aCUT","123fc514f9f01a00":"jW013","c86bcf67d45e9435":"lVD0G","4821ca0dd2872a0f":"ccmoZ","85eb0bf7985aa70e":"hFSne","1a237db8f40f7128":"9VAZa","806f1afed957366e":"kU9pl","cad35743a000cb4":"hWZFG","115f361c6735a6c0":"lzjRb","80e94a4a0e176a8":"jMfmL","780d37322e411839":"enzjB","7c96227bbd2ac57c":"jqSZU","a60de3990361ba17":"gP0ns","67038e2323e63ea9":"g79VA","f369bf768ced1809":"inDwO","8df5570f1a67899f":"4Wxgd","8be23c536e634067":"gHdRE","970ab91418234ff6":"5rxTb","bb6bd04224221f0f":"8JvSy","83bc3c8b247c95ac":"7LrAi","1b896d69ba284cd1":"1YO5g","9e825321a9eac99d":"gnebd","e12f32189f9896fa":"29SYN","7679dd63eccebad1":"atse6","a0e3c9611b9bf96c":"02uJh","eb624ca985ff10d8":"j2uXA","b2b165aa2a86d7f0":"gNLjl","caabce449eab8dd":"jsVo7","5d1dd7f0f23ee603":"45sna","647dcd5d2203f0b0":"aTT5c","9cb02b8edba87fd":"gIu7S","c3ed91fb195d875a":"kcslc","2c295112993dd62f":"hsMzT","af1893c4359270d5":"cNh8t","28e3998e2ecca01f":"9mDjN","be774b00f21988d3":"h1oS7","8b434ff09ce37dea":"f0xQR","78a9f3780d7e41b8":"h2o9r","fec986856a29d9dc":"62942","e1c425cdf1d55ab9":"9YdBg","7fcca35af7611279":"1YDXi","bc1b64da9d20b354":"yIjPa","5ad4c5c7cdd2014a":"60YWC","9ba9585d1f939198":"7wRiH","8dd9270e196da68a":"4BYNm","26bfd84a78d86013":"detLY","c7cc615446e6a2b7":"7QCQN","21a79e95083ca1bc":"8KclM","20bbccaad70d3b36":"2QTST","1304f66658492899":"a7APw","e669135196dbe120":"hs8xy","96e5466dc057addb":"6YGAL","6511e433e11f2be4":"R19sp","f11dd2e4ce9106eb":"1EFb6","d813fb5db6a646f6":"7JQAX","f7134e17cdb98335":"5S4Rm","906e60f1e1a30c6a":"1U8F7","8e42dbcd2222435d":"E9tFo","3d08c235c5a0918":"3XINN","9ca3f5ebe5cbf2ef":"kcJtI","9e076e569f3df020":"4hEJG","997eaaf3105209be":"iJAa5","5feb840f1bdd9cea":"lmg97","4437c29e1991dd08":"30rTC","faf9e1483266d8c5":"iF0wL","894218cc13b5a21e":"eTm1l","1ab522cddd985641":"5zVrK","e30c032c55913541":"1cHoB","d12684f12c863ead":"ipmWI","e7e3ba1aec4ed01d":"7GNYs","52ec6c389627d10b":"cMsqy","8258136654b5f10e":"04Svu","b4177823b3e8302d":"dDDvv","9960d9863cc3055e":"diTjA","e3c43ee26dfbcec1":"cnrH3","73e772cf695ca2bb":"dAxue","ef2b183f3fde724e":"bFznd","15060203358a57e":"7oOvu","67ef3ff6e2b76b4c":"3dD7a","79880219f6de9c2a":"jVGj5","b9bc07a05bbf8619":"gF8jx","197104af79cd3bb0":"22JNI","30c7b44047d79a40":"jPKrE","4285b426652f1063":"bQpwZ","11e1793b54905752":"7ieGr","f5ad81df1b2e131c":"cvB1W","f4f39753d3eb2c2":"20wf8","1562caa8174a1717":"jmZa1","eea6fed85cd926ef":"actWA","1285ad23358fbca7":"4DdgS","4dba10434b646fa2":"6D2CR","9a984f4c52af48f5":"gWLQa","7e2283ebcb15c962":"dD3ep","37dd3086962550e1":"di2PR"}],"hboah":[function(require,module,exports) {
"use strict";
exports.add = add;
var _index = require("925991985175af2c");
var _index2 = require("13114f43603b9058");
var _index3 = require("84ab99a1072aba1a");
var _index4 = require("3067be390b31b3e6");
/**
 * @name add
 * @category Common Helpers
 * @summary Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.
 *
 * @description
 * Add the specified years, months, weeks, days, hours, minutes and seconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be added.
 *
 * | Key            | Description                        |
 * |----------------|------------------------------------|
 * | years          | Amount of years to be added        |
 * | months         | Amount of months to be added       |
 * | weeks          | Amount of weeks to be added        |
 * | days           | Amount of days to be added         |
 * | hours          | Amount of hours to be added        |
 * | minutes        | Amount of minutes to be added      |
 * | seconds        | Amount of seconds to be added      |
 *
 * All values default to 0
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add the following duration to 1 September 2014, 10:19:50
 * const result = add(new Date(2014, 8, 1, 10, 19, 50), {
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,\\-7
 *   minutes: 9,
 *   seconds: 30,
 * })
 * //=> Thu Jun 15 2017 15:29:20
 */ function add(date, duration) {
    const { years = 0, months = 0, weeks = 0, days = 0, hours = 0, minutes = 0, seconds = 0 } = duration;
    // Add years and months
    const _date = (0, _index4.toDate)(date);
    const dateWithMonths = months || years ? (0, _index2.addMonths)(_date, months + years * 12) : _date;
    // Add weeks and days
    const dateWithDays = days || weeks ? (0, _index.addDays)(dateWithMonths, days + weeks * 7) : dateWithMonths;
    // Add days, hours, minutes and seconds
    const minutesToAdd = minutes + hours * 60;
    const secondsToAdd = seconds + minutesToAdd * 60;
    const msToAdd = secondsToAdd * 1000;
    const finalDate = (0, _index3.constructFrom)(date, dateWithDays.getTime() + msToAdd);
    return finalDate;
}

},{"925991985175af2c":"fL4dR","13114f43603b9058":"alxIr","84ab99a1072aba1a":"hNMdA","3067be390b31b3e6":"actWA"}],"fL4dR":[function(require,module,exports) {
"use strict";
exports.addDays = addDays;
var _index = require("2cd967972a296ad9");
var _index2 = require("f0e78f9c0d91f156");
/**
 * @name addDays
 * @category Day Helpers
 * @summary Add the specified number of days to the given date.
 *
 * @description
 * Add the specified number of days to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of days to be added.
 *
 * @returns The new date with the days added
 *
 * @example
 * // Add 10 days to 1 September 2014:
 * const result = addDays(new Date(2014, 8, 1), 10)
 * //=> Thu Sep 11 2014 00:00:00
 */ function addDays(date, amount) {
    const _date = (0, _index.toDate)(date);
    if (isNaN(amount)) return (0, _index2.constructFrom)(date, NaN);
    if (!amount) // If 0 days, no-op to avoid changing times in the hour before end of DST
    return _date;
    _date.setDate(_date.getDate() + amount);
    return _date;
}

},{"2cd967972a296ad9":"actWA","f0e78f9c0d91f156":"hNMdA"}],"actWA":[function(require,module,exports) {
"use strict";
exports.toDate = toDate;
/**
 * @name toDate
 * @category Common Helpers
 * @summary Convert the given argument to an instance of Date.
 *
 * @description
 * Convert the given argument to an instance of Date.
 *
 * If the argument is an instance of Date, the function returns its clone.
 *
 * If the argument is a number, it is treated as a timestamp.
 *
 * If the argument is none of the above, the function returns Invalid Date.
 *
 * **Note**: *all* Date arguments passed to any *date-fns* function is processed by `toDate`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param argument - The value to convert
 *
 * @returns The parsed date in the local time zone
 *
 * @example
 * // Clone the date:
 * const result = toDate(new Date(2014, 1, 11, 11, 30, 30))
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert the timestamp to date:
 * const result = toDate(1392098430000)
 * //=> Tue Feb 11 2014 11:30:30
 */ function toDate(argument) {
    const argStr = Object.prototype.toString.call(argument);
    // Clone the date
    if (argument instanceof Date || typeof argument === "object" && argStr === "[object Date]") // Prevent the date to lose the milliseconds when passed to new Date() in IE10
    return new argument.constructor(+argument);
    else if (typeof argument === "number" || argStr === "[object Number]" || typeof argument === "string" || argStr === "[object String]") // TODO: Can we get rid of as?
    return new Date(argument);
    else // TODO: Can we get rid of as?
    return new Date(NaN);
}

},{}],"hNMdA":[function(require,module,exports) {
"use strict";
exports.constructFrom = constructFrom;
/**
 * @name constructFrom
 * @category Generic Helpers
 * @summary Constructs a date using the reference date and the value
 *
 * @description
 * The function constructs a new date using the constructor from the reference
 * date and the given value. It helps to build generic functions that accept
 * date extensions.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The reference date to take constructor from
 * @param value - The value to create the date
 *
 * @returns Date initialized using the given date and value
 *
 * @example
 * import { constructFrom } from 'date-fns'
 *
 * // A function that clones a date preserving the original type
 * function cloneDate<DateType extends Date(date: DateType): DateType {
 *   return constructFrom(
 *     date, // Use contrustor from the given date
 *     date.getTime() // Use the date value to create a new date
 *   )
 * }
 */ function constructFrom(date, value) {
    if (date instanceof Date) return new date.constructor(value);
    else return new Date(value);
}

},{}],"alxIr":[function(require,module,exports) {
"use strict";
exports.addMonths = addMonths;
var _index = require("5742eeee77c6c4dd");
var _index2 = require("79294aad06ee37dd");
/**
 * @name addMonths
 * @category Month Helpers
 * @summary Add the specified number of months to the given date.
 *
 * @description
 * Add the specified number of months to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of months to be added.
 *
 * @returns The new date with the months added
 *
 * @example
 * // Add 5 months to 1 September 2014:
 * const result = addMonths(new Date(2014, 8, 1), 5)
 * //=> Sun Feb 01 2015 00:00:00
 *
 * // Add one month to 30 January 2023:
 * const result = addMonths(new Date(2023, 0, 30), 1)
 * //=> Tue Feb 28 2023 00:00:00
 */ function addMonths(date, amount) {
    const _date = (0, _index.toDate)(date);
    if (isNaN(amount)) return (0, _index2.constructFrom)(date, NaN);
    if (!amount) // If 0 months, no-op to avoid changing times in the hour before end of DST
    return _date;
    const dayOfMonth = _date.getDate();
    // The JS Date object supports date math by accepting out-of-bounds values for
    // month, day, etc. For example, new Date(2020, 0, 0) returns 31 Dec 2019 and
    // new Date(2020, 13, 1) returns 1 Feb 2021.  This is *almost* the behavior we
    // want except that dates will wrap around the end of a month, meaning that
    // new Date(2020, 13, 31) will return 3 Mar 2021 not 28 Feb 2021 as desired. So
    // we'll default to the end of the desired month by adding 1 to the desired
    // month and using a date of 0 to back up one day to the end of the desired
    // month.
    const endOfDesiredMonth = (0, _index2.constructFrom)(date, _date.getTime());
    endOfDesiredMonth.setMonth(_date.getMonth() + amount + 1, 0);
    const daysInMonth = endOfDesiredMonth.getDate();
    if (dayOfMonth >= daysInMonth) // If we're already at the end of the month, then this is the correct date
    // and we're done.
    return endOfDesiredMonth;
    else {
        // Otherwise, we now know that setting the original day-of-month value won't
        // cause an overflow, so set the desired day-of-month. Note that we can't
        // just set the date of `endOfDesiredMonth` because that object may have had
        // its time changed in the unusual case where where a DST transition was on
        // the last day of the month and its local time was in the hour skipped or
        // repeated next to a DST transition.  So we use `date` instead which is
        // guaranteed to still have the original time.
        _date.setFullYear(endOfDesiredMonth.getFullYear(), endOfDesiredMonth.getMonth(), dayOfMonth);
        return _date;
    }
}

},{"5742eeee77c6c4dd":"actWA","79294aad06ee37dd":"hNMdA"}],"475kI":[function(require,module,exports) {
"use strict";
exports.addBusinessDays = addBusinessDays;
var _index = require("c4290ece85b498c3");
var _index2 = require("db98b25fdeb6f59b");
var _index3 = require("e08f244f63c0b506");
var _index4 = require("a4930da9d9021f2e");
var _index5 = require("475b8d7f409bcfa3");
/**
 * @name addBusinessDays
 * @category Date Extension Helpers
 * @summary Add the specified number of business days (mon - fri) to the given date.
 *
 * @description
 * Add the specified number of business days (mon - fri) to the given date, ignoring weekends.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of business days to be added.
 *
 * @returns The new date with the business days added
 *
 * @example
 * // Add 10 business days to 1 September 2014:
 * const result = addBusinessDays(new Date(2014, 8, 1), 10)
 * //=> Mon Sep 15 2014 00:00:00 (skipped weekend days)
 */ function addBusinessDays(date, amount) {
    const _date = (0, _index5.toDate)(date);
    const startedOnWeekend = (0, _index4.isWeekend)(_date);
    if (isNaN(amount)) return (0, _index.constructFrom)(date, NaN);
    const hours = _date.getHours();
    const sign = amount < 0 ? -1 : 1;
    const fullWeeks = Math.trunc(amount / 5);
    _date.setDate(_date.getDate() + fullWeeks * 7);
    // Get remaining days not part of a full week
    let restDays = Math.abs(amount % 5);
    // Loops over remaining days
    while(restDays > 0){
        _date.setDate(_date.getDate() + sign);
        if (!(0, _index4.isWeekend)(_date)) restDays -= 1;
    }
    // If the date is a weekend day and we reduce a dividable of
    // 5 from it, we land on a weekend date.
    // To counter this, we add days accordingly to land on the next business day
    if (startedOnWeekend && (0, _index4.isWeekend)(_date) && amount !== 0) {
        // If we're reducing days, we want to add days until we land on a weekday
        // If we're adding days we want to reduce days until we land on a weekday
        if ((0, _index2.isSaturday)(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 2 : -1));
        if ((0, _index3.isSunday)(_date)) _date.setDate(_date.getDate() + (sign < 0 ? 1 : -2));
    }
    // Restore hours to avoid DST lag
    _date.setHours(hours);
    return _date;
}

},{"c4290ece85b498c3":"hNMdA","db98b25fdeb6f59b":"c8KBS","e08f244f63c0b506":"8cq2h","a4930da9d9021f2e":"hvqeH","475b8d7f409bcfa3":"actWA"}],"c8KBS":[function(require,module,exports) {
"use strict";
exports.isSaturday = isSaturday;
var _index = require("e530b4cdc312cd61");
/**
 * @name isSaturday
 * @category Weekday Helpers
 * @summary Is the given date Saturday?
 *
 * @description
 * Is the given date Saturday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is Saturday
 *
 * @example
 * // Is 27 September 2014 Saturday?
 * const result = isSaturday(new Date(2014, 8, 27))
 * //=> true
 */ function isSaturday(date) {
    return (0, _index.toDate)(date).getDay() === 6;
}

},{"e530b4cdc312cd61":"actWA"}],"8cq2h":[function(require,module,exports) {
"use strict";
exports.isSunday = isSunday;
var _index = require("ae830739b06efde4");
/**
 * @name isSunday
 * @category Weekday Helpers
 * @summary Is the given date Sunday?
 *
 * @description
 * Is the given date Sunday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is Sunday
 *
 * @example
 * // Is 21 September 2014 Sunday?
 * const result = isSunday(new Date(2014, 8, 21))
 * //=> true
 */ function isSunday(date) {
    return (0, _index.toDate)(date).getDay() === 0;
}

},{"ae830739b06efde4":"actWA"}],"hvqeH":[function(require,module,exports) {
"use strict";
exports.isWeekend = isWeekend;
var _index = require("c698b70ee71dfca6");
/**
 * @name isWeekend
 * @category Weekday Helpers
 * @summary Does the given date fall on a weekend?
 *
 * @description
 * Does the given date fall on a weekend?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date falls on a weekend
 *
 * @example
 * // Does 5 October 2014 fall on a weekend?
 * const result = isWeekend(new Date(2014, 9, 5))
 * //=> true
 */ function isWeekend(date) {
    const day = (0, _index.toDate)(date).getDay();
    return day === 0 || day === 6;
}

},{"c698b70ee71dfca6":"actWA"}],"hzidA":[function(require,module,exports) {
"use strict";
exports.addHours = addHours;
var _index = require("1def4ce2cbf2b5a4");
var _index2 = require("c47db39c292847b5");
/**
 * @name addHours
 * @category Hour Helpers
 * @summary Add the specified number of hours to the given date.
 *
 * @description
 * Add the specified number of hours to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of hours to be added.
 *
 * @returns The new date with the hours added
 *
 * @example
 * // Add 2 hours to 10 July 2014 23:00:00:
 * const result = addHours(new Date(2014, 6, 10, 23, 0), 2)
 * //=> Fri Jul 11 2014 01:00:00
 */ function addHours(date, amount) {
    return (0, _index.addMilliseconds)(date, amount * _index2.millisecondsInHour);
}

},{"1def4ce2cbf2b5a4":"03zTk","c47db39c292847b5":"1vXXw"}],"03zTk":[function(require,module,exports) {
"use strict";
exports.addMilliseconds = addMilliseconds;
var _index = require("701ad4371d122310");
var _index2 = require("fd3355012d608a81");
/**
 * @name addMilliseconds
 * @category Millisecond Helpers
 * @summary Add the specified number of milliseconds to the given date.
 *
 * @description
 * Add the specified number of milliseconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of milliseconds to be added.
 *
 * @returns The new date with the milliseconds added
 *
 * @example
 * // Add 750 milliseconds to 10 July 2014 12:45:30.000:
 * const result = addMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:30.750
 */ function addMilliseconds(date, amount) {
    const timestamp = +(0, _index.toDate)(date);
    return (0, _index2.constructFrom)(date, timestamp + amount);
}

},{"701ad4371d122310":"actWA","fd3355012d608a81":"hNMdA"}],"1vXXw":[function(require,module,exports) {
"use strict";
exports.secondsInYear = exports.secondsInWeek = exports.secondsInQuarter = exports.secondsInMonth = exports.secondsInMinute = exports.secondsInHour = exports.secondsInDay = exports.quartersInYear = exports.monthsInYear = exports.monthsInQuarter = exports.minutesInYear = exports.minutesInMonth = exports.minutesInHour = exports.minutesInDay = exports.minTime = exports.millisecondsInWeek = exports.millisecondsInSecond = exports.millisecondsInMinute = exports.millisecondsInHour = exports.millisecondsInDay = exports.maxTime = exports.daysInYear = exports.daysInWeek = void 0; /**
 * @module constants
 * @summary Useful constants
 * @description
 * Collection of useful date constants.
 *
 * The constants could be imported from `date-fns/constants`:
 *
 * ```ts
 * import { maxTime, minTime } from "date-fns/constants";
 *
 * function isAllowedTime(time) {
 *   return time <= maxTime && time >= minTime;
 * }
 * ```
 */ 
/**
 * @constant
 * @name daysInWeek
 * @summary Days in 1 week.
 */ const daysInWeek = exports.daysInWeek = 7;
/**
 * @constant
 * @name daysInYear
 * @summary Days in 1 year.
 *
 * @description
 * How many days in a year.
 *
 * One years equals 365.2425 days according to the formula:
 *
 * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.
 * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days
 */ const daysInYear = exports.daysInYear = 365.2425;
/**
 * @constant
 * @name maxTime
 * @summary Maximum allowed time.
 *
 * @example
 * import { maxTime } from "date-fns/constants";
 *
 * const isValid = 8640000000000001 <= maxTime;
 * //=> false
 *
 * new Date(8640000000000001);
 * //=> Invalid Date
 */ const maxTime = exports.maxTime = Math.pow(10, 8) * 86400000;
/**
 * @constant
 * @name minTime
 * @summary Minimum allowed time.
 *
 * @example
 * import { minTime } from "date-fns/constants";
 *
 * const isValid = -8640000000000001 >= minTime;
 * //=> false
 *
 * new Date(-8640000000000001)
 * //=> Invalid Date
 */ const minTime = exports.minTime = -maxTime;
/**
 * @constant
 * @name millisecondsInWeek
 * @summary Milliseconds in 1 week.
 */ const millisecondsInWeek = exports.millisecondsInWeek = 604800000;
/**
 * @constant
 * @name millisecondsInDay
 * @summary Milliseconds in 1 day.
 */ const millisecondsInDay = exports.millisecondsInDay = 86400000;
/**
 * @constant
 * @name millisecondsInMinute
 * @summary Milliseconds in 1 minute
 */ const millisecondsInMinute = exports.millisecondsInMinute = 60000;
/**
 * @constant
 * @name millisecondsInHour
 * @summary Milliseconds in 1 hour
 */ const millisecondsInHour = exports.millisecondsInHour = 3600000;
/**
 * @constant
 * @name millisecondsInSecond
 * @summary Milliseconds in 1 second
 */ const millisecondsInSecond = exports.millisecondsInSecond = 1000;
/**
 * @constant
 * @name minutesInYear
 * @summary Minutes in 1 year.
 */ const minutesInYear = exports.minutesInYear = 525600;
/**
 * @constant
 * @name minutesInMonth
 * @summary Minutes in 1 month.
 */ const minutesInMonth = exports.minutesInMonth = 43200;
/**
 * @constant
 * @name minutesInDay
 * @summary Minutes in 1 day.
 */ const minutesInDay = exports.minutesInDay = 1440;
/**
 * @constant
 * @name minutesInHour
 * @summary Minutes in 1 hour.
 */ const minutesInHour = exports.minutesInHour = 60;
/**
 * @constant
 * @name monthsInQuarter
 * @summary Months in 1 quarter.
 */ const monthsInQuarter = exports.monthsInQuarter = 3;
/**
 * @constant
 * @name monthsInYear
 * @summary Months in 1 year.
 */ const monthsInYear = exports.monthsInYear = 12;
/**
 * @constant
 * @name quartersInYear
 * @summary Quarters in 1 year
 */ const quartersInYear = exports.quartersInYear = 4;
/**
 * @constant
 * @name secondsInHour
 * @summary Seconds in 1 hour.
 */ const secondsInHour = exports.secondsInHour = 3600;
/**
 * @constant
 * @name secondsInMinute
 * @summary Seconds in 1 minute.
 */ const secondsInMinute = exports.secondsInMinute = 60;
/**
 * @constant
 * @name secondsInDay
 * @summary Seconds in 1 day.
 */ const secondsInDay = exports.secondsInDay = secondsInHour * 24;
/**
 * @constant
 * @name secondsInWeek
 * @summary Seconds in 1 week.
 */ const secondsInWeek = exports.secondsInWeek = secondsInDay * 7;
/**
 * @constant
 * @name secondsInYear
 * @summary Seconds in 1 year.
 */ const secondsInYear = exports.secondsInYear = secondsInDay * daysInYear;
/**
 * @constant
 * @name secondsInMonth
 * @summary Seconds in 1 month
 */ const secondsInMonth = exports.secondsInMonth = secondsInYear / 12;
/**
 * @constant
 * @name secondsInQuarter
 * @summary Seconds in 1 quarter.
 */ const secondsInQuarter = exports.secondsInQuarter = secondsInMonth * 3;

},{}],"eZQAV":[function(require,module,exports) {
"use strict";
exports.addISOWeekYears = addISOWeekYears;
var _index = require("240e5aec3c416c15");
var _index2 = require("39a8cd644c826899");
/**
 * @name addISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Add the specified number of ISO week-numbering years to the given date.
 *
 * @description
 * Add the specified number of ISO week-numbering years to the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of ISO week-numbering years to be added.
 *
 * @returns The new date with the ISO week-numbering years added
 *
 * @example
 * // Add 5 ISO week-numbering years to 2 July 2010:
 * const result = addISOWeekYears(new Date(2010, 6, 2), 5)
 * //=> Fri Jn 26 2015 00:00:00
 */ function addISOWeekYears(date, amount) {
    return (0, _index2.setISOWeekYear)(date, (0, _index.getISOWeekYear)(date) + amount);
}

},{"240e5aec3c416c15":"jWChc","39a8cd644c826899":"R19sp"}],"jWChc":[function(require,module,exports) {
"use strict";
exports.getISOWeekYear = getISOWeekYear;
var _index = require("931ddb1ed96783e");
var _index2 = require("657e416c92daae6d");
var _index3 = require("df657aff16d6d4b4");
/**
 * @name getISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the ISO week-numbering year of the given date.
 *
 * @description
 * Get the ISO week-numbering year of the given date,
 * which always starts 3 days before the year's first Thursday.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The ISO week-numbering year
 *
 * @example
 * // Which ISO-week numbering year is 2 January 2005?
 * const result = getISOWeekYear(new Date(2005, 0, 2))
 * //=> 2004
 */ function getISOWeekYear(date) {
    const _date = (0, _index3.toDate)(date);
    const year = _date.getFullYear();
    const fourthOfJanuaryOfNextYear = (0, _index.constructFrom)(date, 0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    const startOfNextYear = (0, _index2.startOfISOWeek)(fourthOfJanuaryOfNextYear);
    const fourthOfJanuaryOfThisYear = (0, _index.constructFrom)(date, 0);
    fourthOfJanuaryOfThisYear.setFullYear(year, 0, 4);
    fourthOfJanuaryOfThisYear.setHours(0, 0, 0, 0);
    const startOfThisYear = (0, _index2.startOfISOWeek)(fourthOfJanuaryOfThisYear);
    if (_date.getTime() >= startOfNextYear.getTime()) return year + 1;
    else if (_date.getTime() >= startOfThisYear.getTime()) return year;
    else return year - 1;
}

},{"931ddb1ed96783e":"hNMdA","657e416c92daae6d":"iF0wL","df657aff16d6d4b4":"actWA"}],"iF0wL":[function(require,module,exports) {
"use strict";
exports.startOfISOWeek = startOfISOWeek;
var _index = require("af053f1a0e32a5c7");
/**
 * @name startOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the start of an ISO week for the given date.
 *
 * @description
 * Return the start of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of an ISO week
 *
 * @example
 * // The start of an ISO week for 2 September 2014 11:55:00:
 * const result = startOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */ function startOfISOWeek(date) {
    return (0, _index.startOfWeek)(date, {
        weekStartsOn: 1
    });
}

},{"af053f1a0e32a5c7":"dDDvv"}],"dDDvv":[function(require,module,exports) {
"use strict";
exports.startOfWeek = startOfWeek;
var _index = require("55694623f1e86518");
var _index2 = require("95f2b89022ff2bba");
/**
 * The {@link startOfWeek} function options.
 */ /**
 * @name startOfWeek
 * @category Week Helpers
 * @summary Return the start of a week for the given date.
 *
 * @description
 * Return the start of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of a week
 *
 * @example
 * // The start of a week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the start of the week for 2 September 2014 11:55:00:
 * const result = startOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Mon Sep 01 2014 00:00:00
 */ function startOfWeek(date, options) {
    const defaultOptions = (0, _index2.getDefaultOptions)();
    const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;
    const _date = (0, _index.toDate)(date);
    const day = _date.getDay();
    const diff = (day < weekStartsOn ? 7 : 0) + day - weekStartsOn;
    _date.setDate(_date.getDate() - diff);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"55694623f1e86518":"actWA","95f2b89022ff2bba":"98fau"}],"98fau":[function(require,module,exports) {
"use strict";
exports.getDefaultOptions = getDefaultOptions;
exports.setDefaultOptions = setDefaultOptions;
let defaultOptions = {};
function getDefaultOptions() {
    return defaultOptions;
}
function setDefaultOptions(newOptions) {
    defaultOptions = newOptions;
}

},{}],"R19sp":[function(require,module,exports) {
"use strict";
exports.setISOWeekYear = setISOWeekYear;
var _index = require("b4cc3bf7048ec0f8");
var _index2 = require("63c89f9c4541591a");
var _index3 = require("1aea00dad6bb8db7");
var _index4 = require("e36603a772a1edcb");
/**
 * @name setISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Set the ISO week-numbering year to the given date.
 *
 * @description
 * Set the ISO week-numbering year to the given date,
 * saving the week number and the weekday number.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param weekYear - The ISO week-numbering year of the new date
 *
 * @returns The new date with the ISO week-numbering year set
 *
 * @example
 * // Set ISO week-numbering year 2007 to 29 December 2008:
 * const result = setISOWeekYear(new Date(2008, 11, 29), 2007)
 * //=> Mon Jan 01 2007 00:00:00
 */ function setISOWeekYear(date, weekYear) {
    let _date = (0, _index4.toDate)(date);
    const diff = (0, _index2.differenceInCalendarDays)(_date, (0, _index3.startOfISOWeekYear)(_date));
    const fourthOfJanuary = (0, _index.constructFrom)(date, 0);
    fourthOfJanuary.setFullYear(weekYear, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    _date = (0, _index3.startOfISOWeekYear)(fourthOfJanuary);
    _date.setDate(_date.getDate() + diff);
    return _date;
}

},{"b4cc3bf7048ec0f8":"hNMdA","63c89f9c4541591a":"dvya7","1aea00dad6bb8db7":"eTm1l","e36603a772a1edcb":"actWA"}],"dvya7":[function(require,module,exports) {
"use strict";
exports.differenceInCalendarDays = differenceInCalendarDays;
var _index = require("1d847bb4e92f7cd2");
var _index2 = require("7c9c2b23ec3dd965");
var _index3 = require("b0f56dce4f1af165");
/**
 * @name differenceInCalendarDays
 * @category Day Helpers
 * @summary Get the number of calendar days between the given dates.
 *
 * @description
 * Get the number of calendar days between the given dates. This means that the times are removed
 * from the dates and then the difference in days is calculated.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of calendar days
 *
 * @example
 * // How many calendar days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInCalendarDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 366
 * // How many calendar days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInCalendarDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 1
 */ function differenceInCalendarDays(dateLeft, dateRight) {
    const startOfDayLeft = (0, _index2.startOfDay)(dateLeft);
    const startOfDayRight = (0, _index2.startOfDay)(dateRight);
    const timestampLeft = +startOfDayLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayLeft);
    const timestampRight = +startOfDayRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfDayRight);
    // Round the number of days to the nearest integer because the number of
    // milliseconds in a day is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round((timestampLeft - timestampRight) / _index.millisecondsInDay);
}

},{"1d847bb4e92f7cd2":"1vXXw","7c9c2b23ec3dd965":"iJAa5","b0f56dce4f1af165":"ke6Rl"}],"iJAa5":[function(require,module,exports) {
"use strict";
exports.startOfDay = startOfDay;
var _index = require("b2c84f6728c789fd");
/**
 * @name startOfDay
 * @category Day Helpers
 * @summary Return the start of a day for the given date.
 *
 * @description
 * Return the start of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a day
 *
 * @example
 * // The start of a day for 2 September 2014 11:55:00:
 * const result = startOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 00:00:00
 */ function startOfDay(date) {
    const _date = (0, _index.toDate)(date);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"b2c84f6728c789fd":"actWA"}],"ke6Rl":[function(require,module,exports) {
"use strict";
exports.getTimezoneOffsetInMilliseconds = getTimezoneOffsetInMilliseconds;
var _index = require("dd2f8ad2d4e94e96");
/**
 * Google Chrome as of 67.0.3396.87 introduced timezones with offset that includes seconds.
 * They usually appear for dates that denote time before the timezones were introduced
 * (e.g. for 'Europe/Prague' timezone the offset is GMT+00:57:44 before 1 October 1891
 * and GMT+01:00:00 after that date)
 *
 * Date#getTimezoneOffset returns the offset in minutes and would return 57 for the example above,
 * which would lead to incorrect calculations.
 *
 * This function returns the timezone offset in milliseconds that takes seconds in account.
 */ function getTimezoneOffsetInMilliseconds(date) {
    const _date = (0, _index.toDate)(date);
    const utcDate = new Date(Date.UTC(_date.getFullYear(), _date.getMonth(), _date.getDate(), _date.getHours(), _date.getMinutes(), _date.getSeconds(), _date.getMilliseconds()));
    utcDate.setUTCFullYear(_date.getFullYear());
    return +date - +utcDate;
}

},{"dd2f8ad2d4e94e96":"actWA"}],"eTm1l":[function(require,module,exports) {
"use strict";
exports.startOfISOWeekYear = startOfISOWeekYear;
var _index = require("a94c8ed604a9d595");
var _index2 = require("2ab3fd1ace85020d");
var _index3 = require("3de294871cd3bca4");
/**
 * @name startOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the start of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the start of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of an ISO week-numbering year
 *
 * @example
 * // The start of an ISO week-numbering year for 2 July 2005:
 * const result = startOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Mon Jan 03 2005 00:00:00
 */ function startOfISOWeekYear(date) {
    const year = (0, _index.getISOWeekYear)(date);
    const fourthOfJanuary = (0, _index3.constructFrom)(date, 0);
    fourthOfJanuary.setFullYear(year, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    return (0, _index2.startOfISOWeek)(fourthOfJanuary);
}

},{"a94c8ed604a9d595":"jWChc","2ab3fd1ace85020d":"iF0wL","3de294871cd3bca4":"hNMdA"}],"7jsut":[function(require,module,exports) {
"use strict";
exports.addMinutes = addMinutes;
var _index = require("66ff9833f2a7265d");
var _index2 = require("1657f0b8a8702e8e");
/**
 * @name addMinutes
 * @category Minute Helpers
 * @summary Add the specified number of minutes to the given date.
 *
 * @description
 * Add the specified number of minutes to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of minutes to be added.
 *
 * @returns The new date with the minutes added
 *
 * @example
 * // Add 30 minutes to 10 July 2014 12:00:00:
 * const result = addMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 12:30:00
 */ function addMinutes(date, amount) {
    return (0, _index.addMilliseconds)(date, amount * _index2.millisecondsInMinute);
}

},{"66ff9833f2a7265d":"03zTk","1657f0b8a8702e8e":"1vXXw"}],"jW81o":[function(require,module,exports) {
"use strict";
exports.addQuarters = addQuarters;
var _index = require("26f66aa2af34ef45");
/**
 * @name addQuarters
 * @category Quarter Helpers
 * @summary Add the specified number of year quarters to the given date.
 *
 * @description
 * Add the specified number of year quarters to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of quarters to be added.
 *
 * @returns The new date with the quarters added
 *
 * @example
 * // Add 1 quarter to 1 September 2014:
 * const result = addQuarters(new Date(2014, 8, 1), 1)
 * //=> Mon Dec 01 2014 00:00:00
 */ function addQuarters(date, amount) {
    const months = amount * 3;
    return (0, _index.addMonths)(date, months);
}

},{"26f66aa2af34ef45":"alxIr"}],"1jCRu":[function(require,module,exports) {
"use strict";
exports.addSeconds = addSeconds;
var _index = require("7442afe167e053cc");
/**
 * @name addSeconds
 * @category Second Helpers
 * @summary Add the specified number of seconds to the given date.
 *
 * @description
 * Add the specified number of seconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of seconds to be added.
 *
 * @returns The new date with the seconds added
 *
 * @example
 * // Add 30 seconds to 10 July 2014 12:45:00:
 * const result = addSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:45:30
 */ function addSeconds(date, amount) {
    return (0, _index.addMilliseconds)(date, amount * 1000);
}

},{"7442afe167e053cc":"03zTk"}],"6sRN6":[function(require,module,exports) {
"use strict";
exports.addWeeks = addWeeks;
var _index = require("bdd905550c7c5ab9");
/**
 * @name addWeeks
 * @category Week Helpers
 * @summary Add the specified number of weeks to the given date.
 *
 * @description
 * Add the specified number of week to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of weeks to be added.
 *
 * @returns The new date with the weeks added
 *
 * @example
 * // Add 4 weeks to 1 September 2014:
 * const result = addWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Sep 29 2014 00:00:00
 */ function addWeeks(date, amount) {
    const days = amount * 7;
    return (0, _index.addDays)(date, days);
}

},{"bdd905550c7c5ab9":"fL4dR"}],"3IQD4":[function(require,module,exports) {
"use strict";
exports.addYears = addYears;
var _index = require("23e70a355800add9");
/**
 * @name addYears
 * @category Year Helpers
 * @summary Add the specified number of years to the given date.
 *
 * @description
 * Add the specified number of years to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of years to be added.
 *
 * @returns The new date with the years added
 *
 * @example
 * // Add 5 years to 1 September 2014:
 * const result = addYears(new Date(2014, 8, 1), 5)
 * //=> Sun Sep 01 2019 00:00:00
 */ function addYears(date, amount) {
    return (0, _index.addMonths)(date, amount * 12);
}

},{"23e70a355800add9":"alxIr"}],"aub5m":[function(require,module,exports) {
"use strict";
exports.areIntervalsOverlapping = areIntervalsOverlapping;
var _index = require("2d76e30bb886efa");
/**
 * The {@link areIntervalsOverlapping} function options.
 */ /**
 * @name areIntervalsOverlapping
 * @category Interval Helpers
 * @summary Is the given time interval overlapping with another time interval?
 *
 * @description
 * Is the given time interval overlapping with another time interval? Adjacent intervals do not count as overlapping unless `inclusive` is set to `true`.
 *
 * @param intervalLeft - The first interval to compare.
 * @param intervalRight - The second interval to compare.
 * @param options - The object with options
 *
 * @returns Whether the time intervals are overlapping
 *
 * @example
 * // For overlapping time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
 * )
 * //=> true
 *
 * @example
 * // For non-overlapping time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
 * )
 * //=> false
 *
 * @example
 * // For adjacent time intervals:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 30) }
 * )
 * //=> false
 *
 * @example
 * // Using the inclusive option:
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) }
 * )
 * //=> false
 *
 * @example
 * areIntervalsOverlapping(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 20), end: new Date(2014, 0, 24) },
 *   { inclusive: true }
 * )
 * //=> true
 */ function areIntervalsOverlapping(intervalLeft, intervalRight, options) {
    const [leftStartTime, leftEndTime] = [
        +(0, _index.toDate)(intervalLeft.start),
        +(0, _index.toDate)(intervalLeft.end)
    ].sort((a, b)=>a - b);
    const [rightStartTime, rightEndTime] = [
        +(0, _index.toDate)(intervalRight.start),
        +(0, _index.toDate)(intervalRight.end)
    ].sort((a, b)=>a - b);
    if (options?.inclusive) return leftStartTime <= rightEndTime && rightStartTime <= leftEndTime;
    return leftStartTime < rightEndTime && rightStartTime < leftEndTime;
}

},{"2d76e30bb886efa":"actWA"}],"3tdAJ":[function(require,module,exports) {
"use strict";
exports.clamp = clamp;
var _index = require("8d0762524d7d24c3");
var _index2 = require("9daecf252ffff30");
/**
 * @name clamp
 * @category Interval Helpers
 * @summary Return a date bounded by the start and the end of the given interval
 *
 * @description
 * Clamps a date to the lower bound with the start of the interval and the upper
 * bound with the end of the interval.
 *
 * - When the date is less than the start of the interval, the start is returned.
 * - When the date is greater than the end of the interval, the end is returned.
 * - Otherwise the date is returned.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be bounded
 * @param interval - The interval to bound to
 *
 * @returns The date bounded by the start and the end of the interval
 *
 * @example
 * // What is Mar, 21, 2021 bounded to an interval starting at Mar, 22, 2021 and ending at Apr, 01, 2021
 * const result = clamp(new Date(2021, 2, 21), {
 *   start: new Date(2021, 2, 22),
 *   end: new Date(2021, 3, 1),
 * })
 * //=> Mon Mar 22 2021 00:00:00
 */ function clamp(date, interval) {
    return (0, _index2.min)([
        (0, _index.max)([
            date,
            interval.start
        ]),
        interval.end
    ]);
}

},{"8d0762524d7d24c3":"hWZFG","9daecf252ffff30":"gP0ns"}],"hWZFG":[function(require,module,exports) {
"use strict";
exports.max = max;
var _index = require("f9ba4fa55e935c4f");
/**
 * @name max
 * @category Common Helpers
 * @summary Return the latest of the given dates.
 *
 * @description
 * Return the latest of the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dates - The dates to compare
 *
 * @returns The latest of the dates
 *
 * @example
 * // Which of these dates is the latest?
 * const result = max([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Sun Jul 02 1995 00:00:00
 */ function max(dates) {
    let result;
    dates.forEach(function(dirtyDate) {
        const currentDate = (0, _index.toDate)(dirtyDate);
        if (result === undefined || result < currentDate || isNaN(Number(currentDate))) result = currentDate;
    });
    return result || new Date(NaN);
}

},{"f9ba4fa55e935c4f":"actWA"}],"gP0ns":[function(require,module,exports) {
"use strict";
exports.min = min;
var _index = require("940af7ed75f79352");
/**
 * @name min
 * @category Common Helpers
 * @summary Returns the earliest of the given dates.
 *
 * @description
 * Returns the earliest of the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dates - The dates to compare
 *
 * @returns The earliest of the dates
 *
 * @example
 * // Which of these dates is the earliest?
 * const result = min([
 *   new Date(1989, 6, 10),
 *   new Date(1987, 1, 11),
 *   new Date(1995, 6, 2),
 *   new Date(1990, 0, 1)
 * ])
 * //=> Wed Feb 11 1987 00:00:00
 */ function min(dates) {
    let result;
    dates.forEach((dirtyDate)=>{
        const date = (0, _index.toDate)(dirtyDate);
        if (!result || result > date || isNaN(+date)) result = date;
    });
    return result || new Date(NaN);
}

},{"940af7ed75f79352":"actWA"}],"g75Mq":[function(require,module,exports) {
"use strict";
exports.closestIndexTo = closestIndexTo;
var _index = require("3196192380086bd1");
/**
 * @name closestIndexTo
 * @category Common Helpers
 * @summary Return an index of the closest date from the array comparing to the given date.
 *
 * @description
 * Return an index of the closest date from the array comparing to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateToCompare - The date to compare with
 * @param dates - The array to search
 *
 * @returns An index of the date closest to the given date or undefined if no valid value is given
 *
 * @example
 * // Which date is closer to 6 September 2015?
 * const dateToCompare = new Date(2015, 8, 6)
 * const datesArray = [
 *   new Date(2015, 0, 1),
 *   new Date(2016, 0, 1),
 *   new Date(2017, 0, 1)
 * ]
 * const result = closestIndexTo(dateToCompare, datesArray)
 * //=> 1
 */ function closestIndexTo(dateToCompare, dates) {
    const date = (0, _index.toDate)(dateToCompare);
    if (isNaN(Number(date))) return NaN;
    const timeToCompare = date.getTime();
    let result;
    let minDistance;
    dates.forEach(function(dirtyDate, index) {
        const currentDate = (0, _index.toDate)(dirtyDate);
        if (isNaN(Number(currentDate))) {
            result = NaN;
            minDistance = NaN;
            return;
        }
        const distance = Math.abs(timeToCompare - currentDate.getTime());
        if (result == null || distance < minDistance) {
            result = index;
            minDistance = distance;
        }
    });
    return result;
}

},{"3196192380086bd1":"actWA"}],"5V5JV":[function(require,module,exports) {
"use strict";
exports.closestTo = closestTo;
var _index = require("2129694b6ecff958");
var _index2 = require("f52f0bbca64b2801");
/**
 * @name closestTo
 * @category Common Helpers
 * @summary Return a date from the array closest to the given date.
 *
 * @description
 * Return a date from the array closest to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateToCompare - The date to compare with
 * @param dates - The array to search
 *
 * @returns The date from the array closest to the given date or undefined if no valid value is given
 *
 * @example
 * // Which date is closer to 6 September 2015: 1 January 2000 or 1 January 2030?
 * const dateToCompare = new Date(2015, 8, 6)
 * const result = closestTo(dateToCompare, [
 *   new Date(2000, 0, 1),
 *   new Date(2030, 0, 1)
 * ])
 * //=> Tue Jan 01 2030 00:00:00
 */ function closestTo(dateToCompare, dates) {
    const date = (0, _index2.toDate)(dateToCompare);
    if (isNaN(Number(date))) return (0, _index.constructFrom)(dateToCompare, NaN);
    const timeToCompare = date.getTime();
    let result;
    let minDistance;
    dates.forEach((dirtyDate)=>{
        const currentDate = (0, _index2.toDate)(dirtyDate);
        if (isNaN(Number(currentDate))) {
            result = (0, _index.constructFrom)(dateToCompare, NaN);
            minDistance = NaN;
            return;
        }
        const distance = Math.abs(timeToCompare - currentDate.getTime());
        if (result == null || distance < minDistance) {
            result = currentDate;
            minDistance = distance;
        }
    });
    return result;
}

},{"2129694b6ecff958":"hNMdA","f52f0bbca64b2801":"actWA"}],"fgd9M":[function(require,module,exports) {
"use strict";
exports.compareAsc = compareAsc;
var _index = require("77d3d08d6b71c9bb");
/**
 * @name compareAsc
 * @category Common Helpers
 * @summary Compare the two dates and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return 1 if the first date is after the second,
 * -1 if the first date is before the second or 0 if dates are equal.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989:
 * const result = compareAsc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> -1
 *
 * @example
 * // Sort the array of dates:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareAsc)
 * //=> [
 * //   Wed Feb 11 1987 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Sun Jul 02 1995 00:00:00
 * // ]
 */ function compareAsc(dateLeft, dateRight) {
    const _dateLeft = (0, _index.toDate)(dateLeft);
    const _dateRight = (0, _index.toDate)(dateRight);
    const diff = _dateLeft.getTime() - _dateRight.getTime();
    if (diff < 0) return -1;
    else if (diff > 0) return 1;
    else return diff;
}

},{"77d3d08d6b71c9bb":"actWA"}],"38snE":[function(require,module,exports) {
"use strict";
exports.compareDesc = compareDesc;
var _index = require("989301f18cf866f6");
/**
 * @name compareDesc
 * @category Common Helpers
 * @summary Compare the two dates reverse chronologically and return -1, 0 or 1.
 *
 * @description
 * Compare the two dates and return -1 if the first date is after the second,
 * 1 if the first date is before the second or 0 if dates are equal.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The result of the comparison
 *
 * @example
 * // Compare 11 February 1987 and 10 July 1989 reverse chronologically:
 * const result = compareDesc(new Date(1987, 1, 11), new Date(1989, 6, 10))
 * //=> 1
 *
 * @example
 * // Sort the array of dates in reverse chronological order:
 * const result = [
 *   new Date(1995, 6, 2),
 *   new Date(1987, 1, 11),
 *   new Date(1989, 6, 10)
 * ].sort(compareDesc)
 * //=> [
 * //   Sun Jul 02 1995 00:00:00,
 * //   Mon Jul 10 1989 00:00:00,
 * //   Wed Feb 11 1987 00:00:00
 * // ]
 */ function compareDesc(dateLeft, dateRight) {
    const _dateLeft = (0, _index.toDate)(dateLeft);
    const _dateRight = (0, _index.toDate)(dateRight);
    const diff = _dateLeft.getTime() - _dateRight.getTime();
    if (diff > 0) return -1;
    else if (diff < 0) return 1;
    else return diff;
}

},{"989301f18cf866f6":"actWA"}],"aJJt5":[function(require,module,exports) {
"use strict";
exports.constructNow = constructNow;
var _index = require("6e69866d52e4c885");
/**
 * @name constructNow
 * @category Generic Helpers
 * @summary Constructs a new current date using the passed value constructor.
 * @pure false
 *
 * @description
 * The function constructs a new current date using the constructor from
 * the reference date. It helps to build generic functions that accept date
 * extensions and use the current date.
 *
 * It defaults to `Date` if the passed reference date is a number or a string.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The reference date to take constructor from
 *
 * @returns Current date initialized using the given date constructor
 *
 * @example
 * import { constructNow, isSameDay } from 'date-fns'
 *
 * function isToday<DateType extends Date>(
 *   date: DateType | number | string,
 * ): boolean {
 *   // If we were to use `new Date()` directly, the function would  behave
 *   // differently in different timezones and return false for the same date.
 *   return isSameDay(date, constructNow(date));
 * }
 */ function constructNow(date) {
    return (0, _index.constructFrom)(date, Date.now());
}

},{"6e69866d52e4c885":"hNMdA"}],"jR9nm":[function(require,module,exports) {
"use strict";
exports.daysToWeeks = daysToWeeks;
var _index = require("458db80672ef81c4");
/**
 * @name daysToWeeks
 * @category Conversion Helpers
 * @summary Convert days to weeks.
 *
 * @description
 * Convert a number of days to a full number of weeks.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param days - The number of days to be converted
 *
 * @returns The number of days converted in weeks
 *
 * @example
 * // Convert 14 days to weeks:
 * const result = daysToWeeks(14)
 * //=> 2
 *
 * @example
 * // It uses trunc rounding:
 * const result = daysToWeeks(13)
 * //=> 1
 */ function daysToWeeks(days) {
    const weeks = days / _index.daysInWeek;
    const result = Math.trunc(weeks);
    // Prevent negative zero
    return result === 0 ? 0 : result;
}

},{"458db80672ef81c4":"1vXXw"}],"cJL23":[function(require,module,exports) {
"use strict";
exports.differenceInBusinessDays = differenceInBusinessDays;
var _index = require("ea3fe27b701c003c");
var _index2 = require("6f3a4a6076f75f84");
var _index3 = require("812333c7aacd1559");
var _index4 = require("d81b0b3e475edc9a");
var _index5 = require("a08b9b6aa91d4ca8");
var _index6 = require("14560170b9ef0dc7");
/**
 * @name differenceInBusinessDays
 * @category Day Helpers
 * @summary Get the number of business days between the given dates.
 *
 * @description
 * Get the number of business day periods between the given dates.
 * Business days being days that arent in the weekend.
 * Like `differenceInCalendarDays`, the function removes the times from
 * the dates before calculating the difference.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of business days
 *
 * @example
 * // How many business days are between
 * // 10 January 2014 and 20 July 2014?
 * const result = differenceInBusinessDays(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 0, 10)
 * )
 * //=> 136
 *
 * // How many business days are between
 * // 30 November 2021 and 1 November 2021?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 30),
 *   new Date(2021, 10, 1)
 * )
 * //=> 21
 *
 * // How many business days are between
 * // 1 November 2021 and 1 December 2021?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 1),
 *   new Date(2021, 11, 1)
 * )
 * //=> -22
 *
 * // How many business days are between
 * // 1 November 2021 and 1 November 2021 ?
 * const result = differenceInBusinessDays(
 *   new Date(2021, 10, 1),
 *   new Date(2021, 10, 1)
 * )
 * //=> 0
 */ function differenceInBusinessDays(dateLeft, dateRight) {
    const _dateLeft = (0, _index6.toDate)(dateLeft);
    let _dateRight = (0, _index6.toDate)(dateRight);
    if (!(0, _index4.isValid)(_dateLeft) || !(0, _index4.isValid)(_dateRight)) return NaN;
    const calendarDifference = (0, _index2.differenceInCalendarDays)(_dateLeft, _dateRight);
    const sign = calendarDifference < 0 ? -1 : 1;
    const weeks = Math.trunc(calendarDifference / 7);
    let result = weeks * 5;
    _dateRight = (0, _index.addDays)(_dateRight, weeks * 7);
    // the loop below will run at most 6 times to account for the remaining days that don't makeup a full week
    while(!(0, _index3.isSameDay)(_dateLeft, _dateRight)){
        // sign is used to account for both negative and positive differences
        result += (0, _index5.isWeekend)(_dateRight) ? 0 : sign;
        _dateRight = (0, _index.addDays)(_dateRight, sign);
    }
    // Prevent negative zero
    return result === 0 ? 0 : result;
}

},{"ea3fe27b701c003c":"fL4dR","6f3a4a6076f75f84":"dvya7","812333c7aacd1559":"7FjQf","d81b0b3e475edc9a":"gbOJY","a08b9b6aa91d4ca8":"hvqeH","14560170b9ef0dc7":"actWA"}],"7FjQf":[function(require,module,exports) {
"use strict";
exports.isSameDay = isSameDay;
var _index = require("404d3af83c6a3510");
/**
 * @name isSameDay
 * @category Day Helpers
 * @summary Are the given dates in the same day (and year and month)?
 *
 * @description
 * Are the given dates in the same day (and year and month)?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check

 * @returns The dates are in the same day (and year and month)
 *
 * @example
 * // Are 4 September 06:00:00 and 4 September 18:00:00 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 18, 0))
 * //=> true
 *
 * @example
 * // Are 4 September and 4 October in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2014, 9, 4))
 * //=> false
 *
 * @example
 * // Are 4 September, 2014 and 4 September, 2015 in the same day?
 * const result = isSameDay(new Date(2014, 8, 4), new Date(2015, 8, 4))
 * //=> false
 */ function isSameDay(dateLeft, dateRight) {
    const dateLeftStartOfDay = (0, _index.startOfDay)(dateLeft);
    const dateRightStartOfDay = (0, _index.startOfDay)(dateRight);
    return +dateLeftStartOfDay === +dateRightStartOfDay;
}

},{"404d3af83c6a3510":"iJAa5"}],"gbOJY":[function(require,module,exports) {
"use strict";
exports.isValid = isValid;
var _index = require("187bc6a11beb8cf7");
var _index2 = require("fd0d651c7906f3f7");
/**
 * @name isValid
 * @category Common Helpers
 * @summary Is the given date valid?
 *
 * @description
 * Returns false if argument is Invalid Date and true otherwise.
 * Argument is converted to Date using `toDate`. See [toDate](https://date-fns.org/docs/toDate)
 * Invalid Date is a Date, whose time value is NaN.
 *
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is valid
 *
 * @example
 * // For the valid date:
 * const result = isValid(new Date(2014, 1, 31))
 * //=> true
 *
 * @example
 * // For the value, convertable into a date:
 * const result = isValid(1393804800000)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isValid(new Date(''))
 * //=> false
 */ function isValid(date) {
    if (!(0, _index.isDate)(date) && typeof date !== "number") return false;
    const _date = (0, _index2.toDate)(date);
    return !isNaN(Number(_date));
}

},{"187bc6a11beb8cf7":"c3MYB","fd0d651c7906f3f7":"actWA"}],"c3MYB":[function(require,module,exports) {
"use strict";
exports.isDate = isDate; /**
 * @name isDate
 * @category Common Helpers
 * @summary Is the given value a date?
 *
 * @description
 * Returns true if the given value is an instance of Date. The function works for dates transferred across iframes.
 *
 * @param value - The value to check
 *
 * @returns True if the given value is a date
 *
 * @example
 * // For a valid date:
 * const result = isDate(new Date())
 * //=> true
 *
 * @example
 * // For an invalid date:
 * const result = isDate(new Date(NaN))
 * //=> true
 *
 * @example
 * // For some value:
 * const result = isDate('2014-02-31')
 * //=> false
 *
 * @example
 * // For an object:
 * const result = isDate({})
 * //=> false
 */ 
function isDate(value) {
    return value instanceof Date || typeof value === "object" && Object.prototype.toString.call(value) === "[object Date]";
}

},{}],"1uuCg":[function(require,module,exports) {
"use strict";
exports.differenceInCalendarISOWeekYears = differenceInCalendarISOWeekYears;
var _index = require("4eb2262692255916");
/**
 * @name differenceInCalendarISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of calendar ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of calendar ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of calendar ISO week-numbering years
 *
 * @example
 * // How many calendar ISO week-numbering years are 1 January 2010 and 1 January 2012?
 * const result = differenceInCalendarISOWeekYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 2
 */ function differenceInCalendarISOWeekYears(dateLeft, dateRight) {
    return (0, _index.getISOWeekYear)(dateLeft) - (0, _index.getISOWeekYear)(dateRight);
}

},{"4eb2262692255916":"jWChc"}],"5Kgvn":[function(require,module,exports) {
"use strict";
exports.differenceInCalendarISOWeeks = differenceInCalendarISOWeeks;
var _index = require("e8e10057c2841ad2");
var _index2 = require("76e957d25fb54854");
var _index3 = require("28419d92c5150a1");
/**
 * @name differenceInCalendarISOWeeks
 * @category ISO Week Helpers
 * @summary Get the number of calendar ISO weeks between the given dates.
 *
 * @description
 * Get the number of calendar ISO weeks between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of calendar ISO weeks
 *
 * @example
 * // How many calendar ISO weeks are between 6 July 2014 and 21 July 2014?
 * const result = differenceInCalendarISOWeeks(
 *   new Date(2014, 6, 21),
 *   new Date(2014, 6, 6)
 * )
 * //=> 3
 */ function differenceInCalendarISOWeeks(dateLeft, dateRight) {
    const startOfISOWeekLeft = (0, _index2.startOfISOWeek)(dateLeft);
    const startOfISOWeekRight = (0, _index2.startOfISOWeek)(dateRight);
    const timestampLeft = +startOfISOWeekLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekLeft);
    const timestampRight = +startOfISOWeekRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfISOWeekRight);
    // Round the number of weeks to the nearest integer because the number of
    // milliseconds in a week is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round((timestampLeft - timestampRight) / _index.millisecondsInWeek);
}

},{"e8e10057c2841ad2":"1vXXw","76e957d25fb54854":"iF0wL","28419d92c5150a1":"ke6Rl"}],"21Qeg":[function(require,module,exports) {
"use strict";
exports.differenceInCalendarMonths = differenceInCalendarMonths;
var _index = require("34e2e1517bca82c6");
/**
 * @name differenceInCalendarMonths
 * @category Month Helpers
 * @summary Get the number of calendar months between the given dates.
 *
 * @description
 * Get the number of calendar months between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of calendar months
 *
 * @example
 * // How many calendar months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInCalendarMonths(
 *   new Date(2014, 8, 1),
 *   new Date(2014, 0, 31)
 * )
 * //=> 8
 */ function differenceInCalendarMonths(dateLeft, dateRight) {
    const _dateLeft = (0, _index.toDate)(dateLeft);
    const _dateRight = (0, _index.toDate)(dateRight);
    const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();
    const monthDiff = _dateLeft.getMonth() - _dateRight.getMonth();
    return yearDiff * 12 + monthDiff;
}

},{"34e2e1517bca82c6":"actWA"}],"kWjSX":[function(require,module,exports) {
"use strict";
exports.differenceInCalendarQuarters = differenceInCalendarQuarters;
var _index = require("12f69708f4660b9e");
var _index2 = require("58e123be031d7c1");
/**
 * @name differenceInCalendarQuarters
 * @category Quarter Helpers
 * @summary Get the number of calendar quarters between the given dates.
 *
 * @description
 * Get the number of calendar quarters between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date

 * @returns The number of calendar quarters
 *
 * @example
 * // How many calendar quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInCalendarQuarters(
 *   new Date(2014, 6, 2),
 *   new Date(2013, 11, 31)
 * )
 * //=> 3
 */ function differenceInCalendarQuarters(dateLeft, dateRight) {
    const _dateLeft = (0, _index2.toDate)(dateLeft);
    const _dateRight = (0, _index2.toDate)(dateRight);
    const yearDiff = _dateLeft.getFullYear() - _dateRight.getFullYear();
    const quarterDiff = (0, _index.getQuarter)(_dateLeft) - (0, _index.getQuarter)(_dateRight);
    return yearDiff * 4 + quarterDiff;
}

},{"12f69708f4660b9e":"cr73f","58e123be031d7c1":"actWA"}],"cr73f":[function(require,module,exports) {
"use strict";
exports.getQuarter = getQuarter;
var _index = require("ad58fc3c2407157b");
/**
 * @name getQuarter
 * @category Quarter Helpers
 * @summary Get the year quarter of the given date.
 *
 * @description
 * Get the year quarter of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The quarter
 *
 * @example
 * // Which quarter is 2 July 2014?
 * const result = getQuarter(new Date(2014, 6, 2))
 * //=> 3
 */ function getQuarter(date) {
    const _date = (0, _index.toDate)(date);
    const quarter = Math.trunc(_date.getMonth() / 3) + 1;
    return quarter;
}

},{"ad58fc3c2407157b":"actWA"}],"iWbGJ":[function(require,module,exports) {
"use strict";
exports.differenceInCalendarWeeks = differenceInCalendarWeeks;
var _index = require("979fbac2b02bbe0b");
var _index2 = require("902483a1e2e2edee");
var _index3 = require("2df47d81bbcabf9b");
/**
 * The {@link differenceInCalendarWeeks} function options.
 */ /**
 * @name differenceInCalendarWeeks
 * @category Week Helpers
 * @summary Get the number of calendar weeks between the given dates.
 *
 * @description
 * Get the number of calendar weeks between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of calendar weeks
 *
 * @example
 * // How many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5)
 * )
 * //=> 3
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInCalendarWeeks(
 *   new Date(2014, 6, 20),
 *   new Date(2014, 6, 5),
 *   { weekStartsOn: 1 }
 * )
 * //=> 2
 */ function differenceInCalendarWeeks(dateLeft, dateRight, options) {
    const startOfWeekLeft = (0, _index2.startOfWeek)(dateLeft, options);
    const startOfWeekRight = (0, _index2.startOfWeek)(dateRight, options);
    const timestampLeft = +startOfWeekLeft - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekLeft);
    const timestampRight = +startOfWeekRight - (0, _index3.getTimezoneOffsetInMilliseconds)(startOfWeekRight);
    // Round the number of days to the nearest integer because the number of
    // milliseconds in a days is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round((timestampLeft - timestampRight) / _index.millisecondsInWeek);
}

},{"979fbac2b02bbe0b":"1vXXw","902483a1e2e2edee":"dDDvv","2df47d81bbcabf9b":"ke6Rl"}],"e0VtU":[function(require,module,exports) {
"use strict";
exports.differenceInCalendarYears = differenceInCalendarYears;
var _index = require("9559183fd654047");
/**
 * @name differenceInCalendarYears
 * @category Year Helpers
 * @summary Get the number of calendar years between the given dates.
 *
 * @description
 * Get the number of calendar years between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date

 * @returns The number of calendar years
 *
 * @example
 * // How many calendar years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInCalendarYears(
 *   new Date(2015, 1, 11),
 *   new Date(2013, 11, 31)
 * )
 * //=> 2
 */ function differenceInCalendarYears(dateLeft, dateRight) {
    const _dateLeft = (0, _index.toDate)(dateLeft);
    const _dateRight = (0, _index.toDate)(dateRight);
    return _dateLeft.getFullYear() - _dateRight.getFullYear();
}

},{"9559183fd654047":"actWA"}],"fJoFi":[function(require,module,exports) {
"use strict";
exports.differenceInDays = differenceInDays;
var _index = require("5c37c887163a278c");
var _index2 = require("9efbb8d3712b0f85");
/**
 * @name differenceInDays
 * @category Day Helpers
 * @summary Get the number of full days between the given dates.
 *
 * @description
 * Get the number of full day periods between two dates. Fractional days are
 * truncated towards zero.
 *
 * One "full day" is the distance between a local time in one day to the same
 * local time on the next or previous day. A full day can sometimes be less than
 * or more than 24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/24)|0`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of full days according to the local timezone
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:00:00 and 2 July 2012 00:00:00?
 * const result = differenceInDays(
 *   new Date(2012, 6, 2, 0, 0),
 *   new Date(2011, 6, 2, 23, 0)
 * )
 * //=> 365
 *
 * @example
 * // How many full days are between
 * // 2 July 2011 23:59:00 and 3 July 2011 00:01:00?
 * const result = differenceInDays(
 *   new Date(2011, 6, 3, 0, 1),
 *   new Date(2011, 6, 2, 23, 59)
 * )
 * //=> 0
 *
 * @example
 * // How many full days are between
 * // 1 March 2020 0:00 and 1 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 92 days, even in
 * // time zones where DST starts and the
 * // period has only 92*24-1 hours.
 * const result = differenceInDays(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 1)
 * )
 * //=> 92
 */ function differenceInDays(dateLeft, dateRight) {
    const _dateLeft = (0, _index2.toDate)(dateLeft);
    const _dateRight = (0, _index2.toDate)(dateRight);
    const sign = compareLocalAsc(_dateLeft, _dateRight);
    const difference = Math.abs((0, _index.differenceInCalendarDays)(_dateLeft, _dateRight));
    _dateLeft.setDate(_dateLeft.getDate() - sign * difference);
    // Math.abs(diff in full days - diff in calendar days) === 1 if last calendar day is not full
    // If so, result must be decreased by 1 in absolute value
    const isLastDayNotFull = Number(compareLocalAsc(_dateLeft, _dateRight) === -sign);
    const result = sign * (difference - isLastDayNotFull);
    // Prevent negative zero
    return result === 0 ? 0 : result;
}
// Like `compareAsc` but uses local time not UTC, which is needed
// for accurate equality comparisons of UTC timestamps that end up
// having the same representation in local time, e.g. one hour before
// DST ends vs. the instant that DST ends.
function compareLocalAsc(dateLeft, dateRight) {
    const diff = dateLeft.getFullYear() - dateRight.getFullYear() || dateLeft.getMonth() - dateRight.getMonth() || dateLeft.getDate() - dateRight.getDate() || dateLeft.getHours() - dateRight.getHours() || dateLeft.getMinutes() - dateRight.getMinutes() || dateLeft.getSeconds() - dateRight.getSeconds() || dateLeft.getMilliseconds() - dateRight.getMilliseconds();
    if (diff < 0) return -1;
    else if (diff > 0) return 1;
    else return diff;
}

},{"5c37c887163a278c":"dvya7","9efbb8d3712b0f85":"actWA"}],"jnteW":[function(require,module,exports) {
"use strict";
exports.differenceInHours = differenceInHours;
var _index = require("4dd5860fb0431182");
var _index2 = require("56aaea21c2c2ca02");
var _index3 = require("e5398dd549d98ad7");
/**
 * The {@link differenceInHours} function options.
 */ /**
 * @name differenceInHours
 * @category Hour Helpers
 * @summary Get the number of hours between the given dates.
 *
 * @description
 * Get the number of hours between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of hours
 *
 * @example
 * // How many hours are between 2 July 2014 06:50:00 and 2 July 2014 19:00:00?
 * const result = differenceInHours(
 *   new Date(2014, 6, 2, 19, 0),
 *   new Date(2014, 6, 2, 6, 50)
 * )
 * //=> 12
 */ function differenceInHours(dateLeft, dateRight, options) {
    const diff = (0, _index3.differenceInMilliseconds)(dateLeft, dateRight) / _index2.millisecondsInHour;
    return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

},{"4dd5860fb0431182":"1ipL6","56aaea21c2c2ca02":"1vXXw","e5398dd549d98ad7":"jkwjj"}],"1ipL6":[function(require,module,exports) {
"use strict";
exports.getRoundingMethod = getRoundingMethod;
function getRoundingMethod(method) {
    return (number)=>{
        const round = method ? Math[method] : Math.trunc;
        const result = round(number);
        // Prevent negative zero
        return result === 0 ? 0 : result;
    };
}

},{}],"jkwjj":[function(require,module,exports) {
"use strict";
exports.differenceInMilliseconds = differenceInMilliseconds;
var _index = require("8ec07446db1e8840");
/**
 * @name differenceInMilliseconds
 * @category Millisecond Helpers
 * @summary Get the number of milliseconds between the given dates.
 *
 * @description
 * Get the number of milliseconds between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of milliseconds
 *
 * @example
 * // How many milliseconds are between
 * // 2 July 2014 12:30:20.600 and 2 July 2014 12:30:21.700?
 * const result = differenceInMilliseconds(
 *   new Date(2014, 6, 2, 12, 30, 21, 700),
 *   new Date(2014, 6, 2, 12, 30, 20, 600)
 * )
 * //=> 1100
 */ function differenceInMilliseconds(dateLeft, dateRight) {
    return +(0, _index.toDate)(dateLeft) - +(0, _index.toDate)(dateRight);
}

},{"8ec07446db1e8840":"actWA"}],"5PiM9":[function(require,module,exports) {
"use strict";
exports.differenceInISOWeekYears = differenceInISOWeekYears;
var _index = require("3478a3b03bc559c3");
var _index2 = require("217c0aa6a88937bf");
var _index3 = require("f385e83eefe5d06b");
var _index4 = require("7ed50186937b4ccf");
/**
 * @name differenceInISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of full ISO week-numbering years between the given dates.
 *
 * @description
 * Get the number of full ISO week-numbering years between the given dates.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of full ISO week-numbering years
 *
 * @example
 * // How many full ISO week-numbering years are between 1 January 2010 and 1 January 2012?
 * const result = differenceInISOWeekYears(
 *   new Date(2012, 0, 1),
 *   new Date(2010, 0, 1)
 * )
 * //=> 1
 */ function differenceInISOWeekYears(dateLeft, dateRight) {
    let _dateLeft = (0, _index4.toDate)(dateLeft);
    const _dateRight = (0, _index4.toDate)(dateRight);
    const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);
    const difference = Math.abs((0, _index2.differenceInCalendarISOWeekYears)(_dateLeft, _dateRight));
    _dateLeft = (0, _index3.subISOWeekYears)(_dateLeft, sign * difference);
    // Math.abs(diff in full ISO years - diff in calendar ISO years) === 1
    // if last calendar ISO year is not full
    // If so, result must be decreased by 1 in absolute value
    const isLastISOWeekYearNotFull = Number((0, _index.compareAsc)(_dateLeft, _dateRight) === -sign);
    const result = sign * (difference - isLastISOWeekYearNotFull);
    // Prevent negative zero
    return result === 0 ? 0 : result;
}

},{"3478a3b03bc559c3":"fgd9M","217c0aa6a88937bf":"1uuCg","f385e83eefe5d06b":"gF8jx","7ed50186937b4ccf":"actWA"}],"gF8jx":[function(require,module,exports) {
"use strict";
exports.subISOWeekYears = subISOWeekYears;
var _index = require("3905690fe6f022ae");
/**
 * @name subISOWeekYears
 * @category ISO Week-Numbering Year Helpers
 * @summary Subtract the specified number of ISO week-numbering years from the given date.
 *
 * @description
 * Subtract the specified number of ISO week-numbering years from the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of ISO week-numbering years to be subtracted.
 *
 * @returns The new date with the ISO week-numbering years subtracted
 *
 * @example
 * // Subtract 5 ISO week-numbering years from 1 September 2014:
 * const result = subISOWeekYears(new Date(2014, 8, 1), 5)
 * //=> Mon Aug 31 2009 00:00:00
 */ function subISOWeekYears(date, amount) {
    return (0, _index.addISOWeekYears)(date, -amount);
}

},{"3905690fe6f022ae":"eZQAV"}],"Z5oWO":[function(require,module,exports) {
"use strict";
exports.differenceInMinutes = differenceInMinutes;
var _index = require("28ce40c001fe7733");
var _index2 = require("4d59f4904ce4a6bf");
var _index3 = require("5cff05241f86c567");
/**
 * The {@link differenceInMinutes} function options.
 */ /**
 * @name differenceInMinutes
 * @category Minute Helpers
 * @summary Get the number of minutes between the given dates.
 *
 * @description
 * Get the signed number of full (rounded towards 0) minutes between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of minutes
 *
 * @example
 * // How many minutes are between 2 July 2014 12:07:59 and 2 July 2014 12:20:00?
 * const result = differenceInMinutes(
 *   new Date(2014, 6, 2, 12, 20, 0),
 *   new Date(2014, 6, 2, 12, 7, 59)
 * )
 * //=> 12
 *
 * @example
 * // How many minutes are between 10:01:59 and 10:00:00
 * const result = differenceInMinutes(
 *   new Date(2000, 0, 1, 10, 0, 0),
 *   new Date(2000, 0, 1, 10, 1, 59)
 * )
 * //=> -1
 */ function differenceInMinutes(dateLeft, dateRight, options) {
    const diff = (0, _index3.differenceInMilliseconds)(dateLeft, dateRight) / _index2.millisecondsInMinute;
    return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

},{"28ce40c001fe7733":"1ipL6","4d59f4904ce4a6bf":"1vXXw","5cff05241f86c567":"jkwjj"}],"i3gFX":[function(require,module,exports) {
"use strict";
exports.differenceInMonths = differenceInMonths;
var _index = require("838b792ca9e8e9a9");
var _index2 = require("7cbbd162b316b88f");
var _index3 = require("7b8f4dc46ede6d38");
var _index4 = require("ea5c11a925493689");
/**
 * @name differenceInMonths
 * @category Month Helpers
 * @summary Get the number of full months between the given dates.
 *
 * @description
 * Get the number of full months between the given dates using trunc as a default rounding method.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of full months
 *
 * @example
 * // How many full months are between 31 January 2014 and 1 September 2014?
 * const result = differenceInMonths(new Date(2014, 8, 1), new Date(2014, 0, 31))
 * //=> 7
 */ function differenceInMonths(dateLeft, dateRight) {
    const _dateLeft = (0, _index4.toDate)(dateLeft);
    const _dateRight = (0, _index4.toDate)(dateRight);
    const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);
    const difference = Math.abs((0, _index2.differenceInCalendarMonths)(_dateLeft, _dateRight));
    let result;
    // Check for the difference of less than month
    if (difference < 1) result = 0;
    else {
        if (_dateLeft.getMonth() === 1 && _dateLeft.getDate() > 27) // This will check if the date is end of Feb and assign a higher end of month date
        // to compare it with Jan
        _dateLeft.setDate(30);
        _dateLeft.setMonth(_dateLeft.getMonth() - sign * difference);
        // Math.abs(diff in full months - diff in calendar months) === 1 if last calendar month is not full
        // If so, result must be decreased by 1 in absolute value
        let isLastMonthNotFull = (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;
        // Check for cases of one full calendar month
        if ((0, _index3.isLastDayOfMonth)((0, _index4.toDate)(dateLeft)) && difference === 1 && (0, _index.compareAsc)(dateLeft, _dateRight) === 1) isLastMonthNotFull = false;
        result = sign * (difference - Number(isLastMonthNotFull));
    }
    // Prevent negative zero
    return result === 0 ? 0 : result;
}

},{"838b792ca9e8e9a9":"fgd9M","7cbbd162b316b88f":"21Qeg","7b8f4dc46ede6d38":"9dpYu","ea5c11a925493689":"actWA"}],"9dpYu":[function(require,module,exports) {
"use strict";
exports.isLastDayOfMonth = isLastDayOfMonth;
var _index = require("585928d6294ab972");
var _index2 = require("9da618b70e7537e6");
var _index3 = require("3d052479f78fcd0a");
/**
 * @name isLastDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the last day of a month?
 *
 * @description
 * Is the given date the last day of a month?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check

 * @returns The date is the last day of a month
 *
 * @example
 * // Is 28 February 2014 the last day of a month?
 * const result = isLastDayOfMonth(new Date(2014, 1, 28))
 * //=> true
 */ function isLastDayOfMonth(date) {
    const _date = (0, _index3.toDate)(date);
    return +(0, _index.endOfDay)(_date) === +(0, _index2.endOfMonth)(_date);
}

},{"585928d6294ab972":"jtO7f","9da618b70e7537e6":"kcCWM","3d052479f78fcd0a":"actWA"}],"jtO7f":[function(require,module,exports) {
"use strict";
exports.endOfDay = endOfDay;
var _index = require("9462caeddacab7ba");
/**
 * @name endOfDay
 * @category Day Helpers
 * @summary Return the end of a day for the given date.
 *
 * @description
 * Return the end of a day for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a day
 *
 * @example
 * // The end of a day for 2 September 2014 11:55:00:
 * const result = endOfDay(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 02 2014 23:59:59.999
 */ function endOfDay(date) {
    const _date = (0, _index.toDate)(date);
    _date.setHours(23, 59, 59, 999);
    return _date;
}

},{"9462caeddacab7ba":"actWA"}],"kcCWM":[function(require,module,exports) {
"use strict";
exports.endOfMonth = endOfMonth;
var _index = require("4700e89a3c2bdc3a");
/**
 * @name endOfMonth
 * @category Month Helpers
 * @summary Return the end of a month for the given date.
 *
 * @description
 * Return the end of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a month
 *
 * @example
 * // The end of a month for 2 September 2014 11:55:00:
 * const result = endOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */ function endOfMonth(date) {
    const _date = (0, _index.toDate)(date);
    const month = _date.getMonth();
    _date.setFullYear(_date.getFullYear(), month + 1, 0);
    _date.setHours(23, 59, 59, 999);
    return _date;
}

},{"4700e89a3c2bdc3a":"actWA"}],"eSams":[function(require,module,exports) {
"use strict";
exports.differenceInQuarters = differenceInQuarters;
var _index = require("ea003389a7c0a0c7");
var _index2 = require("65b8c31c2449132c");
/**
 * The {@link differenceInQuarters} function options.
 */ /**
 * @name differenceInQuarters
 * @category Quarter Helpers
 * @summary Get the number of quarters between the given dates.
 *
 * @description
 * Get the number of quarters between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of full quarters
 *
 * @example
 * // How many full quarters are between 31 December 2013 and 2 July 2014?
 * const result = differenceInQuarters(new Date(2014, 6, 2), new Date(2013, 11, 31))
 * //=> 2
 */ function differenceInQuarters(dateLeft, dateRight, options) {
    const diff = (0, _index2.differenceInMonths)(dateLeft, dateRight) / 3;
    return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

},{"ea003389a7c0a0c7":"1ipL6","65b8c31c2449132c":"i3gFX"}],"3IvxJ":[function(require,module,exports) {
"use strict";
exports.differenceInSeconds = differenceInSeconds;
var _index = require("bc308401ae80fd9e");
var _index2 = require("15eb048bf635cf19");
/**
 * The {@link differenceInSeconds} function options.
 */ /**
 * @name differenceInSeconds
 * @category Second Helpers
 * @summary Get the number of seconds between the given dates.
 *
 * @description
 * Get the number of seconds between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options.
 *
 * @returns The number of seconds
 *
 * @example
 * // How many seconds are between
 * // 2 July 2014 12:30:07.999 and 2 July 2014 12:30:20.000?
 * const result = differenceInSeconds(
 *   new Date(2014, 6, 2, 12, 30, 20, 0),
 *   new Date(2014, 6, 2, 12, 30, 7, 999)
 * )
 * //=> 12
 */ function differenceInSeconds(dateLeft, dateRight, options) {
    const diff = (0, _index2.differenceInMilliseconds)(dateLeft, dateRight) / 1000;
    return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

},{"bc308401ae80fd9e":"1ipL6","15eb048bf635cf19":"jkwjj"}],"cy0mL":[function(require,module,exports) {
"use strict";
exports.differenceInWeeks = differenceInWeeks;
var _index = require("1fd69438a343960a");
var _index2 = require("739c69993ece4a2d");
/**
 * The {@link differenceInWeeks} function options.
 */ /**
 * @name differenceInWeeks
 * @category Week Helpers
 * @summary Get the number of full weeks between the given dates.
 *
 * @description
 * Get the number of full weeks between two dates. Fractional weeks are
 * truncated towards zero by default.
 *
 * One "full week" is the distance between a local time in one day to the same
 * local time 7 days earlier or later. A full week can sometimes be less than
 * or more than 7*24 hours if a daylight savings change happens between two dates.
 *
 * To ignore DST and only measure exact 7*24-hour periods, use this instead:
 * `Math.trunc(differenceInHours(dateLeft, dateRight)/(7*24))|0`.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 * @param options - An object with options
 *
 * @returns The number of full weeks
 *
 * @example
 * // How many full weeks are between 5 July 2014 and 20 July 2014?
 * const result = differenceInWeeks(new Date(2014, 6, 20), new Date(2014, 6, 5))
 * //=> 2
 *
 * @example
 * // How many full weeks are between
 * // 1 March 2020 0:00 and 6 June 2020 0:00 ?
 * // Note: because local time is used, the
 * // result will always be 8 weeks (54 days),
 * // even if DST starts and the period has
 * // only 54*24-1 hours.
 * const result = differenceInWeeks(
 *   new Date(2020, 5, 1),
 *   new Date(2020, 2, 6)
 * )
 * //=> 8
 */ function differenceInWeeks(dateLeft, dateRight, options) {
    const diff = (0, _index2.differenceInDays)(dateLeft, dateRight) / 7;
    return (0, _index.getRoundingMethod)(options?.roundingMethod)(diff);
}

},{"1fd69438a343960a":"1ipL6","739c69993ece4a2d":"fJoFi"}],"iFe68":[function(require,module,exports) {
"use strict";
exports.differenceInYears = differenceInYears;
var _index = require("26f69a00c42ae289");
var _index2 = require("a2b02090236814dd");
var _index3 = require("4c5b5f2534904213");
/**
 * @name differenceInYears
 * @category Year Helpers
 * @summary Get the number of full years between the given dates.
 *
 * @description
 * Get the number of full years between the given dates.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The later date
 * @param dateRight - The earlier date
 *
 * @returns The number of full years
 *
 * @example
 * // How many full years are between 31 December 2013 and 11 February 2015?
 * const result = differenceInYears(new Date(2015, 1, 11), new Date(2013, 11, 31))
 * //=> 1
 */ function differenceInYears(dateLeft, dateRight) {
    const _dateLeft = (0, _index3.toDate)(dateLeft);
    const _dateRight = (0, _index3.toDate)(dateRight);
    const sign = (0, _index.compareAsc)(_dateLeft, _dateRight);
    const difference = Math.abs((0, _index2.differenceInCalendarYears)(_dateLeft, _dateRight));
    // Set both dates to a valid leap year for accurate comparison when dealing
    // with leap days
    _dateLeft.setFullYear(1584);
    _dateRight.setFullYear(1584);
    // Math.abs(diff in full years - diff in calendar years) === 1 if last calendar year is not full
    // If so, result must be decreased by 1 in absolute value
    const isLastYearNotFull = (0, _index.compareAsc)(_dateLeft, _dateRight) === -sign;
    const result = sign * (difference - +isLastYearNotFull);
    // Prevent negative zero
    return result === 0 ? 0 : result;
}

},{"26f69a00c42ae289":"fgd9M","a2b02090236814dd":"e0VtU","4c5b5f2534904213":"actWA"}],"g7D5W":[function(require,module,exports) {
"use strict";
exports.eachDayOfInterval = eachDayOfInterval;
var _index = require("294c3ba44409e4b5");
/**
 * The {@link eachDayOfInterval} function options.
 */ /**
 * @name eachDayOfInterval
 * @category Interval Helpers
 * @summary Return the array of dates within the specified time interval.
 *
 * @description
 * Return the array of dates within the specified time interval.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of days from the day of the interval start to the day of the interval end
 *
 * @example
 * // Each day between 6 October 2014 and 10 October 2014:
 * const result = eachDayOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 9, 10)
 * })
 * //=> [
 * //   Mon Oct 06 2014 00:00:00,
 * //   Tue Oct 07 2014 00:00:00,
 * //   Wed Oct 08 2014 00:00:00,
 * //   Thu Oct 09 2014 00:00:00,
 * //   Fri Oct 10 2014 00:00:00
 * // ]
 */ function eachDayOfInterval(interval, options) {
    const startDate = (0, _index.toDate)(interval.start);
    const endDate = (0, _index.toDate)(interval.end);
    let reversed = +startDate > +endDate;
    const endTime = reversed ? +startDate : +endDate;
    const currentDate = reversed ? endDate : startDate;
    currentDate.setHours(0, 0, 0, 0);
    let step = options?.step ?? 1;
    if (!step) return [];
    if (step < 0) {
        step = -step;
        reversed = !reversed;
    }
    const dates = [];
    while(+currentDate <= endTime){
        dates.push((0, _index.toDate)(currentDate));
        currentDate.setDate(currentDate.getDate() + step);
        currentDate.setHours(0, 0, 0, 0);
    }
    return reversed ? dates.reverse() : dates;
}

},{"294c3ba44409e4b5":"actWA"}],"kwHze":[function(require,module,exports) {
"use strict";
exports.eachHourOfInterval = eachHourOfInterval;
var _index = require("3e3d97bee6e54fec");
var _index2 = require("70a05b1edbc49f28");
/**
 * The {@link eachHourOfInterval} function options.
 */ /**
 * @name eachHourOfInterval
 * @category Interval Helpers
 * @summary Return the array of hours within the specified time interval.
 *
 * @description
 * Return the array of hours within the specified time interval.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of hours from the hour of the interval start to the hour of the interval end
 *
 * @example
 * // Each hour between 6 October 2014, 12:00 and 6 October 2014, 15:00
 * const result = eachHourOfInterval({
 *   start: new Date(2014, 9, 6, 12),
 *   end: new Date(2014, 9, 6, 15)
 * })
 * //=> [
 * //   Mon Oct 06 2014 12:00:00,
 * //   Mon Oct 06 2014 13:00:00,
 * //   Mon Oct 06 2014 14:00:00,
 * //   Mon Oct 06 2014 15:00:00
 * // ]
 */ function eachHourOfInterval(interval, options) {
    const startDate = (0, _index2.toDate)(interval.start);
    const endDate = (0, _index2.toDate)(interval.end);
    let reversed = +startDate > +endDate;
    const endTime = reversed ? +startDate : +endDate;
    let currentDate = reversed ? endDate : startDate;
    currentDate.setMinutes(0, 0, 0);
    let step = options?.step ?? 1;
    if (!step) return [];
    if (step < 0) {
        step = -step;
        reversed = !reversed;
    }
    const dates = [];
    while(+currentDate <= endTime){
        dates.push((0, _index2.toDate)(currentDate));
        currentDate = (0, _index.addHours)(currentDate, step);
    }
    return reversed ? dates.reverse() : dates;
}

},{"3e3d97bee6e54fec":"hzidA","70a05b1edbc49f28":"actWA"}],"4V6M8":[function(require,module,exports) {
"use strict";
exports.eachMinuteOfInterval = eachMinuteOfInterval;
var _index = require("e92d00e5a4dade3b");
var _index2 = require("ecbbda7f50f7aaff");
var _index3 = require("92ed5a1225d7a241");
/**
 * The {@link eachMinuteOfInterval} function options.
 */ /**
 * @name eachMinuteOfInterval
 * @category Interval Helpers
 * @summary Return the array of minutes within the specified time interval.
 *
 * @description
 * Returns the array of minutes within the specified time interval.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of minutes from the minute of the interval start to the minute of the interval end
 *
 * @example
 * // Each minute between 14 October 2020, 13:00 and 14 October 2020, 13:03
 * const result = eachMinuteOfInterval({
 *   start: new Date(2014, 9, 14, 13),
 *   end: new Date(2014, 9, 14, 13, 3)
 * })
 * //=> [
 * //   Wed Oct 14 2014 13:00:00,
 * //   Wed Oct 14 2014 13:01:00,
 * //   Wed Oct 14 2014 13:02:00,
 * //   Wed Oct 14 2014 13:03:00
 * // ]
 */ function eachMinuteOfInterval(interval, options) {
    const startDate = (0, _index2.startOfMinute)((0, _index3.toDate)(interval.start));
    const endDate = (0, _index3.toDate)(interval.end);
    let reversed = +startDate > +endDate;
    const endTime = reversed ? +startDate : +endDate;
    let currentDate = reversed ? endDate : startDate;
    let step = options?.step ?? 1;
    if (!step) return [];
    if (step < 0) {
        step = -step;
        reversed = !reversed;
    }
    const dates = [];
    while(+currentDate <= endTime){
        dates.push((0, _index3.toDate)(currentDate));
        currentDate = (0, _index.addMinutes)(currentDate, step);
    }
    return reversed ? dates.reverse() : dates;
}

},{"e92d00e5a4dade3b":"7jsut","ecbbda7f50f7aaff":"5zVrK","92ed5a1225d7a241":"actWA"}],"5zVrK":[function(require,module,exports) {
"use strict";
exports.startOfMinute = startOfMinute;
var _index = require("91f08d20edca7d8a");
/**
 * @name startOfMinute
 * @category Minute Helpers
 * @summary Return the start of a minute for the given date.
 *
 * @description
 * Return the start of a minute for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a minute
 *
 * @example
 * // The start of a minute for 1 December 2014 22:15:45.400:
 * const result = startOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:00
 */ function startOfMinute(date) {
    const _date = (0, _index.toDate)(date);
    _date.setSeconds(0, 0);
    return _date;
}

},{"91f08d20edca7d8a":"actWA"}],"i1Z2B":[function(require,module,exports) {
"use strict";
exports.eachMonthOfInterval = eachMonthOfInterval;
var _index = require("3ff5dc84667641c0");
/**
 * The {@link eachMonthOfInterval} function options.
 */ /**
 * @name eachMonthOfInterval
 * @category Interval Helpers
 * @summary Return the array of months within the specified time interval.
 *
 * @description
 * Return the array of months within the specified time interval.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The interval
 *
 * @returns The array with starts of months from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each month between 6 February 2014 and 10 August 2014:
 * const result = eachMonthOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10)
 * })
 * //=> [
 * //   Sat Feb 01 2014 00:00:00,
 * //   Sat Mar 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Thu May 01 2014 00:00:00,
 * //   Sun Jun 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * //   Fri Aug 01 2014 00:00:00
 * // ]
 */ function eachMonthOfInterval(interval, options) {
    const startDate = (0, _index.toDate)(interval.start);
    const endDate = (0, _index.toDate)(interval.end);
    let reversed = +startDate > +endDate;
    const endTime = reversed ? +startDate : +endDate;
    const currentDate = reversed ? endDate : startDate;
    currentDate.setHours(0, 0, 0, 0);
    currentDate.setDate(1);
    let step = options?.step ?? 1;
    if (!step) return [];
    if (step < 0) {
        step = -step;
        reversed = !reversed;
    }
    const dates = [];
    while(+currentDate <= endTime){
        dates.push((0, _index.toDate)(currentDate));
        currentDate.setMonth(currentDate.getMonth() + step);
    }
    return reversed ? dates.reverse() : dates;
}

},{"3ff5dc84667641c0":"actWA"}],"aOi8Z":[function(require,module,exports) {
"use strict";
exports.eachQuarterOfInterval = eachQuarterOfInterval;
var _index = require("6cdb36513da4cc03");
var _index2 = require("a8f22af48dc25121");
var _index3 = require("8c1f502027539eb2");
/**
 * The {@link eachQuarterOfInterval} function options.
 */ /**
 * @name eachQuarterOfInterval
 * @category Interval Helpers
 * @summary Return the array of quarters within the specified time interval.
 *
 * @description
 * Return the array of quarters within the specified time interval.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The interval
 *
 * @returns The array with starts of quarters from the quarter of the interval start to the quarter of the interval end
 *
 * @example
 * // Each quarter within interval 6 February 2014 - 10 August 2014:
 * const result = eachQuarterOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2014, 7, 10)
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Tue Apr 01 2014 00:00:00,
 * //   Tue Jul 01 2014 00:00:00,
 * // ]
 */ function eachQuarterOfInterval(interval, options) {
    const startDate = (0, _index3.toDate)(interval.start);
    const endDate = (0, _index3.toDate)(interval.end);
    let reversed = +startDate > +endDate;
    const endTime = reversed ? +(0, _index2.startOfQuarter)(startDate) : +(0, _index2.startOfQuarter)(endDate);
    let currentDate = reversed ? (0, _index2.startOfQuarter)(endDate) : (0, _index2.startOfQuarter)(startDate);
    let step = options?.step ?? 1;
    if (!step) return [];
    if (step < 0) {
        step = -step;
        reversed = !reversed;
    }
    const dates = [];
    while(+currentDate <= endTime){
        dates.push((0, _index3.toDate)(currentDate));
        currentDate = (0, _index.addQuarters)(currentDate, step);
    }
    return reversed ? dates.reverse() : dates;
}

},{"6cdb36513da4cc03":"jW81o","a8f22af48dc25121":"ipmWI","8c1f502027539eb2":"actWA"}],"ipmWI":[function(require,module,exports) {
"use strict";
exports.startOfQuarter = startOfQuarter;
var _index = require("e81484efabf21f26");
/**
 * @name startOfQuarter
 * @category Quarter Helpers
 * @summary Return the start of a year quarter for the given date.
 *
 * @description
 * Return the start of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a quarter
 *
 * @example
 * // The start of a quarter for 2 September 2014 11:55:00:
 * const result = startOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Jul 01 2014 00:00:00
 */ function startOfQuarter(date) {
    const _date = (0, _index.toDate)(date);
    const currentMonth = _date.getMonth();
    const month = currentMonth - currentMonth % 3;
    _date.setMonth(month, 1);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"e81484efabf21f26":"actWA"}],"99wly":[function(require,module,exports) {
"use strict";
exports.eachWeekOfInterval = eachWeekOfInterval;
var _index = require("6e26efbcc307cb14");
var _index2 = require("244cdaa33af9b640");
var _index3 = require("bd21daa7da65e0eb");
/**
 * The {@link eachWeekOfInterval} function options.
 */ /**
 * @name eachWeekOfInterval
 * @category Interval Helpers
 * @summary Return the array of weeks within the specified time interval.
 *
 * @description
 * Return the array of weeks within the specified time interval.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The interval.
 * @param options - An object with options.
 *
 * @returns The array with starts of weeks from the week of the interval start to the week of the interval end
 *
 * @example
 * // Each week within interval 6 October 2014 - 23 November 2014:
 * const result = eachWeekOfInterval({
 *   start: new Date(2014, 9, 6),
 *   end: new Date(2014, 10, 23)
 * })
 * //=> [
 * //   Sun Oct 05 2014 00:00:00,
 * //   Sun Oct 12 2014 00:00:00,
 * //   Sun Oct 19 2014 00:00:00,
 * //   Sun Oct 26 2014 00:00:00,
 * //   Sun Nov 02 2014 00:00:00,
 * //   Sun Nov 09 2014 00:00:00,
 * //   Sun Nov 16 2014 00:00:00,
 * //   Sun Nov 23 2014 00:00:00
 * // ]
 */ function eachWeekOfInterval(interval, options) {
    const startDate = (0, _index3.toDate)(interval.start);
    const endDate = (0, _index3.toDate)(interval.end);
    let reversed = +startDate > +endDate;
    const startDateWeek = reversed ? (0, _index2.startOfWeek)(endDate, options) : (0, _index2.startOfWeek)(startDate, options);
    const endDateWeek = reversed ? (0, _index2.startOfWeek)(startDate, options) : (0, _index2.startOfWeek)(endDate, options);
    // Some timezones switch DST at midnight, making start of day unreliable in these timezones, 3pm is a safe bet
    startDateWeek.setHours(15);
    endDateWeek.setHours(15);
    const endTime = +endDateWeek.getTime();
    let currentDate = startDateWeek;
    let step = options?.step ?? 1;
    if (!step) return [];
    if (step < 0) {
        step = -step;
        reversed = !reversed;
    }
    const dates = [];
    while(+currentDate <= endTime){
        currentDate.setHours(0);
        dates.push((0, _index3.toDate)(currentDate));
        currentDate = (0, _index.addWeeks)(currentDate, step);
        currentDate.setHours(15);
    }
    return reversed ? dates.reverse() : dates;
}

},{"6e26efbcc307cb14":"6sRN6","244cdaa33af9b640":"dDDvv","bd21daa7da65e0eb":"actWA"}],"5ViHa":[function(require,module,exports) {
"use strict";
exports.eachWeekendOfInterval = eachWeekendOfInterval;
var _index = require("56a8ee095115973a");
var _index2 = require("311a5485dd7798b7");
/**
 * @name eachWeekendOfInterval
 * @category Interval Helpers
 * @summary List all the Saturdays and Sundays in the given date interval.
 *
 * @description
 * Get all the Saturdays and Sundays in the given date interval.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The given interval
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the given date interval
 * const result = eachWeekendOfInterval({
 *   start: new Date(2018, 8, 17),
 *   end: new Date(2018, 8, 30)
 * })
 * //=> [
 * //   Sat Sep 22 2018 00:00:00,
 * //   Sun Sep 23 2018 00:00:00,
 * //   Sat Sep 29 2018 00:00:00,
 * //   Sun Sep 30 2018 00:00:00
 * // ]
 */ function eachWeekendOfInterval(interval) {
    const dateInterval = (0, _index.eachDayOfInterval)(interval);
    const weekends = [];
    let index = 0;
    while(index < dateInterval.length){
        const date = dateInterval[index++];
        if ((0, _index2.isWeekend)(date)) weekends.push(date);
    }
    return weekends;
}

},{"56a8ee095115973a":"g7D5W","311a5485dd7798b7":"hvqeH"}],"51lqU":[function(require,module,exports) {
"use strict";
exports.eachWeekendOfMonth = eachWeekendOfMonth;
var _index = require("d5fe08dd964c485c");
var _index2 = require("433b8f5e15395dd7");
var _index3 = require("c93c981052c9ccef");
/**
 * @name eachWeekendOfMonth
 * @category Month Helpers
 * @summary List all the Saturdays and Sundays in the given month.
 *
 * @description
 * Get all the Saturdays and Sundays in the given month.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given month
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the given month
 * const result = eachWeekendOfMonth(new Date(2022, 1, 1))
 * //=> [
 * //   Sat Feb 05 2022 00:00:00,
 * //   Sun Feb 06 2022 00:00:00,
 * //   Sat Feb 12 2022 00:00:00,
 * //   Sun Feb 13 2022 00:00:00,
 * //   Sat Feb 19 2022 00:00:00,
 * //   Sun Feb 20 2022 00:00:00,
 * //   Sat Feb 26 2022 00:00:00,
 * //   Sun Feb 27 2022 00:00:00
 * // ]
 */ function eachWeekendOfMonth(date) {
    const start = (0, _index3.startOfMonth)(date);
    const end = (0, _index2.endOfMonth)(date);
    return (0, _index.eachWeekendOfInterval)({
        start,
        end
    });
}

},{"d5fe08dd964c485c":"5ViHa","433b8f5e15395dd7":"kcCWM","c93c981052c9ccef":"1cHoB"}],"1cHoB":[function(require,module,exports) {
"use strict";
exports.startOfMonth = startOfMonth;
var _index = require("9b1ec7fb57278771");
/**
 * @name startOfMonth
 * @category Month Helpers
 * @summary Return the start of a month for the given date.
 *
 * @description
 * Return the start of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a month
 *
 * @example
 * // The start of a month for 2 September 2014 11:55:00:
 * const result = startOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Mon Sep 01 2014 00:00:00
 */ function startOfMonth(date) {
    const _date = (0, _index.toDate)(date);
    _date.setDate(1);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"9b1ec7fb57278771":"actWA"}],"deCgd":[function(require,module,exports) {
"use strict";
exports.eachWeekendOfYear = eachWeekendOfYear;
var _index = require("feb8e300bcf7957");
var _index2 = require("1449183f6fb1902a");
var _index3 = require("ab03b55fc28aacde");
/**
 * @name eachWeekendOfYear
 * @category Year Helpers
 * @summary List all the Saturdays and Sundays in the year.
 *
 * @description
 * Get all the Saturdays and Sundays in the year.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given year
 *
 * @returns An array containing all the Saturdays and Sundays
 *
 * @example
 * // Lists all Saturdays and Sundays in the year
 * const result = eachWeekendOfYear(new Date(2020, 1, 1))
 * //=> [
 * //   Sat Jan 03 2020 00:00:00,
 * //   Sun Jan 04 2020 00:00:00,
 * //   ...
 * //   Sun Dec 27 2020 00:00:00
 * // ]
 * ]
 */ function eachWeekendOfYear(date) {
    const start = (0, _index3.startOfYear)(date);
    const end = (0, _index2.endOfYear)(date);
    return (0, _index.eachWeekendOfInterval)({
        start,
        end
    });
}

},{"feb8e300bcf7957":"5ViHa","1449183f6fb1902a":"gmxYT","ab03b55fc28aacde":"cnrH3"}],"gmxYT":[function(require,module,exports) {
"use strict";
exports.endOfYear = endOfYear;
var _index = require("bae33049518de779");
/**
 * @name endOfYear
 * @category Year Helpers
 * @summary Return the end of a year for the given date.
 *
 * @description
 * Return the end of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a year
 *
 * @example
 * // The end of a year for 2 September 2014 11:55:00:
 * const result = endOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 23:59:59.999
 */ function endOfYear(date) {
    const _date = (0, _index.toDate)(date);
    const year = _date.getFullYear();
    _date.setFullYear(year + 1, 0, 0);
    _date.setHours(23, 59, 59, 999);
    return _date;
}

},{"bae33049518de779":"actWA"}],"cnrH3":[function(require,module,exports) {
"use strict";
exports.startOfYear = startOfYear;
var _index = require("29a7a92b30a86c8c");
var _index2 = require("151cc5db30a5792f");
/**
 * @name startOfYear
 * @category Year Helpers
 * @summary Return the start of a year for the given date.
 *
 * @description
 * Return the start of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a year
 *
 * @example
 * // The start of a year for 2 September 2014 11:55:00:
 * const result = startOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Jan 01 2014 00:00:00
 */ function startOfYear(date) {
    const cleanDate = (0, _index.toDate)(date);
    const _date = (0, _index2.constructFrom)(date, 0);
    _date.setFullYear(cleanDate.getFullYear(), 0, 1);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"29a7a92b30a86c8c":"actWA","151cc5db30a5792f":"hNMdA"}],"015Lr":[function(require,module,exports) {
"use strict";
exports.eachYearOfInterval = eachYearOfInterval;
var _index = require("ce43d0e962faaa1c");
/**
 * The {@link eachYearOfInterval} function options.
 */ /**
 * @name eachYearOfInterval
 * @category Interval Helpers
 * @summary Return the array of yearly timestamps within the specified time interval.
 *
 * @description
 * Return the array of yearly timestamps within the specified time interval.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The interval.
 *
 * @returns The array with starts of yearly timestamps from the month of the interval start to the month of the interval end
 *
 * @example
 * // Each year between 6 February 2014 and 10 August 2017:
 * const result = eachYearOfInterval({
 *   start: new Date(2014, 1, 6),
 *   end: new Date(2017, 7, 10)
 * })
 * //=> [
 * //   Wed Jan 01 2014 00:00:00,
 * //   Thu Jan 01 2015 00:00:00,
 * //   Fri Jan 01 2016 00:00:00,
 * //   Sun Jan 01 2017 00:00:00
 * // ]
 */ function eachYearOfInterval(interval, options) {
    const startDate = (0, _index.toDate)(interval.start);
    const endDate = (0, _index.toDate)(interval.end);
    let reversed = +startDate > +endDate;
    const endTime = reversed ? +startDate : +endDate;
    const currentDate = reversed ? endDate : startDate;
    currentDate.setHours(0, 0, 0, 0);
    currentDate.setMonth(0, 1);
    let step = options?.step ?? 1;
    if (!step) return [];
    if (step < 0) {
        step = -step;
        reversed = !reversed;
    }
    const dates = [];
    while(+currentDate <= endTime){
        dates.push((0, _index.toDate)(currentDate));
        currentDate.setFullYear(currentDate.getFullYear() + step);
    }
    return reversed ? dates.reverse() : dates;
}

},{"ce43d0e962faaa1c":"actWA"}],"c7ju7":[function(require,module,exports) {
"use strict";
exports.endOfDecade = endOfDecade;
var _index = require("c3f314059e7ed45");
/**
 * @name endOfDecade
 * @category Decade Helpers
 * @summary Return the end of a decade for the given date.
 *
 * @description
 * Return the end of a decade for the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a decade
 *
 * @example
 * // The end of a decade for 12 May 1984 00:00:00:
 * const result = endOfDecade(new Date(1984, 4, 12, 00, 00, 00))
 * //=> Dec 31 1989 23:59:59.999
 */ function endOfDecade(date) {
    // TODO: Switch to more technical definition in of decades that start with 1
    // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking
    // change, so it can only be done in 4.0.
    const _date = (0, _index.toDate)(date);
    const year = _date.getFullYear();
    const decade = 9 + Math.floor(year / 10) * 10;
    _date.setFullYear(decade, 11, 31);
    _date.setHours(23, 59, 59, 999);
    return _date;
}

},{"c3f314059e7ed45":"actWA"}],"fGjDI":[function(require,module,exports) {
"use strict";
exports.endOfHour = endOfHour;
var _index = require("559b27e6bd32f67a");
/**
 * @name endOfHour
 * @category Hour Helpers
 * @summary Return the end of an hour for the given date.
 *
 * @description
 * Return the end of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of an hour
 *
 * @example
 * // The end of an hour for 2 September 2014 11:55:00:
 * const result = endOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:59:59.999
 */ function endOfHour(date) {
    const _date = (0, _index.toDate)(date);
    _date.setMinutes(59, 59, 999);
    return _date;
}

},{"559b27e6bd32f67a":"actWA"}],"5qyrI":[function(require,module,exports) {
"use strict";
exports.endOfISOWeek = endOfISOWeek;
var _index = require("32a570bab666f4f0");
/**
 * @name endOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the end of an ISO week for the given date.
 *
 * @description
 * Return the end of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of an ISO week
 *
 * @example
 * // The end of an ISO week for 2 September 2014 11:55:00:
 * const result = endOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 23:59:59.999
 */ function endOfISOWeek(date) {
    return (0, _index.endOfWeek)(date, {
        weekStartsOn: 1
    });
}

},{"32a570bab666f4f0":"3Ot4h"}],"3Ot4h":[function(require,module,exports) {
"use strict";
exports.endOfWeek = endOfWeek;
var _index = require("874b81e8096fd15b");
var _index2 = require("54c51a8f0276b53b");
/**
 * The {@link endOfWeek} function options.
 */ /**
 * @name endOfWeek
 * @category Week Helpers
 * @summary Return the end of a week for the given date.
 *
 * @description
 * Return the end of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The end of a week
 *
 * @example
 * // The end of a week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 23:59:59.999
 *
 * @example
 * // If the week starts on Monday, the end of the week for 2 September 2014 11:55:00:
 * const result = endOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 23:59:59.999
 */ function endOfWeek(date, options) {
    const defaultOptions = (0, _index2.getDefaultOptions)();
    const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;
    const _date = (0, _index.toDate)(date);
    const day = _date.getDay();
    const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
    _date.setDate(_date.getDate() + diff);
    _date.setHours(23, 59, 59, 999);
    return _date;
}

},{"874b81e8096fd15b":"actWA","54c51a8f0276b53b":"98fau"}],"etxH3":[function(require,module,exports) {
"use strict";
exports.endOfISOWeekYear = endOfISOWeekYear;
var _index = require("fff5ebc46b4d3047");
var _index2 = require("1f630f53841125bd");
var _index3 = require("9bb8122951a915c3");
/**
 * @name endOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the end of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the end of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of an ISO week-numbering year
 *
 * @example
 * // The end of an ISO week-numbering year for 2 July 2005:
 * const result = endOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 23:59:59.999
 */ function endOfISOWeekYear(date) {
    const year = (0, _index.getISOWeekYear)(date);
    const fourthOfJanuaryOfNextYear = (0, _index3.constructFrom)(date, 0);
    fourthOfJanuaryOfNextYear.setFullYear(year + 1, 0, 4);
    fourthOfJanuaryOfNextYear.setHours(0, 0, 0, 0);
    const _date = (0, _index2.startOfISOWeek)(fourthOfJanuaryOfNextYear);
    _date.setMilliseconds(_date.getMilliseconds() - 1);
    return _date;
}

},{"fff5ebc46b4d3047":"jWChc","1f630f53841125bd":"iF0wL","9bb8122951a915c3":"hNMdA"}],"jOlnb":[function(require,module,exports) {
"use strict";
exports.endOfMinute = endOfMinute;
var _index = require("61e892816ba65f75");
/**
 * @name endOfMinute
 * @category Minute Helpers
 * @summary Return the end of a minute for the given date.
 *
 * @description
 * Return the end of a minute for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a minute
 *
 * @example
 * // The end of a minute for 1 December 2014 22:15:45.400:
 * const result = endOfMinute(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:59.999
 */ function endOfMinute(date) {
    const _date = (0, _index.toDate)(date);
    _date.setSeconds(59, 999);
    return _date;
}

},{"61e892816ba65f75":"actWA"}],"jhz7T":[function(require,module,exports) {
"use strict";
exports.endOfQuarter = endOfQuarter;
var _index = require("e4975d708a66315a");
/**
 * @name endOfQuarter
 * @category Quarter Helpers
 * @summary Return the end of a year quarter for the given date.
 *
 * @description
 * Return the end of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a quarter
 *
 * @example
 * // The end of a quarter for 2 September 2014 11:55:00:
 * const result = endOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 23:59:59.999
 */ function endOfQuarter(date) {
    const _date = (0, _index.toDate)(date);
    const currentMonth = _date.getMonth();
    const month = currentMonth - currentMonth % 3 + 3;
    _date.setMonth(month, 0);
    _date.setHours(23, 59, 59, 999);
    return _date;
}

},{"e4975d708a66315a":"actWA"}],"c9wPr":[function(require,module,exports) {
"use strict";
exports.endOfSecond = endOfSecond;
var _index = require("abb2bf07f4049174");
/**
 * @name endOfSecond
 * @category Second Helpers
 * @summary Return the end of a second for the given date.
 *
 * @description
 * Return the end of a second for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of a second
 *
 * @example
 * // The end of a second for 1 December 2014 22:15:45.400:
 * const result = endOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.999
 */ function endOfSecond(date) {
    const _date = (0, _index.toDate)(date);
    _date.setMilliseconds(999);
    return _date;
}

},{"abb2bf07f4049174":"actWA"}],"ab76B":[function(require,module,exports) {
"use strict";
exports.endOfToday = endOfToday;
var _index = require("4e7ecedb2c691b21");
/**
 * @name endOfToday
 * @category Day Helpers
 * @summary Return the end of today.
 * @pure false
 *
 * @description
 * Return the end of today.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @returns The end of today
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfToday()
 * //=> Mon Oct 6 2014 23:59:59.999
 */ function endOfToday() {
    return (0, _index.endOfDay)(Date.now());
}

},{"4e7ecedb2c691b21":"jtO7f"}],"9sHeD":[function(require,module,exports) {
"use strict";
exports.endOfTomorrow = endOfTomorrow; /**
 * @name endOfTomorrow
 * @category Day Helpers
 * @summary Return the end of tomorrow.
 * @pure false
 *
 * @description
 * Return the end of tomorrow.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @returns The end of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfTomorrow()
 * //=> Tue Oct 7 2014 23:59:59.999
 */ 
function endOfTomorrow() {
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth();
    const day = now.getDate();
    const date = new Date(0);
    date.setFullYear(year, month, day + 1);
    date.setHours(23, 59, 59, 999);
    return date;
}

},{}],"7ud3X":[function(require,module,exports) {
"use strict";
exports.endOfYesterday = endOfYesterday; /**
 * @name endOfYesterday
 * @category Day Helpers
 * @summary Return the end of yesterday.
 * @pure false
 *
 * @description
 * Return the end of yesterday.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @returns The end of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * const result = endOfYesterday()
 * //=> Sun Oct 5 2014 23:59:59.999
 */ 
function endOfYesterday() {
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth();
    const day = now.getDate();
    const date = new Date(0);
    date.setFullYear(year, month, day - 1);
    date.setHours(23, 59, 59, 999);
    return date;
}

},{}],"eeV53":[function(require,module,exports) {
"use strict";
exports.format = exports.formatDate = format;
Object.defineProperty(exports, "formatters", {
    enumerable: true,
    get: function() {
        return _index3.formatters;
    }
});
Object.defineProperty(exports, "longFormatters", {
    enumerable: true,
    get: function() {
        return _index4.longFormatters;
    }
});
var _index = require("7a797645e41ea2c2");
var _index2 = require("2ed033e42fc5189d");
var _index3 = require("e1935e40361258cf");
var _index4 = require("c46187c282bdd45");
var _index5 = require("7528fb990c5ee731");
var _index6 = require("8d66a13aebf60df9");
var _index7 = require("3b5edf3c2ddf1d76");
// Rexports of internal for libraries to use.
// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874
// This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
const formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * The {@link format} function options.
 */ /**
 * @name format
 * @alias formatDate
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. The result may vary by locale.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 * (see the last example)
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 7 below the table).
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   | Notes |
 * |---------------------------------|---------|-----------------------------------|-------|
 * | Era                             | G..GGG  | AD, BC                            |       |
 * |                                 | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 | GGGGG   | A, B                              |       |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | yo      | 44th, 1st, 0th, 17th              | 5,7   |
 * |                                 | yy      | 44, 01, 00, 17                    | 5     |
 * |                                 | yyy     | 044, 001, 1900, 2017              | 5     |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            | 5     |
 * |                                 | yyyyy   | ...                               | 3,5   |
 * | Local week-numbering year       | Y       | 44, 1, 1900, 2017                 | 5     |
 * |                                 | Yo      | 44th, 1st, 1900th, 2017th         | 5,7   |
 * |                                 | YY      | 44, 01, 00, 17                    | 5,8   |
 * |                                 | YYY     | 044, 001, 1900, 2017              | 5     |
 * |                                 | YYYY    | 0044, 0001, 1900, 2017            | 5,8   |
 * |                                 | YYYYY   | ...                               | 3,5   |
 * | ISO week-numbering year         | R       | -43, 0, 1, 1900, 2017             | 5,7   |
 * |                                 | RR      | -43, 00, 01, 1900, 2017           | 5,7   |
 * |                                 | RRR     | -043, 000, 001, 1900, 2017        | 5,7   |
 * |                                 | RRRR    | -0043, 0000, 0001, 1900, 2017     | 5,7   |
 * |                                 | RRRRR   | ...                               | 3,5,7 |
 * | Extended year                   | u       | -43, 0, 1, 1900, 2017             | 5     |
 * |                                 | uu      | -43, 01, 1900, 2017               | 5     |
 * |                                 | uuu     | -043, 001, 1900, 2017             | 5     |
 * |                                 | uuuu    | -0043, 0001, 1900, 2017           | 5     |
 * |                                 | uuuuu   | ...                               | 3,5   |
 * | Quarter (formatting)            | Q       | 1, 2, 3, 4                        |       |
 * |                                 | Qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | QQ      | 01, 02, 03, 04                    |       |
 * |                                 | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | q       | 1, 2, 3, 4                        |       |
 * |                                 | qo      | 1st, 2nd, 3rd, 4th                | 7     |
 * |                                 | qq      | 01, 02, 03, 04                    |       |
 * |                                 | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 | qqqqq   | 1, 2, 3, 4                        | 4     |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |       |
 * |                                 | Mo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | MM      | 01, 02, ..., 12                   |       |
 * |                                 | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 | MMMM    | January, February, ..., December  | 2     |
 * |                                 | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | L       | 1, 2, ..., 12                     |       |
 * |                                 | Lo      | 1st, 2nd, ..., 12th               | 7     |
 * |                                 | LL      | 01, 02, ..., 12                   |       |
 * |                                 | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 | LLLL    | January, February, ..., December  | 2     |
 * |                                 | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | w       | 1, 2, ..., 53                     |       |
 * |                                 | wo      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | I       | 1, 2, ..., 53                     | 7     |
 * |                                 | Io      | 1st, 2nd, ..., 53th               | 7     |
 * |                                 | II      | 01, 02, ..., 53                   | 7     |
 * | Day of month                    | d       | 1, 2, ..., 31                     |       |
 * |                                 | do      | 1st, 2nd, ..., 31st               | 7     |
 * |                                 | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     | D       | 1, 2, ..., 365, 366               | 9     |
 * |                                 | Do      | 1st, 2nd, ..., 365th, 366th       | 7     |
 * |                                 | DD      | 01, 02, ..., 365, 366             | 9     |
 * |                                 | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 | DDDD    | ...                               | 3     |
 * | Day of week (formatting)        | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    | i       | 1, 2, 3, ..., 7                   | 7     |
 * |                                 | io      | 1st, 2nd, ..., 7th                | 7     |
 * |                                 | ii      | 01, 02, ..., 07                   | 7     |
 * |                                 | iii     | Mon, Tue, Wed, ..., Sun           | 7     |
 * |                                 | iiii    | Monday, Tuesday, ..., Sunday      | 2,7   |
 * |                                 | iiiii   | M, T, W, T, F, S, S               | 7     |
 * |                                 | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 7     |
 * | Local day of week (formatting)  | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 | eo      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | ee      | 02, 03, ..., 01                   |       |
 * |                                 | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 | co      | 2nd, 3rd, ..., 1st                | 7     |
 * |                                 | cc      | 02, 03, ..., 01                   |       |
 * |                                 | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          | a..aa   | AM, PM                            |       |
 * |                                 | aaa     | am, pm                            |       |
 * |                                 | aaaa    | a.m., p.m.                        | 2     |
 * |                                 | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          | b..bb   | AM, PM, noon, midnight            |       |
 * |                                 | bbb     | am, pm, noon, midnight            |       |
 * |                                 | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             | B..BBB  | at night, in the morning, ...     |       |
 * |                                 | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 | ho      | 1st, 2nd, ..., 11th, 12th         | 7     |
 * |                                 | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 | Ho      | 0th, 1st, 2nd, ..., 23rd          | 7     |
 * |                                 | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 | Ko      | 1st, 2nd, ..., 11th, 0th          | 7     |
 * |                                 | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 | ko      | 24th, 1st, 2nd, ..., 23rd         | 7     |
 * |                                 | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          | m       | 0, 1, ..., 59                     |       |
 * |                                 | mo      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | mm      | 00, 01, ..., 59                   |       |
 * | Second                          | s       | 0, 1, ..., 59                     |       |
 * |                                 | so      | 0th, 1st, ..., 59th               | 7     |
 * |                                 | ss      | 00, 01, ..., 59                   |       |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |       |
 * |                                 | SS      | 00, 01, ..., 99                   |       |
 * |                                 | SSS     | 000, 001, ..., 999                |       |
 * |                                 | SSSS    | ...                               | 3     |
 * | Timezone (ISO-8601 w/ Z)        | X       | -08, +0530, Z                     |       |
 * |                                 | XX      | -0800, +0530, Z                   |       |
 * |                                 | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       | x       | -08, +0530, +00                   |       |
 * |                                 | xx      | -0800, +0530, +0000               |       |
 * |                                 | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Timezone (GMT)                  | O...OOO | GMT-8, GMT+5:30, GMT+0            |       |
 * |                                 | OOOO    | GMT-08:00, GMT+05:30, GMT+00:00   | 2     |
 * | Timezone (specific non-locat.)  | z...zzz | GMT-8, GMT+5:30, GMT+0            | 6     |
 * |                                 | zzzz    | GMT-08:00, GMT+05:30, GMT+00:00   | 2,6   |
 * | Seconds timestamp               | t       | 512969520                         | 7     |
 * |                                 | tt      | ...                               | 3,7   |
 * | Milliseconds timestamp          | T       | 512969520900                      | 7     |
 * |                                 | TT      | ...                               | 3,7   |
 * | Long localized date             | P       | 04/29/1453                        | 7     |
 * |                                 | PP      | Apr 29, 1453                      | 7     |
 * |                                 | PPP     | April 29th, 1453                  | 7     |
 * |                                 | PPPP    | Friday, April 29th, 1453          | 2,7   |
 * | Long localized time             | p       | 12:00 AM                          | 7     |
 * |                                 | pp      | 12:00:00 AM                       | 7     |
 * |                                 | ppp     | 12:00:00 AM GMT+2                 | 7     |
 * |                                 | pppp    | 12:00:00 AM GMT+02:00             | 2,7   |
 * | Combination of date and time    | Pp      | 04/29/1453, 12:00 AM              | 7     |
 * |                                 | PPpp    | Apr 29, 1453, 12:00:00 AM         | 7     |
 * |                                 | PPPppp  | April 29th, 1453 at ...           | 7     |
 * |                                 | PPPPpppp| Friday, April 29th, 1453 at ...   | 2,7   |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table (e.g. `EEEEEEEEEEE`)
 *    the output will be the same as default pattern for this unit, usually
 *    the longest one (in case of ISO weekdays, `EEEE`). Default patterns for units
 *    are marked with "2" in the last column of the table.
 *
 *    `format(new Date(2017, 10, 6), 'MMM') //=> 'Nov'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMM') //=> 'N'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMM') //=> 'November'`
 *
 *    `format(new Date(2017, 10, 6), 'MMMMMMM') //=> 'November'`
 *
 * 3. Some patterns could be unlimited length (such as `yyyyyyyy`).
 *    The output will be padded with zeros to match the length of the pattern.
 *
 *    `format(new Date(2017, 10, 6), 'yyyyyyyy') //=> '00002017'`
 *
 * 4. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 5. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` always returns the last two digits of a year,
 *    while `uu` pads single digit years to 2 characters and returns other years unchanged:
 *
 *    | Year | `yy` | `uu` |
 *    |------|------|------|
 *    | 1    |   01 |   01 |
 *    | 14   |   14 |   14 |
 *    | 376  |   76 |  376 |
 *    | 1453 |   53 | 1453 |
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [getISOWeekYear](https://date-fns.org/docs/getISOWeekYear)
 *    and [getWeekYear](https://date-fns.org/docs/getWeekYear)).
 *
 * 6. Specific non-location timezones are currently unavailable in `date-fns`,
 *    so right now these tokens fall back to GMT timezones.
 *
 * 7. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `t`: seconds timestamp
 *    - `T`: milliseconds timestamp
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 8. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 9. `D` and `DD` tokens represent days of the year but they are often confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param format - The string of tokens
 * @param options - An object with options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Represent 11 February 2014 in middle-endian format:
 * const result = format(new Date(2014, 1, 11), 'MM/dd/yyyy')
 * //=> '02/11/2014'
 *
 * @example
 * // Represent 2 July 2014 in Esperanto:
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = format(new Date(2014, 6, 2), "do 'de' MMMM yyyy", {
 *   locale: eoLocale
 * })
 * //=> '2-a de julio 2014'
 *
 * @example
 * // Escape string by single quote characters:
 * const result = format(new Date(2014, 6, 2, 15), "h 'o''clock'")
 * //=> "3 o'clock"
 */ function format(date, formatStr, options) {
    const defaultOptions = (0, _index2.getDefaultOptions)();
    const locale = options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;
    const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;
    const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;
    const originalDate = (0, _index7.toDate)(date);
    if (!(0, _index6.isValid)(originalDate)) throw new RangeError("Invalid time value");
    let parts = formatStr.match(longFormattingTokensRegExp).map((substring)=>{
        const firstCharacter = substring[0];
        if (firstCharacter === "p" || firstCharacter === "P") {
            const longFormatter = _index4.longFormatters[firstCharacter];
            return longFormatter(substring, locale.formatLong);
        }
        return substring;
    }).join("").match(formattingTokensRegExp).map((substring)=>{
        // Replace two single quote characters with one single quote character
        if (substring === "''") return {
            isToken: false,
            value: "'"
        };
        const firstCharacter = substring[0];
        if (firstCharacter === "'") return {
            isToken: false,
            value: cleanEscapedString(substring)
        };
        if (_index3.formatters[firstCharacter]) return {
            isToken: true,
            value: substring
        };
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        return {
            isToken: false,
            value: substring
        };
    });
    // invoke localize preprocessor (only for french locales at the moment)
    if (locale.localize.preprocessor) parts = locale.localize.preprocessor(originalDate, parts);
    const formatterOptions = {
        firstWeekContainsDate,
        weekStartsOn,
        locale
    };
    return parts.map((part)=>{
        if (!part.isToken) return part.value;
        const token = part.value;
        if (!options?.useAdditionalWeekYearTokens && (0, _index5.isProtectedWeekYearToken)(token) || !options?.useAdditionalDayOfYearTokens && (0, _index5.isProtectedDayOfYearToken)(token)) (0, _index5.warnOrThrowProtectedError)(token, formatStr, String(date));
        const formatter = _index3.formatters[token[0]];
        return formatter(originalDate, token, locale.localize, formatterOptions);
    }).join("");
}
function cleanEscapedString(input) {
    const matched = input.match(escapedStringRegExp);
    if (!matched) return input;
    return matched[1].replace(doubleQuoteRegExp, "'");
}

},{"7a797645e41ea2c2":"iG9h0","2ed033e42fc5189d":"98fau","e1935e40361258cf":"zOLvM","c46187c282bdd45":"jsbdH","7528fb990c5ee731":"dFKqd","8d66a13aebf60df9":"gbOJY","3b5edf3c2ddf1d76":"actWA"}],"iG9h0":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "defaultLocale", {
    enumerable: true,
    get: function() {
        return _index.enUS;
    }
});
var _index = require("537dc8c80b85612c");

},{"537dc8c80b85612c":"haY68"}],"haY68":[function(require,module,exports) {
"use strict";
exports.enUS = void 0;
var _index = require("479d03a18c245c3e");
var _index2 = require("b9e3c763ad65c41a");
var _index3 = require("6451586d149703ed");
var _index4 = require("cbddf07e540dd382");
var _index5 = require("3002f8fbc231e7a1");
/**
 * @category Locales
 * @summary English locale (United States).
 * @language English
 * @iso-639-2 eng
 * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)
 * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)
 */ const enUS = exports.enUS = {
    code: "en-US",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"479d03a18c245c3e":"9Lz1e","b9e3c763ad65c41a":"c2f1i","6451586d149703ed":"6KKLO","cbddf07e540dd382":"ldfCO","3002f8fbc231e7a1":"c3v7R"}],"9Lz1e":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
    },
    xSeconds: {
        one: "1 second",
        other: "{{count}} seconds"
    },
    halfAMinute: "half a minute",
    lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
    },
    xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
    },
    aboutXHours: {
        one: "about 1 hour",
        other: "about {{count}} hours"
    },
    xHours: {
        one: "1 hour",
        other: "{{count}} hours"
    },
    xDays: {
        one: "1 day",
        other: "{{count}} days"
    },
    aboutXWeeks: {
        one: "about 1 week",
        other: "about {{count}} weeks"
    },
    xWeeks: {
        one: "1 week",
        other: "{{count}} weeks"
    },
    aboutXMonths: {
        one: "about 1 month",
        other: "about {{count}} months"
    },
    xMonths: {
        one: "1 month",
        other: "{{count}} months"
    },
    aboutXYears: {
        one: "about 1 year",
        other: "about {{count}} years"
    },
    xYears: {
        one: "1 year",
        other: "{{count}} years"
    },
    overXYears: {
        one: "over 1 year",
        other: "over {{count}} years"
    },
    almostXYears: {
        one: "almost 1 year",
        other: "almost {{count}} years"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "in " + result;
        else return result + " ago";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"c2f1i":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("4800af73d892e7a");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"4800af73d892e7a":"6OYyu"}],"6OYyu":[function(require,module,exports) {
"use strict";
exports.buildFormatLongFn = buildFormatLongFn;
function buildFormatLongFn(args) {
    return (options = {})=>{
        // TODO: Remove String()
        const width = options.width ? String(options.width) : args.defaultWidth;
        const format = args.formats[width] || args.formats[args.defaultWidth];
        return format;
    };
}

},{}],"6KKLO":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'last' eeee 'at' p",
    yesterday: "'yesterday at' p",
    today: "'today at' p",
    tomorrow: "'tomorrow at' p",
    nextWeek: "eeee 'at' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"ldfCO":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("78e7236a2f110627");
const eraValues = {
    narrow: [
        "B",
        "A"
    ],
    abbreviated: [
        "BC",
        "AD"
    ],
    wide: [
        "Before Christ",
        "Anno Domini"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1st quarter",
        "2nd quarter",
        "3rd quarter",
        "4th quarter"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "May",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Oct",
        "Nov",
        "Dec"
    ],
    wide: [
        "January",
        "February",
        "March",
        "April",
        "May",
        "June",
        "July",
        "August",
        "September",
        "October",
        "November",
        "December"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "T",
        "W",
        "T",
        "F",
        "S"
    ],
    short: [
        "Su",
        "Mo",
        "Tu",
        "We",
        "Th",
        "Fr",
        "Sa"
    ],
    abbreviated: [
        "Sun",
        "Mon",
        "Tue",
        "Wed",
        "Thu",
        "Fri",
        "Sat"
    ],
    wide: [
        "Sunday",
        "Monday",
        "Tuesday",
        "Wednesday",
        "Thursday",
        "Friday",
        "Saturday"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "morning",
        afternoon: "afternoon",
        evening: "evening",
        night: "night"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mi",
        noon: "n",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnight",
        noon: "noon",
        morning: "in the morning",
        afternoon: "in the afternoon",
        evening: "in the evening",
        night: "at night"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    // If ordinal numbers depend on context, for example,
    // if they are different for different grammatical genders,
    // use `options.unit`.
    //
    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
    // 'day', 'hour', 'minute', 'second'.
    const rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) switch(rem100 % 10){
        case 1:
            return number + "st";
        case 2:
            return number + "nd";
        case 3:
            return number + "rd";
    }
    return number + "th";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"78e7236a2f110627":"fGq1u"}],"fGq1u":[function(require,module,exports) {
"use strict";
exports.buildLocalizeFn = buildLocalizeFn; /* eslint-disable no-unused-vars */ 
/**
 * The localize function argument callback which allows to convert raw value to
 * the actual type.
 *
 * @param value - The value to convert
 *
 * @returns The converted value
 */ /**
 * The map of localized values for each width.
 */ /**
 * The index type of the locale unit value. It types conversion of units of
 * values that don't start at 0 (i.e. quarters).
 */ /**
 * Converts the unit value to the tuple of values.
 */ /**
 * The tuple of localized era values. The first element represents BC,
 * the second element represents AD.
 */ /**
 * The tuple of localized quarter values. The first element represents Q1.
 */ /**
 * The tuple of localized day values. The first element represents Sunday.
 */ /**
 * The tuple of localized month values. The first element represents January.
 */ function buildLocalizeFn(args) {
    return (value, options)=>{
        const context = options?.context ? String(options.context) : "standalone";
        let valuesArray;
        if (context === "formatting" && args.formattingValues) {
            const defaultWidth = args.defaultFormattingWidth || args.defaultWidth;
            const width = options?.width ? String(options.width) : defaultWidth;
            valuesArray = args.formattingValues[width] || args.formattingValues[defaultWidth];
        } else {
            const defaultWidth = args.defaultWidth;
            const width = options?.width ? String(options.width) : args.defaultWidth;
            valuesArray = args.values[width] || args.values[defaultWidth];
        }
        const index = args.argumentCallback ? args.argumentCallback(value) : value;
        // @ts-expect-error - For some reason TypeScript just don't want to match it, no matter how hard we try. I challenge you to try to remove it!
        return valuesArray[index];
    };
}

},{}],"c3v7R":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("befc9b9f4e6afb32");
var _index2 = require("be7528ef34a1226");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(b|a)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(before christ|before common era|anno domini|common era)/i
};
const parseEraPatterns = {
    any: [
        /^b/i,
        /^(a|c)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](th|st|nd|rd)? quarter/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,
    wide: /^(january|february|march|april|may|june|july|august|september|october|november|december)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^may/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|mo|tu|we|th|fr|sa)/i,
    abbreviated: /^(sun|mon|tue|wed|thu|fri|sat)/i,
    wide: /^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^w/i,
        /^t/i,
        /^f/i,
        /^s/i
    ],
    any: [
        /^su/i,
        /^m/i,
        /^tu/i,
        /^w/i,
        /^th/i,
        /^f/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"befc9b9f4e6afb32":"15lWd","be7528ef34a1226":"kWqg8"}],"15lWd":[function(require,module,exports) {
"use strict";
exports.buildMatchFn = buildMatchFn;
function buildMatchFn(args) {
    return (string, options = {})=>{
        const width = options.width;
        const matchPattern = width && args.matchPatterns[width] || args.matchPatterns[args.defaultMatchWidth];
        const matchResult = string.match(matchPattern);
        if (!matchResult) return null;
        const matchedString = matchResult[0];
        const parsePatterns = width && args.parsePatterns[width] || args.parsePatterns[args.defaultParseWidth];
        const key = Array.isArray(parsePatterns) ? findIndex(parsePatterns, (pattern)=>pattern.test(matchedString)) : findKey(parsePatterns, (pattern)=>pattern.test(matchedString));
        let value;
        value = args.valueCallback ? args.valueCallback(key) : key;
        value = options.valueCallback ? options.valueCallback(value) : value;
        const rest = string.slice(matchedString.length);
        return {
            value,
            rest
        };
    };
}
function findKey(object, predicate) {
    for(const key in object){
        if (Object.prototype.hasOwnProperty.call(object, key) && predicate(object[key])) return key;
    }
    return undefined;
}
function findIndex(array, predicate) {
    for(let key = 0; key < array.length; key++){
        if (predicate(array[key])) return key;
    }
    return undefined;
}

},{}],"kWqg8":[function(require,module,exports) {
"use strict";
exports.buildMatchPatternFn = buildMatchPatternFn;
function buildMatchPatternFn(args) {
    return (string, options = {})=>{
        const matchResult = string.match(args.matchPattern);
        if (!matchResult) return null;
        const matchedString = matchResult[0];
        const parseResult = string.match(args.parsePattern);
        if (!parseResult) return null;
        let value = args.valueCallback ? args.valueCallback(parseResult[0]) : parseResult[0];
        // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        value = options.valueCallback ? options.valueCallback(value) : value;
        const rest = string.slice(matchedString.length);
        return {
            value,
            rest
        };
    };
}

},{}],"zOLvM":[function(require,module,exports) {
"use strict";
exports.formatters = void 0;
var _index = require("2b70b701cccd48ba");
var _index2 = require("ce71b00fa268a334");
var _index3 = require("be1f4bd5db98fc0b");
var _index4 = require("4d35ee8b95213cb2");
var _index5 = require("31a9b5233efbdb74");
var _index6 = require("c78164dd4be2dfdf");
var _index7 = require("c129443cf4e77b69");
const dayPeriodEnum = {
    am: "am",
    pm: "pm",
    midnight: "midnight",
    noon: "noon",
    morning: "morning",
    afternoon: "afternoon",
    evening: "evening",
    night: "night"
};
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O  | Timezone (GMT)                 |
 * |  p! | Long localized time            |  P! | Long localized date            |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z  | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `format` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 * - `P` is long localized date format
 * - `p` is long localized time format
 */ const formatters = exports.formatters = {
    // Era
    G: function(date, token, localize) {
        const era = date.getFullYear() > 0 ? 1 : 0;
        switch(token){
            // AD, BC
            case "G":
            case "GG":
            case "GGG":
                return localize.era(era, {
                    width: "abbreviated"
                });
            // A, B
            case "GGGGG":
                return localize.era(era, {
                    width: "narrow"
                });
            // Anno Domini, Before Christ
            case "GGGG":
            default:
                return localize.era(era, {
                    width: "wide"
                });
        }
    },
    // Year
    y: function(date, token, localize) {
        // Ordinal number
        if (token === "yo") {
            const signedYear = date.getFullYear();
            // Returns 1 for 1 BC (which is year 0 in JavaScript)
            const year = signedYear > 0 ? signedYear : 1 - signedYear;
            return localize.ordinalNumber(year, {
                unit: "year"
            });
        }
        return _index7.lightFormatters.y(date, token);
    },
    // Local week-numbering year
    Y: function(date, token, localize, options) {
        const signedWeekYear = (0, _index5.getWeekYear)(date, options);
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        const weekYear = signedWeekYear > 0 ? signedWeekYear : 1 - signedWeekYear;
        // Two digit year
        if (token === "YY") {
            const twoDigitYear = weekYear % 100;
            return (0, _index6.addLeadingZeros)(twoDigitYear, 2);
        }
        // Ordinal number
        if (token === "Yo") return localize.ordinalNumber(weekYear, {
            unit: "year"
        });
        // Padding
        return (0, _index6.addLeadingZeros)(weekYear, token.length);
    },
    // ISO week-numbering year
    R: function(date, token) {
        const isoWeekYear = (0, _index3.getISOWeekYear)(date);
        // Padding
        return (0, _index6.addLeadingZeros)(isoWeekYear, token.length);
    },
    // Extended year. This is a single number designating the year of this calendar system.
    // The main difference between `y` and `u` localizers are B.C. years:
    // | Year | `y` | `u` |
    // |------|-----|-----|
    // | AC 1 |   1 |   1 |
    // | BC 1 |   1 |   0 |
    // | BC 2 |   2 |  -1 |
    // Also `yy` always returns the last two digits of a year,
    // while `uu` pads single digit years to 2 characters and returns other years unchanged.
    u: function(date, token) {
        const year = date.getFullYear();
        return (0, _index6.addLeadingZeros)(year, token.length);
    },
    // Quarter
    Q: function(date, token, localize) {
        const quarter = Math.ceil((date.getMonth() + 1) / 3);
        switch(token){
            // 1, 2, 3, 4
            case "Q":
                return String(quarter);
            // 01, 02, 03, 04
            case "QQ":
                return (0, _index6.addLeadingZeros)(quarter, 2);
            // 1st, 2nd, 3rd, 4th
            case "Qo":
                return localize.ordinalNumber(quarter, {
                    unit: "quarter"
                });
            // Q1, Q2, Q3, Q4
            case "QQQ":
                return localize.quarter(quarter, {
                    width: "abbreviated",
                    context: "formatting"
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case "QQQQQ":
                return localize.quarter(quarter, {
                    width: "narrow",
                    context: "formatting"
                });
            // 1st quarter, 2nd quarter, ...
            case "QQQQ":
            default:
                return localize.quarter(quarter, {
                    width: "wide",
                    context: "formatting"
                });
        }
    },
    // Stand-alone quarter
    q: function(date, token, localize) {
        const quarter = Math.ceil((date.getMonth() + 1) / 3);
        switch(token){
            // 1, 2, 3, 4
            case "q":
                return String(quarter);
            // 01, 02, 03, 04
            case "qq":
                return (0, _index6.addLeadingZeros)(quarter, 2);
            // 1st, 2nd, 3rd, 4th
            case "qo":
                return localize.ordinalNumber(quarter, {
                    unit: "quarter"
                });
            // Q1, Q2, Q3, Q4
            case "qqq":
                return localize.quarter(quarter, {
                    width: "abbreviated",
                    context: "standalone"
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case "qqqqq":
                return localize.quarter(quarter, {
                    width: "narrow",
                    context: "standalone"
                });
            // 1st quarter, 2nd quarter, ...
            case "qqqq":
            default:
                return localize.quarter(quarter, {
                    width: "wide",
                    context: "standalone"
                });
        }
    },
    // Month
    M: function(date, token, localize) {
        const month = date.getMonth();
        switch(token){
            case "M":
            case "MM":
                return _index7.lightFormatters.M(date, token);
            // 1st, 2nd, ..., 12th
            case "Mo":
                return localize.ordinalNumber(month + 1, {
                    unit: "month"
                });
            // Jan, Feb, ..., Dec
            case "MMM":
                return localize.month(month, {
                    width: "abbreviated",
                    context: "formatting"
                });
            // J, F, ..., D
            case "MMMMM":
                return localize.month(month, {
                    width: "narrow",
                    context: "formatting"
                });
            // January, February, ..., December
            case "MMMM":
            default:
                return localize.month(month, {
                    width: "wide",
                    context: "formatting"
                });
        }
    },
    // Stand-alone month
    L: function(date, token, localize) {
        const month = date.getMonth();
        switch(token){
            // 1, 2, ..., 12
            case "L":
                return String(month + 1);
            // 01, 02, ..., 12
            case "LL":
                return (0, _index6.addLeadingZeros)(month + 1, 2);
            // 1st, 2nd, ..., 12th
            case "Lo":
                return localize.ordinalNumber(month + 1, {
                    unit: "month"
                });
            // Jan, Feb, ..., Dec
            case "LLL":
                return localize.month(month, {
                    width: "abbreviated",
                    context: "standalone"
                });
            // J, F, ..., D
            case "LLLLL":
                return localize.month(month, {
                    width: "narrow",
                    context: "standalone"
                });
            // January, February, ..., December
            case "LLLL":
            default:
                return localize.month(month, {
                    width: "wide",
                    context: "standalone"
                });
        }
    },
    // Local week of year
    w: function(date, token, localize, options) {
        const week = (0, _index4.getWeek)(date, options);
        if (token === "wo") return localize.ordinalNumber(week, {
            unit: "week"
        });
        return (0, _index6.addLeadingZeros)(week, token.length);
    },
    // ISO week of year
    I: function(date, token, localize) {
        const isoWeek = (0, _index2.getISOWeek)(date);
        if (token === "Io") return localize.ordinalNumber(isoWeek, {
            unit: "week"
        });
        return (0, _index6.addLeadingZeros)(isoWeek, token.length);
    },
    // Day of the month
    d: function(date, token, localize) {
        if (token === "do") return localize.ordinalNumber(date.getDate(), {
            unit: "date"
        });
        return _index7.lightFormatters.d(date, token);
    },
    // Day of year
    D: function(date, token, localize) {
        const dayOfYear = (0, _index.getDayOfYear)(date);
        if (token === "Do") return localize.ordinalNumber(dayOfYear, {
            unit: "dayOfYear"
        });
        return (0, _index6.addLeadingZeros)(dayOfYear, token.length);
    },
    // Day of week
    E: function(date, token, localize) {
        const dayOfWeek = date.getDay();
        switch(token){
            // Tue
            case "E":
            case "EE":
            case "EEE":
                return localize.day(dayOfWeek, {
                    width: "abbreviated",
                    context: "formatting"
                });
            // T
            case "EEEEE":
                return localize.day(dayOfWeek, {
                    width: "narrow",
                    context: "formatting"
                });
            // Tu
            case "EEEEEE":
                return localize.day(dayOfWeek, {
                    width: "short",
                    context: "formatting"
                });
            // Tuesday
            case "EEEE":
            default:
                return localize.day(dayOfWeek, {
                    width: "wide",
                    context: "formatting"
                });
        }
    },
    // Local day of week
    e: function(date, token, localize, options) {
        const dayOfWeek = date.getDay();
        const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch(token){
            // Numerical value (Nth day of week with current locale or weekStartsOn)
            case "e":
                return String(localDayOfWeek);
            // Padded numerical value
            case "ee":
                return (0, _index6.addLeadingZeros)(localDayOfWeek, 2);
            // 1st, 2nd, ..., 7th
            case "eo":
                return localize.ordinalNumber(localDayOfWeek, {
                    unit: "day"
                });
            case "eee":
                return localize.day(dayOfWeek, {
                    width: "abbreviated",
                    context: "formatting"
                });
            // T
            case "eeeee":
                return localize.day(dayOfWeek, {
                    width: "narrow",
                    context: "formatting"
                });
            // Tu
            case "eeeeee":
                return localize.day(dayOfWeek, {
                    width: "short",
                    context: "formatting"
                });
            // Tuesday
            case "eeee":
            default:
                return localize.day(dayOfWeek, {
                    width: "wide",
                    context: "formatting"
                });
        }
    },
    // Stand-alone local day of week
    c: function(date, token, localize, options) {
        const dayOfWeek = date.getDay();
        const localDayOfWeek = (dayOfWeek - options.weekStartsOn + 8) % 7 || 7;
        switch(token){
            // Numerical value (same as in `e`)
            case "c":
                return String(localDayOfWeek);
            // Padded numerical value
            case "cc":
                return (0, _index6.addLeadingZeros)(localDayOfWeek, token.length);
            // 1st, 2nd, ..., 7th
            case "co":
                return localize.ordinalNumber(localDayOfWeek, {
                    unit: "day"
                });
            case "ccc":
                return localize.day(dayOfWeek, {
                    width: "abbreviated",
                    context: "standalone"
                });
            // T
            case "ccccc":
                return localize.day(dayOfWeek, {
                    width: "narrow",
                    context: "standalone"
                });
            // Tu
            case "cccccc":
                return localize.day(dayOfWeek, {
                    width: "short",
                    context: "standalone"
                });
            // Tuesday
            case "cccc":
            default:
                return localize.day(dayOfWeek, {
                    width: "wide",
                    context: "standalone"
                });
        }
    },
    // ISO day of week
    i: function(date, token, localize) {
        const dayOfWeek = date.getDay();
        const isoDayOfWeek = dayOfWeek === 0 ? 7 : dayOfWeek;
        switch(token){
            // 2
            case "i":
                return String(isoDayOfWeek);
            // 02
            case "ii":
                return (0, _index6.addLeadingZeros)(isoDayOfWeek, token.length);
            // 2nd
            case "io":
                return localize.ordinalNumber(isoDayOfWeek, {
                    unit: "day"
                });
            // Tue
            case "iii":
                return localize.day(dayOfWeek, {
                    width: "abbreviated",
                    context: "formatting"
                });
            // T
            case "iiiii":
                return localize.day(dayOfWeek, {
                    width: "narrow",
                    context: "formatting"
                });
            // Tu
            case "iiiiii":
                return localize.day(dayOfWeek, {
                    width: "short",
                    context: "formatting"
                });
            // Tuesday
            case "iiii":
            default:
                return localize.day(dayOfWeek, {
                    width: "wide",
                    context: "formatting"
                });
        }
    },
    // AM or PM
    a: function(date, token, localize) {
        const hours = date.getHours();
        const dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        switch(token){
            case "a":
            case "aa":
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "abbreviated",
                    context: "formatting"
                });
            case "aaa":
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "abbreviated",
                    context: "formatting"
                }).toLowerCase();
            case "aaaaa":
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "narrow",
                    context: "formatting"
                });
            case "aaaa":
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "wide",
                    context: "formatting"
                });
        }
    },
    // AM, PM, midnight, noon
    b: function(date, token, localize) {
        const hours = date.getHours();
        let dayPeriodEnumValue;
        if (hours === 12) dayPeriodEnumValue = dayPeriodEnum.noon;
        else if (hours === 0) dayPeriodEnumValue = dayPeriodEnum.midnight;
        else dayPeriodEnumValue = hours / 12 >= 1 ? "pm" : "am";
        switch(token){
            case "b":
            case "bb":
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "abbreviated",
                    context: "formatting"
                });
            case "bbb":
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "abbreviated",
                    context: "formatting"
                }).toLowerCase();
            case "bbbbb":
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "narrow",
                    context: "formatting"
                });
            case "bbbb":
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "wide",
                    context: "formatting"
                });
        }
    },
    // in the morning, in the afternoon, in the evening, at night
    B: function(date, token, localize) {
        const hours = date.getHours();
        let dayPeriodEnumValue;
        if (hours >= 17) dayPeriodEnumValue = dayPeriodEnum.evening;
        else if (hours >= 12) dayPeriodEnumValue = dayPeriodEnum.afternoon;
        else if (hours >= 4) dayPeriodEnumValue = dayPeriodEnum.morning;
        else dayPeriodEnumValue = dayPeriodEnum.night;
        switch(token){
            case "B":
            case "BB":
            case "BBB":
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "abbreviated",
                    context: "formatting"
                });
            case "BBBBB":
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "narrow",
                    context: "formatting"
                });
            case "BBBB":
            default:
                return localize.dayPeriod(dayPeriodEnumValue, {
                    width: "wide",
                    context: "formatting"
                });
        }
    },
    // Hour [1-12]
    h: function(date, token, localize) {
        if (token === "ho") {
            let hours = date.getHours() % 12;
            if (hours === 0) hours = 12;
            return localize.ordinalNumber(hours, {
                unit: "hour"
            });
        }
        return _index7.lightFormatters.h(date, token);
    },
    // Hour [0-23]
    H: function(date, token, localize) {
        if (token === "Ho") return localize.ordinalNumber(date.getHours(), {
            unit: "hour"
        });
        return _index7.lightFormatters.H(date, token);
    },
    // Hour [0-11]
    K: function(date, token, localize) {
        const hours = date.getHours() % 12;
        if (token === "Ko") return localize.ordinalNumber(hours, {
            unit: "hour"
        });
        return (0, _index6.addLeadingZeros)(hours, token.length);
    },
    // Hour [1-24]
    k: function(date, token, localize) {
        let hours = date.getHours();
        if (hours === 0) hours = 24;
        if (token === "ko") return localize.ordinalNumber(hours, {
            unit: "hour"
        });
        return (0, _index6.addLeadingZeros)(hours, token.length);
    },
    // Minute
    m: function(date, token, localize) {
        if (token === "mo") return localize.ordinalNumber(date.getMinutes(), {
            unit: "minute"
        });
        return _index7.lightFormatters.m(date, token);
    },
    // Second
    s: function(date, token, localize) {
        if (token === "so") return localize.ordinalNumber(date.getSeconds(), {
            unit: "second"
        });
        return _index7.lightFormatters.s(date, token);
    },
    // Fraction of second
    S: function(date, token) {
        return _index7.lightFormatters.S(date, token);
    },
    // Timezone (ISO-8601. If offset is 0, output is always `'Z'`)
    X: function(date, token, _localize) {
        const timezoneOffset = date.getTimezoneOffset();
        if (timezoneOffset === 0) return "Z";
        switch(token){
            // Hours and optional minutes
            case "X":
                return formatTimezoneWithOptionalMinutes(timezoneOffset);
            // Hours, minutes and optional seconds without `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `XX`
            case "XXXX":
            case "XX":
                return formatTimezone(timezoneOffset);
            // Hours, minutes and optional seconds with `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `XXX`
            case "XXXXX":
            case "XXX":
            default:
                return formatTimezone(timezoneOffset, ":");
        }
    },
    // Timezone (ISO-8601. If offset is 0, output is `'+00:00'` or equivalent)
    x: function(date, token, _localize) {
        const timezoneOffset = date.getTimezoneOffset();
        switch(token){
            // Hours and optional minutes
            case "x":
                return formatTimezoneWithOptionalMinutes(timezoneOffset);
            // Hours, minutes and optional seconds without `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `xx`
            case "xxxx":
            case "xx":
                return formatTimezone(timezoneOffset);
            // Hours, minutes and optional seconds with `:` delimiter
            // Note: neither ISO-8601 nor JavaScript supports seconds in timezone offsets
            // so this token always has the same output as `xxx`
            case "xxxxx":
            case "xxx":
            default:
                return formatTimezone(timezoneOffset, ":");
        }
    },
    // Timezone (GMT)
    O: function(date, token, _localize) {
        const timezoneOffset = date.getTimezoneOffset();
        switch(token){
            // Short
            case "O":
            case "OO":
            case "OOO":
                return "GMT" + formatTimezoneShort(timezoneOffset, ":");
            // Long
            case "OOOO":
            default:
                return "GMT" + formatTimezone(timezoneOffset, ":");
        }
    },
    // Timezone (specific non-location)
    z: function(date, token, _localize) {
        const timezoneOffset = date.getTimezoneOffset();
        switch(token){
            // Short
            case "z":
            case "zz":
            case "zzz":
                return "GMT" + formatTimezoneShort(timezoneOffset, ":");
            // Long
            case "zzzz":
            default:
                return "GMT" + formatTimezone(timezoneOffset, ":");
        }
    },
    // Seconds timestamp
    t: function(date, token, _localize) {
        const timestamp = Math.trunc(date.getTime() / 1000);
        return (0, _index6.addLeadingZeros)(timestamp, token.length);
    },
    // Milliseconds timestamp
    T: function(date, token, _localize) {
        const timestamp = date.getTime();
        return (0, _index6.addLeadingZeros)(timestamp, token.length);
    }
};
function formatTimezoneShort(offset, delimiter = "") {
    const sign = offset > 0 ? "-" : "+";
    const absOffset = Math.abs(offset);
    const hours = Math.trunc(absOffset / 60);
    const minutes = absOffset % 60;
    if (minutes === 0) return sign + String(hours);
    return sign + String(hours) + delimiter + (0, _index6.addLeadingZeros)(minutes, 2);
}
function formatTimezoneWithOptionalMinutes(offset, delimiter) {
    if (offset % 60 === 0) {
        const sign = offset > 0 ? "-" : "+";
        return sign + (0, _index6.addLeadingZeros)(Math.abs(offset) / 60, 2);
    }
    return formatTimezone(offset, delimiter);
}
function formatTimezone(offset, delimiter = "") {
    const sign = offset > 0 ? "-" : "+";
    const absOffset = Math.abs(offset);
    const hours = (0, _index6.addLeadingZeros)(Math.trunc(absOffset / 60), 2);
    const minutes = (0, _index6.addLeadingZeros)(absOffset % 60, 2);
    return sign + hours + delimiter + minutes;
}

},{"2b70b701cccd48ba":"lR8Io","ce71b00fa268a334":"fNkwc","be1f4bd5db98fc0b":"jWChc","4d35ee8b95213cb2":"1zHej","31a9b5233efbdb74":"7odmH","c78164dd4be2dfdf":"jcCHs","c129443cf4e77b69":"bOcKP"}],"lR8Io":[function(require,module,exports) {
"use strict";
exports.getDayOfYear = getDayOfYear;
var _index = require("e4c17eecd713ff7a");
var _index2 = require("984c12d93b064944");
var _index3 = require("92e9542334495a7a");
/**
 * @name getDayOfYear
 * @category Day Helpers
 * @summary Get the day of the year of the given date.
 *
 * @description
 * Get the day of the year of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The day of year
 *
 * @example
 * // Which day of the year is 2 July 2014?
 * const result = getDayOfYear(new Date(2014, 6, 2))
 * //=> 183
 */ function getDayOfYear(date) {
    const _date = (0, _index3.toDate)(date);
    const diff = (0, _index.differenceInCalendarDays)(_date, (0, _index2.startOfYear)(_date));
    const dayOfYear = diff + 1;
    return dayOfYear;
}

},{"e4c17eecd713ff7a":"dvya7","984c12d93b064944":"cnrH3","92e9542334495a7a":"actWA"}],"fNkwc":[function(require,module,exports) {
"use strict";
exports.getISOWeek = getISOWeek;
var _index = require("dd6520a678bb82fc");
var _index2 = require("4086029c683d4450");
var _index3 = require("5ae2977ff2643258");
var _index4 = require("e810a780c889259");
/**
 * @name getISOWeek
 * @category ISO Week Helpers
 * @summary Get the ISO week of the given date.
 *
 * @description
 * Get the ISO week of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The ISO week
 *
 * @example
 * // Which week of the ISO-week numbering year is 2 January 2005?
 * const result = getISOWeek(new Date(2005, 0, 2))
 * //=> 53
 */ function getISOWeek(date) {
    const _date = (0, _index4.toDate)(date);
    const diff = +(0, _index2.startOfISOWeek)(_date) - +(0, _index3.startOfISOWeekYear)(_date);
    // Round the number of weeks to the nearest integer because the number of
    // milliseconds in a week is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round(diff / _index.millisecondsInWeek) + 1;
}

},{"dd6520a678bb82fc":"1vXXw","4086029c683d4450":"iF0wL","5ae2977ff2643258":"eTm1l","e810a780c889259":"actWA"}],"1zHej":[function(require,module,exports) {
"use strict";
exports.getWeek = getWeek;
var _index = require("800ec1a6edc498ae");
var _index2 = require("5469df090b94480b");
var _index3 = require("28ef936dfd692f02");
var _index4 = require("9206fd6ff40c35c");
/**
 * The {@link getWeek} function options.
 */ /**
 * @name getWeek
 * @category Week Helpers
 * @summary Get the local week index of the given date.
 *
 * @description
 * Get the local week index of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 * @param options - An object with options
 *
 * @returns The week
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005 with default options?
 * const result = getWeek(new Date(2005, 0, 2))
 * //=> 2
 *
 * @example
 * // Which week of the local week numbering year is 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January?
 * const result = getWeek(new Date(2005, 0, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> 53
 */ function getWeek(date, options) {
    const _date = (0, _index4.toDate)(date);
    const diff = +(0, _index2.startOfWeek)(_date, options) - +(0, _index3.startOfWeekYear)(_date, options);
    // Round the number of weeks to the nearest integer because the number of
    // milliseconds in a week is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round(diff / _index.millisecondsInWeek) + 1;
}

},{"800ec1a6edc498ae":"1vXXw","5469df090b94480b":"dDDvv","28ef936dfd692f02":"diTjA","9206fd6ff40c35c":"actWA"}],"diTjA":[function(require,module,exports) {
"use strict";
exports.startOfWeekYear = startOfWeekYear;
var _index = require("14264660eed87479");
var _index2 = require("ed79bb16479293f4");
var _index3 = require("6d62705f140db78b");
var _index4 = require("81264b991a2a077c");
/**
 * The {@link startOfWeekYear} function options.
 */ /**
 * @name startOfWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Return the start of a local week-numbering year for the given date.
 *
 * @description
 * Return the start of a local week-numbering year.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The start of a week-numbering year
 *
 * @example
 * // The start of an a week-numbering year for 2 July 2005 with default settings:
 * const result = startOfWeekYear(new Date(2005, 6, 2))
 * //=> Sun Dec 26 2004 00:00:00
 *
 * @example
 * // The start of a week-numbering year for 2 July 2005
 * // if Monday is the first day of week
 * // and 4 January is always in the first week of the year:
 * const result = startOfWeekYear(new Date(2005, 6, 2), {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> Mon Jan 03 2005 00:00:00
 */ function startOfWeekYear(date, options) {
    const defaultOptions = (0, _index4.getDefaultOptions)();
    const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;
    const year = (0, _index2.getWeekYear)(date, options);
    const firstWeek = (0, _index.constructFrom)(date, 0);
    firstWeek.setFullYear(year, 0, firstWeekContainsDate);
    firstWeek.setHours(0, 0, 0, 0);
    const _date = (0, _index3.startOfWeek)(firstWeek, options);
    return _date;
}

},{"14264660eed87479":"hNMdA","ed79bb16479293f4":"7odmH","6d62705f140db78b":"dDDvv","81264b991a2a077c":"98fau"}],"7odmH":[function(require,module,exports) {
"use strict";
exports.getWeekYear = getWeekYear;
var _index = require("49bcd86a127941a3");
var _index2 = require("e4e186ff29cb44fa");
var _index3 = require("639f7e4c63562544");
var _index4 = require("cda7b6367e92badd");
/**
 * The {@link getWeekYear} function options.
 */ /**
 * @name getWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Get the local week-numbering year of the given date.
 *
 * @description
 * Get the local week-numbering year of the given date.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The local week-numbering year
 *
 * @example
 * // Which week numbering year is 26 December 2004 with the default settings?
 * const result = getWeekYear(new Date(2004, 11, 26))
 * //=> 2005
 *
 * @example
 * // Which week numbering year is 26 December 2004 if week starts on Saturday?
 * const result = getWeekYear(new Date(2004, 11, 26), { weekStartsOn: 6 })
 * //=> 2004
 *
 * @example
 * // Which week numbering year is 26 December 2004 if the first week contains 4 January?
 * const result = getWeekYear(new Date(2004, 11, 26), { firstWeekContainsDate: 4 })
 * //=> 2004
 */ function getWeekYear(date, options) {
    const _date = (0, _index3.toDate)(date);
    const year = _date.getFullYear();
    const defaultOptions = (0, _index4.getDefaultOptions)();
    const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;
    const firstWeekOfNextYear = (0, _index.constructFrom)(date, 0);
    firstWeekOfNextYear.setFullYear(year + 1, 0, firstWeekContainsDate);
    firstWeekOfNextYear.setHours(0, 0, 0, 0);
    const startOfNextYear = (0, _index2.startOfWeek)(firstWeekOfNextYear, options);
    const firstWeekOfThisYear = (0, _index.constructFrom)(date, 0);
    firstWeekOfThisYear.setFullYear(year, 0, firstWeekContainsDate);
    firstWeekOfThisYear.setHours(0, 0, 0, 0);
    const startOfThisYear = (0, _index2.startOfWeek)(firstWeekOfThisYear, options);
    if (_date.getTime() >= startOfNextYear.getTime()) return year + 1;
    else if (_date.getTime() >= startOfThisYear.getTime()) return year;
    else return year - 1;
}

},{"49bcd86a127941a3":"hNMdA","e4e186ff29cb44fa":"dDDvv","639f7e4c63562544":"actWA","cda7b6367e92badd":"98fau"}],"jcCHs":[function(require,module,exports) {
"use strict";
exports.addLeadingZeros = addLeadingZeros;
function addLeadingZeros(number, targetLength) {
    const sign = number < 0 ? "-" : "";
    const output = Math.abs(number).toString().padStart(targetLength, "0");
    return sign + output;
}

},{}],"bOcKP":[function(require,module,exports) {
"use strict";
exports.lightFormatters = void 0;
var _index = require("90a72a8e36ccc405");
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* |                                |
 * |  d  | Day of month                   |  D  |                                |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  m  | Minute                         |  M  | Month                          |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  y  | Year (abs)                     |  Y  |                                |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 */ const lightFormatters = exports.lightFormatters = {
    // Year
    y (date, token) {
        // From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_tokens
        // | Year     |     y | yy |   yyy |  yyyy | yyyyy |
        // |----------|-------|----|-------|-------|-------|
        // | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
        // | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
        // | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
        // | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
        // | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
        const signedYear = date.getFullYear();
        // Returns 1 for 1 BC (which is year 0 in JavaScript)
        const year = signedYear > 0 ? signedYear : 1 - signedYear;
        return (0, _index.addLeadingZeros)(token === "yy" ? year % 100 : year, token.length);
    },
    // Month
    M (date, token) {
        const month = date.getMonth();
        return token === "M" ? String(month + 1) : (0, _index.addLeadingZeros)(month + 1, 2);
    },
    // Day of the month
    d (date, token) {
        return (0, _index.addLeadingZeros)(date.getDate(), token.length);
    },
    // AM or PM
    a (date, token) {
        const dayPeriodEnumValue = date.getHours() / 12 >= 1 ? "pm" : "am";
        switch(token){
            case "a":
            case "aa":
                return dayPeriodEnumValue.toUpperCase();
            case "aaa":
                return dayPeriodEnumValue;
            case "aaaaa":
                return dayPeriodEnumValue[0];
            case "aaaa":
            default:
                return dayPeriodEnumValue === "am" ? "a.m." : "p.m.";
        }
    },
    // Hour [1-12]
    h (date, token) {
        return (0, _index.addLeadingZeros)(date.getHours() % 12 || 12, token.length);
    },
    // Hour [0-23]
    H (date, token) {
        return (0, _index.addLeadingZeros)(date.getHours(), token.length);
    },
    // Minute
    m (date, token) {
        return (0, _index.addLeadingZeros)(date.getMinutes(), token.length);
    },
    // Second
    s (date, token) {
        return (0, _index.addLeadingZeros)(date.getSeconds(), token.length);
    },
    // Fraction of second
    S (date, token) {
        const numberOfDigits = token.length;
        const milliseconds = date.getMilliseconds();
        const fractionalSeconds = Math.trunc(milliseconds * Math.pow(10, numberOfDigits - 3));
        return (0, _index.addLeadingZeros)(fractionalSeconds, token.length);
    }
};

},{"90a72a8e36ccc405":"jcCHs"}],"jsbdH":[function(require,module,exports) {
"use strict";
exports.longFormatters = void 0;
const dateLongFormatter = (pattern, formatLong)=>{
    switch(pattern){
        case "P":
            return formatLong.date({
                width: "short"
            });
        case "PP":
            return formatLong.date({
                width: "medium"
            });
        case "PPP":
            return formatLong.date({
                width: "long"
            });
        case "PPPP":
        default:
            return formatLong.date({
                width: "full"
            });
    }
};
const timeLongFormatter = (pattern, formatLong)=>{
    switch(pattern){
        case "p":
            return formatLong.time({
                width: "short"
            });
        case "pp":
            return formatLong.time({
                width: "medium"
            });
        case "ppp":
            return formatLong.time({
                width: "long"
            });
        case "pppp":
        default:
            return formatLong.time({
                width: "full"
            });
    }
};
const dateTimeLongFormatter = (pattern, formatLong)=>{
    const matchResult = pattern.match(/(P+)(p+)?/) || [];
    const datePattern = matchResult[1];
    const timePattern = matchResult[2];
    if (!timePattern) return dateLongFormatter(pattern, formatLong);
    let dateTimeFormat;
    switch(datePattern){
        case "P":
            dateTimeFormat = formatLong.dateTime({
                width: "short"
            });
            break;
        case "PP":
            dateTimeFormat = formatLong.dateTime({
                width: "medium"
            });
            break;
        case "PPP":
            dateTimeFormat = formatLong.dateTime({
                width: "long"
            });
            break;
        case "PPPP":
        default:
            dateTimeFormat = formatLong.dateTime({
                width: "full"
            });
            break;
    }
    return dateTimeFormat.replace("{{date}}", dateLongFormatter(datePattern, formatLong)).replace("{{time}}", timeLongFormatter(timePattern, formatLong));
};
const longFormatters = exports.longFormatters = {
    p: timeLongFormatter,
    P: dateTimeLongFormatter
};

},{}],"dFKqd":[function(require,module,exports) {
"use strict";
exports.isProtectedDayOfYearToken = isProtectedDayOfYearToken;
exports.isProtectedWeekYearToken = isProtectedWeekYearToken;
exports.warnOrThrowProtectedError = warnOrThrowProtectedError;
const dayOfYearTokenRE = /^D+$/;
const weekYearTokenRE = /^Y+$/;
const throwTokens = [
    "D",
    "DD",
    "YY",
    "YYYY"
];
function isProtectedDayOfYearToken(token) {
    return dayOfYearTokenRE.test(token);
}
function isProtectedWeekYearToken(token) {
    return weekYearTokenRE.test(token);
}
function warnOrThrowProtectedError(token, format, input) {
    const _message = message(token, format, input);
    console.warn(_message);
    if (throwTokens.includes(token)) throw new RangeError(_message);
}
function message(token, format, input) {
    const subject = token[0] === "Y" ? "years" : "days of the month";
    return `Use \`${token.toLowerCase()}\` instead of \`${token}\` (in \`${format}\`) for formatting ${subject} to the input \`${input}\`; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md`;
}

},{}],"aBg6Q":[function(require,module,exports) {
"use strict";
exports.formatDistance = formatDistance;
var _index = require("76afd985fbd5e2f0");
var _index2 = require("21024a7a0ba671b5");
var _index3 = require("6be099d87c2941d5");
var _index4 = require("db428a4e351bfe8c");
var _index5 = require("e25628e46d5fa234");
var _index6 = require("25e8a16723332367");
var _index7 = require("e890155e5b3527ab");
var _index8 = require("a60baec803ff2cf8");
/**
 * The {@link formatDistance} function options.
 */ /**
 * @name formatDistance
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words.
 *
 * | Distance between dates                                            | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance between dates | Result               |
 * |------------------------|----------------------|
 * | 0 secs ... 5 secs      | less than 5 seconds  |
 * | 5 secs ... 10 secs     | less than 10 seconds |
 * | 10 secs ... 20 secs    | less than 20 seconds |
 * | 20 secs ... 40 secs    | half a minute        |
 * | 40 secs ... 60 secs    | less than a minute   |
 * | 60 secs ... 90 secs    | 1 minute             |
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date
 * @param baseDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistance(new Date(2014, 6, 2), new Date(2015, 0, 1))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00, including seconds?
 * const result = formatDistance(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0),
 *   { includeSeconds: true }
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistance(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> 'about 1 year ago'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistance(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> 'pli ol 1 jaro'
 */ function formatDistance(date, baseDate, options) {
    const defaultOptions = (0, _index7.getDefaultOptions)();
    const locale = options?.locale ?? defaultOptions.locale ?? _index6.defaultLocale;
    const minutesInAlmostTwoDays = 2520;
    const comparison = (0, _index.compareAsc)(date, baseDate);
    if (isNaN(comparison)) throw new RangeError("Invalid time value");
    const localizeOptions = Object.assign({}, options, {
        addSuffix: options?.addSuffix,
        comparison: comparison
    });
    let dateLeft;
    let dateRight;
    if (comparison > 0) {
        dateLeft = (0, _index5.toDate)(baseDate);
        dateRight = (0, _index5.toDate)(date);
    } else {
        dateLeft = (0, _index5.toDate)(date);
        dateRight = (0, _index5.toDate)(baseDate);
    }
    const seconds = (0, _index4.differenceInSeconds)(dateRight, dateLeft);
    const offsetInSeconds = ((0, _index8.getTimezoneOffsetInMilliseconds)(dateRight) - (0, _index8.getTimezoneOffsetInMilliseconds)(dateLeft)) / 1000;
    const minutes = Math.round((seconds - offsetInSeconds) / 60);
    let months;
    // 0 up to 2 mins
    if (minutes < 2) {
        if (options?.includeSeconds) {
            if (seconds < 5) return locale.formatDistance("lessThanXSeconds", 5, localizeOptions);
            else if (seconds < 10) return locale.formatDistance("lessThanXSeconds", 10, localizeOptions);
            else if (seconds < 20) return locale.formatDistance("lessThanXSeconds", 20, localizeOptions);
            else if (seconds < 40) return locale.formatDistance("halfAMinute", 0, localizeOptions);
            else if (seconds < 60) return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
            else return locale.formatDistance("xMinutes", 1, localizeOptions);
        } else {
            if (minutes === 0) return locale.formatDistance("lessThanXMinutes", 1, localizeOptions);
            else return locale.formatDistance("xMinutes", minutes, localizeOptions);
        }
    } else if (minutes < 45) return locale.formatDistance("xMinutes", minutes, localizeOptions);
    else if (minutes < 90) return locale.formatDistance("aboutXHours", 1, localizeOptions);
    else if (minutes < _index2.minutesInDay) {
        const hours = Math.round(minutes / 60);
        return locale.formatDistance("aboutXHours", hours, localizeOptions);
    // 1 day up to 1.75 days
    } else if (minutes < minutesInAlmostTwoDays) return locale.formatDistance("xDays", 1, localizeOptions);
    else if (minutes < _index2.minutesInMonth) {
        const days = Math.round(minutes / _index2.minutesInDay);
        return locale.formatDistance("xDays", days, localizeOptions);
    // 1 month up to 2 months
    } else if (minutes < _index2.minutesInMonth * 2) {
        months = Math.round(minutes / _index2.minutesInMonth);
        return locale.formatDistance("aboutXMonths", months, localizeOptions);
    }
    months = (0, _index3.differenceInMonths)(dateRight, dateLeft);
    // 2 months up to 12 months
    if (months < 12) {
        const nearestMonth = Math.round(minutes / _index2.minutesInMonth);
        return locale.formatDistance("xMonths", nearestMonth, localizeOptions);
    // 1 year up to max Date
    } else {
        const monthsSinceStartOfYear = months % 12;
        const years = Math.trunc(months / 12);
        // N years up to 1 years 3 months
        if (monthsSinceStartOfYear < 3) return locale.formatDistance("aboutXYears", years, localizeOptions);
        else if (monthsSinceStartOfYear < 9) return locale.formatDistance("overXYears", years, localizeOptions);
        else return locale.formatDistance("almostXYears", years + 1, localizeOptions);
    }
}

},{"76afd985fbd5e2f0":"fgd9M","21024a7a0ba671b5":"1vXXw","6be099d87c2941d5":"i3gFX","db428a4e351bfe8c":"3IvxJ","e25628e46d5fa234":"actWA","25e8a16723332367":"iG9h0","e890155e5b3527ab":"98fau","a60baec803ff2cf8":"ke6Rl"}],"7aKP6":[function(require,module,exports) {
"use strict";
exports.formatDistanceStrict = formatDistanceStrict;
var _index = require("77731e5dbddcf175");
var _index2 = require("20f92626a7750d09");
var _index3 = require("d0708329596583b6");
var _index4 = require("e63395a7a1926bcc");
var _index5 = require("ecf31216a9de7ed1");
var _index6 = require("be3762b050b26a12");
var _index7 = require("cda5e80a9a45c076");
/**
 * The {@link formatDistanceStrict} function options.
 */ /**
 * The unit used to format the distance in {@link formatDistanceStrict}.
 */ /**
 * @name formatDistanceStrict
 * @category Common Helpers
 * @summary Return the distance between the given dates in words.
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date
 * @param baseDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.unit` must be 'second', 'minute', 'hour', 'day', 'month' or 'year'
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // What is the distance between 2 July 2014 and 1 January 2015?
 * const result = formatDistanceStrict(new Date(2014, 6, 2), new Date(2015, 0, 2))
 * //=> '6 months'
 *
 * @example
 * // What is the distance between 1 January 2015 00:00:15
 * // and 1 January 2015 00:00:00?
 * const result = formatDistanceStrict(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   new Date(2015, 0, 1, 0, 0, 0)
 * )
 * //=> '15 seconds'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, with a suffix?
 * const result = formatDistanceStrict(new Date(2015, 0, 1), new Date(2016, 0, 1), {
 *   addSuffix: true
 * })
 * //=> '1 year ago'
 *
 * @example
 * // What is the distance from 1 January 2016
 * // to 1 January 2015, in minutes?
 * const result = formatDistanceStrict(new Date(2016, 0, 1), new Date(2015, 0, 1), {
 *   unit: 'minute'
 * })
 * //=> '525600 minutes'
 *
 * @example
 * // What is the distance from 1 January 2015
 * // to 28 January 2015, in months, rounded up?
 * const result = formatDistanceStrict(new Date(2015, 0, 28), new Date(2015, 0, 1), {
 *   unit: 'month',
 *   roundingMethod: 'ceil'
 * })
 * //=> '1 month'
 *
 * @example
 * // What is the distance between 1 August 2016 and 1 January 2015 in Esperanto?
 * import { eoLocale } from 'date-fns/locale/eo'
 * const result = formatDistanceStrict(new Date(2016, 7, 1), new Date(2015, 0, 1), {
 *   locale: eoLocale
 * })
 * //=> '1 jaro'
 */ function formatDistanceStrict(date, baseDate, options) {
    const defaultOptions = (0, _index2.getDefaultOptions)();
    const locale = options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;
    const comparison = (0, _index5.compareAsc)(date, baseDate);
    if (isNaN(comparison)) throw new RangeError("Invalid time value");
    const localizeOptions = Object.assign({}, options, {
        addSuffix: options?.addSuffix,
        comparison: comparison
    });
    let dateLeft;
    let dateRight;
    if (comparison > 0) {
        dateLeft = (0, _index7.toDate)(baseDate);
        dateRight = (0, _index7.toDate)(date);
    } else {
        dateLeft = (0, _index7.toDate)(date);
        dateRight = (0, _index7.toDate)(baseDate);
    }
    const roundingMethod = (0, _index3.getRoundingMethod)(options?.roundingMethod ?? "round");
    const milliseconds = dateRight.getTime() - dateLeft.getTime();
    const minutes = milliseconds / _index6.millisecondsInMinute;
    const timezoneOffset = (0, _index4.getTimezoneOffsetInMilliseconds)(dateRight) - (0, _index4.getTimezoneOffsetInMilliseconds)(dateLeft);
    // Use DST-normalized difference in minutes for years, months and days;
    // use regular difference in minutes for hours, minutes and seconds.
    const dstNormalizedMinutes = (milliseconds - timezoneOffset) / _index6.millisecondsInMinute;
    const defaultUnit = options?.unit;
    let unit;
    if (!defaultUnit) {
        if (minutes < 1) unit = "second";
        else if (minutes < 60) unit = "minute";
        else if (minutes < _index6.minutesInDay) unit = "hour";
        else if (dstNormalizedMinutes < _index6.minutesInMonth) unit = "day";
        else if (dstNormalizedMinutes < _index6.minutesInYear) unit = "month";
        else unit = "year";
    } else unit = defaultUnit;
    // 0 up to 60 seconds
    if (unit === "second") {
        const seconds = roundingMethod(milliseconds / 1000);
        return locale.formatDistance("xSeconds", seconds, localizeOptions);
    // 1 up to 60 mins
    } else if (unit === "minute") {
        const roundedMinutes = roundingMethod(minutes);
        return locale.formatDistance("xMinutes", roundedMinutes, localizeOptions);
    // 1 up to 24 hours
    } else if (unit === "hour") {
        const hours = roundingMethod(minutes / 60);
        return locale.formatDistance("xHours", hours, localizeOptions);
    // 1 up to 30 days
    } else if (unit === "day") {
        const days = roundingMethod(dstNormalizedMinutes / _index6.minutesInDay);
        return locale.formatDistance("xDays", days, localizeOptions);
    // 1 up to 12 months
    } else if (unit === "month") {
        const months = roundingMethod(dstNormalizedMinutes / _index6.minutesInMonth);
        return months === 12 && defaultUnit !== "month" ? locale.formatDistance("xYears", 1, localizeOptions) : locale.formatDistance("xMonths", months, localizeOptions);
    // 1 year up to max Date
    } else {
        const years = roundingMethod(dstNormalizedMinutes / _index6.minutesInYear);
        return locale.formatDistance("xYears", years, localizeOptions);
    }
}

},{"77731e5dbddcf175":"iG9h0","20f92626a7750d09":"98fau","d0708329596583b6":"1ipL6","e63395a7a1926bcc":"ke6Rl","ecf31216a9de7ed1":"fgd9M","be3762b050b26a12":"1vXXw","cda5e80a9a45c076":"actWA"}],"eLZ5b":[function(require,module,exports) {
"use strict";
exports.formatDistanceToNow = formatDistanceToNow;
var _index = require("cafde881e9f4b03c");
var _index2 = require("b74aefd5706bbd8c");
/**
 * The {@link formatDistanceToNow} function options.
 */ /**
 * @name formatDistanceToNow
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given date and now in words.
 *
 * | Distance to now                                                   | Result              |
 * |-------------------------------------------------------------------|---------------------|
 * | 0 ... 30 secs                                                     | less than a minute  |
 * | 30 secs ... 1 min 30 secs                                         | 1 minute            |
 * | 1 min 30 secs ... 44 mins 30 secs                                 | [2..44] minutes     |
 * | 44 mins ... 30 secs ... 89 mins 30 secs                           | about 1 hour        |
 * | 89 mins 30 secs ... 23 hrs 59 mins 30 secs                        | about [2..24] hours |
 * | 23 hrs 59 mins 30 secs ... 41 hrs 59 mins 30 secs                 | 1 day               |
 * | 41 hrs 59 mins 30 secs ... 29 days 23 hrs 59 mins 30 secs         | [2..30] days        |
 * | 29 days 23 hrs 59 mins 30 secs ... 44 days 23 hrs 59 mins 30 secs | about 1 month       |
 * | 44 days 23 hrs 59 mins 30 secs ... 59 days 23 hrs 59 mins 30 secs | about 2 months      |
 * | 59 days 23 hrs 59 mins 30 secs ... 1 yr                           | [2..12] months      |
 * | 1 yr ... 1 yr 3 months                                            | about 1 year        |
 * | 1 yr 3 months ... 1 yr 9 month s                                  | over 1 year         |
 * | 1 yr 9 months ... 2 yrs                                           | almost 2 years      |
 * | N yrs ... N yrs 3 months                                          | about N years       |
 * | N yrs 3 months ... N yrs 9 months                                 | over N years        |
 * | N yrs 9 months ... N+1 yrs                                        | almost N+1 years    |
 *
 * With `options.includeSeconds == true`:
 * | Distance to now     | Result               |
 * |---------------------|----------------------|
 * | 0 secs ... 5 secs   | less than 5 seconds  |
 * | 5 secs ... 10 secs  | less than 10 seconds |
 * | 10 secs ... 20 secs | less than 20 seconds |
 * | 20 secs ... 40 secs | half a minute        |
 * | 40 secs ... 60 secs | less than a minute   |
 * | 60 secs ... 90 secs | 1 minute             |
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 * @param options - The object with options
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNow(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNow(
 *   new Date(2015, 0, 1, 0, 0, 15),
 *   {includeSeconds: true}
 * )
 * //=> 'less than 20 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNow(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in about 1 year'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 August 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNow(
 *   new Date(2016, 7, 1),
 *   {locale: eoLocale}
 * )
 * //=> 'pli ol 1 jaro'
 */ function formatDistanceToNow(date, options) {
    return (0, _index2.formatDistance)(date, (0, _index.constructNow)(date), options);
}

},{"cafde881e9f4b03c":"aJJt5","b74aefd5706bbd8c":"aBg6Q"}],"4IPnK":[function(require,module,exports) {
"use strict";
exports.formatDistanceToNowStrict = formatDistanceToNowStrict;
var _index = require("36ce334c2c1ca0b8");
var _index2 = require("21ad3b4fa8f4f584");
/**
 * The {@link formatDistanceToNowStrict} function options.
 */ /**
 * @name formatDistanceToNowStrict
 * @category Common Helpers
 * @summary Return the distance between the given date and now in words.
 * @pure false
 *
 * @description
 * Return the distance between the given dates in words, using strict units.
 * This is like `formatDistance`, but does not use helpers like 'almost', 'over',
 * 'less than' and the like.
 *
 * | Distance between dates | Result              |
 * |------------------------|---------------------|
 * | 0 ... 59 secs          | [0..59] seconds     |
 * | 1 ... 59 mins          | [1..59] minutes     |
 * | 1 ... 23 hrs           | [1..23] hours       |
 * | 1 ... 29 days          | [1..29] days        |
 * | 1 ... 11 months        | [1..11] months      |
 * | 1 ... N years          | [1..N]  years       |
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The distance in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `options.locale` must contain `formatDistance` property
 *
 * @example
 * // If today is 1 January 2015, what is the distance to 2 July 2014?
 * const result = formatDistanceToNowStrict(
 *   new Date(2014, 6, 2)
 * )
 * //=> '6 months'
 *
 * @example
 * // If now is 1 January 2015 00:00:00,
 * // what is the distance to 1 January 2015 00:00:15, including seconds?
 * const result = formatDistanceToNowStrict(
 *   new Date(2015, 0, 1, 0, 0, 15)
 * )
 * //=> '15 seconds'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016, with a suffix?
 * const result = formatDistanceToNowStrict(
 *   new Date(2016, 0, 1),
 *   {addSuffix: true}
 * )
 * //=> 'in 1 year'
 *
 * @example
 * // If today is 28 January 2015,
 * // what is the distance to 1 January 2015, in months, rounded up??
 * const result = formatDistanceToNowStrict(new Date(2015, 0, 1), {
 *   unit: 'month',
 *   roundingMethod: 'ceil'
 * })
 * //=> '1 month'
 *
 * @example
 * // If today is 1 January 2015,
 * // what is the distance to 1 January 2016 in Esperanto?
 * const eoLocale = require('date-fns/locale/eo')
 * const result = formatDistanceToNowStrict(
 *   new Date(2016, 0, 1),
 *   {locale: eoLocale}
 * )
 * //=> '1 jaro'
 */ function formatDistanceToNowStrict(date, options) {
    return (0, _index.formatDistanceStrict)(date, (0, _index2.constructNow)(date), options);
}

},{"36ce334c2c1ca0b8":"7aKP6","21ad3b4fa8f4f584":"aJJt5"}],"03dpp":[function(require,module,exports) {
"use strict";
exports.formatDuration = formatDuration;
var _index = require("865c4fe9be22610");
var _index2 = require("4f29b112438dcac0");
/**
 * The {@link formatDuration} function options.
 */ const defaultFormat = [
    "years",
    "months",
    "weeks",
    "days",
    "hours",
    "minutes",
    "seconds"
];
/**
 * @name formatDuration
 * @category Common Helpers
 * @summary Formats a duration in human-readable format
 *
 * @description
 * Return human-readable duration string i.e. "9 months 2 days"
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param duration - The duration to format
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @example
 * // Format full duration
 * formatDuration({
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30
 * })
 * //=> '2 years 9 months 1 week 7 days 5 hours 9 minutes 30 seconds'
 *
 * @example
 * // Format partial duration
 * formatDuration({ months: 9, days: 2 })
 * //=> '9 months 2 days'
 *
 * @example
 * // Customize the format
 * formatDuration(
 *   {
 *     years: 2,
 *     months: 9,
 *     weeks: 1,
 *     days: 7,
 *     hours: 5,
 *     minutes: 9,
 *     seconds: 30
 *   },
 *   { format: ['months', 'weeks'] }
 * ) === '9 months 1 week'
 *
 * @example
 * // Customize the zeros presence
 * formatDuration({ years: 0, months: 9 })
 * //=> '9 months'
 * formatDuration({ years: 0, months: 9 }, { zero: true })
 * //=> '0 years 9 months'
 *
 * @example
 * // Customize the delimiter
 * formatDuration({ years: 2, months: 9, weeks: 3 }, { delimiter: ', ' })
 * //=> '2 years, 9 months, 3 weeks'
 */ function formatDuration(duration, options) {
    const defaultOptions = (0, _index2.getDefaultOptions)();
    const locale = options?.locale ?? defaultOptions.locale ?? _index.defaultLocale;
    const format = options?.format ?? defaultFormat;
    const zero = options?.zero ?? false;
    const delimiter = options?.delimiter ?? " ";
    if (!locale.formatDistance) return "";
    const result = format.reduce((acc, unit)=>{
        const token = `x${unit.replace(/(^.)/, (m)=>m.toUpperCase())}`;
        const value = duration[unit];
        if (value !== undefined && (zero || duration[unit])) return acc.concat(locale.formatDistance(token, value));
        return acc;
    }, []).join(delimiter);
    return result;
}

},{"865c4fe9be22610":"iG9h0","4f29b112438dcac0":"98fau"}],"7QewX":[function(require,module,exports) {
"use strict";
exports.formatISO = formatISO;
var _index = require("6a44435540cefeea");
var _index2 = require("50b1943fc9f4c38");
/**
 * The {@link formatISO} function options.
 */ /**
 * @name formatISO
 * @category Common Helpers
 * @summary Format the date according to the ISO 8601 standard (https://support.sas.com/documentation/cdl/en/lrdict/64316/HTML/default/viewer.htm#a003169814.htm).
 *
 * @description
 * Return the formatted date string in ISO 8601 format. Options may be passed to control the parts and notations of the date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string (in loca.l time zone)
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601, short format (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918T190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, date only:
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 8601 format, time only (local time zone is UTC):
 * const result = formatISO(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52Z'
 */ function formatISO(date, options) {
    const _date = (0, _index.toDate)(date);
    if (isNaN(_date.getTime())) throw new RangeError("Invalid time value");
    const format = options?.format ?? "extended";
    const representation = options?.representation ?? "complete";
    let result = "";
    let tzOffset = "";
    const dateDelimiter = format === "extended" ? "-" : "";
    const timeDelimiter = format === "extended" ? ":" : "";
    // Representation is either 'date' or 'complete'
    if (representation !== "time") {
        const day = (0, _index2.addLeadingZeros)(_date.getDate(), 2);
        const month = (0, _index2.addLeadingZeros)(_date.getMonth() + 1, 2);
        const year = (0, _index2.addLeadingZeros)(_date.getFullYear(), 4);
        // yyyyMMdd or yyyy-MM-dd.
        result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
    }
    // Representation is either 'time' or 'complete'
    if (representation !== "date") {
        // Add the timezone.
        const offset = _date.getTimezoneOffset();
        if (offset !== 0) {
            const absoluteOffset = Math.abs(offset);
            const hourOffset = (0, _index2.addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);
            const minuteOffset = (0, _index2.addLeadingZeros)(absoluteOffset % 60, 2);
            // If less than 0, the sign is +, because it is ahead of time.
            const sign = offset < 0 ? "+" : "-";
            tzOffset = `${sign}${hourOffset}:${minuteOffset}`;
        } else tzOffset = "Z";
        const hour = (0, _index2.addLeadingZeros)(_date.getHours(), 2);
        const minute = (0, _index2.addLeadingZeros)(_date.getMinutes(), 2);
        const second = (0, _index2.addLeadingZeros)(_date.getSeconds(), 2);
        // If there's also date, separate it with time with 'T'
        const separator = result === "" ? "" : "T";
        // Creates a time string consisting of hour, minute, and second, separated by delimiters, if defined.
        const time = [
            hour,
            minute,
            second
        ].join(timeDelimiter);
        // HHmmss or HH:mm:ss.
        result = `${result}${separator}${time}${tzOffset}`;
    }
    return result;
}

},{"6a44435540cefeea":"actWA","50b1943fc9f4c38":"jcCHs"}],"eOZFo":[function(require,module,exports) {
"use strict";
exports.formatISO9075 = formatISO9075;
var _index = require("a53ff821fbf3766b");
var _index2 = require("7f4ae1d55b255987");
var _index3 = require("73a14fcf70d50fb2");
/**
 * The {@link formatISO9075} function options.
 */ /**
 * @name formatISO9075
 * @category Common Helpers
 * @summary Format the date according to the ISO 9075 standard (https://dev.mysql.com/doc/refman/5.7/en/date-and-time-functions.html#function_get-format).
 *
 * @description
 * Return the formatted date string in ISO 9075 format. Options may be passed to control the parts and notations of the date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18 19:00:52'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075, short format:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { format: 'basic' })
 * //=> '20190918 190052'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format, date only:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'date' })
 * //=> '2019-09-18'
 *
 * @example
 * // Represent 18 September 2019 in ISO 9075 format, time only:
 * const result = formatISO9075(new Date(2019, 8, 18, 19, 0, 52), { representation: 'time' })
 * //=> '19:00:52'
 */ function formatISO9075(date, options) {
    const _date = (0, _index2.toDate)(date);
    if (!(0, _index.isValid)(_date)) throw new RangeError("Invalid time value");
    const format = options?.format ?? "extended";
    const representation = options?.representation ?? "complete";
    let result = "";
    const dateDelimiter = format === "extended" ? "-" : "";
    const timeDelimiter = format === "extended" ? ":" : "";
    // Representation is either 'date' or 'complete'
    if (representation !== "time") {
        const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);
        const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);
        const year = (0, _index3.addLeadingZeros)(_date.getFullYear(), 4);
        // yyyyMMdd or yyyy-MM-dd.
        result = `${year}${dateDelimiter}${month}${dateDelimiter}${day}`;
    }
    // Representation is either 'time' or 'complete'
    if (representation !== "date") {
        const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);
        const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);
        const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);
        // If there's also date, separate it with time with a space
        const separator = result === "" ? "" : " ";
        // HHmmss or HH:mm:ss.
        result = `${result}${separator}${hour}${timeDelimiter}${minute}${timeDelimiter}${second}`;
    }
    return result;
}

},{"a53ff821fbf3766b":"gbOJY","7f4ae1d55b255987":"actWA","73a14fcf70d50fb2":"jcCHs"}],"6ZrQ5":[function(require,module,exports) {
"use strict";
exports.formatISODuration = formatISODuration;
/**
 * @name formatISODuration
 * @category Common Helpers
 * @summary Format a duration object according as ISO 8601 duration string
 *
 * @description
 * Format a duration object according to the ISO 8601 duration standard (https://www.digi.com/resources/documentation/digidocs//90001488-13/reference/r_iso_8601_duration_format.htm)
 *
 * @param duration - The duration to format
 *
 * @returns The ISO 8601 duration string
 *
 * @example
 * // Format the given duration as ISO 8601 string
 * const result = formatISODuration({
 *   years: 39,
 *   months: 2,
 *   days: 20,
 *   hours: 7,
 *   minutes: 5,
 *   seconds: 0
 * })
 * //=> 'P39Y2M20DT0H0M0S'
 */ function formatISODuration(duration) {
    const { years = 0, months = 0, days = 0, hours = 0, minutes = 0, seconds = 0 } = duration;
    return `P${years}Y${months}M${days}DT${hours}H${minutes}M${seconds}S`;
}

},{}],"4C2Wr":[function(require,module,exports) {
"use strict";
exports.formatRFC3339 = formatRFC3339;
var _index = require("9301294447d1f95b");
var _index2 = require("40b9430b575cdc41");
var _index3 = require("de42c97ba518f921");
/**
 * The {@link formatRFC3339} function options.
 */ /**
 * @name formatRFC3339
 * @category Common Helpers
 * @summary Format the date according to the RFC 3339 standard (https://tools.ietf.org/html/rfc3339#section-5.6).
 *
 * @description
 * Return the formatted date string in RFC 3339 format. Options may be passed to control the parts and notations of the date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options.
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in RFC 3339 format:
 * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52))
 * //=> '2019-09-18T19:00:52Z'
 *
 * @example
 * // Represent 18 September 2019 in RFC 3339 format, 3 digits of second fraction
 * formatRFC3339(new Date(2019, 8, 18, 19, 0, 52, 234), {
 *   fractionDigits: 3
 * })
 * //=> '2019-09-18T19:00:52.234Z'
 */ function formatRFC3339(date, options) {
    const _date = (0, _index2.toDate)(date);
    if (!(0, _index.isValid)(_date)) throw new RangeError("Invalid time value");
    const fractionDigits = options?.fractionDigits ?? 0;
    const day = (0, _index3.addLeadingZeros)(_date.getDate(), 2);
    const month = (0, _index3.addLeadingZeros)(_date.getMonth() + 1, 2);
    const year = _date.getFullYear();
    const hour = (0, _index3.addLeadingZeros)(_date.getHours(), 2);
    const minute = (0, _index3.addLeadingZeros)(_date.getMinutes(), 2);
    const second = (0, _index3.addLeadingZeros)(_date.getSeconds(), 2);
    let fractionalSecond = "";
    if (fractionDigits > 0) {
        const milliseconds = _date.getMilliseconds();
        const fractionalSeconds = Math.trunc(milliseconds * Math.pow(10, fractionDigits - 3));
        fractionalSecond = "." + (0, _index3.addLeadingZeros)(fractionalSeconds, fractionDigits);
    }
    let offset = "";
    const tzOffset = _date.getTimezoneOffset();
    if (tzOffset !== 0) {
        const absoluteOffset = Math.abs(tzOffset);
        const hourOffset = (0, _index3.addLeadingZeros)(Math.trunc(absoluteOffset / 60), 2);
        const minuteOffset = (0, _index3.addLeadingZeros)(absoluteOffset % 60, 2);
        // If less than 0, the sign is +, because it is ahead of time.
        const sign = tzOffset < 0 ? "+" : "-";
        offset = `${sign}${hourOffset}:${minuteOffset}`;
    } else offset = "Z";
    return `${year}-${month}-${day}T${hour}:${minute}:${second}${fractionalSecond}${offset}`;
}

},{"9301294447d1f95b":"gbOJY","40b9430b575cdc41":"actWA","de42c97ba518f921":"jcCHs"}],"4iRjv":[function(require,module,exports) {
"use strict";
exports.formatRFC7231 = formatRFC7231;
var _index = require("80159fbf1f8ee7a1");
var _index2 = require("8dc509179adf5406");
var _index3 = require("aca1dc202b36cc1a");
const days = [
    "Sun",
    "Mon",
    "Tue",
    "Wed",
    "Thu",
    "Fri",
    "Sat"
];
const months = [
    "Jan",
    "Feb",
    "Mar",
    "Apr",
    "May",
    "Jun",
    "Jul",
    "Aug",
    "Sep",
    "Oct",
    "Nov",
    "Dec"
];
/**
 * @name formatRFC7231
 * @category Common Helpers
 * @summary Format the date according to the RFC 7231 standard (https://tools.ietf.org/html/rfc7231#section-7.1.1.1).
 *
 * @description
 * Return the formatted date string in RFC 7231 format.
 * The result will always be in UTC timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 18 September 2019 in RFC 7231 format:
 * const result = formatRFC7231(new Date(2019, 8, 18, 19, 0, 52))
 * //=> 'Wed, 18 Sep 2019 19:00:52 GMT'
 */ function formatRFC7231(date) {
    const _date = (0, _index2.toDate)(date);
    if (!(0, _index.isValid)(_date)) throw new RangeError("Invalid time value");
    const dayName = days[_date.getUTCDay()];
    const dayOfMonth = (0, _index3.addLeadingZeros)(_date.getUTCDate(), 2);
    const monthName = months[_date.getUTCMonth()];
    const year = _date.getUTCFullYear();
    const hour = (0, _index3.addLeadingZeros)(_date.getUTCHours(), 2);
    const minute = (0, _index3.addLeadingZeros)(_date.getUTCMinutes(), 2);
    const second = (0, _index3.addLeadingZeros)(_date.getUTCSeconds(), 2);
    // Result variables.
    return `${dayName}, ${dayOfMonth} ${monthName} ${year} ${hour}:${minute}:${second} GMT`;
}

},{"80159fbf1f8ee7a1":"gbOJY","8dc509179adf5406":"actWA","aca1dc202b36cc1a":"jcCHs"}],"3VMIL":[function(require,module,exports) {
"use strict";
exports.formatRelative = formatRelative;
var _index = require("3409df3deaea49ab");
var _index2 = require("96f9b723c8a0b63d");
var _index3 = require("13fa994e827979d5");
var _index4 = require("6aa8aa7a8956e8a1");
var _index5 = require("673378ca2fd31ed4");
/**
 * The {@link formatRelative} function options.
 */ /**
 * @name formatRelative
 * @category Common Helpers
 * @summary Represent the date in words relative to the given base date.
 *
 * @description
 * Represent the date in words relative to the given base date.
 *
 * | Distance to the base date | Result                    |
 * |---------------------------|---------------------------|
 * | Previous 6 days           | last Sunday at 04:30 AM   |
 * | Last day                  | yesterday at 04:30 AM     |
 * | Same day                  | today at 04:30 AM         |
 * | Next day                  | tomorrow at 04:30 AM      |
 * | Next 6 days               | Sunday at 04:30 AM        |
 * | Other                     | 12/31/2017                |
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to format
 * @param baseDate - The date to compare with
 * @param options - An object with options
 *
 * @returns The date in words
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.locale` must contain `localize` property
 * @throws `options.locale` must contain `formatLong` property
 * @throws `options.locale` must contain `formatRelative` property
 *
 * @example
 * // Represent the date of 6 days ago in words relative to the given base date. In this example, today is Wednesday
 * const result = formatRelative(subDays(new Date(), 6), new Date())
 * //=> "last Thursday at 12:45 AM"
 */ function formatRelative(date, baseDate, options) {
    const _date = (0, _index3.toDate)(date);
    const _baseDate = (0, _index3.toDate)(baseDate);
    const defaultOptions = (0, _index5.getDefaultOptions)();
    const locale = options?.locale ?? defaultOptions.locale ?? _index4.defaultLocale;
    const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;
    const diff = (0, _index.differenceInCalendarDays)(_date, _baseDate);
    if (isNaN(diff)) throw new RangeError("Invalid time value");
    let token;
    if (diff < -6) token = "other";
    else if (diff < -1) token = "lastWeek";
    else if (diff < 0) token = "yesterday";
    else if (diff < 1) token = "today";
    else if (diff < 2) token = "tomorrow";
    else if (diff < 7) token = "nextWeek";
    else token = "other";
    const formatStr = locale.formatRelative(token, _date, _baseDate, {
        locale,
        weekStartsOn
    });
    return (0, _index2.format)(_date, formatStr, {
        locale,
        weekStartsOn
    });
}

},{"3409df3deaea49ab":"dvya7","96f9b723c8a0b63d":"eeV53","13fa994e827979d5":"actWA","6aa8aa7a8956e8a1":"iG9h0","673378ca2fd31ed4":"98fau"}],"4kcMW":[function(require,module,exports) {
"use strict";
exports.fromUnixTime = fromUnixTime;
var _index = require("b17c73af583a5f1e");
/**
 * @name fromUnixTime
 * @category Timestamp Helpers
 * @summary Create a date from a Unix timestamp.
 *
 * @description
 * Create a date from a Unix timestamp (in seconds). Decimal values will be discarded.
 *
 * @param unixTime - The given Unix timestamp (in seconds)
 *
 * @returns The date
 *
 * @example
 * // Create the date 29 February 2012 11:45:05:
 * const result = fromUnixTime(1330515905)
 * //=> Wed Feb 29 2012 11:45:05
 */ function fromUnixTime(unixTime) {
    return (0, _index.toDate)(unixTime * 1000);
}

},{"b17c73af583a5f1e":"actWA"}],"5yhYa":[function(require,module,exports) {
"use strict";
exports.getDate = getDate;
var _index = require("99a30b597441916f");
/**
 * @name getDate
 * @category Day Helpers
 * @summary Get the day of the month of the given date.
 *
 * @description
 * Get the day of the month of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The day of month
 *
 * @example
 * // Which day of the month is 29 February 2012?
 * const result = getDate(new Date(2012, 1, 29))
 * //=> 29
 */ function getDate(date) {
    const _date = (0, _index.toDate)(date);
    const dayOfMonth = _date.getDate();
    return dayOfMonth;
}

},{"99a30b597441916f":"actWA"}],"esFEi":[function(require,module,exports) {
"use strict";
exports.getDay = getDay;
var _index = require("74108f6e7f604e0c");
/**
 * @name getDay
 * @category Weekday Helpers
 * @summary Get the day of the week of the given date.
 *
 * @description
 * Get the day of the week of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The day of week, 0 represents Sunday
 *
 * @example
 * // Which day of the week is 29 February 2012?
 * const result = getDay(new Date(2012, 1, 29))
 * //=> 3
 */ function getDay(date) {
    const _date = (0, _index.toDate)(date);
    const day = _date.getDay();
    return day;
}

},{"74108f6e7f604e0c":"actWA"}],"iS77p":[function(require,module,exports) {
"use strict";
exports.getDaysInMonth = getDaysInMonth;
var _index = require("ce5d8149ab8c0adb");
var _index2 = require("160593c36b918fdc");
/**
 * @name getDaysInMonth
 * @category Month Helpers
 * @summary Get the number of days in a month of the given date.
 *
 * @description
 * Get the number of days in a month of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The number of days in a month
 *
 * @example
 * // How many days are in February 2000?
 * const result = getDaysInMonth(new Date(2000, 1))
 * //=> 29
 */ function getDaysInMonth(date) {
    const _date = (0, _index.toDate)(date);
    const year = _date.getFullYear();
    const monthIndex = _date.getMonth();
    const lastDayOfMonth = (0, _index2.constructFrom)(date, 0);
    lastDayOfMonth.setFullYear(year, monthIndex + 1, 0);
    lastDayOfMonth.setHours(0, 0, 0, 0);
    return lastDayOfMonth.getDate();
}

},{"ce5d8149ab8c0adb":"actWA","160593c36b918fdc":"hNMdA"}],"f28wB":[function(require,module,exports) {
"use strict";
exports.getDaysInYear = getDaysInYear;
var _index = require("275eab46cb701105");
var _index2 = require("f6dcd98ceb3f89a0");
/**
 * @name getDaysInYear
 * @category Year Helpers
 * @summary Get the number of days in a year of the given date.
 *
 * @description
 * Get the number of days in a year of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The number of days in a year
 *
 * @example
 * // How many days are in 2012?
 * const result = getDaysInYear(new Date(2012, 0, 1))
 * //=> 366
 */ function getDaysInYear(date) {
    const _date = (0, _index2.toDate)(date);
    if (String(new Date(_date)) === "Invalid Date") return NaN;
    return (0, _index.isLeapYear)(_date) ? 366 : 365;
}

},{"275eab46cb701105":"5jn07","f6dcd98ceb3f89a0":"actWA"}],"5jn07":[function(require,module,exports) {
"use strict";
exports.isLeapYear = isLeapYear;
var _index = require("1f2cd80e6083cd69");
/**
 * @name isLeapYear
 * @category Year Helpers
 * @summary Is the given date in the leap year?
 *
 * @description
 * Is the given date in the leap year?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in the leap year
 *
 * @example
 * // Is 1 September 2012 in the leap year?
 * const result = isLeapYear(new Date(2012, 8, 1))
 * //=> true
 */ function isLeapYear(date) {
    const _date = (0, _index.toDate)(date);
    const year = _date.getFullYear();
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

},{"1f2cd80e6083cd69":"actWA"}],"t2HDN":[function(require,module,exports) {
"use strict";
exports.getDecade = getDecade;
var _index = require("fe74f1dab16aabfd");
/**
 * @name getDecade
 * @category Decade Helpers
 * @summary Get the decade of the given date.
 *
 * @description
 * Get the decade of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The year of decade
 *
 * @example
 * // Which decade belongs 27 November 1942?
 * const result = getDecade(new Date(1942, 10, 27))
 * //=> 1940
 */ function getDecade(date) {
    // TODO: Switch to more technical definition in of decades that start with 1
    // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking
    // change, so it can only be done in 4.0.
    const _date = (0, _index.toDate)(date);
    const year = _date.getFullYear();
    const decade = Math.floor(year / 10) * 10;
    return decade;
}

},{"fe74f1dab16aabfd":"actWA"}],"fAxdh":[function(require,module,exports) {
"use strict";
exports.getDefaultOptions = getDefaultOptions;
var _index = require("4c8d0c918921978e");
/**
 * @name getDefaultOptions
 * @category Common Helpers
 * @summary Get default options.
 * @pure false
 *
 * @description
 * Returns an object that contains defaults for
 * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`
 * arguments for all functions.
 *
 * You can change these with [setDefaultOptions](https://date-fns.org/docs/setDefaultOptions).
 *
 * @returns The default options
 *
 * @example
 * const result = getDefaultOptions()
 * //=> {}
 *
 * @example
 * setDefaultOptions({ weekStarsOn: 1, firstWeekContainsDate: 4 })
 * const result = getDefaultOptions()
 * //=> { weekStarsOn: 1, firstWeekContainsDate: 4 }
 */ function getDefaultOptions() {
    return Object.assign({}, (0, _index.getDefaultOptions)());
}

},{"4c8d0c918921978e":"98fau"}],"kRfdi":[function(require,module,exports) {
"use strict";
exports.getHours = getHours;
var _index = require("dd6beddad3762c0e");
/**
 * @name getHours
 * @category Hour Helpers
 * @summary Get the hours of the given date.
 *
 * @description
 * Get the hours of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The hours
 *
 * @example
 * // Get the hours of 29 February 2012 11:45:00:
 * const result = getHours(new Date(2012, 1, 29, 11, 45))
 * //=> 11
 */ function getHours(date) {
    const _date = (0, _index.toDate)(date);
    const hours = _date.getHours();
    return hours;
}

},{"dd6beddad3762c0e":"actWA"}],"9d1Pg":[function(require,module,exports) {
"use strict";
exports.getISODay = getISODay;
var _index = require("cc4dec4ab039fecc");
/**
 * @name getISODay
 * @category Weekday Helpers
 * @summary Get the day of the ISO week of the given date.
 *
 * @description
 * Get the day of the ISO week of the given date,
 * which is 7 for Sunday, 1 for Monday etc.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The day of ISO week
 *
 * @example
 * // Which day of the ISO week is 26 February 2012?
 * const result = getISODay(new Date(2012, 1, 26))
 * //=> 7
 */ function getISODay(date) {
    const _date = (0, _index.toDate)(date);
    let day = _date.getDay();
    if (day === 0) day = 7;
    return day;
}

},{"cc4dec4ab039fecc":"actWA"}],"gwH0c":[function(require,module,exports) {
"use strict";
exports.getISOWeeksInYear = getISOWeeksInYear;
var _index = require("90fb06e2d0d5907e");
var _index2 = require("7e506b16fa621cd5");
var _index3 = require("bc85126805d4e6dd");
/**
 * @name getISOWeeksInYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * @description
 * Get the number of weeks in an ISO week-numbering year of the given date.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The number of ISO weeks in a year
 *
 * @example
 * // How many weeks are in ISO week-numbering year 2015?
 * const result = getISOWeeksInYear(new Date(2015, 1, 11))
 * //=> 53
 */ function getISOWeeksInYear(date) {
    const thisYear = (0, _index3.startOfISOWeekYear)(date);
    const nextYear = (0, _index3.startOfISOWeekYear)((0, _index.addWeeks)(thisYear, 60));
    const diff = +nextYear - +thisYear;
    // Round the number of weeks to the nearest integer because the number of
    // milliseconds in a week is not constant (e.g. it's different in the week of
    // the daylight saving time clock shift).
    return Math.round(diff / _index2.millisecondsInWeek);
}

},{"90fb06e2d0d5907e":"6sRN6","7e506b16fa621cd5":"1vXXw","bc85126805d4e6dd":"eTm1l"}],"2axfx":[function(require,module,exports) {
"use strict";
exports.getMilliseconds = getMilliseconds;
var _index = require("d90c57ddf052ab34");
/**
 * @name getMilliseconds
 * @category Millisecond Helpers
 * @summary Get the milliseconds of the given date.
 *
 * @description
 * Get the milliseconds of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The milliseconds
 *
 * @example
 * // Get the milliseconds of 29 February 2012 11:45:05.123:
 * const result = getMilliseconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 123
 */ function getMilliseconds(date) {
    const _date = (0, _index.toDate)(date);
    const milliseconds = _date.getMilliseconds();
    return milliseconds;
}

},{"d90c57ddf052ab34":"actWA"}],"jzd1E":[function(require,module,exports) {
"use strict";
exports.getMinutes = getMinutes;
var _index = require("942a2ec019737ce6");
/**
 * @name getMinutes
 * @category Minute Helpers
 * @summary Get the minutes of the given date.
 *
 * @description
 * Get the minutes of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The minutes
 *
 * @example
 * // Get the minutes of 29 February 2012 11:45:05:
 * const result = getMinutes(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 45
 */ function getMinutes(date) {
    const _date = (0, _index.toDate)(date);
    const minutes = _date.getMinutes();
    return minutes;
}

},{"942a2ec019737ce6":"actWA"}],"kio1B":[function(require,module,exports) {
"use strict";
exports.getMonth = getMonth;
var _index = require("72421b25c2b051d4");
/**
 * @name getMonth
 * @category Month Helpers
 * @summary Get the month of the given date.
 *
 * @description
 * Get the month of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The month index (0-11)
 *
 * @example
 * // Which month is 29 February 2012?
 * const result = getMonth(new Date(2012, 1, 29))
 * //=> 1
 */ function getMonth(date) {
    const _date = (0, _index.toDate)(date);
    const month = _date.getMonth();
    return month;
}

},{"72421b25c2b051d4":"actWA"}],"C2P0L":[function(require,module,exports) {
"use strict";
exports.getOverlappingDaysInIntervals = getOverlappingDaysInIntervals;
var _index = require("6933d52c426a98f2");
var _index2 = require("1bb45ca582d62a30");
var _index3 = require("557defd14b7a5bdb");
/**
 * @name getOverlappingDaysInIntervals
 * @category Interval Helpers
 * @summary Get the number of days that overlap in two time intervals
 *
 * @description
 * Get the number of days that overlap in two time intervals. It uses the time
 * between dates to calculate the number of days, rounding it up to include
 * partial days.
 *
 * Two equal 0-length intervals will result in 0. Two equal 1ms intervals will
 * result in 1.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param intervalLeft - The first interval to compare.
 * @param intervalRight - The second interval to compare.
 *
 * @returns The number of days that overlap in two time intervals
 *
 * @example
 * // For overlapping time intervals adds 1 for each started overlapping day:
 * getOverlappingDaysInIntervals(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 17), end: new Date(2014, 0, 21) }
 * )
 * //=> 3
 *
 * @example
 * // For non-overlapping time intervals returns 0:
 * getOverlappingDaysInIntervals(
 *   { start: new Date(2014, 0, 10), end: new Date(2014, 0, 20) },
 *   { start: new Date(2014, 0, 21), end: new Date(2014, 0, 22) }
 * )
 * //=> 0
 */ function getOverlappingDaysInIntervals(intervalLeft, intervalRight) {
    const [leftStart, leftEnd] = [
        +(0, _index3.toDate)(intervalLeft.start),
        +(0, _index3.toDate)(intervalLeft.end)
    ].sort((a, b)=>a - b);
    const [rightStart, rightEnd] = [
        +(0, _index3.toDate)(intervalRight.start),
        +(0, _index3.toDate)(intervalRight.end)
    ].sort((a, b)=>a - b);
    // Prevent NaN result if intervals don't overlap at all.
    const isOverlapping = leftStart < rightEnd && rightStart < leftEnd;
    if (!isOverlapping) return 0;
    // Remove the timezone offset to negate the DST effect on calculations.
    const overlapLeft = rightStart < leftStart ? leftStart : rightStart;
    const left = overlapLeft - (0, _index.getTimezoneOffsetInMilliseconds)(overlapLeft);
    const overlapRight = rightEnd > leftEnd ? leftEnd : rightEnd;
    const right = overlapRight - (0, _index.getTimezoneOffsetInMilliseconds)(overlapRight);
    // Ceil the number to include partial days too.
    return Math.ceil((right - left) / _index2.millisecondsInDay);
}

},{"6933d52c426a98f2":"ke6Rl","1bb45ca582d62a30":"1vXXw","557defd14b7a5bdb":"actWA"}],"22KCI":[function(require,module,exports) {
"use strict";
exports.getSeconds = getSeconds;
var _index = require("66e87215fb77615b");
/**
 * @name getSeconds
 * @category Second Helpers
 * @summary Get the seconds of the given date.
 *
 * @description
 * Get the seconds of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The seconds
 *
 * @example
 * // Get the seconds of 29 February 2012 11:45:05.123:
 * const result = getSeconds(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 5
 */ function getSeconds(date) {
    const _date = (0, _index.toDate)(date);
    const seconds = _date.getSeconds();
    return seconds;
}

},{"66e87215fb77615b":"actWA"}],"2lNv1":[function(require,module,exports) {
"use strict";
exports.getTime = getTime;
var _index = require("cdbfeffb1be44bad");
/**
 * @name getTime
 * @category Timestamp Helpers
 * @summary Get the milliseconds timestamp of the given date.
 *
 * @description
 * Get the milliseconds timestamp of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05.123:
 * const result = getTime(new Date(2012, 1, 29, 11, 45, 5, 123))
 * //=> 1330515905123
 */ function getTime(date) {
    const _date = (0, _index.toDate)(date);
    const timestamp = _date.getTime();
    return timestamp;
}

},{"cdbfeffb1be44bad":"actWA"}],"hP8NA":[function(require,module,exports) {
"use strict";
exports.getUnixTime = getUnixTime;
var _index = require("727af4f0a417140a");
/**
 * @name getUnixTime
 * @category Timestamp Helpers
 * @summary Get the seconds timestamp of the given date.
 *
 * @description
 * Get the seconds timestamp of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The timestamp
 *
 * @example
 * // Get the timestamp of 29 February 2012 11:45:05 CET:
 * const result = getUnixTime(new Date(2012, 1, 29, 11, 45, 5))
 * //=> 1330512305
 */ function getUnixTime(date) {
    return Math.trunc(+(0, _index.toDate)(date) / 1000);
}

},{"727af4f0a417140a":"actWA"}],"S6fio":[function(require,module,exports) {
"use strict";
exports.getWeekOfMonth = getWeekOfMonth;
var _index = require("e2f130fc886de9f1");
var _index2 = require("39bc8949ab4ed662");
var _index3 = require("8a37fb28123e5296");
var _index4 = require("53ea69d655b52576");
/**
 * The {@link getWeekOfMonth} function options.
 */ /**
 * @name getWeekOfMonth
 * @category Week Helpers
 * @summary Get the week of the month of the given date.
 *
 * @description
 * Get the week of the month of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The week of month
 *
 * @example
 * // Which week of the month is 9 November 2017?
 * const result = getWeekOfMonth(new Date(2017, 10, 9))
 * //=> 2
 */ function getWeekOfMonth(date, options) {
    const defaultOptions = (0, _index4.getDefaultOptions)();
    const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;
    const currentDayOfMonth = (0, _index.getDate)(date);
    if (isNaN(currentDayOfMonth)) return NaN;
    const startWeekDay = (0, _index2.getDay)((0, _index3.startOfMonth)(date));
    let lastDayOfFirstWeek = weekStartsOn - startWeekDay;
    if (lastDayOfFirstWeek <= 0) lastDayOfFirstWeek += 7;
    const remainingDaysAfterFirstWeek = currentDayOfMonth - lastDayOfFirstWeek;
    return Math.ceil(remainingDaysAfterFirstWeek / 7) + 1;
}

},{"e2f130fc886de9f1":"5yhYa","39bc8949ab4ed662":"esFEi","8a37fb28123e5296":"1cHoB","53ea69d655b52576":"98fau"}],"fqTdg":[function(require,module,exports) {
"use strict";
exports.getWeeksInMonth = getWeeksInMonth;
var _index = require("2093bc780dc07818");
var _index2 = require("72a2b06dbcb4c199");
var _index3 = require("2b3482d506165a82");
/**
 * The {@link getWeeksInMonth} function options.
 */ /**
 * @name getWeeksInMonth
 * @category Week Helpers
 * @summary Get the number of calendar weeks a month spans.
 *
 * @description
 * Get the number of calendar weeks the month in the given date spans.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 * @param options - An object with options.
 *
 * @returns The number of calendar weeks
 *
 * @example
 * // How many calendar weeks does February 2015 span?
 * const result = getWeeksInMonth(new Date(2015, 1, 8))
 * //=> 4
 *
 * @example
 * // If the week starts on Monday,
 * // how many calendar weeks does July 2017 span?
 * const result = getWeeksInMonth(new Date(2017, 6, 5), { weekStartsOn: 1 })
 * //=> 6
 */ function getWeeksInMonth(date, options) {
    return (0, _index.differenceInCalendarWeeks)((0, _index2.lastDayOfMonth)(date), (0, _index3.startOfMonth)(date), options) + 1;
}

},{"2093bc780dc07818":"iWbGJ","72a2b06dbcb4c199":"lVD0G","2b3482d506165a82":"1cHoB"}],"lVD0G":[function(require,module,exports) {
"use strict";
exports.lastDayOfMonth = lastDayOfMonth;
var _index = require("ab42a2c6a54cb32e");
/**
 * @name lastDayOfMonth
 * @category Month Helpers
 * @summary Return the last day of a month for the given date.
 *
 * @description
 * Return the last day of a month for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The last day of a month
 *
 * @example
 * // The last day of a month for 2 September 2014 11:55:00:
 * const result = lastDayOfMonth(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */ function lastDayOfMonth(date) {
    const _date = (0, _index.toDate)(date);
    const month = _date.getMonth();
    _date.setFullYear(_date.getFullYear(), month + 1, 0);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"ab42a2c6a54cb32e":"actWA"}],"glolq":[function(require,module,exports) {
"use strict";
exports.getYear = getYear;
var _index = require("3a87a8c7949402ce");
/**
 * @name getYear
 * @category Year Helpers
 * @summary Get the year of the given date.
 *
 * @description
 * Get the year of the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The given date
 *
 * @returns The year
 *
 * @example
 * // Which year is 2 July 2014?
 * const result = getYear(new Date(2014, 6, 2))
 * //=> 2014
 */ function getYear(date) {
    return (0, _index.toDate)(date).getFullYear();
}

},{"3a87a8c7949402ce":"actWA"}],"1t8KQ":[function(require,module,exports) {
"use strict";
exports.hoursToMilliseconds = hoursToMilliseconds;
var _index = require("c6a2f11605eee1dc");
/**
 * @name hoursToMilliseconds
 * @category  Conversion Helpers
 * @summary Convert hours to milliseconds.
 *
 * @description
 * Convert a number of hours to a full number of milliseconds.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param hours - number of hours to be converted
 *
 * @returns The number of hours converted to milliseconds
 *
 * @example
 * // Convert 2 hours to milliseconds:
 * const result = hoursToMilliseconds(2)
 * //=> 7200000
 */ function hoursToMilliseconds(hours) {
    return Math.trunc(hours * _index.millisecondsInHour);
}

},{"c6a2f11605eee1dc":"1vXXw"}],"3agDO":[function(require,module,exports) {
"use strict";
exports.hoursToMinutes = hoursToMinutes;
var _index = require("7806bd4b7c008d33");
/**
 * @name hoursToMinutes
 * @category Conversion Helpers
 * @summary Convert hours to minutes.
 *
 * @description
 * Convert a number of hours to a full number of minutes.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param hours - number of hours to be converted
 *
 * @returns The number of hours converted in minutes
 *
 * @example
 * // Convert 2 hours to minutes:
 * const result = hoursToMinutes(2)
 * //=> 120
 */ function hoursToMinutes(hours) {
    return Math.trunc(hours * _index.minutesInHour);
}

},{"7806bd4b7c008d33":"1vXXw"}],"l9tWS":[function(require,module,exports) {
"use strict";
exports.hoursToSeconds = hoursToSeconds;
var _index = require("d13f2ce94270497");
/**
 * @name hoursToSeconds
 * @category Conversion Helpers
 * @summary Convert hours to seconds.
 *
 * @description
 * Convert a number of hours to a full number of seconds.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param hours - The number of hours to be converted
 *
 * @returns The number of hours converted in seconds
 *
 * @example
 * // Convert 2 hours to seconds:
 * const result = hoursToSeconds(2)
 * //=> 7200
 */ function hoursToSeconds(hours) {
    return Math.trunc(hours * _index.secondsInHour);
}

},{"d13f2ce94270497":"1vXXw"}],"iZrN8":[function(require,module,exports) {
"use strict";
exports.interval = interval;
var _index = require("1d1e2184a95f4bcb");
/**
 * The {@link interval} function options.
 */ /**
 * @name interval
 * @category Interval Helpers
 * @summary Creates an interval object and validates its values.
 *
 * @description
 * Creates a normalized interval object and validates its values. If the interval is invalid, an exception is thrown.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param start - The start of the interval.
 * @param end - The end of the interval.
 * @param options - The options object.
 *
 * @throws `Start date is invalid` when `start` is invalid.
 * @throws `End date is invalid` when `end` is invalid.
 * @throws `End date must be after start date` when end is before `start` and `options.assertPositive` is true.
 *
 * @returns The normalized and validated interval object.
 */ function interval(start, end, options) {
    const _start = (0, _index.toDate)(start);
    if (isNaN(+_start)) throw new TypeError("Start date is invalid");
    const _end = (0, _index.toDate)(end);
    if (isNaN(+_end)) throw new TypeError("End date is invalid");
    if (options?.assertPositive && +_start > +_end) throw new TypeError("End date must be after start date");
    return {
        start: _start,
        end: _end
    };
}

},{"1d1e2184a95f4bcb":"actWA"}],"bpzaD":[function(require,module,exports) {
"use strict";
exports.intervalToDuration = intervalToDuration;
var _index = require("827ba40197711f17");
var _index2 = require("4670c3e5153a14f1");
var _index3 = require("4d89cf2304eec01b");
var _index4 = require("d4fa01e7bdf0d261");
var _index5 = require("c9ddd1dcdae84b00");
var _index6 = require("d480aeea2ed64577");
var _index7 = require("6a7ba40260a23b60");
var _index8 = require("b3b1015ee5b239ef");
/**
 * @name intervalToDuration
 * @category Common Helpers
 * @summary Convert interval to duration
 *
 * @description
 * Convert a interval object to a duration object.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param interval - The interval to convert to duration
 *
 * @returns The duration object
 *
 * @example
 * // Get the duration between January 15, 1929 and April 4, 1968.
 * intervalToDuration({
 *   start: new Date(1929, 0, 15, 12, 0, 0),
 *   end: new Date(1968, 3, 4, 19, 5, 0)
 * })
 * // => { years: 39, months: 2, days: 20, hours: 7, minutes: 5, seconds: 0 }
 */ function intervalToDuration(interval) {
    const start = (0, _index8.toDate)(interval.start);
    const end = (0, _index8.toDate)(interval.end);
    const duration = {};
    const years = (0, _index7.differenceInYears)(end, start);
    if (years) duration.years = years;
    const remainingMonths = (0, _index.add)(start, {
        years: duration.years
    });
    const months = (0, _index5.differenceInMonths)(end, remainingMonths);
    if (months) duration.months = months;
    const remainingDays = (0, _index.add)(remainingMonths, {
        months: duration.months
    });
    const days = (0, _index2.differenceInDays)(end, remainingDays);
    if (days) duration.days = days;
    const remainingHours = (0, _index.add)(remainingDays, {
        days: duration.days
    });
    const hours = (0, _index3.differenceInHours)(end, remainingHours);
    if (hours) duration.hours = hours;
    const remainingMinutes = (0, _index.add)(remainingHours, {
        hours: duration.hours
    });
    const minutes = (0, _index4.differenceInMinutes)(end, remainingMinutes);
    if (minutes) duration.minutes = minutes;
    const remainingSeconds = (0, _index.add)(remainingMinutes, {
        minutes: duration.minutes
    });
    const seconds = (0, _index6.differenceInSeconds)(end, remainingSeconds);
    if (seconds) duration.seconds = seconds;
    return duration;
}

},{"827ba40197711f17":"hboah","4670c3e5153a14f1":"fJoFi","4d89cf2304eec01b":"jnteW","d4fa01e7bdf0d261":"Z5oWO","c9ddd1dcdae84b00":"i3gFX","d480aeea2ed64577":"3IvxJ","6a7ba40260a23b60":"iFe68","b3b1015ee5b239ef":"actWA"}],"6yh4g":[function(require,module,exports) {
"use strict";
exports.intlFormat = intlFormat;
var _index = require("d534639a573fc6cf");
/**
 * The locale string (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locales_argument).
 */ /**
 * The format options (see: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/DateTimeFormat#options)
 */ /**
 * The locale options.
 */ /**
 * @name intlFormat
 * @category Common Helpers
 * @summary Format the date with Intl.DateTimeFormat (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat).
 *
 * @description
 * Return the formatted date string in the given format.
 * The method uses [`Intl.DateTimeFormat`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat) inside.
 * formatOptions are the same as [`Intl.DateTimeFormat` options](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat#using_options)
 *
 * > ⚠️ Please note that before Node version 13.0.0, only the locale data for en-US is available by default.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to format
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in middle-endian format:
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456))
 * //=> 10/4/2019
 */ /**
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to format
 * @param localeOptions - An object with locale
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in Korean.
 * // Convert the date with locale's options.
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   locale: 'ko-KR',
 * })
 * //=> 2019. 10. 4.
 */ /**
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to format
 * @param formatOptions - The format options
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019.
 * // Convert the date with format's options.
 * const result = intlFormat.default(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   year: 'numeric',
 *   month: 'numeric',
 *   day: 'numeric',
 *   hour: 'numeric',
 * })
 * //=> 10/4/2019, 12 PM
 */ /**
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to format
 * @param formatOptions - The format options
 * @param localeOptions - An object with locale
 *
 * @returns The formatted date string
 *
 * @throws `date` must not be Invalid Date
 *
 * @example
 * // Represent 4 October 2019 in German.
 * // Convert the date with format's options and locale's options.
 * const result = intlFormat(new Date(2019, 9, 4, 12, 30, 13, 456), {
 *   weekday: 'long',
 *   year: 'numeric',
 *   month: 'long',
 *   day: 'numeric',
 * }, {
 *   locale: 'de-DE',
 * })
 * //=> Freitag, 4. Oktober 2019
 */ function intlFormat(date, formatOrLocale, localeOptions) {
    let formatOptions;
    if (isFormatOptions(formatOrLocale)) formatOptions = formatOrLocale;
    else localeOptions = formatOrLocale;
    return new Intl.DateTimeFormat(localeOptions?.locale, formatOptions).format((0, _index.toDate)(date));
}
function isFormatOptions(opts) {
    return opts !== undefined && !("locale" in opts);
}

},{"d534639a573fc6cf":"actWA"}],"4dv0v":[function(require,module,exports) {
"use strict";
exports.intlFormatDistance = intlFormatDistance;
var _index = require("f683b56d8b54d7c3");
var _index2 = require("935f9cc6c5a9a358");
var _index3 = require("8a2925b448856fe2");
var _index4 = require("84a299c3d0590753");
var _index5 = require("b9bc0426e6224e82");
var _index6 = require("6742121b375dc4be");
var _index7 = require("c9619d002a71b38f");
var _index8 = require("15fe69ea99c7609f");
var _index9 = require("a52b9b370f1cb48f");
var _index10 = require("6058b1ebc4f00c8b");
/**
 * The {@link intlFormatDistance} function options.
 */ /**
 * The unit used to format the distance in {@link intlFormatDistance}.
 */ /**
 * @name intlFormatDistance
 * @category Common Helpers
 * @summary Formats distance between two dates in a human-readable format
 * @description
 * The function calculates the difference between two dates and formats it as a human-readable string.
 *
 * The function will pick the most appropriate unit depending on the distance between dates. For example, if the distance is a few hours, it might return `x hours`. If the distance is a few months, it might return `x months`.
 *
 * You can also specify a unit to force using it regardless of the distance to get a result like `123456 hours`.
 *
 * See the table below for the unit picking logic:
 *
 * | Distance between dates | Result (past)  | Result (future) |
 * | ---------------------- | -------------- | --------------- |
 * | 0 seconds              | now            | now             |
 * | 1-59 seconds           | X seconds ago  | in X seconds    |
 * | 1-59 minutes           | X minutes ago  | in X minutes    |
 * | 1-23 hours             | X hours ago    | in X hours      |
 * | 1 day                  | yesterday      | tomorrow        |
 * | 2-6 days               | X days ago     | in X days       |
 * | 7 days                 | last week      | next week       |
 * | 8 days-1 month         | X weeks ago    | in X weeks      |
 * | 1 month                | last month     | next month      |
 * | 2-3 months             | X months ago   | in X months     |
 * | 1 quarter              | last quarter   | next quarter    |
 * | 2-3 quarters           | X quarters ago | in X quarters   |
 * | 1 year                 | last year      | next year       |
 * | 2+ years               | X years ago    | in X years      |
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date
 * @param baseDate - The date to compare with.
 * @param options - An object with options.
 * See MDN for details [Locale identification and negotiation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#locale_identification_and_negotiation)
 * The narrow one could be similar to the short one for some locales.
 *
 * @returns The distance in words according to language-sensitive relative time formatting.
 *
 * @throws `date` must not be Invalid Date
 * @throws `baseDate` must not be Invalid Date
 * @throws `options.unit` must not be invalid Unit
 * @throws `options.locale` must not be invalid locale
 * @throws `options.localeMatcher` must not be invalid localeMatcher
 * @throws `options.numeric` must not be invalid numeric
 * @throws `options.style` must not be invalid style
 *
 * @example
 * // What is the distance between the dates when the fist date is after the second?
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0)
 * )
 * //=> 'in 1 hour'
 *
 * // What is the distance between the dates when the fist date is before the second?
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0)
 * )
 * //=> '1 hour ago'
 *
 * @example
 * // Use the unit option to force the function to output the result in quarters. Without setting it, the example would return "next year"
 * intlFormatDistance(
 *   new Date(1987, 6, 4, 10, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   { unit: 'quarter' }
 * )
 * //=> 'in 5 quarters'
 *
 * @example
 * // Use the locale option to get the result in Spanish. Without setting it, the example would return "in 1 hour".
 * intlFormatDistance(
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 10, 30, 0),
 *   { locale: 'es' }
 * )
 * //=> 'dentro de 1 hora'
 *
 * @example
 * // Use the numeric option to force the function to use numeric values. Without setting it, the example would return "tomorrow".
 * intlFormatDistance(
 *   new Date(1986, 3, 5, 11, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   { numeric: 'always' }
 * )
 * //=> 'in 1 day'
 *
 * @example
 * // Use the style option to force the function to use short values. Without setting it, the example would return "in 2 years".
 * intlFormatDistance(
 *   new Date(1988, 3, 4, 11, 30, 0),
 *   new Date(1986, 3, 4, 11, 30, 0),
 *   { style: 'short' }
 * )
 * //=> 'in 2 yr'
 */ function intlFormatDistance(date, baseDate, options) {
    let value = 0;
    let unit;
    const dateLeft = (0, _index10.toDate)(date);
    const dateRight = (0, _index10.toDate)(baseDate);
    if (!options?.unit) {
        // Get the unit based on diffInSeconds calculations if no unit is specified
        const diffInSeconds = (0, _index9.differenceInSeconds)(dateLeft, dateRight); // The smallest unit
        if (Math.abs(diffInSeconds) < _index.secondsInMinute) {
            value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);
            unit = "second";
        } else if (Math.abs(diffInSeconds) < _index.secondsInHour) {
            value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);
            unit = "minute";
        } else if (Math.abs(diffInSeconds) < _index.secondsInDay && Math.abs((0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) < 1) {
            value = (0, _index7.differenceInHours)(dateLeft, dateRight);
            unit = "hour";
        } else if (Math.abs(diffInSeconds) < _index.secondsInWeek && (value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight)) && Math.abs(value) < 7) unit = "day";
        else if (Math.abs(diffInSeconds) < _index.secondsInMonth) {
            value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);
            unit = "week";
        } else if (Math.abs(diffInSeconds) < _index.secondsInQuarter) {
            value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);
            unit = "month";
        } else if (Math.abs(diffInSeconds) < _index.secondsInYear) {
            if ((0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight) < 4) {
                // To filter out cases that are less than a year but match 4 quarters
                value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);
                unit = "quarter";
            } else {
                value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);
                unit = "year";
            }
        } else {
            value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);
            unit = "year";
        }
    } else {
        // Get the value if unit is specified
        unit = options?.unit;
        if (unit === "second") value = (0, _index9.differenceInSeconds)(dateLeft, dateRight);
        else if (unit === "minute") value = (0, _index8.differenceInMinutes)(dateLeft, dateRight);
        else if (unit === "hour") value = (0, _index7.differenceInHours)(dateLeft, dateRight);
        else if (unit === "day") value = (0, _index2.differenceInCalendarDays)(dateLeft, dateRight);
        else if (unit === "week") value = (0, _index5.differenceInCalendarWeeks)(dateLeft, dateRight);
        else if (unit === "month") value = (0, _index3.differenceInCalendarMonths)(dateLeft, dateRight);
        else if (unit === "quarter") value = (0, _index4.differenceInCalendarQuarters)(dateLeft, dateRight);
        else if (unit === "year") value = (0, _index6.differenceInCalendarYears)(dateLeft, dateRight);
    }
    const rtf = new Intl.RelativeTimeFormat(options?.locale, {
        localeMatcher: options?.localeMatcher,
        numeric: options?.numeric || "auto",
        style: options?.style
    });
    return rtf.format(value, unit);
}

},{"f683b56d8b54d7c3":"1vXXw","935f9cc6c5a9a358":"dvya7","8a2925b448856fe2":"21Qeg","84a299c3d0590753":"kWjSX","b9bc0426e6224e82":"iWbGJ","6742121b375dc4be":"e0VtU","c9619d002a71b38f":"jnteW","15fe69ea99c7609f":"Z5oWO","a52b9b370f1cb48f":"3IvxJ","6058b1ebc4f00c8b":"actWA"}],"2ogSo":[function(require,module,exports) {
"use strict";
exports.isAfter = isAfter;
var _index = require("d53a6d6418b9cc58");
/**
 * @name isAfter
 * @category Common Helpers
 * @summary Is the first date after the second one?
 *
 * @description
 * Is the first date after the second one?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date that should be after the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is after the second date
 *
 * @example
 * // Is 10 July 1989 after 11 February 1987?
 * const result = isAfter(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> true
 */ function isAfter(date, dateToCompare) {
    const _date = (0, _index.toDate)(date);
    const _dateToCompare = (0, _index.toDate)(dateToCompare);
    return _date.getTime() > _dateToCompare.getTime();
}

},{"d53a6d6418b9cc58":"actWA"}],"6AV3j":[function(require,module,exports) {
"use strict";
exports.isBefore = isBefore;
var _index = require("29711cec40df889c");
/**
 * @name isBefore
 * @category Common Helpers
 * @summary Is the first date before the second one?
 *
 * @description
 * Is the first date before the second one?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date that should be before the other one to return true
 * @param dateToCompare - The date to compare with
 *
 * @returns The first date is before the second date
 *
 * @example
 * // Is 10 July 1989 before 11 February 1987?
 * const result = isBefore(new Date(1989, 6, 10), new Date(1987, 1, 11))
 * //=> false
 */ function isBefore(date, dateToCompare) {
    const _date = (0, _index.toDate)(date);
    const _dateToCompare = (0, _index.toDate)(dateToCompare);
    return +_date < +_dateToCompare;
}

},{"29711cec40df889c":"actWA"}],"jqhPh":[function(require,module,exports) {
"use strict";
exports.isEqual = isEqual;
var _index = require("b079eb760d97c297");
/**
 * @name isEqual
 * @category Common Helpers
 * @summary Are the given dates equal?
 *
 * @description
 * Are the given dates equal?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to compare
 * @param dateRight - The second date to compare
 *
 * @returns The dates are equal
 *
 * @example
 * // Are 2 July 2014 06:30:45.000 and 2 July 2014 06:30:45.500 equal?
 * const result = isEqual(
 *   new Date(2014, 6, 2, 6, 30, 45, 0),
 *   new Date(2014, 6, 2, 6, 30, 45, 500)
 * )
 * //=> false
 */ function isEqual(leftDate, rightDate) {
    const _dateLeft = (0, _index.toDate)(leftDate);
    const _dateRight = (0, _index.toDate)(rightDate);
    return +_dateLeft === +_dateRight;
}

},{"b079eb760d97c297":"actWA"}],"9cexO":[function(require,module,exports) {
"use strict";
exports.isExists = isExists; /**
 * @name isExists
 * @category Common Helpers
 * @summary Is the given date exists?
 *
 * @description
 * Checks if the given arguments convert to an existing date.
 *
 * @param year - The year of the date to check
 * @param month - The month of the date to check
 * @param day - The day of the date to check
 *
 * @returns `true` if the date exists
 *
 * @example
 * // For the valid date:
 * const result = isExists(2018, 0, 31)
 * //=> true
 *
 * @example
 * // For the invalid date:
 * const result = isExists(2018, 1, 31)
 * //=> false
 */ 
function isExists(year, month, day) {
    const date = new Date(year, month, day);
    return date.getFullYear() === year && date.getMonth() === month && date.getDate() === day;
}

},{}],"dyMIP":[function(require,module,exports) {
"use strict";
exports.isFirstDayOfMonth = isFirstDayOfMonth;
var _index = require("e6a2c200e0f3bb19");
/**
 * @name isFirstDayOfMonth
 * @category Month Helpers
 * @summary Is the given date the first day of a month?
 *
 * @description
 * Is the given date the first day of a month?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check

 * @returns The date is the first day of a month
 *
 * @example
 * // Is 1 September 2014 the first day of a month?
 * const result = isFirstDayOfMonth(new Date(2014, 8, 1))
 * //=> true
 */ function isFirstDayOfMonth(date) {
    return (0, _index.toDate)(date).getDate() === 1;
}

},{"e6a2c200e0f3bb19":"actWA"}],"jzcyi":[function(require,module,exports) {
"use strict";
exports.isFriday = isFriday;
var _index = require("a962d5285978468b");
/**
 * @name isFriday
 * @category Weekday Helpers
 * @summary Is the given date Friday?
 *
 * @description
 * Is the given date Friday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is Friday
 *
 * @example
 * // Is 26 September 2014 Friday?
 * const result = isFriday(new Date(2014, 8, 26))
 * //=> true
 */ function isFriday(date) {
    return (0, _index.toDate)(date).getDay() === 5;
}

},{"a962d5285978468b":"actWA"}],"a6qf1":[function(require,module,exports) {
"use strict";
exports.isFuture = isFuture;
var _index = require("d167b947956d32f");
/**
 * @name isFuture
 * @category Common Helpers
 * @summary Is the given date in the future?
 * @pure false
 *
 * @description
 * Is the given date in the future?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in the future
 *
 * @example
 * // If today is 6 October 2014, is 31 December 2014 in the future?
 * const result = isFuture(new Date(2014, 11, 31))
 * //=> true
 */ function isFuture(date) {
    return +(0, _index.toDate)(date) > Date.now();
}

},{"d167b947956d32f":"actWA"}],"dnyZz":[function(require,module,exports) {
"use strict";
exports.isMatch = isMatch;
var _index = require("ce558029b0f6cdc9");
var _index2 = require("20451a1a433763e7");
/**
 * The {@link isMatch} function options.
 */ /**
 * @name isMatch
 * @category Common Helpers
 * @summary validates the date string against given formats
 *
 * @description
 * Return the true if given date is string correct against the given format else
 * will return false.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * isMatch('23 AM', 'HH a')
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Su            | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Su            |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `isMatch` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `isMatch` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `isMatch` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `isMatch('50', 'yy') //=> true`
 *
 *    `isMatch('75', 'yy') //=> true`
 *
 *    while `uu` will use the year as is:
 *
 *    `isMatch('50', 'uu') //=> true`
 *
 *    `isMatch('75', 'uu') //=> true`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)
 *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be checked in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are matched (e.g. when matching string 'January 1st' without a year),
 * the values will be taken from today's using `new Date()` date which works as a context of parsing.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateStr - The date string to verify
 * @param format - The string of tokens
 * @param options - An object with options.
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @returns Is format string a match for date string?
 *
 * @throws `options.locale` must contain `match` property
 * @throws use `yyyy` instead of `YYYY` for formatting years; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Match 11 February 2014 from middle-endian format:
 * const result = isMatch('02/11/2014', 'MM/dd/yyyy')
 * //=> true
 *
 * @example
 * // Match 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * const result = isMatch('28-a de februaro', "do 'de' MMMM", {
 *   locale: eo
 * })
 * //=> true
 */ function isMatch(dateStr, formatStr, options) {
    return (0, _index.isValid)((0, _index2.parse)(dateStr, formatStr, new Date(), options));
}

},{"ce558029b0f6cdc9":"gbOJY","20451a1a433763e7":"gNLjl"}],"gNLjl":[function(require,module,exports) {
"use strict";
Object.defineProperty(exports, "longFormatters", {
    enumerable: true,
    get: function() {
        return _index5.longFormatters;
    }
});
exports.parse = parse;
Object.defineProperty(exports, "parsers", {
    enumerable: true,
    get: function() {
        return _index7.parsers;
    }
});
var _index = require("c53acb33da1787e9");
var _index2 = require("137ba7b89008c236");
var _index3 = require("2c4f28d92a378acf");
var _index4 = require("6071c86d3eb95bcf");
var _index5 = require("adb831f4e34cf8d0");
var _index6 = require("26eed989fb024afe");
var _index7 = require("8e4cd03974d82cc0");
var _Setter = require("264f22812daf122f");
// Rexports of internal for libraries to use.
// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874
/**
 * The {@link parse} function options.
 */ // This RegExp consists of three parts separated by `|`:
// - [yYQqMLwIdDecihHKkms]o matches any available ordinal number token
//   (one of the certain letters followed by `o`)
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
const formattingTokensRegExp = /[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g;
// This RegExp catches symbols escaped by quotes, and also
// sequences of symbols P, p, and the combinations like `PPPPPPPppppp`
const longFormattingTokensRegExp = /P+p+|P+|p+|''|'(''|[^'])+('|$)|./g;
const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;
const notWhitespaceRegExp = /\S/;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @name parse
 * @category Common Helpers
 * @summary Parse the date.
 *
 * @description
 * Return the date parsed from string using the given format string.
 *
 * > ⚠️ Please note that the `format` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters in the format string wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the format string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 * with a few additions (see note 5 below the table).
 *
 * Not all tokens are compatible. Combinations that don't make sense or could lead to bugs are prohibited
 * and will throw `RangeError`. For example usage of 24-hour format token with AM/PM token will throw an exception:
 *
 * ```javascript
 * parse('23 AM', 'HH a', new Date())
 * //=> RangeError: The format string mustn't contain `HH` and `a` at the same time
 * ```
 *
 * See the compatibility table: https://docs.google.com/spreadsheets/d/e/2PACX-1vQOPU3xUhplll6dyoMmVUXHKl_8CRDs6_ueLmex3SoqwhuolkuN3O05l4rqx5h1dKX8eb46Ul-CCSrq/pubhtml?gid=0&single=true
 *
 * Accepted format string patterns:
 * | Unit                            |Prior| Pattern | Result examples                   | Notes |
 * |---------------------------------|-----|---------|-----------------------------------|-------|
 * | Era                             | 140 | G..GGG  | AD, BC                            |       |
 * |                                 |     | GGGG    | Anno Domini, Before Christ        | 2     |
 * |                                 |     | GGGGG   | A, B                              |       |
 * | Calendar year                   | 130 | y       | 44, 1, 1900, 2017, 9999           | 4     |
 * |                                 |     | yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | yy      | 44, 01, 00, 17                    | 4     |
 * |                                 |     | yyy     | 044, 001, 123, 999                | 4     |
 * |                                 |     | yyyy    | 0044, 0001, 1900, 2017            | 4     |
 * |                                 |     | yyyyy   | ...                               | 2,4   |
 * | Local week-numbering year       | 130 | Y       | 44, 1, 1900, 2017, 9000           | 4     |
 * |                                 |     | Yo      | 44th, 1st, 1900th, 9999999th      | 4,5   |
 * |                                 |     | YY      | 44, 01, 00, 17                    | 4,6   |
 * |                                 |     | YYY     | 044, 001, 123, 999                | 4     |
 * |                                 |     | YYYY    | 0044, 0001, 1900, 2017            | 4,6   |
 * |                                 |     | YYYYY   | ...                               | 2,4   |
 * | ISO week-numbering year         | 130 | R       | -43, 1, 1900, 2017, 9999, -9999   | 4,5   |
 * |                                 |     | RR      | -43, 01, 00, 17                   | 4,5   |
 * |                                 |     | RRR     | -043, 001, 123, 999, -999         | 4,5   |
 * |                                 |     | RRRR    | -0043, 0001, 2017, 9999, -9999    | 4,5   |
 * |                                 |     | RRRRR   | ...                               | 2,4,5 |
 * | Extended year                   | 130 | u       | -43, 1, 1900, 2017, 9999, -999    | 4     |
 * |                                 |     | uu      | -43, 01, 99, -99                  | 4     |
 * |                                 |     | uuu     | -043, 001, 123, 999, -999         | 4     |
 * |                                 |     | uuuu    | -0043, 0001, 2017, 9999, -9999    | 4     |
 * |                                 |     | uuuuu   | ...                               | 2,4   |
 * | Quarter (formatting)            | 120 | Q       | 1, 2, 3, 4                        |       |
 * |                                 |     | Qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | QQ      | 01, 02, 03, 04                    |       |
 * |                                 |     | QQQ     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | QQQQ    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | QQQQQ   | 1, 2, 3, 4                        | 4     |
 * | Quarter (stand-alone)           | 120 | q       | 1, 2, 3, 4                        |       |
 * |                                 |     | qo      | 1st, 2nd, 3rd, 4th                | 5     |
 * |                                 |     | qq      | 01, 02, 03, 04                    |       |
 * |                                 |     | qqq     | Q1, Q2, Q3, Q4                    |       |
 * |                                 |     | qqqq    | 1st quarter, 2nd quarter, ...     | 2     |
 * |                                 |     | qqqqq   | 1, 2, 3, 4                        | 3     |
 * | Month (formatting)              | 110 | M       | 1, 2, ..., 12                     |       |
 * |                                 |     | Mo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | MM      | 01, 02, ..., 12                   |       |
 * |                                 |     | MMM     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | MMMM    | January, February, ..., December  | 2     |
 * |                                 |     | MMMMM   | J, F, ..., D                      |       |
 * | Month (stand-alone)             | 110 | L       | 1, 2, ..., 12                     |       |
 * |                                 |     | Lo      | 1st, 2nd, ..., 12th               | 5     |
 * |                                 |     | LL      | 01, 02, ..., 12                   |       |
 * |                                 |     | LLL     | Jan, Feb, ..., Dec                |       |
 * |                                 |     | LLLL    | January, February, ..., December  | 2     |
 * |                                 |     | LLLLL   | J, F, ..., D                      |       |
 * | Local week of year              | 100 | w       | 1, 2, ..., 53                     |       |
 * |                                 |     | wo      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | ww      | 01, 02, ..., 53                   |       |
 * | ISO week of year                | 100 | I       | 1, 2, ..., 53                     | 5     |
 * |                                 |     | Io      | 1st, 2nd, ..., 53th               | 5     |
 * |                                 |     | II      | 01, 02, ..., 53                   | 5     |
 * | Day of month                    |  90 | d       | 1, 2, ..., 31                     |       |
 * |                                 |     | do      | 1st, 2nd, ..., 31st               | 5     |
 * |                                 |     | dd      | 01, 02, ..., 31                   |       |
 * | Day of year                     |  90 | D       | 1, 2, ..., 365, 366               | 7     |
 * |                                 |     | Do      | 1st, 2nd, ..., 365th, 366th       | 5     |
 * |                                 |     | DD      | 01, 02, ..., 365, 366             | 7     |
 * |                                 |     | DDD     | 001, 002, ..., 365, 366           |       |
 * |                                 |     | DDDD    | ...                               | 2     |
 * | Day of week (formatting)        |  90 | E..EEE  | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | EEEE    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | EEEEE   | M, T, W, T, F, S, S               |       |
 * |                                 |     | EEEEEE  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | ISO day of week (formatting)    |  90 | i       | 1, 2, 3, ..., 7                   | 5     |
 * |                                 |     | io      | 1st, 2nd, ..., 7th                | 5     |
 * |                                 |     | ii      | 01, 02, ..., 07                   | 5     |
 * |                                 |     | iii     | Mon, Tue, Wed, ..., Sun           | 5     |
 * |                                 |     | iiii    | Monday, Tuesday, ..., Sunday      | 2,5   |
 * |                                 |     | iiiii   | M, T, W, T, F, S, S               | 5     |
 * |                                 |     | iiiiii  | Mo, Tu, We, Th, Fr, Sa, Su        | 5     |
 * | Local day of week (formatting)  |  90 | e       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | eo      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | ee      | 02, 03, ..., 01                   |       |
 * |                                 |     | eee     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | eeee    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | eeeee   | M, T, W, T, F, S, S               |       |
 * |                                 |     | eeeeee  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | Local day of week (stand-alone) |  90 | c       | 2, 3, 4, ..., 1                   |       |
 * |                                 |     | co      | 2nd, 3rd, ..., 1st                | 5     |
 * |                                 |     | cc      | 02, 03, ..., 01                   |       |
 * |                                 |     | ccc     | Mon, Tue, Wed, ..., Sun           |       |
 * |                                 |     | cccc    | Monday, Tuesday, ..., Sunday      | 2     |
 * |                                 |     | ccccc   | M, T, W, T, F, S, S               |       |
 * |                                 |     | cccccc  | Mo, Tu, We, Th, Fr, Sa, Su        |       |
 * | AM, PM                          |  80 | a..aaa  | AM, PM                            |       |
 * |                                 |     | aaaa    | a.m., p.m.                        | 2     |
 * |                                 |     | aaaaa   | a, p                              |       |
 * | AM, PM, noon, midnight          |  80 | b..bbb  | AM, PM, noon, midnight            |       |
 * |                                 |     | bbbb    | a.m., p.m., noon, midnight        | 2     |
 * |                                 |     | bbbbb   | a, p, n, mi                       |       |
 * | Flexible day period             |  80 | B..BBB  | at night, in the morning, ...     |       |
 * |                                 |     | BBBB    | at night, in the morning, ...     | 2     |
 * |                                 |     | BBBBB   | at night, in the morning, ...     |       |
 * | Hour [1-12]                     |  70 | h       | 1, 2, ..., 11, 12                 |       |
 * |                                 |     | ho      | 1st, 2nd, ..., 11th, 12th         | 5     |
 * |                                 |     | hh      | 01, 02, ..., 11, 12               |       |
 * | Hour [0-23]                     |  70 | H       | 0, 1, 2, ..., 23                  |       |
 * |                                 |     | Ho      | 0th, 1st, 2nd, ..., 23rd          | 5     |
 * |                                 |     | HH      | 00, 01, 02, ..., 23               |       |
 * | Hour [0-11]                     |  70 | K       | 1, 2, ..., 11, 0                  |       |
 * |                                 |     | Ko      | 1st, 2nd, ..., 11th, 0th          | 5     |
 * |                                 |     | KK      | 01, 02, ..., 11, 00               |       |
 * | Hour [1-24]                     |  70 | k       | 24, 1, 2, ..., 23                 |       |
 * |                                 |     | ko      | 24th, 1st, 2nd, ..., 23rd         | 5     |
 * |                                 |     | kk      | 24, 01, 02, ..., 23               |       |
 * | Minute                          |  60 | m       | 0, 1, ..., 59                     |       |
 * |                                 |     | mo      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | mm      | 00, 01, ..., 59                   |       |
 * | Second                          |  50 | s       | 0, 1, ..., 59                     |       |
 * |                                 |     | so      | 0th, 1st, ..., 59th               | 5     |
 * |                                 |     | ss      | 00, 01, ..., 59                   |       |
 * | Seconds timestamp               |  40 | t       | 512969520                         |       |
 * |                                 |     | tt      | ...                               | 2     |
 * | Fraction of second              |  30 | S       | 0, 1, ..., 9                      |       |
 * |                                 |     | SS      | 00, 01, ..., 99                   |       |
 * |                                 |     | SSS     | 000, 001, ..., 999                |       |
 * |                                 |     | SSSS    | ...                               | 2     |
 * | Milliseconds timestamp          |  20 | T       | 512969520900                      |       |
 * |                                 |     | TT      | ...                               | 2     |
 * | Timezone (ISO-8601 w/ Z)        |  10 | X       | -08, +0530, Z                     |       |
 * |                                 |     | XX      | -0800, +0530, Z                   |       |
 * |                                 |     | XXX     | -08:00, +05:30, Z                 |       |
 * |                                 |     | XXXX    | -0800, +0530, Z, +123456          | 2     |
 * |                                 |     | XXXXX   | -08:00, +05:30, Z, +12:34:56      |       |
 * | Timezone (ISO-8601 w/o Z)       |  10 | x       | -08, +0530, +00                   |       |
 * |                                 |     | xx      | -0800, +0530, +0000               |       |
 * |                                 |     | xxx     | -08:00, +05:30, +00:00            | 2     |
 * |                                 |     | xxxx    | -0800, +0530, +0000, +123456      |       |
 * |                                 |     | xxxxx   | -08:00, +05:30, +00:00, +12:34:56 |       |
 * | Long localized date             |  NA | P       | 05/29/1453                        | 5,8   |
 * |                                 |     | PP      | May 29, 1453                      |       |
 * |                                 |     | PPP     | May 29th, 1453                    |       |
 * |                                 |     | PPPP    | Sunday, May 29th, 1453            | 2,5,8 |
 * | Long localized time             |  NA | p       | 12:00 AM                          | 5,8   |
 * |                                 |     | pp      | 12:00:00 AM                       |       |
 * | Combination of date and time    |  NA | Pp      | 05/29/1453, 12:00 AM              |       |
 * |                                 |     | PPpp    | May 29, 1453, 12:00:00 AM         |       |
 * |                                 |     | PPPpp   | May 29th, 1453 at ...             |       |
 * |                                 |     | PPPPpp  | Sunday, May 29th, 1453 at ...     | 2,5,8 |
 * Notes:
 * 1. "Formatting" units (e.g. formatting quarter) in the default en-US locale
 *    are the same as "stand-alone" units, but are different in some languages.
 *    "Formatting" units are declined according to the rules of the language
 *    in the context of a date. "Stand-alone" units are always nominative singular.
 *    In `format` function, they will produce different result:
 *
 *    `format(new Date(2017, 10, 6), 'do LLLL', {locale: cs}) //=> '6. listopad'`
 *
 *    `format(new Date(2017, 10, 6), 'do MMMM', {locale: cs}) //=> '6. listopadu'`
 *
 *    `parse` will try to match both formatting and stand-alone units interchangably.
 *
 * 2. Any sequence of the identical letters is a pattern, unless it is escaped by
 *    the single quote characters (see below).
 *    If the sequence is longer than listed in table:
 *    - for numerical units (`yyyyyyyy`) `parse` will try to match a number
 *      as wide as the sequence
 *    - for text units (`MMMMMMMM`) `parse` will try to match the widest variation of the unit.
 *      These variations are marked with "2" in the last column of the table.
 *
 * 3. `QQQQQ` and `qqqqq` could be not strictly numerical in some locales.
 *    These tokens represent the shortest form of the quarter.
 *
 * 4. The main difference between `y` and `u` patterns are B.C. years:
 *
 *    | Year | `y` | `u` |
 *    |------|-----|-----|
 *    | AC 1 |   1 |   1 |
 *    | BC 1 |   1 |   0 |
 *    | BC 2 |   2 |  -1 |
 *
 *    Also `yy` will try to guess the century of two digit year by proximity with `referenceDate`:
 *
 *    `parse('50', 'yy', new Date(2018, 0, 1)) //=> Sat Jan 01 2050 00:00:00`
 *
 *    `parse('75', 'yy', new Date(2018, 0, 1)) //=> Wed Jan 01 1975 00:00:00`
 *
 *    while `uu` will just assign the year as is:
 *
 *    `parse('50', 'uu', new Date(2018, 0, 1)) //=> Sat Jan 01 0050 00:00:00`
 *
 *    `parse('75', 'uu', new Date(2018, 0, 1)) //=> Tue Jan 01 0075 00:00:00`
 *
 *    The same difference is true for local and ISO week-numbering years (`Y` and `R`),
 *    except local week-numbering years are dependent on `options.weekStartsOn`
 *    and `options.firstWeekContainsDate` (compare [setISOWeekYear](https://date-fns.org/docs/setISOWeekYear)
 *    and [setWeekYear](https://date-fns.org/docs/setWeekYear)).
 *
 * 5. These patterns are not in the Unicode Technical Standard #35:
 *    - `i`: ISO day of week
 *    - `I`: ISO week of year
 *    - `R`: ISO week-numbering year
 *    - `o`: ordinal number modifier
 *    - `P`: long localized date
 *    - `p`: long localized time
 *
 * 6. `YY` and `YYYY` tokens represent week-numbering years but they are often confused with years.
 *    You should enable `options.useAdditionalWeekYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 7. `D` and `DD` tokens represent days of the year but they are ofthen confused with days of the month.
 *    You should enable `options.useAdditionalDayOfYearTokens` to use them. See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * 8. `P+` tokens do not have a defined priority since they are merely aliases to other tokens based
 *    on the given locale.
 *
 *    using `en-US` locale: `P` => `MM/dd/yyyy`
 *    using `en-US` locale: `p` => `hh:mm a`
 *    using `pt-BR` locale: `P` => `dd/MM/yyyy`
 *    using `pt-BR` locale: `p` => `HH:mm`
 *
 * Values will be assigned to the date in the descending order of its unit's priority.
 * Units of an equal priority overwrite each other in the order of appearance.
 *
 * If no values of higher priority are parsed (e.g. when parsing string 'January 1st' without a year),
 * the values will be taken from 3rd argument `referenceDate` which works as a context of parsing.
 *
 * `referenceDate` must be passed for correct work of the function.
 * If you're not sure which `referenceDate` to supply, create a new instance of Date:
 * `parse('02/11/2014', 'MM/dd/yyyy', new Date())`
 * In this case parsing will be done in the context of the current date.
 * If `referenceDate` is `Invalid Date` or a value not convertible to valid `Date`,
 * then `Invalid Date` will be returned.
 *
 * The result may vary by locale.
 *
 * If `formatString` matches with `dateString` but does not provides tokens, `referenceDate` will be returned.
 *
 * If parsing failed, `Invalid Date` will be returned.
 * Invalid Date is a Date, whose time value is NaN.
 * Time value of Date: http://es5.github.io/#x15.9.1.1
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateStr - The string to parse
 * @param formatStr - The string of tokens
 * @param referenceDate - defines values missing from the parsed dateString
 * @param options - An object with options.
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *   see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * @returns The parsed date
 *
 * @throws `options.locale` must contain `match` property
 * @throws use `yyyy` instead of `YYYY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `yy` instead of `YY` for formatting years using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `d` instead of `D` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws use `dd` instead of `DD` for formatting days of the month using [format provided] to the input [input provided]; see: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * // Parse 11 February 2014 from middle-endian format:
 * var result = parse('02/11/2014', 'MM/dd/yyyy', new Date())
 * //=> Tue Feb 11 2014 00:00:00
 *
 * @example
 * // Parse 28th of February in Esperanto locale in the context of 2010 year:
 * import eo from 'date-fns/locale/eo'
 * var result = parse('28-a de februaro', "do 'de' MMMM", new Date(2010, 0, 1), {
 *   locale: eo
 * })
 * //=> Sun Feb 28 2010 00:00:00
 */ function parse(dateStr, formatStr, referenceDate, options) {
    const defaultOptions = (0, _index2.getDefaultOptions)();
    const locale = options?.locale ?? defaultOptions.locale ?? _index3.defaultLocale;
    const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;
    const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;
    if (formatStr === "") {
        if (dateStr === "") return (0, _index4.toDate)(referenceDate);
        else return (0, _index.constructFrom)(referenceDate, NaN);
    }
    const subFnOptions = {
        firstWeekContainsDate,
        weekStartsOn,
        locale
    };
    // If timezone isn't specified, it will be set to the system timezone
    const setters = [
        new _Setter.DateToSystemTimezoneSetter()
    ];
    const tokens = formatStr.match(longFormattingTokensRegExp).map((substring)=>{
        const firstCharacter = substring[0];
        if (firstCharacter in _index5.longFormatters) {
            const longFormatter = _index5.longFormatters[firstCharacter];
            return longFormatter(substring, locale.formatLong);
        }
        return substring;
    }).join("").match(formattingTokensRegExp);
    const usedTokens = [];
    for (let token of tokens){
        if (!options?.useAdditionalWeekYearTokens && (0, _index6.isProtectedWeekYearToken)(token)) (0, _index6.warnOrThrowProtectedError)(token, formatStr, dateStr);
        if (!options?.useAdditionalDayOfYearTokens && (0, _index6.isProtectedDayOfYearToken)(token)) (0, _index6.warnOrThrowProtectedError)(token, formatStr, dateStr);
        const firstCharacter = token[0];
        const parser = _index7.parsers[firstCharacter];
        if (parser) {
            const { incompatibleTokens } = parser;
            if (Array.isArray(incompatibleTokens)) {
                const incompatibleToken = usedTokens.find((usedToken)=>incompatibleTokens.includes(usedToken.token) || usedToken.token === firstCharacter);
                if (incompatibleToken) throw new RangeError(`The format string mustn't contain \`${incompatibleToken.fullToken}\` and \`${token}\` at the same time`);
            } else if (parser.incompatibleTokens === "*" && usedTokens.length > 0) throw new RangeError(`The format string mustn't contain \`${token}\` and any other token at the same time`);
            usedTokens.push({
                token: firstCharacter,
                fullToken: token
            });
            const parseResult = parser.run(dateStr, token, locale.match, subFnOptions);
            if (!parseResult) return (0, _index.constructFrom)(referenceDate, NaN);
            setters.push(parseResult.setter);
            dateStr = parseResult.rest;
        } else {
            if (firstCharacter.match(unescapedLatinCharacterRegExp)) throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
            // Replace two single quote characters with one single quote character
            if (token === "''") token = "'";
            else if (firstCharacter === "'") token = cleanEscapedString(token);
            // Cut token from string, or, if string doesn't match the token, return Invalid Date
            if (dateStr.indexOf(token) === 0) dateStr = dateStr.slice(token.length);
            else return (0, _index.constructFrom)(referenceDate, NaN);
        }
    }
    // Check if the remaining input contains something other than whitespace
    if (dateStr.length > 0 && notWhitespaceRegExp.test(dateStr)) return (0, _index.constructFrom)(referenceDate, NaN);
    const uniquePrioritySetters = setters.map((setter)=>setter.priority).sort((a, b)=>b - a).filter((priority, index, array)=>array.indexOf(priority) === index).map((priority)=>setters.filter((setter)=>setter.priority === priority).sort((a, b)=>b.subPriority - a.subPriority)).map((setterArray)=>setterArray[0]);
    let date = (0, _index4.toDate)(referenceDate);
    if (isNaN(date.getTime())) return (0, _index.constructFrom)(referenceDate, NaN);
    const flags = {};
    for (const setter of uniquePrioritySetters){
        if (!setter.validate(date, subFnOptions)) return (0, _index.constructFrom)(referenceDate, NaN);
        const result = setter.set(date, flags, subFnOptions);
        // Result is tuple (date, flags)
        if (Array.isArray(result)) {
            date = result[0];
            Object.assign(flags, result[1]);
        // Result is date
        } else date = result;
    }
    return (0, _index.constructFrom)(referenceDate, date);
}
function cleanEscapedString(input) {
    return input.match(escapedStringRegExp)[1].replace(doubleQuoteRegExp, "'");
}

},{"c53acb33da1787e9":"hNMdA","137ba7b89008c236":"fAxdh","2c4f28d92a378acf":"iG9h0","6071c86d3eb95bcf":"actWA","adb831f4e34cf8d0":"jsbdH","26eed989fb024afe":"dFKqd","8e4cd03974d82cc0":"2oKol","264f22812daf122f":"kYmxL"}],"2oKol":[function(require,module,exports) {
"use strict";
exports.parsers = void 0;
var _EraParser = require("73877e75490bba35");
var _YearParser = require("534dbfd035c7afae");
var _LocalWeekYearParser = require("ab4450ec135364ae");
var _ISOWeekYearParser = require("85d23a44ac18532c");
var _ExtendedYearParser = require("179a88ef12f61a71");
var _QuarterParser = require("93232ed2f05ef2c3");
var _StandAloneQuarterParser = require("c7c6a63c21fda1ba");
var _MonthParser = require("9ccf03b202560527");
var _StandAloneMonthParser = require("250a7296cb9bd5d4");
var _LocalWeekParser = require("bcc281e24017fb49");
var _ISOWeekParser = require("b4a87b1ad452a0e8");
var _DateParser = require("ad6bc827b2f368e4");
var _DayOfYearParser = require("bb234ddd84c3b240");
var _DayParser = require("2d736796a40046e7");
var _LocalDayParser = require("f161fb5cee20fef5");
var _StandAloneLocalDayParser = require("3943fd5b7ea48b68");
var _ISODayParser = require("86ddbd54e3fa3dd2");
var _AMPMParser = require("b283318e653dbb40");
var _AMPMMidnightParser = require("d8c3b56df6ed7ec1");
var _DayPeriodParser = require("2c8f7cc10db4bdc2");
var _Hour1to12Parser = require("c7c3fbe3abdaa79c");
var _Hour0to23Parser = require("3a24c22368eeaf29");
var _Hour0To11Parser = require("7689b873a1aa23cf");
var _Hour1To24Parser = require("f2e24da70f1ce437");
var _MinuteParser = require("5b7be433eba9622a");
var _SecondParser = require("810daf17248738a9");
var _FractionOfSecondParser = require("7e5fdf1f35b534dd");
var _ISOTimezoneWithZParser = require("46cb8c323b79446f");
var _ISOTimezoneParser = require("1eeadf9bee6760d9");
var _TimestampSecondsParser = require("41f3d3eb54e297d3");
var _TimestampMillisecondsParser = require("85a0d4684faae6f7");
/*
 * |     | Unit                           |     | Unit                           |
 * |-----|--------------------------------|-----|--------------------------------|
 * |  a  | AM, PM                         |  A* | Milliseconds in day            |
 * |  b  | AM, PM, noon, midnight         |  B  | Flexible day period            |
 * |  c  | Stand-alone local day of week  |  C* | Localized hour w/ day period   |
 * |  d  | Day of month                   |  D  | Day of year                    |
 * |  e  | Local day of week              |  E  | Day of week                    |
 * |  f  |                                |  F* | Day of week in month           |
 * |  g* | Modified Julian day            |  G  | Era                            |
 * |  h  | Hour [1-12]                    |  H  | Hour [0-23]                    |
 * |  i! | ISO day of week                |  I! | ISO week of year               |
 * |  j* | Localized hour w/ day period   |  J* | Localized hour w/o day period  |
 * |  k  | Hour [1-24]                    |  K  | Hour [0-11]                    |
 * |  l* | (deprecated)                   |  L  | Stand-alone month              |
 * |  m  | Minute                         |  M  | Month                          |
 * |  n  |                                |  N  |                                |
 * |  o! | Ordinal number modifier        |  O* | Timezone (GMT)                 |
 * |  p  |                                |  P  |                                |
 * |  q  | Stand-alone quarter            |  Q  | Quarter                        |
 * |  r* | Related Gregorian year         |  R! | ISO week-numbering year        |
 * |  s  | Second                         |  S  | Fraction of second             |
 * |  t! | Seconds timestamp              |  T! | Milliseconds timestamp         |
 * |  u  | Extended year                  |  U* | Cyclic year                    |
 * |  v* | Timezone (generic non-locat.)  |  V* | Timezone (location)            |
 * |  w  | Local week of year             |  W* | Week of month                  |
 * |  x  | Timezone (ISO-8601 w/o Z)      |  X  | Timezone (ISO-8601)            |
 * |  y  | Year (abs)                     |  Y  | Local week-numbering year      |
 * |  z* | Timezone (specific non-locat.) |  Z* | Timezone (aliases)             |
 *
 * Letters marked by * are not implemented but reserved by Unicode standard.
 *
 * Letters marked by ! are non-standard, but implemented by date-fns:
 * - `o` modifies the previous token to turn it into an ordinal (see `parse` docs)
 * - `i` is ISO day of week. For `i` and `ii` is returns numeric ISO week days,
 *   i.e. 7 for Sunday, 1 for Monday, etc.
 * - `I` is ISO week of year, as opposed to `w` which is local week of year.
 * - `R` is ISO week-numbering year, as opposed to `Y` which is local week-numbering year.
 *   `R` is supposed to be used in conjunction with `I` and `i`
 *   for universal ISO week-numbering date, whereas
 *   `Y` is supposed to be used in conjunction with `w` and `e`
 *   for week-numbering date specific to the locale.
 */ // eslint-disable-next-line @typescript-eslint/no-explicit-any -- It's ok, we want any here
const parsers = exports.parsers = {
    G: new _EraParser.EraParser(),
    y: new _YearParser.YearParser(),
    Y: new _LocalWeekYearParser.LocalWeekYearParser(),
    R: new _ISOWeekYearParser.ISOWeekYearParser(),
    u: new _ExtendedYearParser.ExtendedYearParser(),
    Q: new _QuarterParser.QuarterParser(),
    q: new _StandAloneQuarterParser.StandAloneQuarterParser(),
    M: new _MonthParser.MonthParser(),
    L: new _StandAloneMonthParser.StandAloneMonthParser(),
    w: new _LocalWeekParser.LocalWeekParser(),
    I: new _ISOWeekParser.ISOWeekParser(),
    d: new _DateParser.DateParser(),
    D: new _DayOfYearParser.DayOfYearParser(),
    E: new _DayParser.DayParser(),
    e: new _LocalDayParser.LocalDayParser(),
    c: new _StandAloneLocalDayParser.StandAloneLocalDayParser(),
    i: new _ISODayParser.ISODayParser(),
    a: new _AMPMParser.AMPMParser(),
    b: new _AMPMMidnightParser.AMPMMidnightParser(),
    B: new _DayPeriodParser.DayPeriodParser(),
    h: new _Hour1to12Parser.Hour1to12Parser(),
    H: new _Hour0to23Parser.Hour0to23Parser(),
    K: new _Hour0To11Parser.Hour0To11Parser(),
    k: new _Hour1To24Parser.Hour1To24Parser(),
    m: new _MinuteParser.MinuteParser(),
    s: new _SecondParser.SecondParser(),
    S: new _FractionOfSecondParser.FractionOfSecondParser(),
    X: new _ISOTimezoneWithZParser.ISOTimezoneWithZParser(),
    x: new _ISOTimezoneParser.ISOTimezoneParser(),
    t: new _TimestampSecondsParser.TimestampSecondsParser(),
    T: new _TimestampMillisecondsParser.TimestampMillisecondsParser()
};

},{"73877e75490bba35":"iYhYF","534dbfd035c7afae":"kf1Wf","ab4450ec135364ae":"jDcds","85d23a44ac18532c":"ap5xA","179a88ef12f61a71":"lW99W","93232ed2f05ef2c3":"dsY9k","c7c6a63c21fda1ba":"aSfyW","9ccf03b202560527":"EYpZp","250a7296cb9bd5d4":"jbrkt","bcc281e24017fb49":"8rNDN","b4a87b1ad452a0e8":"dfdwt","ad6bc827b2f368e4":"fYv6C","bb234ddd84c3b240":"9cmRX","2d736796a40046e7":"ksDae","f161fb5cee20fef5":"jgAEp","3943fd5b7ea48b68":"4FMAA","86ddbd54e3fa3dd2":"eSKw6","b283318e653dbb40":"eqkPE","d8c3b56df6ed7ec1":"g3D3d","2c8f7cc10db4bdc2":"hkyVS","c7c3fbe3abdaa79c":"iRbV7","3a24c22368eeaf29":"fq0MM","7689b873a1aa23cf":"ejbIY","f2e24da70f1ce437":"eEJho","5b7be433eba9622a":"8XZpF","810daf17248738a9":"khJSC","7e5fdf1f35b534dd":"jT3Md","46cb8c323b79446f":"kUxSQ","1eeadf9bee6760d9":"ee2MS","41f3d3eb54e297d3":"8CwPK","85a0d4684faae6f7":"czEu6"}],"iYhYF":[function(require,module,exports) {
"use strict";
exports.EraParser = void 0;
var _Parser = require("3b6644e454c96bd5");
class EraParser extends _Parser.Parser {
    priority = 140;
    parse(dateString, token, match) {
        switch(token){
            // AD, BC
            case "G":
            case "GG":
            case "GGG":
                return match.era(dateString, {
                    width: "abbreviated"
                }) || match.era(dateString, {
                    width: "narrow"
                });
            // A, B
            case "GGGGG":
                return match.era(dateString, {
                    width: "narrow"
                });
            // Anno Domini, Before Christ
            case "GGGG":
            default:
                return match.era(dateString, {
                    width: "wide"
                }) || match.era(dateString, {
                    width: "abbreviated"
                }) || match.era(dateString, {
                    width: "narrow"
                });
        }
    }
    set(date, flags, value) {
        flags.era = value;
        date.setFullYear(value, 0, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "R",
        "u",
        "t",
        "T"
    ];
}
exports.EraParser = EraParser;

},{"3b6644e454c96bd5":"6E7ou"}],"6E7ou":[function(require,module,exports) {
"use strict";
exports.Parser = void 0;
var _Setter = require("f9ccbe426415522b");
class Parser {
    run(dateString, token, match, options) {
        const result = this.parse(dateString, token, match, options);
        if (!result) return null;
        return {
            setter: new _Setter.ValueSetter(result.value, this.validate, this.set, this.priority, this.subPriority),
            rest: result.rest
        };
    }
    validate(_utcDate, _value, _options) {
        return true;
    }
}
exports.Parser = Parser;

},{"f9ccbe426415522b":"kYmxL"}],"kYmxL":[function(require,module,exports) {
"use strict";
exports.ValueSetter = exports.Setter = exports.DateToSystemTimezoneSetter = void 0;
var _index = require("22daacd9886737df");
var _index2 = require("80c3b8dc52dd858");
const TIMEZONE_UNIT_PRIORITY = 10;
class Setter {
    subPriority = 0;
    validate(_utcDate, _options) {
        return true;
    }
}
exports.Setter = Setter;
class ValueSetter extends Setter {
    constructor(value, validateValue, setValue, priority, subPriority){
        super();
        this.value = value;
        this.validateValue = validateValue;
        this.setValue = setValue;
        this.priority = priority;
        if (subPriority) this.subPriority = subPriority;
    }
    validate(date, options) {
        return this.validateValue(date, this.value, options);
    }
    set(date, flags, options) {
        return this.setValue(date, flags, this.value, options);
    }
}
exports.ValueSetter = ValueSetter;
class DateToSystemTimezoneSetter extends Setter {
    priority = TIMEZONE_UNIT_PRIORITY;
    subPriority = -1;
    set(date, flags) {
        if (flags.timestampIsSet) return date;
        return (0, _index2.constructFrom)(date, (0, _index.transpose)(date, Date));
    }
}
exports.DateToSystemTimezoneSetter = DateToSystemTimezoneSetter;

},{"22daacd9886737df":"4DdgS","80c3b8dc52dd858":"hNMdA"}],"4DdgS":[function(require,module,exports) {
"use strict";
exports.transpose = transpose;
var _index = require("e4cedfb3eb078b8e");
/**
 * @name transpose
 * @category Generic Helpers
 * @summary Transpose the date to the given constructor.
 *
 * @description
 * The function transposes the date to the given constructor. It helps you
 * to transpose the date in the system time zone to say `UTCDate` or any other
 * date extension.
 *
 * @typeParam DateInputType - The input `Date` type derived from the passed argument.
 * @typeParam DateOutputType - The output `Date` type derived from the passed constructor.
 *
 * @param fromDate - The date to use values from
 * @param constructor - The date constructor to use
 *
 * @returns Date transposed to the given constructor
 *
 * @example
 * // Create July 10, 2022 00:00 in locale time zone
 * const date = new Date(2022, 6, 10)
 * //=> 'Sun Jul 10 2022 00:00:00 GMT+0800 (Singapore Standard Time)'
 *
 * @example
 * // Transpose the date to July 10, 2022 00:00 in UTC
 * transpose(date, UTCDate)
 * //=> 'Sun Jul 10 2022 00:00:00 GMT+0000 (Coordinated Universal Time)'
 */ function transpose(fromDate, constructor) {
    const date = constructor instanceof Date ? (0, _index.constructFrom)(constructor, 0) : new constructor(0);
    date.setFullYear(fromDate.getFullYear(), fromDate.getMonth(), fromDate.getDate());
    date.setHours(fromDate.getHours(), fromDate.getMinutes(), fromDate.getSeconds(), fromDate.getMilliseconds());
    return date;
}

},{"e4cedfb3eb078b8e":"hNMdA"}],"kf1Wf":[function(require,module,exports) {
"use strict";
exports.YearParser = void 0;
var _Parser = require("410cdd8b24ffe202");
var _utils = require("feb431ad5324f1c2");
// From http://www.unicode.org/reports/tr35/tr35-31/tr35-dates.html#Date_Format_Patterns
// | Year     |     y | yy |   yyy |  yyyy | yyyyy |
// |----------|-------|----|-------|-------|-------|
// | AD 1     |     1 | 01 |   001 |  0001 | 00001 |
// | AD 12    |    12 | 12 |   012 |  0012 | 00012 |
// | AD 123   |   123 | 23 |   123 |  0123 | 00123 |
// | AD 1234  |  1234 | 34 |  1234 |  1234 | 01234 |
// | AD 12345 | 12345 | 45 | 12345 | 12345 | 12345 |
class YearParser extends _Parser.Parser {
    priority = 130;
    incompatibleTokens = [
        "Y",
        "R",
        "u",
        "w",
        "I",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
    parse(dateString, token, match) {
        const valueCallback = (year)=>({
                year,
                isTwoDigitYear: token === "yy"
            });
        switch(token){
            case "y":
                return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);
            case "yo":
                return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                    unit: "year"
                }), valueCallback);
            default:
                return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
        }
    }
    validate(_date, value) {
        return value.isTwoDigitYear || value.year > 0;
    }
    set(date, flags, value) {
        const currentYear = date.getFullYear();
        if (value.isTwoDigitYear) {
            const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);
            date.setFullYear(normalizedTwoDigitYear, 0, 1);
            date.setHours(0, 0, 0, 0);
            return date;
        }
        const year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
        date.setFullYear(year, 0, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }
}
exports.YearParser = YearParser;

},{"410cdd8b24ffe202":"6E7ou","feb431ad5324f1c2":"6DK60"}],"6DK60":[function(require,module,exports) {
"use strict";
exports.dayPeriodEnumToHours = dayPeriodEnumToHours;
exports.isLeapYearIndex = isLeapYearIndex;
exports.mapValue = mapValue;
exports.normalizeTwoDigitYear = normalizeTwoDigitYear;
exports.parseAnyDigitsSigned = parseAnyDigitsSigned;
exports.parseNDigits = parseNDigits;
exports.parseNDigitsSigned = parseNDigitsSigned;
exports.parseNumericPattern = parseNumericPattern;
exports.parseTimezonePattern = parseTimezonePattern;
var _index = require("730ab950da1e266b");
var _constants = require("be7ba8dce2178d09");
function mapValue(parseFnResult, mapFn) {
    if (!parseFnResult) return parseFnResult;
    return {
        value: mapFn(parseFnResult.value),
        rest: parseFnResult.rest
    };
}
function parseNumericPattern(pattern, dateString) {
    const matchResult = dateString.match(pattern);
    if (!matchResult) return null;
    return {
        value: parseInt(matchResult[0], 10),
        rest: dateString.slice(matchResult[0].length)
    };
}
function parseTimezonePattern(pattern, dateString) {
    const matchResult = dateString.match(pattern);
    if (!matchResult) return null;
    // Input is 'Z'
    if (matchResult[0] === "Z") return {
        value: 0,
        rest: dateString.slice(1)
    };
    const sign = matchResult[1] === "+" ? 1 : -1;
    const hours = matchResult[2] ? parseInt(matchResult[2], 10) : 0;
    const minutes = matchResult[3] ? parseInt(matchResult[3], 10) : 0;
    const seconds = matchResult[5] ? parseInt(matchResult[5], 10) : 0;
    return {
        value: sign * (hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute + seconds * _index.millisecondsInSecond),
        rest: dateString.slice(matchResult[0].length)
    };
}
function parseAnyDigitsSigned(dateString) {
    return parseNumericPattern(_constants.numericPatterns.anyDigitsSigned, dateString);
}
function parseNDigits(n, dateString) {
    switch(n){
        case 1:
            return parseNumericPattern(_constants.numericPatterns.singleDigit, dateString);
        case 2:
            return parseNumericPattern(_constants.numericPatterns.twoDigits, dateString);
        case 3:
            return parseNumericPattern(_constants.numericPatterns.threeDigits, dateString);
        case 4:
            return parseNumericPattern(_constants.numericPatterns.fourDigits, dateString);
        default:
            return parseNumericPattern(new RegExp("^\\d{1," + n + "}"), dateString);
    }
}
function parseNDigitsSigned(n, dateString) {
    switch(n){
        case 1:
            return parseNumericPattern(_constants.numericPatterns.singleDigitSigned, dateString);
        case 2:
            return parseNumericPattern(_constants.numericPatterns.twoDigitsSigned, dateString);
        case 3:
            return parseNumericPattern(_constants.numericPatterns.threeDigitsSigned, dateString);
        case 4:
            return parseNumericPattern(_constants.numericPatterns.fourDigitsSigned, dateString);
        default:
            return parseNumericPattern(new RegExp("^-?\\d{1," + n + "}"), dateString);
    }
}
function dayPeriodEnumToHours(dayPeriod) {
    switch(dayPeriod){
        case "morning":
            return 4;
        case "evening":
            return 17;
        case "pm":
        case "noon":
        case "afternoon":
            return 12;
        case "am":
        case "midnight":
        case "night":
        default:
            return 0;
    }
}
function normalizeTwoDigitYear(twoDigitYear, currentYear) {
    const isCommonEra = currentYear > 0;
    // Absolute number of the current year:
    // 1 -> 1 AC
    // 0 -> 1 BC
    // -1 -> 2 BC
    const absCurrentYear = isCommonEra ? currentYear : 1 - currentYear;
    let result;
    if (absCurrentYear <= 50) result = twoDigitYear || 100;
    else {
        const rangeEnd = absCurrentYear + 50;
        const rangeEndCentury = Math.trunc(rangeEnd / 100) * 100;
        const isPreviousCentury = twoDigitYear >= rangeEnd % 100;
        result = twoDigitYear + rangeEndCentury - (isPreviousCentury ? 100 : 0);
    }
    return isCommonEra ? result : 1 - result;
}
function isLeapYearIndex(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}

},{"730ab950da1e266b":"1vXXw","be7ba8dce2178d09":"e1eTk"}],"e1eTk":[function(require,module,exports) {
"use strict";
exports.timezonePatterns = exports.numericPatterns = void 0;
const numericPatterns = exports.numericPatterns = {
    month: /^(1[0-2]|0?\d)/,
    date: /^(3[0-1]|[0-2]?\d)/,
    dayOfYear: /^(36[0-6]|3[0-5]\d|[0-2]?\d?\d)/,
    week: /^(5[0-3]|[0-4]?\d)/,
    hour23h: /^(2[0-3]|[0-1]?\d)/,
    hour24h: /^(2[0-4]|[0-1]?\d)/,
    hour11h: /^(1[0-1]|0?\d)/,
    hour12h: /^(1[0-2]|0?\d)/,
    minute: /^[0-5]?\d/,
    second: /^[0-5]?\d/,
    singleDigit: /^\d/,
    twoDigits: /^\d{1,2}/,
    threeDigits: /^\d{1,3}/,
    fourDigits: /^\d{1,4}/,
    anyDigitsSigned: /^-?\d+/,
    singleDigitSigned: /^-?\d/,
    twoDigitsSigned: /^-?\d{1,2}/,
    threeDigitsSigned: /^-?\d{1,3}/,
    fourDigitsSigned: /^-?\d{1,4}/
};
const timezonePatterns = exports.timezonePatterns = {
    basicOptionalMinutes: /^([+-])(\d{2})(\d{2})?|Z/,
    basic: /^([+-])(\d{2})(\d{2})|Z/,
    basicOptionalSeconds: /^([+-])(\d{2})(\d{2})((\d{2}))?|Z/,
    extended: /^([+-])(\d{2}):(\d{2})|Z/,
    extendedOptionalSeconds: /^([+-])(\d{2}):(\d{2})(:(\d{2}))?|Z/
};

},{}],"jDcds":[function(require,module,exports) {
"use strict";
exports.LocalWeekYearParser = void 0;
var _index = require("c7a1c4cdd11de749");
var _index2 = require("36ab983d3ac96e94");
var _Parser = require("2580105d5efe4503");
var _utils = require("e7bc0ea0bf35d979");
// Local week-numbering year
class LocalWeekYearParser extends _Parser.Parser {
    priority = 130;
    parse(dateString, token, match) {
        const valueCallback = (year)=>({
                year,
                isTwoDigitYear: token === "YY"
            });
        switch(token){
            case "Y":
                return (0, _utils.mapValue)((0, _utils.parseNDigits)(4, dateString), valueCallback);
            case "Yo":
                return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                    unit: "year"
                }), valueCallback);
            default:
                return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
        }
    }
    validate(_date, value) {
        return value.isTwoDigitYear || value.year > 0;
    }
    set(date, flags, value, options) {
        const currentYear = (0, _index.getWeekYear)(date, options);
        if (value.isTwoDigitYear) {
            const normalizedTwoDigitYear = (0, _utils.normalizeTwoDigitYear)(value.year, currentYear);
            date.setFullYear(normalizedTwoDigitYear, 0, options.firstWeekContainsDate);
            date.setHours(0, 0, 0, 0);
            return (0, _index2.startOfWeek)(date, options);
        }
        const year = !("era" in flags) || flags.era === 1 ? value.year : 1 - value.year;
        date.setFullYear(year, 0, options.firstWeekContainsDate);
        date.setHours(0, 0, 0, 0);
        return (0, _index2.startOfWeek)(date, options);
    }
    incompatibleTokens = [
        "y",
        "R",
        "u",
        "Q",
        "q",
        "M",
        "L",
        "I",
        "d",
        "D",
        "i",
        "t",
        "T"
    ];
}
exports.LocalWeekYearParser = LocalWeekYearParser;

},{"c7a1c4cdd11de749":"7odmH","36ab983d3ac96e94":"dDDvv","2580105d5efe4503":"6E7ou","e7bc0ea0bf35d979":"6DK60"}],"ap5xA":[function(require,module,exports) {
"use strict";
exports.ISOWeekYearParser = void 0;
var _index = require("e78417787f8e8167");
var _index2 = require("ac68ccd301053769");
var _Parser = require("996e304581b01cde");
var _utils = require("338b9c7449577074");
// ISO week-numbering year
class ISOWeekYearParser extends _Parser.Parser {
    priority = 130;
    parse(dateString, token) {
        if (token === "R") return (0, _utils.parseNDigitsSigned)(4, dateString);
        return (0, _utils.parseNDigitsSigned)(token.length, dateString);
    }
    set(date, _flags, value) {
        const firstWeekOfYear = (0, _index2.constructFrom)(date, 0);
        firstWeekOfYear.setFullYear(value, 0, 4);
        firstWeekOfYear.setHours(0, 0, 0, 0);
        return (0, _index.startOfISOWeek)(firstWeekOfYear);
    }
    incompatibleTokens = [
        "G",
        "y",
        "Y",
        "u",
        "Q",
        "q",
        "M",
        "L",
        "w",
        "d",
        "D",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.ISOWeekYearParser = ISOWeekYearParser;

},{"e78417787f8e8167":"iF0wL","ac68ccd301053769":"hNMdA","996e304581b01cde":"6E7ou","338b9c7449577074":"6DK60"}],"lW99W":[function(require,module,exports) {
"use strict";
exports.ExtendedYearParser = void 0;
var _Parser = require("14062af0868fbb7b");
var _utils = require("1b6df6d2682df22c");
class ExtendedYearParser extends _Parser.Parser {
    priority = 130;
    parse(dateString, token) {
        if (token === "u") return (0, _utils.parseNDigitsSigned)(4, dateString);
        return (0, _utils.parseNDigitsSigned)(token.length, dateString);
    }
    set(date, _flags, value) {
        date.setFullYear(value, 0, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "G",
        "y",
        "Y",
        "R",
        "w",
        "I",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.ExtendedYearParser = ExtendedYearParser;

},{"14062af0868fbb7b":"6E7ou","1b6df6d2682df22c":"6DK60"}],"dsY9k":[function(require,module,exports) {
"use strict";
exports.QuarterParser = void 0;
var _Parser = require("2c403512ee0b4449");
var _utils = require("16f449bb6db64ee7");
class QuarterParser extends _Parser.Parser {
    priority = 120;
    parse(dateString, token, match) {
        switch(token){
            // 1, 2, 3, 4
            case "Q":
            case "QQ":
                return (0, _utils.parseNDigits)(token.length, dateString);
            // 1st, 2nd, 3rd, 4th
            case "Qo":
                return match.ordinalNumber(dateString, {
                    unit: "quarter"
                });
            // Q1, Q2, Q3, Q4
            case "QQQ":
                return match.quarter(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.quarter(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case "QQQQQ":
                return match.quarter(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // 1st quarter, 2nd quarter, ...
            case "QQQQ":
            default:
                return match.quarter(dateString, {
                    width: "wide",
                    context: "formatting"
                }) || match.quarter(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.quarter(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
        }
    }
    validate(_date, value) {
        return value >= 1 && value <= 4;
    }
    set(date, _flags, value) {
        date.setMonth((value - 1) * 3, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "Y",
        "R",
        "q",
        "M",
        "L",
        "w",
        "I",
        "d",
        "D",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.QuarterParser = QuarterParser;

},{"2c403512ee0b4449":"6E7ou","16f449bb6db64ee7":"6DK60"}],"aSfyW":[function(require,module,exports) {
"use strict";
exports.StandAloneQuarterParser = void 0;
var _Parser = require("90bdba2189236368");
var _utils = require("ac5cbd54eec0970d");
class StandAloneQuarterParser extends _Parser.Parser {
    priority = 120;
    parse(dateString, token, match) {
        switch(token){
            // 1, 2, 3, 4
            case "q":
            case "qq":
                return (0, _utils.parseNDigits)(token.length, dateString);
            // 1st, 2nd, 3rd, 4th
            case "qo":
                return match.ordinalNumber(dateString, {
                    unit: "quarter"
                });
            // Q1, Q2, Q3, Q4
            case "qqq":
                return match.quarter(dateString, {
                    width: "abbreviated",
                    context: "standalone"
                }) || match.quarter(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
            // 1, 2, 3, 4 (narrow quarter; could be not numerical)
            case "qqqqq":
                return match.quarter(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
            // 1st quarter, 2nd quarter, ...
            case "qqqq":
            default:
                return match.quarter(dateString, {
                    width: "wide",
                    context: "standalone"
                }) || match.quarter(dateString, {
                    width: "abbreviated",
                    context: "standalone"
                }) || match.quarter(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
        }
    }
    validate(_date, value) {
        return value >= 1 && value <= 4;
    }
    set(date, _flags, value) {
        date.setMonth((value - 1) * 3, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "Y",
        "R",
        "Q",
        "M",
        "L",
        "w",
        "I",
        "d",
        "D",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.StandAloneQuarterParser = StandAloneQuarterParser;

},{"90bdba2189236368":"6E7ou","ac5cbd54eec0970d":"6DK60"}],"EYpZp":[function(require,module,exports) {
"use strict";
exports.MonthParser = void 0;
var _constants = require("3ca19f0e27bab599");
var _Parser = require("3b0e5e45825bc96f");
var _utils = require("73c2131545335241");
class MonthParser extends _Parser.Parser {
    incompatibleTokens = [
        "Y",
        "R",
        "q",
        "Q",
        "L",
        "w",
        "I",
        "D",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
    priority = 110;
    parse(dateString, token, match) {
        const valueCallback = (value)=>value - 1;
        switch(token){
            // 1, 2, ..., 12
            case "M":
                return (0, _utils.mapValue)((0, _utils.parseNumericPattern)(_constants.numericPatterns.month, dateString), valueCallback);
            // 01, 02, ..., 12
            case "MM":
                return (0, _utils.mapValue)((0, _utils.parseNDigits)(2, dateString), valueCallback);
            // 1st, 2nd, ..., 12th
            case "Mo":
                return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                    unit: "month"
                }), valueCallback);
            // Jan, Feb, ..., Dec
            case "MMM":
                return match.month(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.month(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // J, F, ..., D
            case "MMMMM":
                return match.month(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // January, February, ..., December
            case "MMMM":
            default:
                return match.month(dateString, {
                    width: "wide",
                    context: "formatting"
                }) || match.month(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.month(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 11;
    }
    set(date, _flags, value) {
        date.setMonth(value, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }
}
exports.MonthParser = MonthParser;

},{"3ca19f0e27bab599":"e1eTk","3b0e5e45825bc96f":"6E7ou","73c2131545335241":"6DK60"}],"jbrkt":[function(require,module,exports) {
"use strict";
exports.StandAloneMonthParser = void 0;
var _constants = require("98e1a06b2ff3c4de");
var _Parser = require("e11ccdcf59f2f7dd");
var _utils = require("e8b8449d7a3b60c1");
class StandAloneMonthParser extends _Parser.Parser {
    priority = 110;
    parse(dateString, token, match) {
        const valueCallback = (value)=>value - 1;
        switch(token){
            // 1, 2, ..., 12
            case "L":
                return (0, _utils.mapValue)((0, _utils.parseNumericPattern)(_constants.numericPatterns.month, dateString), valueCallback);
            // 01, 02, ..., 12
            case "LL":
                return (0, _utils.mapValue)((0, _utils.parseNDigits)(2, dateString), valueCallback);
            // 1st, 2nd, ..., 12th
            case "Lo":
                return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                    unit: "month"
                }), valueCallback);
            // Jan, Feb, ..., Dec
            case "LLL":
                return match.month(dateString, {
                    width: "abbreviated",
                    context: "standalone"
                }) || match.month(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
            // J, F, ..., D
            case "LLLLL":
                return match.month(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
            // January, February, ..., December
            case "LLLL":
            default:
                return match.month(dateString, {
                    width: "wide",
                    context: "standalone"
                }) || match.month(dateString, {
                    width: "abbreviated",
                    context: "standalone"
                }) || match.month(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 11;
    }
    set(date, _flags, value) {
        date.setMonth(value, 1);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "Y",
        "R",
        "q",
        "Q",
        "M",
        "w",
        "I",
        "D",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.StandAloneMonthParser = StandAloneMonthParser;

},{"98e1a06b2ff3c4de":"e1eTk","e11ccdcf59f2f7dd":"6E7ou","e8b8449d7a3b60c1":"6DK60"}],"8rNDN":[function(require,module,exports) {
"use strict";
exports.LocalWeekParser = void 0;
var _index = require("13c2e2bf3016fdd5");
var _index2 = require("bbf7e0dcf711535f");
var _constants = require("2601195a0e99a978");
var _Parser = require("d6e7369fa8c2f278");
var _utils = require("1193e0f5bcd19001");
// Local week of year
class LocalWeekParser extends _Parser.Parser {
    priority = 100;
    parse(dateString, token, match) {
        switch(token){
            case "w":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.week, dateString);
            case "wo":
                return match.ordinalNumber(dateString, {
                    unit: "week"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(_date, value) {
        return value >= 1 && value <= 53;
    }
    set(date, _flags, value, options) {
        return (0, _index2.startOfWeek)((0, _index.setWeek)(date, value, options), options);
    }
    incompatibleTokens = [
        "y",
        "R",
        "u",
        "q",
        "Q",
        "M",
        "L",
        "I",
        "d",
        "D",
        "i",
        "t",
        "T"
    ];
}
exports.LocalWeekParser = LocalWeekParser;

},{"13c2e2bf3016fdd5":"3XINN","bbf7e0dcf711535f":"dDDvv","2601195a0e99a978":"e1eTk","d6e7369fa8c2f278":"6E7ou","1193e0f5bcd19001":"6DK60"}],"3XINN":[function(require,module,exports) {
"use strict";
exports.setWeek = setWeek;
var _index = require("d61926e41e1e9dfc");
var _index2 = require("d8306f2d82e3f3b8");
/**
 * The {@link setWeek} function options.
 */ /**
 * @name setWeek
 * @category Week Helpers
 * @summary Set the local week to the given date.
 *
 * @description
 * Set the local week to the given date, saving the weekday number.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param week - The week of the new date
 * @param options - An object with options
 *
 * @returns The new date with the local week set
 *
 * @example
 * // Set the 1st week to 2 January 2005 with default options:
 * const result = setWeek(new Date(2005, 0, 2), 1)
 * //=> Sun Dec 26 2004 00:00:00
 *
 * @example
 * // Set the 1st week to 2 January 2005,
 * // if Monday is the first day of the week,
 * // and the first week of the year always contains 4 January:
 * const result = setWeek(new Date(2005, 0, 2), 1, {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> Sun Jan 4 2004 00:00:00
 */ function setWeek(date, week, options) {
    const _date = (0, _index2.toDate)(date);
    const diff = (0, _index.getWeek)(_date, options) - week;
    _date.setDate(_date.getDate() - diff * 7);
    return _date;
}

},{"d61926e41e1e9dfc":"1zHej","d8306f2d82e3f3b8":"actWA"}],"dfdwt":[function(require,module,exports) {
"use strict";
exports.ISOWeekParser = void 0;
var _index = require("d0e9d8806b690ddf");
var _index2 = require("5eec22592445f1f4");
var _constants = require("1dcdea171de1c1d9");
var _Parser = require("3569999127d8de4");
var _utils = require("3c620a00554fc0c1");
// ISO week of year
class ISOWeekParser extends _Parser.Parser {
    priority = 100;
    parse(dateString, token, match) {
        switch(token){
            case "I":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.week, dateString);
            case "Io":
                return match.ordinalNumber(dateString, {
                    unit: "week"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(_date, value) {
        return value >= 1 && value <= 53;
    }
    set(date, _flags, value) {
        return (0, _index2.startOfISOWeek)((0, _index.setISOWeek)(date, value));
    }
    incompatibleTokens = [
        "y",
        "Y",
        "u",
        "q",
        "Q",
        "M",
        "L",
        "w",
        "d",
        "D",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.ISOWeekParser = ISOWeekParser;

},{"d0e9d8806b690ddf":"6YGAL","5eec22592445f1f4":"iF0wL","1dcdea171de1c1d9":"e1eTk","3569999127d8de4":"6E7ou","3c620a00554fc0c1":"6DK60"}],"6YGAL":[function(require,module,exports) {
"use strict";
exports.setISOWeek = setISOWeek;
var _index = require("8291d064c3f19d2b");
var _index2 = require("2a6c0f5e0da284fe");
/**
 * @name setISOWeek
 * @category ISO Week Helpers
 * @summary Set the ISO week to the given date.
 *
 * @description
 * Set the ISO week to the given date, saving the weekday number.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param week - The ISO week of the new date
 *
 * @returns The new date with the ISO week set
 *
 * @example
 * // Set the 53rd ISO week to 7 August 2004:
 * const result = setISOWeek(new Date(2004, 7, 7), 53)
 * //=> Sat Jan 01 2005 00:00:00
 */ function setISOWeek(date, week) {
    const _date = (0, _index2.toDate)(date);
    const diff = (0, _index.getISOWeek)(_date) - week;
    _date.setDate(_date.getDate() - diff * 7);
    return _date;
}

},{"8291d064c3f19d2b":"fNkwc","2a6c0f5e0da284fe":"actWA"}],"fYv6C":[function(require,module,exports) {
"use strict";
exports.DateParser = void 0;
var _constants = require("e37bf0ec17405e58");
var _Parser = require("e06fd271e217a3f4");
var _utils = require("19b066b35011bfca");
const DAYS_IN_MONTH = [
    31,
    28,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
const DAYS_IN_MONTH_LEAP_YEAR = [
    31,
    29,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
// Day of the month
class DateParser extends _Parser.Parser {
    priority = 90;
    subPriority = 1;
    parse(dateString, token, match) {
        switch(token){
            case "d":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.date, dateString);
            case "do":
                return match.ordinalNumber(dateString, {
                    unit: "date"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(date, value) {
        const year = date.getFullYear();
        const isLeapYear = (0, _utils.isLeapYearIndex)(year);
        const month = date.getMonth();
        if (isLeapYear) return value >= 1 && value <= DAYS_IN_MONTH_LEAP_YEAR[month];
        else return value >= 1 && value <= DAYS_IN_MONTH[month];
    }
    set(date, _flags, value) {
        date.setDate(value);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "Y",
        "R",
        "q",
        "Q",
        "w",
        "I",
        "D",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.DateParser = DateParser;

},{"e37bf0ec17405e58":"e1eTk","e06fd271e217a3f4":"6E7ou","19b066b35011bfca":"6DK60"}],"9cmRX":[function(require,module,exports) {
"use strict";
exports.DayOfYearParser = void 0;
var _constants = require("83fbe2027339aec5");
var _Parser = require("332eeceadb0ccc98");
var _utils = require("73a8ca34cfbb7597");
class DayOfYearParser extends _Parser.Parser {
    priority = 90;
    subpriority = 1;
    parse(dateString, token, match) {
        switch(token){
            case "D":
            case "DD":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.dayOfYear, dateString);
            case "Do":
                return match.ordinalNumber(dateString, {
                    unit: "date"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(date, value) {
        const year = date.getFullYear();
        const isLeapYear = (0, _utils.isLeapYearIndex)(year);
        if (isLeapYear) return value >= 1 && value <= 366;
        else return value >= 1 && value <= 365;
    }
    set(date, _flags, value) {
        date.setMonth(0, value);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "Y",
        "R",
        "q",
        "Q",
        "M",
        "L",
        "w",
        "I",
        "d",
        "E",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.DayOfYearParser = DayOfYearParser;

},{"83fbe2027339aec5":"e1eTk","332eeceadb0ccc98":"6E7ou","73a8ca34cfbb7597":"6DK60"}],"ksDae":[function(require,module,exports) {
"use strict";
exports.DayParser = void 0;
var _index = require("b83dfcd67991d62c");
var _Parser = require("57319c0f2f714850");
// Day of week
class DayParser extends _Parser.Parser {
    priority = 90;
    parse(dateString, token, match) {
        switch(token){
            // Tue
            case "E":
            case "EE":
            case "EEE":
                return match.day(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // T
            case "EEEEE":
                return match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // Tu
            case "EEEEEE":
                return match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // Tuesday
            case "EEEE":
            default:
                return match.day(dateString, {
                    width: "wide",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 6;
    }
    set(date, _flags, value, options) {
        date = (0, _index.setDay)(date, value, options);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "D",
        "i",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.DayParser = DayParser;

},{"b83dfcd67991d62c":"7QCQN","57319c0f2f714850":"6E7ou"}],"7QCQN":[function(require,module,exports) {
"use strict";
exports.setDay = setDay;
var _index = require("ea54a94a012b3b70");
var _index2 = require("e25634d79be71669");
var _index3 = require("10936b78e6318933");
/**
 * The {@link setDay} function options.
 */ /**
 * @name setDay
 * @category Weekday Helpers
 * @summary Set the day of the week to the given date.
 *
 * @description
 * Set the day of the week to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param day - The day of the week of the new date
 * @param options - An object with options.
 *
 * @returns The new date with the day of the week set
 *
 * @example
 * // Set week day to Sunday, with the default weekStartsOn of Sunday:
 * const result = setDay(new Date(2014, 8, 1), 0)
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // Set week day to Sunday, with a weekStartsOn of Monday:
 * const result = setDay(new Date(2014, 8, 1), 0, { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 00:00:00
 */ function setDay(date, day, options) {
    const defaultOptions = (0, _index3.getDefaultOptions)();
    const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;
    const _date = (0, _index2.toDate)(date);
    const currentDay = _date.getDay();
    const remainder = day % 7;
    const dayIndex = (remainder + 7) % 7;
    const delta = 7 - weekStartsOn;
    const diff = day < 0 || day > 6 ? day - (currentDay + delta) % 7 : (dayIndex + delta) % 7 - (currentDay + delta) % 7;
    return (0, _index.addDays)(_date, diff);
}

},{"ea54a94a012b3b70":"fL4dR","e25634d79be71669":"actWA","10936b78e6318933":"98fau"}],"jgAEp":[function(require,module,exports) {
"use strict";
exports.LocalDayParser = void 0;
var _index = require("bb1b3f00c539097f");
var _Parser = require("6571efdf5566e23");
var _utils = require("59a554a051b6be38");
// Local day of week
class LocalDayParser extends _Parser.Parser {
    priority = 90;
    parse(dateString, token, match, options) {
        const valueCallback = (value)=>{
            // We want here floor instead of trunc, so we get -7 for value 0 instead of 0
            const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
        };
        switch(token){
            // 3
            case "e":
            case "ee":
                return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
            // 3rd
            case "eo":
                return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                    unit: "day"
                }), valueCallback);
            // Tue
            case "eee":
                return match.day(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // T
            case "eeeee":
                return match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // Tu
            case "eeeeee":
                return match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            // Tuesday
            case "eeee":
            default:
                return match.day(dateString, {
                    width: "wide",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 6;
    }
    set(date, _flags, value, options) {
        date = (0, _index.setDay)(date, value, options);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "y",
        "R",
        "u",
        "q",
        "Q",
        "M",
        "L",
        "I",
        "d",
        "D",
        "E",
        "i",
        "c",
        "t",
        "T"
    ];
}
exports.LocalDayParser = LocalDayParser;

},{"bb1b3f00c539097f":"7QCQN","6571efdf5566e23":"6E7ou","59a554a051b6be38":"6DK60"}],"4FMAA":[function(require,module,exports) {
"use strict";
exports.StandAloneLocalDayParser = void 0;
var _index = require("d9dbe8f35d194adf");
var _Parser = require("270cd8e0745b64ff");
var _utils = require("2894fe8ea24065ec");
// Stand-alone local day of week
class StandAloneLocalDayParser extends _Parser.Parser {
    priority = 90;
    parse(dateString, token, match, options) {
        const valueCallback = (value)=>{
            // We want here floor instead of trunc, so we get -7 for value 0 instead of 0
            const wholeWeekDays = Math.floor((value - 1) / 7) * 7;
            return (value + options.weekStartsOn + 6) % 7 + wholeWeekDays;
        };
        switch(token){
            // 3
            case "c":
            case "cc":
                return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
            // 3rd
            case "co":
                return (0, _utils.mapValue)(match.ordinalNumber(dateString, {
                    unit: "day"
                }), valueCallback);
            // Tue
            case "ccc":
                return match.day(dateString, {
                    width: "abbreviated",
                    context: "standalone"
                }) || match.day(dateString, {
                    width: "short",
                    context: "standalone"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
            // T
            case "ccccc":
                return match.day(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
            // Tu
            case "cccccc":
                return match.day(dateString, {
                    width: "short",
                    context: "standalone"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
            // Tuesday
            case "cccc":
            default:
                return match.day(dateString, {
                    width: "wide",
                    context: "standalone"
                }) || match.day(dateString, {
                    width: "abbreviated",
                    context: "standalone"
                }) || match.day(dateString, {
                    width: "short",
                    context: "standalone"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "standalone"
                });
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 6;
    }
    set(date, _flags, value, options) {
        date = (0, _index.setDay)(date, value, options);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "y",
        "R",
        "u",
        "q",
        "Q",
        "M",
        "L",
        "I",
        "d",
        "D",
        "E",
        "i",
        "e",
        "t",
        "T"
    ];
}
exports.StandAloneLocalDayParser = StandAloneLocalDayParser;

},{"d9dbe8f35d194adf":"7QCQN","270cd8e0745b64ff":"6E7ou","2894fe8ea24065ec":"6DK60"}],"eSKw6":[function(require,module,exports) {
"use strict";
exports.ISODayParser = void 0;
var _index = require("8d5cfff7f7eb5ee5");
var _Parser = require("f0244744717726df");
var _utils = require("bf9b3cd7754e213e");
// ISO day of week
class ISODayParser extends _Parser.Parser {
    priority = 90;
    parse(dateString, token, match) {
        const valueCallback = (value)=>{
            if (value === 0) return 7;
            return value;
        };
        switch(token){
            // 2
            case "i":
            case "ii":
                return (0, _utils.parseNDigits)(token.length, dateString);
            // 2nd
            case "io":
                return match.ordinalNumber(dateString, {
                    unit: "day"
                });
            // Tue
            case "iii":
                return (0, _utils.mapValue)(match.day(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                }), valueCallback);
            // T
            case "iiiii":
                return (0, _utils.mapValue)(match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                }), valueCallback);
            // Tu
            case "iiiiii":
                return (0, _utils.mapValue)(match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                }), valueCallback);
            // Tuesday
            case "iiii":
            default:
                return (0, _utils.mapValue)(match.day(dateString, {
                    width: "wide",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "short",
                    context: "formatting"
                }) || match.day(dateString, {
                    width: "narrow",
                    context: "formatting"
                }), valueCallback);
        }
    }
    validate(_date, value) {
        return value >= 1 && value <= 7;
    }
    set(date, _flags, value) {
        date = (0, _index.setISODay)(date, value);
        date.setHours(0, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "y",
        "Y",
        "u",
        "q",
        "Q",
        "M",
        "L",
        "w",
        "d",
        "D",
        "E",
        "e",
        "c",
        "t",
        "T"
    ];
}
exports.ISODayParser = ISODayParser;

},{"8d5cfff7f7eb5ee5":"hs8xy","f0244744717726df":"6E7ou","bf9b3cd7754e213e":"6DK60"}],"hs8xy":[function(require,module,exports) {
"use strict";
exports.setISODay = setISODay;
var _index = require("44745967f27ca3e1");
var _index2 = require("533ead4b5083b736");
var _index3 = require("3ceb9bffa1043609");
/**
 * @name setISODay
 * @category Weekday Helpers
 * @summary Set the day of the ISO week to the given date.
 *
 * @description
 * Set the day of the ISO week to the given date.
 * ISO week starts with Monday.
 * 7 is the index of Sunday, 1 is the index of Monday etc.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param day - The day of the ISO week of the new date
 *
 * @returns The new date with the day of the ISO week set
 *
 * @example
 * // Set Sunday to 1 September 2014:
 * const result = setISODay(new Date(2014, 8, 1), 7)
 * //=> Sun Sep 07 2014 00:00:00
 */ function setISODay(date, day) {
    const _date = (0, _index3.toDate)(date);
    const currentDay = (0, _index2.getISODay)(_date);
    const diff = day - currentDay;
    return (0, _index.addDays)(_date, diff);
}

},{"44745967f27ca3e1":"fL4dR","533ead4b5083b736":"9d1Pg","3ceb9bffa1043609":"actWA"}],"eqkPE":[function(require,module,exports) {
"use strict";
exports.AMPMParser = void 0;
var _Parser = require("8a2e19df354a4acd");
var _utils = require("24e42863940456ae");
class AMPMParser extends _Parser.Parser {
    priority = 80;
    parse(dateString, token, match) {
        switch(token){
            case "a":
            case "aa":
            case "aaa":
                return match.dayPeriod(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            case "aaaaa":
                return match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            case "aaaa":
            default:
                return match.dayPeriod(dateString, {
                    width: "wide",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
        }
    }
    set(date, _flags, value) {
        date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "b",
        "B",
        "H",
        "k",
        "t",
        "T"
    ];
}
exports.AMPMParser = AMPMParser;

},{"8a2e19df354a4acd":"6E7ou","24e42863940456ae":"6DK60"}],"g3D3d":[function(require,module,exports) {
"use strict";
exports.AMPMMidnightParser = void 0;
var _Parser = require("4760f05ad38083c4");
var _utils = require("e542420b98b8b2fa");
class AMPMMidnightParser extends _Parser.Parser {
    priority = 80;
    parse(dateString, token, match) {
        switch(token){
            case "b":
            case "bb":
            case "bbb":
                return match.dayPeriod(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            case "bbbbb":
                return match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            case "bbbb":
            default:
                return match.dayPeriod(dateString, {
                    width: "wide",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
        }
    }
    set(date, _flags, value) {
        date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "a",
        "B",
        "H",
        "k",
        "t",
        "T"
    ];
}
exports.AMPMMidnightParser = AMPMMidnightParser;

},{"4760f05ad38083c4":"6E7ou","e542420b98b8b2fa":"6DK60"}],"hkyVS":[function(require,module,exports) {
"use strict";
exports.DayPeriodParser = void 0;
var _Parser = require("d445f4eb1b43afa9");
var _utils = require("5bc662f5d6a57c6");
// in the morning, in the afternoon, in the evening, at night
class DayPeriodParser extends _Parser.Parser {
    priority = 80;
    parse(dateString, token, match) {
        switch(token){
            case "B":
            case "BB":
            case "BBB":
                return match.dayPeriod(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            case "BBBBB":
                return match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
            case "BBBB":
            default:
                return match.dayPeriod(dateString, {
                    width: "wide",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "abbreviated",
                    context: "formatting"
                }) || match.dayPeriod(dateString, {
                    width: "narrow",
                    context: "formatting"
                });
        }
    }
    set(date, _flags, value) {
        date.setHours((0, _utils.dayPeriodEnumToHours)(value), 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "a",
        "b",
        "t",
        "T"
    ];
}
exports.DayPeriodParser = DayPeriodParser;

},{"d445f4eb1b43afa9":"6E7ou","5bc662f5d6a57c6":"6DK60"}],"iRbV7":[function(require,module,exports) {
"use strict";
exports.Hour1to12Parser = void 0;
var _constants = require("d7205af5d699aaaa");
var _Parser = require("72fa2cbc4fa1bbbf");
var _utils = require("554c03fdba31e004");
class Hour1to12Parser extends _Parser.Parser {
    priority = 70;
    parse(dateString, token, match) {
        switch(token){
            case "h":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.hour12h, dateString);
            case "ho":
                return match.ordinalNumber(dateString, {
                    unit: "hour"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(_date, value) {
        return value >= 1 && value <= 12;
    }
    set(date, _flags, value) {
        const isPM = date.getHours() >= 12;
        if (isPM && value < 12) date.setHours(value + 12, 0, 0, 0);
        else if (!isPM && value === 12) date.setHours(0, 0, 0, 0);
        else date.setHours(value, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "H",
        "K",
        "k",
        "t",
        "T"
    ];
}
exports.Hour1to12Parser = Hour1to12Parser;

},{"d7205af5d699aaaa":"e1eTk","72fa2cbc4fa1bbbf":"6E7ou","554c03fdba31e004":"6DK60"}],"fq0MM":[function(require,module,exports) {
"use strict";
exports.Hour0to23Parser = void 0;
var _constants = require("517fe295d5149361");
var _Parser = require("e9b40c7441c4ce4a");
var _utils = require("a8f3667076399d62");
class Hour0to23Parser extends _Parser.Parser {
    priority = 70;
    parse(dateString, token, match) {
        switch(token){
            case "H":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.hour23h, dateString);
            case "Ho":
                return match.ordinalNumber(dateString, {
                    unit: "hour"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 23;
    }
    set(date, _flags, value) {
        date.setHours(value, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "a",
        "b",
        "h",
        "K",
        "k",
        "t",
        "T"
    ];
}
exports.Hour0to23Parser = Hour0to23Parser;

},{"517fe295d5149361":"e1eTk","e9b40c7441c4ce4a":"6E7ou","a8f3667076399d62":"6DK60"}],"ejbIY":[function(require,module,exports) {
"use strict";
exports.Hour0To11Parser = void 0;
var _constants = require("dc236b3b65dd7165");
var _Parser = require("110fa5ad724dd337");
var _utils = require("b31387bf6c98a135");
class Hour0To11Parser extends _Parser.Parser {
    priority = 70;
    parse(dateString, token, match) {
        switch(token){
            case "K":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.hour11h, dateString);
            case "Ko":
                return match.ordinalNumber(dateString, {
                    unit: "hour"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 11;
    }
    set(date, _flags, value) {
        const isPM = date.getHours() >= 12;
        if (isPM && value < 12) date.setHours(value + 12, 0, 0, 0);
        else date.setHours(value, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "h",
        "H",
        "k",
        "t",
        "T"
    ];
}
exports.Hour0To11Parser = Hour0To11Parser;

},{"dc236b3b65dd7165":"e1eTk","110fa5ad724dd337":"6E7ou","b31387bf6c98a135":"6DK60"}],"eEJho":[function(require,module,exports) {
"use strict";
exports.Hour1To24Parser = void 0;
var _constants = require("8a98c953b97bd9d2");
var _Parser = require("1a7c1d02f575f2ef");
var _utils = require("c21199ad414d918f");
class Hour1To24Parser extends _Parser.Parser {
    priority = 70;
    parse(dateString, token, match) {
        switch(token){
            case "k":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.hour24h, dateString);
            case "ko":
                return match.ordinalNumber(dateString, {
                    unit: "hour"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(_date, value) {
        return value >= 1 && value <= 24;
    }
    set(date, _flags, value) {
        const hours = value <= 24 ? value % 24 : value;
        date.setHours(hours, 0, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "a",
        "b",
        "h",
        "H",
        "K",
        "t",
        "T"
    ];
}
exports.Hour1To24Parser = Hour1To24Parser;

},{"8a98c953b97bd9d2":"e1eTk","1a7c1d02f575f2ef":"6E7ou","c21199ad414d918f":"6DK60"}],"8XZpF":[function(require,module,exports) {
"use strict";
exports.MinuteParser = void 0;
var _constants = require("ebf9011e7838a79d");
var _Parser = require("4c8575a7116c3b84");
var _utils = require("e234fafa49de7d98");
class MinuteParser extends _Parser.Parser {
    priority = 60;
    parse(dateString, token, match) {
        switch(token){
            case "m":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.minute, dateString);
            case "mo":
                return match.ordinalNumber(dateString, {
                    unit: "minute"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 59;
    }
    set(date, _flags, value) {
        date.setMinutes(value, 0, 0);
        return date;
    }
    incompatibleTokens = [
        "t",
        "T"
    ];
}
exports.MinuteParser = MinuteParser;

},{"ebf9011e7838a79d":"e1eTk","4c8575a7116c3b84":"6E7ou","e234fafa49de7d98":"6DK60"}],"khJSC":[function(require,module,exports) {
"use strict";
exports.SecondParser = void 0;
var _constants = require("7521dd0b4c1ed894");
var _Parser = require("6437b3e2aa607a12");
var _utils = require("c6865c0f9a49a776");
class SecondParser extends _Parser.Parser {
    priority = 50;
    parse(dateString, token, match) {
        switch(token){
            case "s":
                return (0, _utils.parseNumericPattern)(_constants.numericPatterns.second, dateString);
            case "so":
                return match.ordinalNumber(dateString, {
                    unit: "second"
                });
            default:
                return (0, _utils.parseNDigits)(token.length, dateString);
        }
    }
    validate(_date, value) {
        return value >= 0 && value <= 59;
    }
    set(date, _flags, value) {
        date.setSeconds(value, 0);
        return date;
    }
    incompatibleTokens = [
        "t",
        "T"
    ];
}
exports.SecondParser = SecondParser;

},{"7521dd0b4c1ed894":"e1eTk","6437b3e2aa607a12":"6E7ou","c6865c0f9a49a776":"6DK60"}],"jT3Md":[function(require,module,exports) {
"use strict";
exports.FractionOfSecondParser = void 0;
var _Parser = require("67c65f5bafa413a");
var _utils = require("150a83840d362903");
class FractionOfSecondParser extends _Parser.Parser {
    priority = 30;
    parse(dateString, token) {
        const valueCallback = (value)=>Math.trunc(value * Math.pow(10, -token.length + 3));
        return (0, _utils.mapValue)((0, _utils.parseNDigits)(token.length, dateString), valueCallback);
    }
    set(date, _flags, value) {
        date.setMilliseconds(value);
        return date;
    }
    incompatibleTokens = [
        "t",
        "T"
    ];
}
exports.FractionOfSecondParser = FractionOfSecondParser;

},{"67c65f5bafa413a":"6E7ou","150a83840d362903":"6DK60"}],"kUxSQ":[function(require,module,exports) {
"use strict";
exports.ISOTimezoneWithZParser = void 0;
var _index = require("368f4220a25e7374");
var _index2 = require("558ce65157f0e599");
var _constants = require("6a63e07f10f267b2");
var _Parser = require("ee66541a7458714a");
var _utils = require("e5626238686f2ba");
// Timezone (ISO-8601. +00:00 is `'Z'`)
class ISOTimezoneWithZParser extends _Parser.Parser {
    priority = 10;
    parse(dateString, token) {
        switch(token){
            case "X":
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalMinutes, dateString);
            case "XX":
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basic, dateString);
            case "XXXX":
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalSeconds, dateString);
            case "XXXXX":
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extendedOptionalSeconds, dateString);
            case "XXX":
            default:
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extended, dateString);
        }
    }
    set(date, flags, value) {
        if (flags.timestampIsSet) return date;
        return (0, _index.constructFrom)(date, date.getTime() - (0, _index2.getTimezoneOffsetInMilliseconds)(date) - value);
    }
    incompatibleTokens = [
        "t",
        "T",
        "x"
    ];
}
exports.ISOTimezoneWithZParser = ISOTimezoneWithZParser;

},{"368f4220a25e7374":"hNMdA","558ce65157f0e599":"ke6Rl","6a63e07f10f267b2":"e1eTk","ee66541a7458714a":"6E7ou","e5626238686f2ba":"6DK60"}],"ee2MS":[function(require,module,exports) {
"use strict";
exports.ISOTimezoneParser = void 0;
var _index = require("20489a2406ed1f6");
var _index2 = require("7b0f4c2b6899a6a5");
var _constants = require("1da5ad1881c8c8be");
var _Parser = require("f83d1ed0441d94a4");
var _utils = require("3d4e56ba10e06f4a");
// Timezone (ISO-8601)
class ISOTimezoneParser extends _Parser.Parser {
    priority = 10;
    parse(dateString, token) {
        switch(token){
            case "x":
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalMinutes, dateString);
            case "xx":
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basic, dateString);
            case "xxxx":
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.basicOptionalSeconds, dateString);
            case "xxxxx":
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extendedOptionalSeconds, dateString);
            case "xxx":
            default:
                return (0, _utils.parseTimezonePattern)(_constants.timezonePatterns.extended, dateString);
        }
    }
    set(date, flags, value) {
        if (flags.timestampIsSet) return date;
        return (0, _index.constructFrom)(date, date.getTime() - (0, _index2.getTimezoneOffsetInMilliseconds)(date) - value);
    }
    incompatibleTokens = [
        "t",
        "T",
        "X"
    ];
}
exports.ISOTimezoneParser = ISOTimezoneParser;

},{"20489a2406ed1f6":"hNMdA","7b0f4c2b6899a6a5":"ke6Rl","1da5ad1881c8c8be":"e1eTk","f83d1ed0441d94a4":"6E7ou","3d4e56ba10e06f4a":"6DK60"}],"8CwPK":[function(require,module,exports) {
"use strict";
exports.TimestampSecondsParser = void 0;
var _index = require("d45a9a59d4c4a1fc");
var _Parser = require("e6a228a9048e0b92");
var _utils = require("1a8a5d87134d1ddc");
class TimestampSecondsParser extends _Parser.Parser {
    priority = 40;
    parse(dateString) {
        return (0, _utils.parseAnyDigitsSigned)(dateString);
    }
    set(date, _flags, value) {
        return [
            (0, _index.constructFrom)(date, value * 1000),
            {
                timestampIsSet: true
            }
        ];
    }
    incompatibleTokens = "*";
}
exports.TimestampSecondsParser = TimestampSecondsParser;

},{"d45a9a59d4c4a1fc":"hNMdA","e6a228a9048e0b92":"6E7ou","1a8a5d87134d1ddc":"6DK60"}],"czEu6":[function(require,module,exports) {
"use strict";
exports.TimestampMillisecondsParser = void 0;
var _index = require("de438b7eb6bce284");
var _Parser = require("ea4d3aab51a2471d");
var _utils = require("f77d6322d2335550");
class TimestampMillisecondsParser extends _Parser.Parser {
    priority = 20;
    parse(dateString) {
        return (0, _utils.parseAnyDigitsSigned)(dateString);
    }
    set(date, _flags, value) {
        return [
            (0, _index.constructFrom)(date, value),
            {
                timestampIsSet: true
            }
        ];
    }
    incompatibleTokens = "*";
}
exports.TimestampMillisecondsParser = TimestampMillisecondsParser;

},{"de438b7eb6bce284":"hNMdA","ea4d3aab51a2471d":"6E7ou","f77d6322d2335550":"6DK60"}],"8FUr6":[function(require,module,exports) {
"use strict";
exports.isMonday = isMonday;
var _index = require("4d45be3b46965d43");
/**
 * @name isMonday
 * @category Weekday Helpers
 * @summary Is the given date Monday?
 *
 * @description
 * Is the given date Monday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is Monday
 *
 * @example
 * // Is 22 September 2014 Monday?
 * const result = isMonday(new Date(2014, 8, 22))
 * //=> true
 */ function isMonday(date) {
    return (0, _index.toDate)(date).getDay() === 1;
}

},{"4d45be3b46965d43":"actWA"}],"8QzC7":[function(require,module,exports) {
"use strict";
exports.isPast = isPast;
var _index = require("612cfa3e3a2e40bb");
/**
 * @name isPast
 * @category Common Helpers
 * @summary Is the given date in the past?
 * @pure false
 *
 * @description
 * Is the given date in the past?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in the past
 *
 * @example
 * // If today is 6 October 2014, is 2 July 2014 in the past?
 * const result = isPast(new Date(2014, 6, 2))
 * //=> true
 */ function isPast(date) {
    return +(0, _index.toDate)(date) < Date.now();
}

},{"612cfa3e3a2e40bb":"actWA"}],"jSzvL":[function(require,module,exports) {
"use strict";
exports.isSameHour = isSameHour;
var _index = require("92c6a40dfa7c3154");
/**
 * @name isSameHour
 * @category Hour Helpers
 * @summary Are the given dates in the same hour (and same day)?
 *
 * @description
 * Are the given dates in the same hour (and same day)?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 *
 * @returns The dates are in the same hour (and same day)
 *
 * @example
 * // Are 4 September 2014 06:00:00 and 4 September 06:30:00 in the same hour?
 * const result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 4, 6, 30))
 * //=> true
 *
 * @example
 * // Are 4 September 2014 06:00:00 and 5 September 06:00:00 in the same hour?
 * const result = isSameHour(new Date(2014, 8, 4, 6, 0), new Date(2014, 8, 5, 6, 0))
 * //=> false
 */ function isSameHour(dateLeft, dateRight) {
    const dateLeftStartOfHour = (0, _index.startOfHour)(dateLeft);
    const dateRightStartOfHour = (0, _index.startOfHour)(dateRight);
    return +dateLeftStartOfHour === +dateRightStartOfHour;
}

},{"92c6a40dfa7c3154":"30rTC"}],"30rTC":[function(require,module,exports) {
"use strict";
exports.startOfHour = startOfHour;
var _index = require("9638b175da3d3e66");
/**
 * @name startOfHour
 * @category Hour Helpers
 * @summary Return the start of an hour for the given date.
 *
 * @description
 * Return the start of an hour for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of an hour
 *
 * @example
 * // The start of an hour for 2 September 2014 11:55:00:
 * const result = startOfHour(new Date(2014, 8, 2, 11, 55))
 * //=> Tue Sep 02 2014 11:00:00
 */ function startOfHour(date) {
    const _date = (0, _index.toDate)(date);
    _date.setMinutes(0, 0, 0);
    return _date;
}

},{"9638b175da3d3e66":"actWA"}],"jri8s":[function(require,module,exports) {
"use strict";
exports.isSameISOWeek = isSameISOWeek;
var _index = require("7954406766bf5469");
/**
 * @name isSameISOWeek
 * @category ISO Week Helpers
 * @summary Are the given dates in the same ISO week (and year)?
 *
 * @description
 * Are the given dates in the same ISO week (and year)?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 *
 * @returns The dates are in the same ISO week (and year)
 *
 * @example
 * // Are 1 September 2014 and 7 September 2014 in the same ISO week?
 * const result = isSameISOWeek(new Date(2014, 8, 1), new Date(2014, 8, 7))
 * //=> true
 *
 * @example
 * // Are 1 September 2014 and 1 September 2015 in the same ISO week?
 * const result = isSameISOWeek(new Date(2014, 8, 1), new Date(2015, 8, 1))
 * //=> false
 */ function isSameISOWeek(dateLeft, dateRight) {
    return (0, _index.isSameWeek)(dateLeft, dateRight, {
        weekStartsOn: 1
    });
}

},{"7954406766bf5469":"16SmB"}],"16SmB":[function(require,module,exports) {
"use strict";
exports.isSameWeek = isSameWeek;
var _index = require("1599abc409fd1353");
/**
 * The {@link isSameWeek} function options.
 */ /**
 * @name isSameWeek
 * @category Week Helpers
 * @summary Are the given dates in the same week (and month and year)?
 *
 * @description
 * Are the given dates in the same week (and month and year)?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 * @param options - An object with options
 *
 * @returns The dates are in the same week (and month and year)
 *
 * @example
 * // Are 31 August 2014 and 4 September 2014 in the same week?
 * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4))
 * //=> true
 *
 * @example
 * // If week starts with Monday,
 * // are 31 August 2014 and 4 September 2014 in the same week?
 * const result = isSameWeek(new Date(2014, 7, 31), new Date(2014, 8, 4), {
 *   weekStartsOn: 1
 * })
 * //=> false
 *
 * @example
 * // Are 1 January 2014 and 1 January 2015 in the same week?
 * const result = isSameWeek(new Date(2014, 0, 1), new Date(2015, 0, 1))
 * //=> false
 */ function isSameWeek(dateLeft, dateRight, options) {
    const dateLeftStartOfWeek = (0, _index.startOfWeek)(dateLeft, options);
    const dateRightStartOfWeek = (0, _index.startOfWeek)(dateRight, options);
    return +dateLeftStartOfWeek === +dateRightStartOfWeek;
}

},{"1599abc409fd1353":"dDDvv"}],"bat4E":[function(require,module,exports) {
"use strict";
exports.isSameISOWeekYear = isSameISOWeekYear;
var _index = require("5a42f52d97607f01");
/**
 * @name isSameISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Are the given dates in the same ISO week-numbering year?
 *
 * @description
 * Are the given dates in the same ISO week-numbering year?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 *
 * @returns The dates are in the same ISO week-numbering year
 *
 * @example
 * // Are 29 December 2003 and 2 January 2005 in the same ISO week-numbering year?
 * const result = isSameISOWeekYear(new Date(2003, 11, 29), new Date(2005, 0, 2))
 * //=> true
 */ function isSameISOWeekYear(dateLeft, dateRight) {
    const dateLeftStartOfYear = (0, _index.startOfISOWeekYear)(dateLeft);
    const dateRightStartOfYear = (0, _index.startOfISOWeekYear)(dateRight);
    return +dateLeftStartOfYear === +dateRightStartOfYear;
}

},{"5a42f52d97607f01":"eTm1l"}],"7whBx":[function(require,module,exports) {
"use strict";
exports.isSameMinute = isSameMinute;
var _index = require("3bc0f134b347fe7b");
/**
 * @name isSameMinute
 * @category Minute Helpers
 * @summary Are the given dates in the same minute (and hour and day)?
 *
 * @description
 * Are the given dates in the same minute (and hour and day)?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 *
 * @returns The dates are in the same minute (and hour and day)
 *
 * @example
 * // Are 4 September 2014 06:30:00 and 4 September 2014 06:30:15 in the same minute?
 * const result = isSameMinute(
 *   new Date(2014, 8, 4, 6, 30),
 *   new Date(2014, 8, 4, 6, 30, 15)
 * )
 * //=> true
 *
 * @example
 * // Are 4 September 2014 06:30:00 and 5 September 2014 06:30:00 in the same minute?
 * const result = isSameMinute(
 *   new Date(2014, 8, 4, 6, 30),
 *   new Date(2014, 8, 5, 6, 30)
 * )
 * //=> false
 */ function isSameMinute(dateLeft, dateRight) {
    const dateLeftStartOfMinute = (0, _index.startOfMinute)(dateLeft);
    const dateRightStartOfMinute = (0, _index.startOfMinute)(dateRight);
    return +dateLeftStartOfMinute === +dateRightStartOfMinute;
}

},{"3bc0f134b347fe7b":"5zVrK"}],"1d9cq":[function(require,module,exports) {
"use strict";
exports.isSameMonth = isSameMonth;
var _index = require("23bd545f1d63f8a8");
/**
 * @name isSameMonth
 * @category Month Helpers
 * @summary Are the given dates in the same month (and year)?
 *
 * @description
 * Are the given dates in the same month (and year)?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 *
 * @returns The dates are in the same month (and year)
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 *
 * @example
 * // Are 2 September 2014 and 25 September 2015 in the same month?
 * const result = isSameMonth(new Date(2014, 8, 2), new Date(2015, 8, 25))
 * //=> false
 */ function isSameMonth(dateLeft, dateRight) {
    const _dateLeft = (0, _index.toDate)(dateLeft);
    const _dateRight = (0, _index.toDate)(dateRight);
    return _dateLeft.getFullYear() === _dateRight.getFullYear() && _dateLeft.getMonth() === _dateRight.getMonth();
}

},{"23bd545f1d63f8a8":"actWA"}],"fJJ3M":[function(require,module,exports) {
"use strict";
exports.isSameQuarter = isSameQuarter;
var _index = require("9629b8292d869723");
/**
 * @name isSameQuarter
 * @category Quarter Helpers
 * @summary Are the given dates in the same quarter (and year)?
 *
 * @description
 * Are the given dates in the same quarter (and year)?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check

 * @returns The dates are in the same quarter (and year)
 *
 * @example
 * // Are 1 January 2014 and 8 March 2014 in the same quarter?
 * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2014, 2, 8))
 * //=> true
 *
 * @example
 * // Are 1 January 2014 and 1 January 2015 in the same quarter?
 * const result = isSameQuarter(new Date(2014, 0, 1), new Date(2015, 0, 1))
 * //=> false
 */ function isSameQuarter(dateLeft, dateRight) {
    const dateLeftStartOfQuarter = (0, _index.startOfQuarter)(dateLeft);
    const dateRightStartOfQuarter = (0, _index.startOfQuarter)(dateRight);
    return +dateLeftStartOfQuarter === +dateRightStartOfQuarter;
}

},{"9629b8292d869723":"ipmWI"}],"j88au":[function(require,module,exports) {
"use strict";
exports.isSameSecond = isSameSecond;
var _index = require("53999e672988f9a4");
/**
 * @name isSameSecond
 * @category Second Helpers
 * @summary Are the given dates in the same second (and hour and day)?
 *
 * @description
 * Are the given dates in the same second (and hour and day)?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 *
 * @returns The dates are in the same second (and hour and day)
 *
 * @example
 * // Are 4 September 2014 06:30:15.000 and 4 September 2014 06:30.15.500 in the same second?
 * const result = isSameSecond(
 *   new Date(2014, 8, 4, 6, 30, 15),
 *   new Date(2014, 8, 4, 6, 30, 15, 500)
 * )
 * //=> true
 *
 * @example
 * // Are 4 September 2014 06:00:15.000 and 4 September 2014 06:01.15.000 in the same second?
 * const result = isSameSecond(
 *   new Date(2014, 8, 4, 6, 0, 15),
 *   new Date(2014, 8, 4, 6, 1, 15)
 * )
 * //=> false
 *
 * @example
 * // Are 4 September 2014 06:00:15.000 and 5 September 2014 06:00.15.000 in the same second?
 * const result = isSameSecond(
 *   new Date(2014, 8, 4, 6, 0, 15),
 *   new Date(2014, 8, 5, 6, 0, 15)
 * )
 * //=> false
 */ function isSameSecond(dateLeft, dateRight) {
    const dateLeftStartOfSecond = (0, _index.startOfSecond)(dateLeft);
    const dateRightStartOfSecond = (0, _index.startOfSecond)(dateRight);
    return +dateLeftStartOfSecond === +dateRightStartOfSecond;
}

},{"53999e672988f9a4":"7GNYs"}],"7GNYs":[function(require,module,exports) {
"use strict";
exports.startOfSecond = startOfSecond;
var _index = require("ac80d9695d08cfc2");
/**
 * @name startOfSecond
 * @category Second Helpers
 * @summary Return the start of a second for the given date.
 *
 * @description
 * Return the start of a second for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a second
 *
 * @example
 * // The start of a second for 1 December 2014 22:15:45.400:
 * const result = startOfSecond(new Date(2014, 11, 1, 22, 15, 45, 400))
 * //=> Mon Dec 01 2014 22:15:45.000
 */ function startOfSecond(date) {
    const _date = (0, _index.toDate)(date);
    _date.setMilliseconds(0);
    return _date;
}

},{"ac80d9695d08cfc2":"actWA"}],"jkjxd":[function(require,module,exports) {
"use strict";
exports.isSameYear = isSameYear;
var _index = require("cf2635c669070340");
/**
 * @name isSameYear
 * @category Year Helpers
 * @summary Are the given dates in the same year?
 *
 * @description
 * Are the given dates in the same year?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param dateLeft - The first date to check
 * @param dateRight - The second date to check
 *
 * @returns The dates are in the same year
 *
 * @example
 * // Are 2 September 2014 and 25 September 2014 in the same year?
 * const result = isSameYear(new Date(2014, 8, 2), new Date(2014, 8, 25))
 * //=> true
 */ function isSameYear(dateLeft, dateRight) {
    const _dateLeft = (0, _index.toDate)(dateLeft);
    const _dateRight = (0, _index.toDate)(dateRight);
    return _dateLeft.getFullYear() === _dateRight.getFullYear();
}

},{"cf2635c669070340":"actWA"}],"bUS6W":[function(require,module,exports) {
"use strict";
exports.isThisHour = isThisHour;
var _index = require("fa4f21cb15a9bfed");
var _index2 = require("7de0ff58b1d3a33e");
/**
 * @name isThisHour
 * @category Hour Helpers
 * @summary Is the given date in the same hour as the current date?
 * @pure false
 *
 * @description
 * Is the given date in the same hour as the current date?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in this hour
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:00:00 in this hour?
 * const result = isThisHour(new Date(2014, 8, 25, 18))
 * //=> true
 */ function isThisHour(date) {
    return (0, _index2.isSameHour)(date, (0, _index.constructNow)(date));
}

},{"fa4f21cb15a9bfed":"aJJt5","7de0ff58b1d3a33e":"jSzvL"}],"4X4G2":[function(require,module,exports) {
"use strict";
exports.isThisISOWeek = isThisISOWeek;
var _index = require("7a8aac1d0eeb4b4");
var _index2 = require("24dea389c4f3208");
/**
 * @name isThisISOWeek
 * @category ISO Week Helpers
 * @summary Is the given date in the same ISO week as the current date?
 * @pure false
 *
 * @description
 * Is the given date in the same ISO week as the current date?
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in this ISO week
 *
 * @example
 * // If today is 25 September 2014, is 22 September 2014 in this ISO week?
 * const result = isThisISOWeek(new Date(2014, 8, 22))
 * //=> true
 */ function isThisISOWeek(date) {
    return (0, _index2.isSameISOWeek)(date, (0, _index.constructNow)(date));
}

},{"7a8aac1d0eeb4b4":"aJJt5","24dea389c4f3208":"jri8s"}],"3IALF":[function(require,module,exports) {
"use strict";
exports.isThisMinute = isThisMinute;
var _index = require("c48e78d2aa3eb75a");
var _index2 = require("f2ca1a4c9ac3e09b");
/**
 * @name isThisMinute
 * @category Minute Helpers
 * @summary Is the given date in the same minute as the current date?
 * @pure false
 *
 * @description
 * Is the given date in the same minute as the current date?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in this minute
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:30:00 in this minute?
 * const result = isThisMinute(new Date(2014, 8, 25, 18, 30))
 * //=> true
 */ function isThisMinute(date) {
    return (0, _index2.isSameMinute)(date, (0, _index.constructNow)(date));
}

},{"c48e78d2aa3eb75a":"aJJt5","f2ca1a4c9ac3e09b":"7whBx"}],"efMjU":[function(require,module,exports) {
"use strict";
exports.isThisMonth = isThisMonth;
var _index = require("a0fcb49c79240b43");
var _index2 = require("dd3ba3f0986a5bca");
/**
 * @name isThisMonth
 * @category Month Helpers
 * @summary Is the given date in the same month as the current date?
 * @pure false
 *
 * @description
 * Is the given date in the same month as the current date?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in this month
 *
 * @example
 * // If today is 25 September 2014, is 15 September 2014 in this month?
 * const result = isThisMonth(new Date(2014, 8, 15))
 * //=> true
 */ function isThisMonth(date) {
    return (0, _index2.isSameMonth)(date, (0, _index.constructNow)(date));
}

},{"a0fcb49c79240b43":"aJJt5","dd3ba3f0986a5bca":"1d9cq"}],"7x5Jl":[function(require,module,exports) {
"use strict";
exports.isThisQuarter = isThisQuarter;
var _index = require("a80382a96a55ff43");
var _index2 = require("c5271e258f905e50");
/**
 * @name isThisQuarter
 * @category Quarter Helpers
 * @summary Is the given date in the same quarter as the current date?
 * @pure false
 *
 * @description
 * Is the given date in the same quarter as the current date?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in this quarter
 *
 * @example
 * // If today is 25 September 2014, is 2 July 2014 in this quarter?
 * const result = isThisQuarter(new Date(2014, 6, 2))
 * //=> true
 */ function isThisQuarter(date) {
    return (0, _index2.isSameQuarter)(date, (0, _index.constructNow)(date));
}

},{"a80382a96a55ff43":"aJJt5","c5271e258f905e50":"fJJ3M"}],"d4Gae":[function(require,module,exports) {
"use strict";
exports.isThisSecond = isThisSecond;
var _index = require("d9fe14e9322b7992");
var _index2 = require("7a6df91b9bb7fd35");
/**
 * @name isThisSecond
 * @category Second Helpers
 * @summary Is the given date in the same second as the current date?
 * @pure false
 *
 * @description
 * Is the given date in the same second as the current date?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in this second
 *
 * @example
 * // If now is 25 September 2014 18:30:15.500,
 * // is 25 September 2014 18:30:15.000 in this second?
 * const result = isThisSecond(new Date(2014, 8, 25, 18, 30, 15))
 * //=> true
 */ function isThisSecond(date) {
    return (0, _index2.isSameSecond)(date, (0, _index.constructNow)(date));
}

},{"d9fe14e9322b7992":"aJJt5","7a6df91b9bb7fd35":"j88au"}],"clx4b":[function(require,module,exports) {
"use strict";
exports.isThisWeek = isThisWeek;
var _index = require("997779426b9bab7f");
var _index2 = require("69c5a3fbdbf00c23");
/**
 * The {@link isThisWeek} function options.
 */ /**
 * @name isThisWeek
 * @category Week Helpers
 * @summary Is the given date in the same week as the current date?
 * @pure false
 *
 * @description
 * Is the given date in the same week as the current date?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 * @param options - The object with options
 *
 * @returns The date is in this week
 *
 * @example
 * // If today is 25 September 2014, is 21 September 2014 in this week?
 * const result = isThisWeek(new Date(2014, 8, 21))
 * //=> true
 *
 * @example
 * // If today is 25 September 2014 and week starts with Monday
 * // is 21 September 2014 in this week?
 * const result = isThisWeek(new Date(2014, 8, 21), { weekStartsOn: 1 })
 * //=> false
 */ function isThisWeek(date, options) {
    return (0, _index2.isSameWeek)(date, (0, _index.constructNow)(date), options);
}

},{"997779426b9bab7f":"aJJt5","69c5a3fbdbf00c23":"16SmB"}],"bMtqV":[function(require,module,exports) {
"use strict";
exports.isThisYear = isThisYear;
var _index = require("34f43e8f14a40bff");
var _index2 = require("9f4e70430c882f21");
/**
 * @name isThisYear
 * @category Year Helpers
 * @summary Is the given date in the same year as the current date?
 * @pure false
 *
 * @description
 * Is the given date in the same year as the current date?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is in this year
 *
 * @example
 * // If today is 25 September 2014, is 2 July 2014 in this year?
 * const result = isThisYear(new Date(2014, 6, 2))
 * //=> true
 */ function isThisYear(date) {
    return (0, _index2.isSameYear)(date, (0, _index.constructNow)(date));
}

},{"34f43e8f14a40bff":"aJJt5","9f4e70430c882f21":"jkjxd"}],"kwI0m":[function(require,module,exports) {
"use strict";
exports.isThursday = isThursday;
var _index = require("4459e1a3e1b1de53");
/**
 * @name isThursday
 * @category Weekday Helpers
 * @summary Is the given date Thursday?
 *
 * @description
 * Is the given date Thursday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is Thursday
 *
 * @example
 * // Is 25 September 2014 Thursday?
 * const result = isThursday(new Date(2014, 8, 25))
 * //=> true
 */ function isThursday(date) {
    return (0, _index.toDate)(date).getDay() === 4;
}

},{"4459e1a3e1b1de53":"actWA"}],"7J3Q2":[function(require,module,exports) {
"use strict";
exports.isToday = isToday;
var _index = require("426156d868cac4dc");
var _index2 = require("3eb372a0c18844be");
/**
 * @name isToday
 * @category Day Helpers
 * @summary Is the given date today?
 * @pure false
 *
 * @description
 * Is the given date today?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is today
 *
 * @example
 * // If today is 6 October 2014, is 6 October 14:00:00 today?
 * const result = isToday(new Date(2014, 9, 6, 14, 0))
 * //=> true
 */ function isToday(date) {
    return (0, _index2.isSameDay)(date, (0, _index.constructNow)(date));
}

},{"426156d868cac4dc":"aJJt5","3eb372a0c18844be":"7FjQf"}],"2brVA":[function(require,module,exports) {
"use strict";
exports.isTomorrow = isTomorrow;
var _index = require("f1846e6b3d2dd7a9");
var _index2 = require("f636807af33fb01");
var _index3 = require("4ca5bd7eee26e325");
/**
 * @name isTomorrow
 * @category Day Helpers
 * @summary Is the given date tomorrow?
 * @pure false
 *
 * @description
 * Is the given date tomorrow?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is tomorrow
 *
 * @example
 * // If today is 6 October 2014, is 7 October 14:00:00 tomorrow?
 * const result = isTomorrow(new Date(2014, 9, 7, 14, 0))
 * //=> true
 */ function isTomorrow(date) {
    return (0, _index3.isSameDay)(date, (0, _index.addDays)((0, _index2.constructNow)(date), 1));
}

},{"f1846e6b3d2dd7a9":"fL4dR","f636807af33fb01":"aJJt5","4ca5bd7eee26e325":"7FjQf"}],"azgGe":[function(require,module,exports) {
"use strict";
exports.isTuesday = isTuesday;
var _index = require("c3ce837a6fb5ce78");
/**
 * @name isTuesday
 * @category Weekday Helpers
 * @summary Is the given date Tuesday?
 *
 * @description
 * Is the given date Tuesday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is Tuesday
 *
 * @example
 * // Is 23 September 2014 Tuesday?
 * const result = isTuesday(new Date(2014, 8, 23))
 * //=> true
 */ function isTuesday(date) {
    return (0, _index.toDate)(date).getDay() === 2;
}

},{"c3ce837a6fb5ce78":"actWA"}],"fo6X0":[function(require,module,exports) {
"use strict";
exports.isWednesday = isWednesday;
var _index = require("91710f6e1e58b24");
/**
 * @name isWednesday
 * @category Weekday Helpers
 * @summary Is the given date Wednesday?
 *
 * @description
 * Is the given date Wednesday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is Wednesday
 *
 * @example
 * // Is 24 September 2014 Wednesday?
 * const result = isWednesday(new Date(2014, 8, 24))
 * //=> true
 */ function isWednesday(date) {
    return (0, _index.toDate)(date).getDay() === 3;
}

},{"91710f6e1e58b24":"actWA"}],"lsZyH":[function(require,module,exports) {
"use strict";
exports.isWithinInterval = isWithinInterval;
var _index = require("3b15ed0c3afb2c68");
/**
 * @name isWithinInterval
 * @category Interval Helpers
 * @summary Is the given date within the interval?
 *
 * @description
 * Is the given date within the interval? (Including start and end.)
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 * @param interval - The interval to check
 *
 * @returns The date is within the interval
 *
 * @example
 * // For the date within the interval:
 * isWithinInterval(new Date(2014, 0, 3), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> true
 *
 * @example
 * // For the date outside of the interval:
 * isWithinInterval(new Date(2014, 0, 10), {
 *   start: new Date(2014, 0, 1),
 *   end: new Date(2014, 0, 7)
 * })
 * //=> false
 *
 * @example
 * // For date equal to interval start:
 * isWithinInterval(date, { start, end: date })
 * // => true
 *
 * @example
 * // For date equal to interval end:
 * isWithinInterval(date, { start: date, end })
 * // => true
 */ function isWithinInterval(date, interval) {
    const time = +(0, _index.toDate)(date);
    const [startTime, endTime] = [
        +(0, _index.toDate)(interval.start),
        +(0, _index.toDate)(interval.end)
    ].sort((a, b)=>a - b);
    return time >= startTime && time <= endTime;
}

},{"3b15ed0c3afb2c68":"actWA"}],"8fQcQ":[function(require,module,exports) {
"use strict";
exports.isYesterday = isYesterday;
var _index = require("a1b8ca9a4562c08d");
var _index2 = require("b3978a4bf227dee2");
var _index3 = require("cff81870f5b68f09");
/**
 * @name isYesterday
 * @category Day Helpers
 * @summary Is the given date yesterday?
 * @pure false
 *
 * @description
 * Is the given date yesterday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 *
 * @returns The date is yesterday
 *
 * @example
 * // If today is 6 October 2014, is 5 October 14:00:00 yesterday?
 * const result = isYesterday(new Date(2014, 9, 5, 14, 0))
 * //=> true
 */ function isYesterday(date) {
    return (0, _index2.isSameDay)(date, (0, _index3.subDays)((0, _index.constructNow)(date), 1));
}

},{"a1b8ca9a4562c08d":"aJJt5","b3978a4bf227dee2":"7FjQf","cff81870f5b68f09":"3dD7a"}],"3dD7a":[function(require,module,exports) {
"use strict";
exports.subDays = subDays;
var _index = require("e0eae9dbd8818809");
/**
 * @name subDays
 * @category Day Helpers
 * @summary Subtract the specified number of days from the given date.
 *
 * @description
 * Subtract the specified number of days from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of days to be subtracted.
 *
 * @returns The new date with the days subtracted
 *
 * @example
 * // Subtract 10 days from 1 September 2014:
 * const result = subDays(new Date(2014, 8, 1), 10)
 * //=> Fri Aug 22 2014 00:00:00
 */ function subDays(date, amount) {
    return (0, _index.addDays)(date, -amount);
}

},{"e0eae9dbd8818809":"fL4dR"}],"4SSWt":[function(require,module,exports) {
"use strict";
exports.lastDayOfDecade = lastDayOfDecade;
var _index = require("19690e8c5b1cff89");
/**
 * @name lastDayOfDecade
 * @category Decade Helpers
 * @summary Return the last day of a decade for the given date.
 *
 * @description
 * Return the last day of a decade for the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The last day of a decade
 *
 * @example
 * // The last day of a decade for 21 December 2012 21:12:00:
 * const result = lastDayOfDecade(new Date(2012, 11, 21, 21, 12, 00))
 * //=> Wed Dec 31 2019 00:00:00
 */ function lastDayOfDecade(date) {
    // TODO: Switch to more technical definition in of decades that start with 1
    // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking
    // change, so it can only be done in 4.0.
    const _date = (0, _index.toDate)(date);
    const year = _date.getFullYear();
    const decade = 9 + Math.floor(year / 10) * 10;
    _date.setFullYear(decade + 1, 0, 0);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"19690e8c5b1cff89":"actWA"}],"8aCUT":[function(require,module,exports) {
"use strict";
exports.lastDayOfISOWeek = lastDayOfISOWeek;
var _index = require("310c2c93bee18a1d");
/**
 * @name lastDayOfISOWeek
 * @category ISO Week Helpers
 * @summary Return the last day of an ISO week for the given date.
 *
 * @description
 * Return the last day of an ISO week for the given date.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The last day of an ISO week
 *
 * @example
 * // The last day of an ISO week for 2 September 2014 11:55:00:
 * const result = lastDayOfISOWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sun Sep 07 2014 00:00:00
 */ function lastDayOfISOWeek(date) {
    return (0, _index.lastDayOfWeek)(date, {
        weekStartsOn: 1
    });
}

},{"310c2c93bee18a1d":"hFSne"}],"hFSne":[function(require,module,exports) {
"use strict";
exports.lastDayOfWeek = lastDayOfWeek;
var _index = require("f4ff98d39b69e8fb");
var _index2 = require("44532e3c32a807e3");
/**
 * The {@link lastDayOfWeek} function options.
 */ /**
 * @name lastDayOfWeek
 * @category Week Helpers
 * @summary Return the last day of a week for the given date.
 *
 * @description
 * Return the last day of a week for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param options - An object with options
 *
 * @returns The last day of a week
 *
 * @example
 * // The last day of a week for 2 September 2014 11:55:00:
 * const result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Sat Sep 06 2014 00:00:00
 *
 * @example
 * // If the week starts on Monday, the last day of the week for 2 September 2014 11:55:00:
 * const result = lastDayOfWeek(new Date(2014, 8, 2, 11, 55, 0), { weekStartsOn: 1 })
 * //=> Sun Sep 07 2014 00:00:00
 */ function lastDayOfWeek(date, options) {
    const defaultOptions = (0, _index2.getDefaultOptions)();
    const weekStartsOn = options?.weekStartsOn ?? options?.locale?.options?.weekStartsOn ?? defaultOptions.weekStartsOn ?? defaultOptions.locale?.options?.weekStartsOn ?? 0;
    const _date = (0, _index.toDate)(date);
    const day = _date.getDay();
    const diff = (day < weekStartsOn ? -7 : 0) + 6 - (day - weekStartsOn);
    _date.setHours(0, 0, 0, 0);
    _date.setDate(_date.getDate() + diff);
    return _date;
}

},{"f4ff98d39b69e8fb":"actWA","44532e3c32a807e3":"98fau"}],"jW013":[function(require,module,exports) {
"use strict";
exports.lastDayOfISOWeekYear = lastDayOfISOWeekYear;
var _index = require("6f2d40dbf0beeab9");
var _index2 = require("50638a52881c58b3");
var _index3 = require("c4a7659712beecae");
/**
 * @name lastDayOfISOWeekYear
 * @category ISO Week-Numbering Year Helpers
 * @summary Return the last day of an ISO week-numbering year for the given date.
 *
 * @description
 * Return the last day of an ISO week-numbering year,
 * which always starts 3 days before the year's first Thursday.
 * The result will be in the local timezone.
 *
 * ISO week-numbering year: http://en.wikipedia.org/wiki/ISO_week_date
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The end of an ISO week-numbering year
 *
 * @example
 * // The last day of an ISO week-numbering year for 2 July 2005:
 * const result = lastDayOfISOWeekYear(new Date(2005, 6, 2))
 * //=> Sun Jan 01 2006 00:00:00
 */ function lastDayOfISOWeekYear(date) {
    const year = (0, _index.getISOWeekYear)(date);
    const fourthOfJanuary = (0, _index3.constructFrom)(date, 0);
    fourthOfJanuary.setFullYear(year + 1, 0, 4);
    fourthOfJanuary.setHours(0, 0, 0, 0);
    const _date = (0, _index2.startOfISOWeek)(fourthOfJanuary);
    _date.setDate(_date.getDate() - 1);
    return _date;
}

},{"6f2d40dbf0beeab9":"jWChc","50638a52881c58b3":"iF0wL","c4a7659712beecae":"hNMdA"}],"ccmoZ":[function(require,module,exports) {
"use strict";
exports.lastDayOfQuarter = lastDayOfQuarter;
var _index = require("ab0d585d78bebc2b");
/**
 * @name lastDayOfQuarter
 * @category Quarter Helpers
 * @summary Return the last day of a year quarter for the given date.
 *
 * @description
 * Return the last day of a year quarter for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The last day of a quarter
 *
 * @example
 * // The last day of a quarter for 2 September 2014 11:55:00:
 * const result = lastDayOfQuarter(new Date(2014, 8, 2, 11, 55, 0))
 * //=> Tue Sep 30 2014 00:00:00
 */ function lastDayOfQuarter(date) {
    const _date = (0, _index.toDate)(date);
    const currentMonth = _date.getMonth();
    const month = currentMonth - currentMonth % 3 + 3;
    _date.setMonth(month, 0);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"ab0d585d78bebc2b":"actWA"}],"9VAZa":[function(require,module,exports) {
"use strict";
exports.lastDayOfYear = lastDayOfYear;
var _index = require("fc978c197d626874");
/**
 * @name lastDayOfYear
 * @category Year Helpers
 * @summary Return the last day of a year for the given date.
 *
 * @description
 * Return the last day of a year for the given date.
 * The result will be in the local timezone.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The last day of a year
 *
 * @example
 * // The last day of a year for 2 September 2014 11:55:00:
 * const result = lastDayOfYear(new Date(2014, 8, 2, 11, 55, 00))
 * //=> Wed Dec 31 2014 00:00:00
 */ function lastDayOfYear(date) {
    const _date = (0, _index.toDate)(date);
    const year = _date.getFullYear();
    _date.setFullYear(year + 1, 0, 0);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"fc978c197d626874":"actWA"}],"kU9pl":[function(require,module,exports) {
"use strict";
exports.lightFormat = lightFormat;
Object.defineProperty(exports, "lightFormatters", {
    enumerable: true,
    get: function() {
        return _index3.lightFormatters;
    }
});
var _index = require("e6e1e54ff83d376f");
var _index2 = require("6dbbe26649931a76");
var _index3 = require("8c1cb87f7b9fb7dc");
// Rexports of internal for libraries to use.
// See: https://github.com/date-fns/date-fns/issues/3638#issuecomment-1877082874
// This RegExp consists of three parts separated by `|`:
// - (\w)\1* matches any sequences of the same letter
// - '' matches two quote characters in a row
// - '(''|[^'])+('|$) matches anything surrounded by two quote characters ('),
//   except a single quote symbol, which ends the sequence.
//   Two quote characters do not end the sequence.
//   If there is no matching single quote
//   then the sequence will continue until the end of the string.
// - . matches any single character unmatched by previous parts of the RegExps
const formattingTokensRegExp = /(\w)\1*|''|'(''|[^'])+('|$)|./g;
const escapedStringRegExp = /^'([^]*?)'?$/;
const doubleQuoteRegExp = /''/g;
const unescapedLatinCharacterRegExp = /[a-zA-Z]/;
/**
 * @private
 */ /**
 * @name lightFormat
 * @category Common Helpers
 * @summary Format the date.
 *
 * @description
 * Return the formatted date string in the given format. Unlike `format`,
 * `lightFormat` doesn't use locales and outputs date using the most popular tokens.
 *
 * > ⚠️ Please note that the `lightFormat` tokens differ from Moment.js and other libraries.
 * > See: https://github.com/date-fns/date-fns/blob/master/docs/unicodeTokens.md
 *
 * The characters wrapped between two single quotes characters (') are escaped.
 * Two single quotes in a row, whether inside or outside a quoted sequence, represent a 'real' single quote.
 *
 * Format of the string is based on Unicode Technical Standard #35:
 * https://www.unicode.org/reports/tr35/tr35-dates.html#Date_Field_Symbol_Table
 *
 * Accepted patterns:
 * | Unit                            | Pattern | Result examples                   |
 * |---------------------------------|---------|-----------------------------------|
 * | AM, PM                          | a..aaa  | AM, PM                            |
 * |                                 | aaaa    | a.m., p.m.                        |
 * |                                 | aaaaa   | a, p                              |
 * | Calendar year                   | y       | 44, 1, 1900, 2017                 |
 * |                                 | yy      | 44, 01, 00, 17                    |
 * |                                 | yyy     | 044, 001, 000, 017                |
 * |                                 | yyyy    | 0044, 0001, 1900, 2017            |
 * | Month (formatting)              | M       | 1, 2, ..., 12                     |
 * |                                 | MM      | 01, 02, ..., 12                   |
 * | Day of month                    | d       | 1, 2, ..., 31                     |
 * |                                 | dd      | 01, 02, ..., 31                   |
 * | Hour [1-12]                     | h       | 1, 2, ..., 11, 12                 |
 * |                                 | hh      | 01, 02, ..., 11, 12               |
 * | Hour [0-23]                     | H       | 0, 1, 2, ..., 23                  |
 * |                                 | HH      | 00, 01, 02, ..., 23               |
 * | Minute                          | m       | 0, 1, ..., 59                     |
 * |                                 | mm      | 00, 01, ..., 59                   |
 * | Second                          | s       | 0, 1, ..., 59                     |
 * |                                 | ss      | 00, 01, ..., 59                   |
 * | Fraction of second              | S       | 0, 1, ..., 9                      |
 * |                                 | SS      | 00, 01, ..., 99                   |
 * |                                 | SSS     | 000, 001, ..., 999                |
 * |                                 | SSSS    | ...                               |
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 * @param format - The string of tokens
 *
 * @returns The formatted date string
 *
 * @throws `Invalid time value` if the date is invalid
 * @throws format string contains an unescaped latin alphabet character
 *
 * @example
 * const result = lightFormat(new Date(2014, 1, 11), 'yyyy-MM-dd')
 * //=> '2014-02-11'
 */ function lightFormat(date, formatStr) {
    const _date = (0, _index2.toDate)(date);
    if (!(0, _index.isValid)(_date)) throw new RangeError("Invalid time value");
    const tokens = formatStr.match(formattingTokensRegExp);
    // The only case when formattingTokensRegExp doesn't match the string is when it's empty
    if (!tokens) return "";
    const result = tokens.map((substring)=>{
        // Replace two single quote characters with one single quote character
        if (substring === "''") return "'";
        const firstCharacter = substring[0];
        if (firstCharacter === "'") return cleanEscapedString(substring);
        const formatter = _index3.lightFormatters[firstCharacter];
        if (formatter) return formatter(_date, substring);
        if (firstCharacter.match(unescapedLatinCharacterRegExp)) throw new RangeError("Format string contains an unescaped latin alphabet character `" + firstCharacter + "`");
        return substring;
    }).join("");
    return result;
}
function cleanEscapedString(input) {
    const matches = input.match(escapedStringRegExp);
    if (!matches) return input;
    return matches[1].replace(doubleQuoteRegExp, "'");
}

},{"e6e1e54ff83d376f":"gbOJY","6dbbe26649931a76":"actWA","8c1cb87f7b9fb7dc":"bOcKP"}],"lzjRb":[function(require,module,exports) {
"use strict";
exports.milliseconds = milliseconds;
var _index = require("45cb8142d6d463ca");
/**
 * @name milliseconds
 * @category Millisecond Helpers
 * @summary
 * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.
 *
 * @description
 * Returns the number of milliseconds in the specified, years, months, weeks, days, hours, minutes and seconds.
 *
 * One years equals 365.2425 days according to the formula:
 *
 * > Leap year occures every 4 years, except for years that are divisable by 100 and not divisable by 400.
 * > 1 mean year = (365+1/4-1/100+1/400) days = 365.2425 days
 *
 * One month is a year divided by 12.
 *
 * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be added.
 *
 * @returns The milliseconds
 *
 * @example
 * // 1 year in milliseconds
 * milliseconds({ years: 1 })
 * //=> 31556952000
 *
 * // 3 months in milliseconds
 * milliseconds({ months: 3 })
 * //=> 7889238000
 */ function milliseconds({ years, months, weeks, days, hours, minutes, seconds }) {
    let totalDays = 0;
    if (years) totalDays += years * _index.daysInYear;
    if (months) totalDays += months * (_index.daysInYear / 12);
    if (weeks) totalDays += weeks * 7;
    if (days) totalDays += days;
    let totalSeconds = totalDays * 86400;
    if (hours) totalSeconds += hours * 3600;
    if (minutes) totalSeconds += minutes * 60;
    if (seconds) totalSeconds += seconds;
    return Math.trunc(totalSeconds * 1000);
}

},{"45cb8142d6d463ca":"1vXXw"}],"jMfmL":[function(require,module,exports) {
"use strict";
exports.millisecondsToHours = millisecondsToHours;
var _index = require("d1e90fa8b924dd35");
/**
 * @name millisecondsToHours
 * @category Conversion Helpers
 * @summary Convert milliseconds to hours.
 *
 * @description
 * Convert a number of milliseconds to a full number of hours.
 *
 * @param milliseconds - The number of milliseconds to be converted
 *
 * @returns The number of milliseconds converted in hours
 *
 * @example
 * // Convert 7200000 milliseconds to hours:
 * const result = millisecondsToHours(7200000)
 * //=> 2
 *
 * @example
 * // It uses floor rounding:
 * const result = millisecondsToHours(7199999)
 * //=> 1
 */ function millisecondsToHours(milliseconds) {
    const hours = milliseconds / _index.millisecondsInHour;
    return Math.trunc(hours);
}

},{"d1e90fa8b924dd35":"1vXXw"}],"enzjB":[function(require,module,exports) {
"use strict";
exports.millisecondsToMinutes = millisecondsToMinutes;
var _index = require("5389415c189a3dc6");
/**
 * @name millisecondsToMinutes
 * @category Conversion Helpers
 * @summary Convert milliseconds to minutes.
 *
 * @description
 * Convert a number of milliseconds to a full number of minutes.
 *
 * @param milliseconds - The number of milliseconds to be converted
 *
 * @returns The number of milliseconds converted in minutes
 *
 * @example
 * // Convert 60000 milliseconds to minutes:
 * const result = millisecondsToMinutes(60000)
 * //=> 1
 *
 * @example
 * // It uses floor rounding:
 * const result = millisecondsToMinutes(119999)
 * //=> 1
 */ function millisecondsToMinutes(milliseconds) {
    const minutes = milliseconds / _index.millisecondsInMinute;
    return Math.trunc(minutes);
}

},{"5389415c189a3dc6":"1vXXw"}],"jqSZU":[function(require,module,exports) {
"use strict";
exports.millisecondsToSeconds = millisecondsToSeconds;
var _index = require("861d3d04ff9a07fa");
/**
 * @name millisecondsToSeconds
 * @category Conversion Helpers
 * @summary Convert milliseconds to seconds.
 *
 * @description
 * Convert a number of milliseconds to a full number of seconds.
 *
 * @param milliseconds - The number of milliseconds to be converted
 *
 * @returns The number of milliseconds converted in seconds
 *
 * @example
 * // Convert 1000 miliseconds to seconds:
 * const result = millisecondsToSeconds(1000)
 * //=> 1
 *
 * @example
 * // It uses floor rounding:
 * const result = millisecondsToSeconds(1999)
 * //=> 1
 */ function millisecondsToSeconds(milliseconds) {
    const seconds = milliseconds / _index.millisecondsInSecond;
    return Math.trunc(seconds);
}

},{"861d3d04ff9a07fa":"1vXXw"}],"g79VA":[function(require,module,exports) {
"use strict";
exports.minutesToHours = minutesToHours;
var _index = require("b2279c5d7baaa4de");
/**
 * @name minutesToHours
 * @category Conversion Helpers
 * @summary Convert minutes to hours.
 *
 * @description
 * Convert a number of minutes to a full number of hours.
 *
 * @param minutes - The number of minutes to be converted
 *
 * @returns The number of minutes converted in hours
 *
 * @example
 * // Convert 140 minutes to hours:
 * const result = minutesToHours(120)
 * //=> 2
 *
 * @example
 * // It uses floor rounding:
 * const result = minutesToHours(179)
 * //=> 2
 */ function minutesToHours(minutes) {
    const hours = minutes / _index.minutesInHour;
    return Math.trunc(hours);
}

},{"b2279c5d7baaa4de":"1vXXw"}],"inDwO":[function(require,module,exports) {
"use strict";
exports.minutesToMilliseconds = minutesToMilliseconds;
var _index = require("63cd685f54f399ba");
/**
 * @name minutesToMilliseconds
 * @category Conversion Helpers
 * @summary Convert minutes to milliseconds.
 *
 * @description
 * Convert a number of minutes to a full number of milliseconds.
 *
 * @param minutes - The number of minutes to be converted
 *
 * @returns The number of minutes converted in milliseconds
 *
 * @example
 * // Convert 2 minutes to milliseconds
 * const result = minutesToMilliseconds(2)
 * //=> 120000
 */ function minutesToMilliseconds(minutes) {
    return Math.trunc(minutes * _index.millisecondsInMinute);
}

},{"63cd685f54f399ba":"1vXXw"}],"4Wxgd":[function(require,module,exports) {
"use strict";
exports.minutesToSeconds = minutesToSeconds;
var _index = require("46501645cea7f36c");
/**
 * @name minutesToSeconds
 * @category Conversion Helpers
 * @summary Convert minutes to seconds.
 *
 * @description
 * Convert a number of minutes to a full number of seconds.
 *
 * @param minutes - The number of minutes to be converted
 *
 * @returns The number of minutes converted in seconds
 *
 * @example
 * // Convert 2 minutes to seconds
 * const result = minutesToSeconds(2)
 * //=> 120
 */ function minutesToSeconds(minutes) {
    return Math.trunc(minutes * _index.secondsInMinute);
}

},{"46501645cea7f36c":"1vXXw"}],"gHdRE":[function(require,module,exports) {
"use strict";
exports.monthsToQuarters = monthsToQuarters;
var _index = require("66be799395f33ad6");
/**
 * @name monthsToQuarters
 * @category Conversion Helpers
 * @summary Convert number of months to quarters.
 *
 * @description
 * Convert a number of months to a full number of quarters.
 *
 * @param months - The number of months to be converted.
 *
 * @returns The number of months converted in quarters
 *
 * @example
 * // Convert 6 months to quarters:
 * const result = monthsToQuarters(6)
 * //=> 2
 *
 * @example
 * // It uses floor rounding:
 * const result = monthsToQuarters(7)
 * //=> 2
 */ function monthsToQuarters(months) {
    const quarters = months / _index.monthsInQuarter;
    return Math.trunc(quarters);
}

},{"66be799395f33ad6":"1vXXw"}],"5rxTb":[function(require,module,exports) {
"use strict";
exports.monthsToYears = monthsToYears;
var _index = require("4aa74b8bb4072671");
/**
 * @name monthsToYears
 * @category Conversion Helpers
 * @summary Convert number of months to years.
 *
 * @description
 * Convert a number of months to a full number of years.
 *
 * @param months - The number of months to be converted
 *
 * @returns The number of months converted in years
 *
 * @example
 * // Convert 36 months to years:
 * const result = monthsToYears(36)
 * //=> 3
 *
 * // It uses floor rounding:
 * const result = monthsToYears(40)
 * //=> 3
 */ function monthsToYears(months) {
    const years = months / _index.monthsInYear;
    return Math.trunc(years);
}

},{"4aa74b8bb4072671":"1vXXw"}],"8JvSy":[function(require,module,exports) {
"use strict";
exports.nextDay = nextDay;
var _index = require("ca24a3f0389dc83e");
var _index2 = require("69b65fb7d3c29c5e");
/**
 * @name nextDay
 * @category Weekday Helpers
 * @summary When is the next day of the week?
 *
 * @description
 * When is the next day of the week? 0-6 the day of the week, 0 represents Sunday.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 * @param day - day of the week
 *
 * @returns The date is the next day of week
 *
 * @example
 * // When is the next Monday after Mar, 20, 2020?
 * const result = nextDay(new Date(2020, 2, 20), 1)
 * //=> Mon Mar 23 2020 00:00:00
 *
 * @example
 * // When is the next Tuesday after Mar, 21, 2020?
 * const result = nextDay(new Date(2020, 2, 21), 2)
 * //=> Tue Mar 24 2020 00:00:00
 */ function nextDay(date, day) {
    let delta = day - (0, _index2.getDay)(date);
    if (delta <= 0) delta += 7;
    return (0, _index.addDays)(date, delta);
}

},{"ca24a3f0389dc83e":"fL4dR","69b65fb7d3c29c5e":"esFEi"}],"7LrAi":[function(require,module,exports) {
"use strict";
exports.nextFriday = nextFriday;
var _index = require("f9faac43a000efc1");
/**
 * @name nextFriday
 * @category Weekday Helpers
 * @summary When is the next Friday?
 *
 * @description
 * When is the next Friday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The next Friday
 *
 * @example
 * // When is the next Friday after Mar, 22, 2020?
 * const result = nextFriday(new Date(2020, 2, 22))
 * //=> Fri Mar 27 2020 00:00:00
 */ function nextFriday(date) {
    return (0, _index.nextDay)(date, 5);
}

},{"f9faac43a000efc1":"8JvSy"}],"1YO5g":[function(require,module,exports) {
"use strict";
exports.nextMonday = nextMonday;
var _index = require("ce06f84d344dedae");
/**
 * @name nextMonday
 * @category Weekday Helpers
 * @summary When is the next Monday?
 *
 * @description
 * When is the next Monday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The next Monday
 *
 * @example
 * // When is the next Monday after Mar, 22, 2020?
 * const result = nextMonday(new Date(2020, 2, 22))
 * //=> Mon Mar 23 2020 00:00:00
 */ function nextMonday(date) {
    return (0, _index.nextDay)(date, 1);
}

},{"ce06f84d344dedae":"8JvSy"}],"gnebd":[function(require,module,exports) {
"use strict";
exports.nextSaturday = nextSaturday;
var _index = require("8c6693c27a70e211");
/**
 * @name nextSaturday
 * @category Weekday Helpers
 * @summary When is the next Saturday?
 *
 * @description
 * When is the next Saturday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The next Saturday
 *
 * @example
 * // When is the next Saturday after Mar, 22, 2020?
 * const result = nextSaturday(new Date(2020, 2, 22))
 * //=> Sat Mar 28 2020 00:00:00
 */ function nextSaturday(date) {
    return (0, _index.nextDay)(date, 6);
}

},{"8c6693c27a70e211":"8JvSy"}],"29SYN":[function(require,module,exports) {
"use strict";
exports.nextSunday = nextSunday;
var _index = require("a0d35069d4e97420");
/**
 * @name nextSunday
 * @category Weekday Helpers
 * @summary When is the next Sunday?
 *
 * @description
 * When is the next Sunday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The next Sunday
 *
 * @example
 * // When is the next Sunday after Mar, 22, 2020?
 * const result = nextSunday(new Date(2020, 2, 22))
 * //=> Sun Mar 29 2020 00:00:00
 */ function nextSunday(date) {
    return (0, _index.nextDay)(date, 0);
}

},{"a0d35069d4e97420":"8JvSy"}],"atse6":[function(require,module,exports) {
"use strict";
exports.nextThursday = nextThursday;
var _index = require("8312401f2830d3fd");
/**
 * @name nextThursday
 * @category Weekday Helpers
 * @summary When is the next Thursday?
 *
 * @description
 * When is the next Thursday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The next Thursday
 *
 * @example
 * // When is the next Thursday after Mar, 22, 2020?
 * const result = nextThursday(new Date(2020, 2, 22))
 * //=> Thur Mar 26 2020 00:00:00
 */ function nextThursday(date) {
    return (0, _index.nextDay)(date, 4);
}

},{"8312401f2830d3fd":"8JvSy"}],"02uJh":[function(require,module,exports) {
"use strict";
exports.nextTuesday = nextTuesday;
var _index = require("a2f85d404caa8de7");
/**
 * @name nextTuesday
 * @category Weekday Helpers
 * @summary When is the next Tuesday?
 *
 * @description
 * When is the next Tuesday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The next Tuesday
 *
 * @example
 * // When is the next Tuesday after Mar, 22, 2020?
 * const result = nextTuesday(new Date(2020, 2, 22))
 * //=> Tue Mar 24 2020 00:00:00
 */ function nextTuesday(date) {
    return (0, _index.nextDay)(date, 2);
}

},{"a2f85d404caa8de7":"8JvSy"}],"j2uXA":[function(require,module,exports) {
"use strict";
exports.nextWednesday = nextWednesday;
var _index = require("3e112ee16fcb6127");
/**
 * @name nextWednesday
 * @category Weekday Helpers
 * @summary When is the next Wednesday?
 *
 * @description
 * When is the next Wednesday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The next Wednesday
 *
 * @example
 * // When is the next Wednesday after Mar, 22, 2020?
 * const result = nextWednesday(new Date(2020, 2, 22))
 * //=> Wed Mar 25 2020 00:00:00
 */ function nextWednesday(date) {
    return (0, _index.nextDay)(date, 3);
}

},{"3e112ee16fcb6127":"8JvSy"}],"jsVo7":[function(require,module,exports) {
"use strict";
exports.parseISO = parseISO;
var _index = require("1a2fdaf01fdda35e");
/**
 * The {@link parseISO} function options.
 */ /**
 * @name parseISO
 * @category Common Helpers
 * @summary Parse ISO string
 *
 * @description
 * Parse the given string in ISO 8601 format and return an instance of Date.
 *
 * Function accepts complete ISO 8601 formats as well as partial implementations.
 * ISO 8601: http://en.wikipedia.org/wiki/ISO_8601
 *
 * If the argument isn't a string, the function cannot parse the string or
 * the values are invalid, it returns Invalid Date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param argument - The value to convert
 * @param options - An object with options
 *
 * @returns The parsed date in the local time zone
 *
 * @example
 * // Convert string '2014-02-11T11:30:30' to date:
 * const result = parseISO('2014-02-11T11:30:30')
 * //=> Tue Feb 11 2014 11:30:30
 *
 * @example
 * // Convert string '+02014101' to date,
 * // if the additional number of digits in the extended year format is 1:
 * const result = parseISO('+02014101', { additionalDigits: 1 })
 * //=> Fri Apr 11 2014 00:00:00
 */ function parseISO(argument, options) {
    const additionalDigits = options?.additionalDigits ?? 2;
    const dateStrings = splitDateString(argument);
    let date;
    if (dateStrings.date) {
        const parseYearResult = parseYear(dateStrings.date, additionalDigits);
        date = parseDate(parseYearResult.restDateString, parseYearResult.year);
    }
    if (!date || isNaN(date.getTime())) return new Date(NaN);
    const timestamp = date.getTime();
    let time = 0;
    let offset;
    if (dateStrings.time) {
        time = parseTime(dateStrings.time);
        if (isNaN(time)) return new Date(NaN);
    }
    if (dateStrings.timezone) {
        offset = parseTimezone(dateStrings.timezone);
        if (isNaN(offset)) return new Date(NaN);
    } else {
        const dirtyDate = new Date(timestamp + time);
        // JS parsed string assuming it's in UTC timezone
        // but we need it to be parsed in our timezone
        // so we use utc values to build date in our timezone.
        // Year values from 0 to 99 map to the years 1900 to 1999
        // so set year explicitly with setFullYear.
        const result = new Date(0);
        result.setFullYear(dirtyDate.getUTCFullYear(), dirtyDate.getUTCMonth(), dirtyDate.getUTCDate());
        result.setHours(dirtyDate.getUTCHours(), dirtyDate.getUTCMinutes(), dirtyDate.getUTCSeconds(), dirtyDate.getUTCMilliseconds());
        return result;
    }
    return new Date(timestamp + time + offset);
}
const patterns = {
    dateTimeDelimiter: /[T ]/,
    timeZoneDelimiter: /[Z ]/i,
    timezone: /([Z+-].*)$/
};
const dateRegex = /^-?(?:(\d{3})|(\d{2})(?:-?(\d{2}))?|W(\d{2})(?:-?(\d{1}))?|)$/;
const timeRegex = /^(\d{2}(?:[.,]\d*)?)(?::?(\d{2}(?:[.,]\d*)?))?(?::?(\d{2}(?:[.,]\d*)?))?$/;
const timezoneRegex = /^([+-])(\d{2})(?::?(\d{2}))?$/;
function splitDateString(dateString) {
    const dateStrings = {};
    const array = dateString.split(patterns.dateTimeDelimiter);
    let timeString;
    // The regex match should only return at maximum two array elements.
    // [date], [time], or [date, time].
    if (array.length > 2) return dateStrings;
    if (/:/.test(array[0])) timeString = array[0];
    else {
        dateStrings.date = array[0];
        timeString = array[1];
        if (patterns.timeZoneDelimiter.test(dateStrings.date)) {
            dateStrings.date = dateString.split(patterns.timeZoneDelimiter)[0];
            timeString = dateString.substr(dateStrings.date.length, dateString.length);
        }
    }
    if (timeString) {
        const token = patterns.timezone.exec(timeString);
        if (token) {
            dateStrings.time = timeString.replace(token[1], "");
            dateStrings.timezone = token[1];
        } else dateStrings.time = timeString;
    }
    return dateStrings;
}
function parseYear(dateString, additionalDigits) {
    const regex = new RegExp("^(?:(\\d{4}|[+-]\\d{" + (4 + additionalDigits) + "})|(\\d{2}|[+-]\\d{" + (2 + additionalDigits) + "})$)");
    const captures = dateString.match(regex);
    // Invalid ISO-formatted year
    if (!captures) return {
        year: NaN,
        restDateString: ""
    };
    const year = captures[1] ? parseInt(captures[1]) : null;
    const century = captures[2] ? parseInt(captures[2]) : null;
    // either year or century is null, not both
    return {
        year: century === null ? year : century * 100,
        restDateString: dateString.slice((captures[1] || captures[2]).length)
    };
}
function parseDate(dateString, year) {
    // Invalid ISO-formatted year
    if (year === null) return new Date(NaN);
    const captures = dateString.match(dateRegex);
    // Invalid ISO-formatted string
    if (!captures) return new Date(NaN);
    const isWeekDate = !!captures[4];
    const dayOfYear = parseDateUnit(captures[1]);
    const month = parseDateUnit(captures[2]) - 1;
    const day = parseDateUnit(captures[3]);
    const week = parseDateUnit(captures[4]);
    const dayOfWeek = parseDateUnit(captures[5]) - 1;
    if (isWeekDate) {
        if (!validateWeekDate(year, week, dayOfWeek)) return new Date(NaN);
        return dayOfISOWeekYear(year, week, dayOfWeek);
    } else {
        const date = new Date(0);
        if (!validateDate(year, month, day) || !validateDayOfYearDate(year, dayOfYear)) return new Date(NaN);
        date.setUTCFullYear(year, month, Math.max(dayOfYear, day));
        return date;
    }
}
function parseDateUnit(value) {
    return value ? parseInt(value) : 1;
}
function parseTime(timeString) {
    const captures = timeString.match(timeRegex);
    if (!captures) return NaN; // Invalid ISO-formatted time
    const hours = parseTimeUnit(captures[1]);
    const minutes = parseTimeUnit(captures[2]);
    const seconds = parseTimeUnit(captures[3]);
    if (!validateTime(hours, minutes, seconds)) return NaN;
    return hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute + seconds * 1000;
}
function parseTimeUnit(value) {
    return value && parseFloat(value.replace(",", ".")) || 0;
}
function parseTimezone(timezoneString) {
    if (timezoneString === "Z") return 0;
    const captures = timezoneString.match(timezoneRegex);
    if (!captures) return 0;
    const sign = captures[1] === "+" ? -1 : 1;
    const hours = parseInt(captures[2]);
    const minutes = captures[3] && parseInt(captures[3]) || 0;
    if (!validateTimezone(hours, minutes)) return NaN;
    return sign * (hours * _index.millisecondsInHour + minutes * _index.millisecondsInMinute);
}
function dayOfISOWeekYear(isoWeekYear, week, day) {
    const date = new Date(0);
    date.setUTCFullYear(isoWeekYear, 0, 4);
    const fourthOfJanuaryDay = date.getUTCDay() || 7;
    const diff = (week - 1) * 7 + day + 1 - fourthOfJanuaryDay;
    date.setUTCDate(date.getUTCDate() + diff);
    return date;
}
// Validation functions
// February is null to handle the leap year (using ||)
const daysInMonths = [
    31,
    null,
    31,
    30,
    31,
    30,
    31,
    31,
    30,
    31,
    30,
    31
];
function isLeapYearIndex(year) {
    return year % 400 === 0 || year % 4 === 0 && year % 100 !== 0;
}
function validateDate(year, month, date) {
    return month >= 0 && month <= 11 && date >= 1 && date <= (daysInMonths[month] || (isLeapYearIndex(year) ? 29 : 28));
}
function validateDayOfYearDate(year, dayOfYear) {
    return dayOfYear >= 1 && dayOfYear <= (isLeapYearIndex(year) ? 366 : 365);
}
function validateWeekDate(_year, week, day) {
    return week >= 1 && week <= 53 && day >= 0 && day <= 6;
}
function validateTime(hours, minutes, seconds) {
    if (hours === 24) return minutes === 0 && seconds === 0;
    return seconds >= 0 && seconds < 60 && minutes >= 0 && minutes < 60 && hours >= 0 && hours < 25;
}
function validateTimezone(_hours, minutes) {
    return minutes >= 0 && minutes <= 59;
}

},{"1a2fdaf01fdda35e":"1vXXw"}],"45sna":[function(require,module,exports) {
"use strict";
exports.parseJSON = parseJSON; /**
 * @name parseJSON
 * @category Common Helpers
 * @summary Parse a JSON date string
 *
 * @description
 * Converts a complete ISO date string in UTC time, the typical format for transmitting
 * a date in JSON, to a JavaScript `Date` instance.
 *
 * This is a minimal implementation for converting dates retrieved from a JSON API to
 * a `Date` instance which can be used with other functions in the `date-fns` library.
 * The following formats are supported:
 *
 * - `2000-03-15T05:20:10.123Z`: The output of `.toISOString()` and `JSON.stringify(new Date())`
 * - `2000-03-15T05:20:10Z`: Without milliseconds
 * - `2000-03-15T05:20:10+00:00`: With a zero offset, the default JSON encoded format in some other languages
 * - `2000-03-15T05:20:10+05:45`: With a positive or negative offset, the default JSON encoded format in some other languages
 * - `2000-03-15T05:20:10+0000`: With a zero offset without a colon
 * - `2000-03-15T05:20:10`: Without a trailing 'Z' symbol
 * - `2000-03-15T05:20:10.1234567`: Up to 7 digits in milliseconds field. Only first 3 are taken into account since JS does not allow fractional milliseconds
 * - `2000-03-15 05:20:10`: With a space instead of a 'T' separator for APIs returning a SQL date without reformatting
 *
 * For convenience and ease of use these other input types are also supported
 * via [toDate](https://date-fns.org/docs/toDate):
 *
 * - A `Date` instance will be cloned
 * - A `number` will be treated as a timestamp
 *
 * Any other input type or invalid date strings will return an `Invalid Date`.
 *
 * @param dateStr - A fully formed ISO8601 date string to convert
 *
 * @returns The parsed date in the local time zone
 */ 
function parseJSON(dateStr) {
    const parts = dateStr.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);
    if (parts) // Group 8 matches the sign
    return new Date(Date.UTC(+parts[1], +parts[2] - 1, +parts[3], +parts[4] - (+parts[9] || 0) * (parts[8] == "-" ? -1 : 1), +parts[5] - (+parts[10] || 0) * (parts[8] == "-" ? -1 : 1), +parts[6], +((parts[7] || "0") + "00").substring(0, 3)));
    return new Date(NaN);
}

},{}],"aTT5c":[function(require,module,exports) {
"use strict";
exports.previousDay = previousDay;
var _index = require("6bcf4fe96e3a047");
var _index2 = require("b4986229d0d7b311");
/**
 * @name previousDay
 * @category Weekday Helpers
 * @summary When is the previous day of the week?
 *
 * @description
 * When is the previous day of the week? 0-6 the day of the week, 0 represents Sunday.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to check
 * @param day - The day of the week
 *
 * @returns The date is the previous day of week
 *
 * @example
 * // When is the previous Monday before Mar, 20, 2020?
 * const result = previousDay(new Date(2020, 2, 20), 1)
 * //=> Mon Mar 16 2020 00:00:00
 *
 * @example
 * // When is the previous Tuesday before Mar, 21, 2020?
 * const result = previousDay(new Date(2020, 2, 21), 2)
 * //=> Tue Mar 17 2020 00:00:00
 */ function previousDay(date, day) {
    let delta = (0, _index.getDay)(date) - day;
    if (delta <= 0) delta += 7;
    return (0, _index2.subDays)(date, delta);
}

},{"6bcf4fe96e3a047":"esFEi","b4986229d0d7b311":"3dD7a"}],"gIu7S":[function(require,module,exports) {
"use strict";
exports.previousFriday = previousFriday;
var _index = require("5712eb87dec2ab5c");
/**
 * @name previousFriday
 * @category Weekday Helpers
 * @summary When is the previous Friday?
 *
 * @description
 * When is the previous Friday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The previous Friday
 *
 * @example
 * // When is the previous Friday before Jun, 19, 2021?
 * const result = previousFriday(new Date(2021, 5, 19))
 * //=> Fri June 18 2021 00:00:00
 */ function previousFriday(date) {
    return (0, _index.previousDay)(date, 5);
}

},{"5712eb87dec2ab5c":"aTT5c"}],"kcslc":[function(require,module,exports) {
"use strict";
exports.previousMonday = previousMonday;
var _index = require("254280db49759fbc");
/**
 * @name previousMonday
 * @category Weekday Helpers
 * @summary When is the previous Monday?
 *
 * @description
 * When is the previous Monday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The previous Monday
 *
 * @example
 * // When is the previous Monday before Jun, 18, 2021?
 * const result = previousMonday(new Date(2021, 5, 18))
 * //=> Mon June 14 2021 00:00:00
 */ function previousMonday(date) {
    return (0, _index.previousDay)(date, 1);
}

},{"254280db49759fbc":"aTT5c"}],"hsMzT":[function(require,module,exports) {
"use strict";
exports.previousSaturday = previousSaturday;
var _index = require("5e091e090aa006e5");
/**
 * @name previousSaturday
 * @category Weekday Helpers
 * @summary When is the previous Saturday?
 *
 * @description
 * When is the previous Saturday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The previous Saturday
 *
 * @example
 * // When is the previous Saturday before Jun, 20, 2021?
 * const result = previousSaturday(new Date(2021, 5, 20))
 * //=> Sat June 19 2021 00:00:00
 */ function previousSaturday(date) {
    return (0, _index.previousDay)(date, 6);
}

},{"5e091e090aa006e5":"aTT5c"}],"cNh8t":[function(require,module,exports) {
"use strict";
exports.previousSunday = previousSunday;
var _index = require("753c79621f212dff");
/**
 * @name previousSunday
 * @category Weekday Helpers
 * @summary When is the previous Sunday?
 *
 * @description
 * When is the previous Sunday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The previous Sunday
 *
 * @example
 * // When is the previous Sunday before Jun, 21, 2021?
 * const result = previousSunday(new Date(2021, 5, 21))
 * //=> Sun June 20 2021 00:00:00
 */ function previousSunday(date) {
    return (0, _index.previousDay)(date, 0);
}

},{"753c79621f212dff":"aTT5c"}],"9mDjN":[function(require,module,exports) {
"use strict";
exports.previousThursday = previousThursday;
var _index = require("42407c55b7bd4cf3");
/**
 * @name previousThursday
 * @category Weekday Helpers
 * @summary When is the previous Thursday?
 *
 * @description
 * When is the previous Thursday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The previous Thursday
 *
 * @example
 * // When is the previous Thursday before Jun, 18, 2021?
 * const result = previousThursday(new Date(2021, 5, 18))
 * //=> Thu June 17 2021 00:00:00
 */ function previousThursday(date) {
    return (0, _index.previousDay)(date, 4);
}

},{"42407c55b7bd4cf3":"aTT5c"}],"h1oS7":[function(require,module,exports) {
"use strict";
exports.previousTuesday = previousTuesday;
var _index = require("888458f94f4d3ea4");
/**
 * @name previousTuesday
 * @category Weekday Helpers
 * @summary When is the previous Tuesday?
 *
 * @description
 * When is the previous Tuesday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The previous Tuesday
 *
 * @example
 * // When is the previous Tuesday before Jun, 18, 2021?
 * const result = previousTuesday(new Date(2021, 5, 18))
 * //=> Tue June 15 2021 00:00:00
 */ function previousTuesday(date) {
    return (0, _index.previousDay)(date, 2);
}

},{"888458f94f4d3ea4":"aTT5c"}],"f0xQR":[function(require,module,exports) {
"use strict";
exports.previousWednesday = previousWednesday;
var _index = require("266acb1a1ae85529");
/**
 * @name previousWednesday
 * @category Weekday Helpers
 * @summary When is the previous Wednesday?
 *
 * @description
 * When is the previous Wednesday?
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to start counting from
 *
 * @returns The previous Wednesday
 *
 * @example
 * // When is the previous Wednesday before Jun, 18, 2021?
 * const result = previousWednesday(new Date(2021, 5, 18))
 * //=> Wed June 16 2021 00:00:00
 */ function previousWednesday(date) {
    return (0, _index.previousDay)(date, 3);
}

},{"266acb1a1ae85529":"aTT5c"}],"h2o9r":[function(require,module,exports) {
"use strict";
exports.quartersToMonths = quartersToMonths;
var _index = require("581e6077138d352b");
/**
 * @name quartersToMonths
 * @category Conversion Helpers
 * @summary Convert number of quarters to months.
 *
 * @description
 * Convert a number of quarters to a full number of months.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param quarters - The number of quarters to be converted
 *
 * @returns The number of quarters converted in months
 *
 * @example
 * // Convert 2 quarters to months
 * const result = quartersToMonths(2)
 * //=> 6
 */ function quartersToMonths(quarters) {
    return Math.trunc(quarters * _index.monthsInQuarter);
}

},{"581e6077138d352b":"1vXXw"}],"62942":[function(require,module,exports) {
"use strict";
exports.quartersToYears = quartersToYears;
var _index = require("99a6c61d70a5ffad");
/**
 * @name quartersToYears
 * @category Conversion Helpers
 * @summary Convert number of quarters to years.
 *
 * @description
 * Convert a number of quarters to a full number of years.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param quarters - The number of quarters to be converted
 *
 * @returns The number of quarters converted in years
 *
 * @example
 * // Convert 8 quarters to years
 * const result = quartersToYears(8)
 * //=> 2
 *
 * @example
 * // It uses floor rounding:
 * const result = quartersToYears(11)
 * //=> 2
 */ function quartersToYears(quarters) {
    const years = quarters / _index.quartersInYear;
    return Math.trunc(years);
}

},{"99a6c61d70a5ffad":"1vXXw"}],"9YdBg":[function(require,module,exports) {
"use strict";
exports.roundToNearestHours = roundToNearestHours;
var _index = require("86cee0e670018ac9");
var _index2 = require("23a7f1ab170cbf3a");
var _index3 = require("ac9a0cfc2939eac2");
/**
 * The {@link roundToNearestHours} function options.
 */ /**
 * @name roundToNearestHours
 * @category Hour Helpers
 * @summary Rounds the given date to the nearest hour
 *
 * @description
 * Rounds the given date to the nearest hour (or number of hours).
 * Rounds up when the given date is exactly between the nearest round hours.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to round
 * @param options - An object with options.
 *
 * @returns The new date rounded to the closest hour
 *
 * @example
 * // Round 10 July 2014 12:34:56 to nearest hour:
 * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56))
 * //=> Thu Jul 10 2014 13:00:00
 *
 * @example
 * // Round 10 July 2014 12:34:56 to nearest half hour:
 * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 6 })
 * //=> Thu Jul 10 2014 12:00:00

 * @example
 * // Round 10 July 2014 12:34:56 to nearest half hour:
 * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { nearestTo: 8 })
 * //=> Thu Jul 10 2014 16:00:00

* @example
 * // Floor (rounds down) 10 July 2014 12:34:56 to nearest hour:
 * const result = roundToNearestHours(new Date(2014, 6, 10, 1, 23, 45), { roundingMethod: 'ceil' })
 * //=> Thu Jul 10 2014 02:00:00
 *
 * @example
 * // Ceil (rounds up) 10 July 2014 12:34:56 to nearest quarter hour:
 * const result = roundToNearestHours(new Date(2014, 6, 10, 12, 34, 56), { roundingMethod: 'floor', nearestTo: 8 })
 * //=> Thu Jul 10 2014 08:00:00
 */ function roundToNearestHours(date, options) {
    const nearestTo = options?.nearestTo ?? 1;
    if (nearestTo < 1 || nearestTo > 12) return (0, _index2.constructFrom)(date, NaN);
    const _date = (0, _index3.toDate)(date);
    const fractionalMinutes = _date.getMinutes() / 60;
    const fractionalSeconds = _date.getSeconds() / 60 / 60;
    const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60 / 60;
    const hours = _date.getHours() + fractionalMinutes + fractionalSeconds + fractionalMilliseconds;
    // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'
    const method = options?.roundingMethod ?? "round";
    const roundingMethod = (0, _index.getRoundingMethod)(method);
    // nearestTo option does not care daylight savings time
    const roundedHours = roundingMethod(hours / nearestTo) * nearestTo;
    const result = (0, _index2.constructFrom)(date, _date);
    result.setHours(roundedHours, 0, 0, 0);
    return result;
}

},{"86cee0e670018ac9":"1ipL6","23a7f1ab170cbf3a":"hNMdA","ac9a0cfc2939eac2":"actWA"}],"1YDXi":[function(require,module,exports) {
"use strict";
exports.roundToNearestMinutes = roundToNearestMinutes;
var _index = require("156e571ea44e5631");
var _index2 = require("5f4467c863d899fa");
var _index3 = require("7ecafedd8c00c003");
/**
 * The {@link roundToNearestMinutes} function options.
 */ /**
 * @name roundToNearestMinutes
 * @category Minute Helpers
 * @summary Rounds the given date to the nearest minute
 *
 * @description
 * Rounds the given date to the nearest minute (or number of minutes).
 * Rounds up when the given date is exactly between the nearest round minutes.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to round
 * @param options - An object with options.
 *
 * @returns The new date rounded to the closest minute
 *
 * @example
 * // Round 10 July 2014 12:12:34 to nearest minute:
 * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34))
 * //=> Thu Jul 10 2014 12:13:00
 *
 * @example
 * // Round 10 July 2014 12:12:34 to nearest quarter hour:
 * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { nearestTo: 15 })
 * //=> Thu Jul 10 2014 12:15:00
 *
 * @example
 * // Floor (rounds down) 10 July 2014 12:12:34 to nearest minute:
 * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'floor' })
 * //=> Thu Jul 10 2014 12:12:00
 *
 * @example
 * // Ceil (rounds up) 10 July 2014 12:12:34 to nearest half hour:
 * const result = roundToNearestMinutes(new Date(2014, 6, 10, 12, 12, 34), { roundingMethod: 'ceil', nearestTo: 30 })
 * //=> Thu Jul 10 2014 12:30:00
 */ function roundToNearestMinutes(date, options) {
    const nearestTo = options?.nearestTo ?? 1;
    if (nearestTo < 1 || nearestTo > 30) return (0, _index2.constructFrom)(date, NaN);
    const _date = (0, _index3.toDate)(date);
    const fractionalSeconds = _date.getSeconds() / 60;
    const fractionalMilliseconds = _date.getMilliseconds() / 1000 / 60;
    const minutes = _date.getMinutes() + fractionalSeconds + fractionalMilliseconds;
    // Unlike the `differenceIn*` functions, the default rounding behavior is `round` and not 'trunc'
    const method = options?.roundingMethod ?? "round";
    const roundingMethod = (0, _index.getRoundingMethod)(method);
    const roundedMinutes = roundingMethod(minutes / nearestTo) * nearestTo;
    const result = (0, _index2.constructFrom)(date, _date);
    result.setMinutes(roundedMinutes, 0, 0);
    return result;
}

},{"156e571ea44e5631":"1ipL6","5f4467c863d899fa":"hNMdA","7ecafedd8c00c003":"actWA"}],"yIjPa":[function(require,module,exports) {
"use strict";
exports.secondsToHours = secondsToHours;
var _index = require("3fef9b731b720044");
/**
 * @name secondsToHours
 * @category Conversion Helpers
 * @summary Convert seconds to hours.
 *
 * @description
 * Convert a number of seconds to a full number of hours.
 *
 * @param seconds - The number of seconds to be converted
 *
 * @returns The number of seconds converted in hours
 *
 * @example
 * // Convert 7200 seconds into hours
 * const result = secondsToHours(7200)
 * //=> 2
 *
 * @example
 * // It uses floor rounding:
 * const result = secondsToHours(7199)
 * //=> 1
 */ function secondsToHours(seconds) {
    const hours = seconds / _index.secondsInHour;
    return Math.trunc(hours);
}

},{"3fef9b731b720044":"1vXXw"}],"60YWC":[function(require,module,exports) {
"use strict";
exports.secondsToMilliseconds = secondsToMilliseconds;
var _index = require("a1974d1c766dbebe");
/**
 * @name secondsToMilliseconds
 * @category Conversion Helpers
 * @summary Convert seconds to milliseconds.
 *
 * @description
 * Convert a number of seconds to a full number of milliseconds.
 *
 * @param seconds - The number of seconds to be converted
 *
 * @returns The number of seconds converted in milliseconds
 *
 * @example
 * // Convert 2 seconds into milliseconds
 * const result = secondsToMilliseconds(2)
 * //=> 2000
 */ function secondsToMilliseconds(seconds) {
    return seconds * _index.millisecondsInSecond;
}

},{"a1974d1c766dbebe":"1vXXw"}],"7wRiH":[function(require,module,exports) {
"use strict";
exports.secondsToMinutes = secondsToMinutes;
var _index = require("88b262a06d5f2130");
/**
 * @name secondsToMinutes
 * @category Conversion Helpers
 * @summary Convert seconds to minutes.
 *
 * @description
 * Convert a number of seconds to a full number of minutes.
 *
 * @param seconds - The number of seconds to be converted
 *
 * @returns The number of seconds converted in minutes
 *
 * @example
 * // Convert 120 seconds into minutes
 * const result = secondsToMinutes(120)
 * //=> 2
 *
 * @example
 * // It uses floor rounding:
 * const result = secondsToMinutes(119)
 * //=> 1
 */ function secondsToMinutes(seconds) {
    const minutes = seconds / _index.secondsInMinute;
    return Math.trunc(minutes);
}

},{"88b262a06d5f2130":"1vXXw"}],"4BYNm":[function(require,module,exports) {
"use strict";
exports.set = set;
var _index = require("8ebda6aa298e3dce");
var _index2 = require("3a1600af3eb7d0e3");
var _index3 = require("1d29904d7d38b6d3");
/**
 * @name set
 * @category Common Helpers
 * @summary Set date values to a given date.
 *
 * @description
 * Set date values to a given date.
 *
 * Sets time values to date from object `values`.
 * A value is not set if it is undefined or null or doesn't exist in `values`.
 *
 * Note about bundle size: `set` does not internally use `setX` functions from date-fns but instead opts
 * to use native `Date#setX` methods. If you use this function, you may not want to include the
 * other `setX` functions that date-fns provides if you are concerned about the bundle size.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param values - The date values to be set
 *
 * @returns The new date with options set
 *
 * @example
 * // Transform 1 September 2014 into 20 October 2015 in a single line:
 * const result = set(new Date(2014, 8, 20), { year: 2015, month: 9, date: 20 })
 * //=> Tue Oct 20 2015 00:00:00
 *
 * @example
 * // Set 12 PM to 1 September 2014 01:23:45 to 1 September 2014 12:00:00:
 * const result = set(new Date(2014, 8, 1, 1, 23, 45), { hours: 12 })
 * //=> Mon Sep 01 2014 12:23:45
 */ function set(date, values) {
    let _date = (0, _index3.toDate)(date);
    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
    if (isNaN(+_date)) return (0, _index.constructFrom)(date, NaN);
    if (values.year != null) _date.setFullYear(values.year);
    if (values.month != null) _date = (0, _index2.setMonth)(_date, values.month);
    if (values.date != null) _date.setDate(values.date);
    if (values.hours != null) _date.setHours(values.hours);
    if (values.minutes != null) _date.setMinutes(values.minutes);
    if (values.seconds != null) _date.setSeconds(values.seconds);
    if (values.milliseconds != null) _date.setMilliseconds(values.milliseconds);
    return _date;
}

},{"8ebda6aa298e3dce":"hNMdA","3a1600af3eb7d0e3":"5S4Rm","1d29904d7d38b6d3":"actWA"}],"5S4Rm":[function(require,module,exports) {
"use strict";
exports.setMonth = setMonth;
var _index = require("389800ba113a4b05");
var _index2 = require("c6d3e16f0e9f2d5d");
var _index3 = require("3008df466d06f93a");
/**
 * @name setMonth
 * @category Month Helpers
 * @summary Set the month to the given date.
 *
 * @description
 * Set the month to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param month - The month index to set (0-11)
 *
 * @returns The new date with the month set
 *
 * @example
 * // Set February to 1 September 2014:
 * const result = setMonth(new Date(2014, 8, 1), 1)
 * //=> Sat Feb 01 2014 00:00:00
 */ function setMonth(date, month) {
    const _date = (0, _index3.toDate)(date);
    const year = _date.getFullYear();
    const day = _date.getDate();
    const dateWithDesiredMonth = (0, _index.constructFrom)(date, 0);
    dateWithDesiredMonth.setFullYear(year, month, 15);
    dateWithDesiredMonth.setHours(0, 0, 0, 0);
    const daysInMonth = (0, _index2.getDaysInMonth)(dateWithDesiredMonth);
    // Set the last day of the new month
    // if the original date was the last day of the longer month
    _date.setMonth(month, Math.min(day, daysInMonth));
    return _date;
}

},{"389800ba113a4b05":"hNMdA","c6d3e16f0e9f2d5d":"iS77p","3008df466d06f93a":"actWA"}],"detLY":[function(require,module,exports) {
"use strict";
exports.setDate = setDate;
var _index = require("7057dcd16ee8e373");
/**
 * @name setDate
 * @category Day Helpers
 * @summary Set the day of the month to the given date.
 *
 * @description
 * Set the day of the month to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param dayOfMonth - The day of the month of the new date
 *
 * @returns The new date with the day of the month set
 *
 * @example
 * // Set the 30th day of the month to 1 September 2014:
 * const result = setDate(new Date(2014, 8, 1), 30)
 * //=> Tue Sep 30 2014 00:00:00
 */ function setDate(date, dayOfMonth) {
    const _date = (0, _index.toDate)(date);
    _date.setDate(dayOfMonth);
    return _date;
}

},{"7057dcd16ee8e373":"actWA"}],"8KclM":[function(require,module,exports) {
"use strict";
exports.setDayOfYear = setDayOfYear;
var _index = require("c0941b4402ad59f2");
/**
 * @name setDayOfYear
 * @category Day Helpers
 * @summary Set the day of the year to the given date.
 *
 * @description
 * Set the day of the year to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param dayOfYear - The day of the year of the new date
 *
 * @returns The new date with the day of the year set
 *
 * @example
 * // Set the 2nd day of the year to 2 July 2014:
 * const result = setDayOfYear(new Date(2014, 6, 2), 2)
 * //=> Thu Jan 02 2014 00:00:00
 */ function setDayOfYear(date, dayOfYear) {
    const _date = (0, _index.toDate)(date);
    _date.setMonth(0);
    _date.setDate(dayOfYear);
    return _date;
}

},{"c0941b4402ad59f2":"actWA"}],"2QTST":[function(require,module,exports) {
"use strict";
exports.setDefaultOptions = setDefaultOptions;
var _index = require("62255328988484e4");
/**
 * @name setDefaultOptions
 * @category Common Helpers
 * @summary Set default options including locale.
 * @pure false
 *
 * @description
 * Sets the defaults for
 * `options.locale`, `options.weekStartsOn` and `options.firstWeekContainsDate`
 * arguments for all functions.
 *
 * @param options - An object with options
 *
 * @example
 * // Set global locale:
 * import { es } from 'date-fns/locale'
 * setDefaultOptions({ locale: es })
 * const result = format(new Date(2014, 8, 2), 'PPPP')
 * //=> 'martes, 2 de septiembre de 2014'
 *
 * @example
 * // Start of the week for 2 September 2014:
 * const result = startOfWeek(new Date(2014, 8, 2))
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // Start of the week for 2 September 2014,
 * // when we set that week starts on Monday by default:
 * setDefaultOptions({ weekStartsOn: 1 })
 * const result = startOfWeek(new Date(2014, 8, 2))
 * //=> Mon Sep 01 2014 00:00:00
 *
 * @example
 * // Manually set options take priority over default options:
 * setDefaultOptions({ weekStartsOn: 1 })
 * const result = startOfWeek(new Date(2014, 8, 2), { weekStartsOn: 0 })
 * //=> Sun Aug 31 2014 00:00:00
 *
 * @example
 * // Remove the option by setting it to `undefined`:
 * setDefaultOptions({ weekStartsOn: 1 })
 * setDefaultOptions({ weekStartsOn: undefined })
 * const result = startOfWeek(new Date(2014, 8, 2))
 * //=> Sun Aug 31 2014 00:00:00
 */ function setDefaultOptions(options) {
    const result = {};
    const defaultOptions = (0, _index.getDefaultOptions)();
    for(const property in defaultOptions)if (Object.prototype.hasOwnProperty.call(defaultOptions, property)) // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
    result[property] = defaultOptions[property];
    for(const property in options)if (Object.prototype.hasOwnProperty.call(options, property)) {
        if (options[property] === undefined) // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        delete result[property];
        else // eslint-disable-next-line @typescript-eslint/no-explicit-any -- I challange you to fix the type
        result[property] = options[property];
    }
    (0, _index.setDefaultOptions)(result);
}

},{"62255328988484e4":"98fau"}],"a7APw":[function(require,module,exports) {
"use strict";
exports.setHours = setHours;
var _index = require("1d11a257f15355a4");
/**
 * @name setHours
 * @category Hour Helpers
 * @summary Set the hours to the given date.
 *
 * @description
 * Set the hours to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param hours - The hours of the new date
 *
 * @returns The new date with the hours set
 *
 * @example
 * // Set 4 hours to 1 September 2014 11:30:00:
 * const result = setHours(new Date(2014, 8, 1, 11, 30), 4)
 * //=> Mon Sep 01 2014 04:30:00
 */ function setHours(date, hours) {
    const _date = (0, _index.toDate)(date);
    _date.setHours(hours);
    return _date;
}

},{"1d11a257f15355a4":"actWA"}],"1EFb6":[function(require,module,exports) {
"use strict";
exports.setMilliseconds = setMilliseconds;
var _index = require("b10f979f8cdab20a");
/**
 * @name setMilliseconds
 * @category Millisecond Helpers
 * @summary Set the milliseconds to the given date.
 *
 * @description
 * Set the milliseconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param milliseconds - The milliseconds of the new date
 *
 * @returns The new date with the milliseconds set
 *
 * @example
 * // Set 300 milliseconds to 1 September 2014 11:30:40.500:
 * const result = setMilliseconds(new Date(2014, 8, 1, 11, 30, 40, 500), 300)
 * //=> Mon Sep 01 2014 11:30:40.300
 */ function setMilliseconds(date, milliseconds) {
    const _date = (0, _index.toDate)(date);
    _date.setMilliseconds(milliseconds);
    return _date;
}

},{"b10f979f8cdab20a":"actWA"}],"7JQAX":[function(require,module,exports) {
"use strict";
exports.setMinutes = setMinutes;
var _index = require("1f70a54677cb46ac");
/**
 * @name setMinutes
 * @category Minute Helpers
 * @summary Set the minutes to the given date.
 *
 * @description
 * Set the minutes to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param minutes - The minutes of the new date
 *
 * @returns The new date with the minutes set
 *
 * @example
 * // Set 45 minutes to 1 September 2014 11:30:40:
 * const result = setMinutes(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:45:40
 */ function setMinutes(date, minutes) {
    const _date = (0, _index.toDate)(date);
    _date.setMinutes(minutes);
    return _date;
}

},{"1f70a54677cb46ac":"actWA"}],"1U8F7":[function(require,module,exports) {
"use strict";
exports.setQuarter = setQuarter;
var _index = require("f4776e1074765e6a");
var _index2 = require("f757c8c551ce95c6");
/**
 * @name setQuarter
 * @category Quarter Helpers
 * @summary Set the year quarter to the given date.
 *
 * @description
 * Set the year quarter to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param quarter - The quarter of the new date
 *
 * @returns The new date with the quarter set
 *
 * @example
 * // Set the 2nd quarter to 2 July 2014:
 * const result = setQuarter(new Date(2014, 6, 2), 2)
 * //=> Wed Apr 02 2014 00:00:00
 */ function setQuarter(date, quarter) {
    const _date = (0, _index2.toDate)(date);
    const oldQuarter = Math.trunc(_date.getMonth() / 3) + 1;
    const diff = quarter - oldQuarter;
    return (0, _index.setMonth)(_date, _date.getMonth() + diff * 3);
}

},{"f4776e1074765e6a":"5S4Rm","f757c8c551ce95c6":"actWA"}],"E9tFo":[function(require,module,exports) {
"use strict";
exports.setSeconds = setSeconds;
var _index = require("d2223da5fd81400f");
/**
 * @name setSeconds
 * @category Second Helpers
 * @summary Set the seconds to the given date.
 *
 * @description
 * Set the seconds to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param seconds - The seconds of the new date
 *
 * @returns The new date with the seconds set
 *
 * @example
 * // Set 45 seconds to 1 September 2014 11:30:40:
 * const result = setSeconds(new Date(2014, 8, 1, 11, 30, 40), 45)
 * //=> Mon Sep 01 2014 11:30:45
 */ function setSeconds(date, seconds) {
    const _date = (0, _index.toDate)(date);
    _date.setSeconds(seconds);
    return _date;
}

},{"d2223da5fd81400f":"actWA"}],"kcJtI":[function(require,module,exports) {
"use strict";
exports.setWeekYear = setWeekYear;
var _index = require("892a4f6cbe4a4851");
var _index2 = require("a4760182880db22");
var _index3 = require("68ff92802fcb77db");
var _index4 = require("7450ee1debfdb61");
var _index5 = require("78c425fb7620dd8");
/**
 * The {@link setWeekYear} function options.
 */ /**
 * @name setWeekYear
 * @category Week-Numbering Year Helpers
 * @summary Set the local week-numbering year to the given date.
 *
 * @description
 * Set the local week-numbering year to the given date,
 * saving the week number and the weekday number.
 * The exact calculation depends on the values of
 * `options.weekStartsOn` (which is the index of the first day of the week)
 * and `options.firstWeekContainsDate` (which is the day of January, which is always in
 * the first week of the week-numbering year)
 *
 * Week numbering: https://en.wikipedia.org/wiki/Week#The_ISO_week_date_system
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param weekYear - The local week-numbering year of the new date
 * @param options - An object with options
 *
 * @returns The new date with the local week-numbering year set
 *
 * @example
 * // Set the local week-numbering year 2004 to 2 January 2010 with default options:
 * const result = setWeekYear(new Date(2010, 0, 2), 2004)
 * //=> Sat Jan 03 2004 00:00:00
 *
 * @example
 * // Set the local week-numbering year 2004 to 2 January 2010,
 * // if Monday is the first day of week
 * // and 4 January is always in the first week of the year:
 * const result = setWeekYear(new Date(2010, 0, 2), 2004, {
 *   weekStartsOn: 1,
 *   firstWeekContainsDate: 4
 * })
 * //=> Sat Jan 01 2005 00:00:00
 */ function setWeekYear(date, weekYear, options) {
    const defaultOptions = (0, _index5.getDefaultOptions)();
    const firstWeekContainsDate = options?.firstWeekContainsDate ?? options?.locale?.options?.firstWeekContainsDate ?? defaultOptions.firstWeekContainsDate ?? defaultOptions.locale?.options?.firstWeekContainsDate ?? 1;
    let _date = (0, _index4.toDate)(date);
    const diff = (0, _index2.differenceInCalendarDays)(_date, (0, _index3.startOfWeekYear)(_date, options));
    const firstWeek = (0, _index.constructFrom)(date, 0);
    firstWeek.setFullYear(weekYear, 0, firstWeekContainsDate);
    firstWeek.setHours(0, 0, 0, 0);
    _date = (0, _index3.startOfWeekYear)(firstWeek, options);
    _date.setDate(_date.getDate() + diff);
    return _date;
}

},{"892a4f6cbe4a4851":"hNMdA","a4760182880db22":"dvya7","68ff92802fcb77db":"diTjA","7450ee1debfdb61":"actWA","78c425fb7620dd8":"98fau"}],"4hEJG":[function(require,module,exports) {
"use strict";
exports.setYear = setYear;
var _index = require("7614d9b80a22fd43");
var _index2 = require("6c1bb22d849e1125");
/**
 * @name setYear
 * @category Year Helpers
 * @summary Set the year to the given date.
 *
 * @description
 * Set the year to the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param year - The year of the new date
 *
 * @returns The new date with the year set
 *
 * @example
 * // Set year 2013 to 1 September 2014:
 * const result = setYear(new Date(2014, 8, 1), 2013)
 * //=> Sun Sep 01 2013 00:00:00
 */ function setYear(date, year) {
    const _date = (0, _index2.toDate)(date);
    // Check if date is Invalid Date because Date.prototype.setFullYear ignores the value of Invalid Date
    if (isNaN(+_date)) return (0, _index.constructFrom)(date, NaN);
    _date.setFullYear(year);
    return _date;
}

},{"7614d9b80a22fd43":"hNMdA","6c1bb22d849e1125":"actWA"}],"lmg97":[function(require,module,exports) {
"use strict";
exports.startOfDecade = startOfDecade;
var _index = require("510fc86ca3ee446c");
/**
 * @name startOfDecade
 * @category Decade Helpers
 * @summary Return the start of a decade for the given date.
 *
 * @description
 * Return the start of a decade for the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The original date
 *
 * @returns The start of a decade
 *
 * @example
 * // The start of a decade for 21 October 2015 00:00:00:
 * const result = startOfDecade(new Date(2015, 9, 21, 00, 00, 00))
 * //=> Jan 01 2010 00:00:00
 */ function startOfDecade(date) {
    // TODO: Switch to more technical definition in of decades that start with 1
    // end with 0. I.e. 2001-2010 instead of current 2000-2009. It's a breaking
    // change, so it can only be done in 4.0.
    const _date = (0, _index.toDate)(date);
    const year = _date.getFullYear();
    const decade = Math.floor(year / 10) * 10;
    _date.setFullYear(decade, 0, 1);
    _date.setHours(0, 0, 0, 0);
    return _date;
}

},{"510fc86ca3ee446c":"actWA"}],"cMsqy":[function(require,module,exports) {
"use strict";
exports.startOfToday = startOfToday;
var _index = require("4ec5e387631c3390");
/**
 * @name startOfToday
 * @category Day Helpers
 * @summary Return the start of today.
 * @pure false
 *
 * @description
 * Return the start of today.
 *
 * @returns The start of today
 *
 * @example
 * // If today is 6 October 2014:
 * const result = startOfToday()
 * //=> Mon Oct 6 2014 00:00:00
 */ function startOfToday() {
    return (0, _index.startOfDay)(Date.now());
}

},{"4ec5e387631c3390":"iJAa5"}],"04Svu":[function(require,module,exports) {
"use strict";
exports.startOfTomorrow = startOfTomorrow; /**
 * @name startOfTomorrow
 * @category Day Helpers
 * @summary Return the start of tomorrow.
 * @pure false
 *
 * @description
 * Return the start of tomorrow.
 *
 * @returns The start of tomorrow
 *
 * @example
 * // If today is 6 October 2014:
 * const result = startOfTomorrow()
 * //=> Tue Oct 7 2014 00:00:00
 */ 
function startOfTomorrow() {
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth();
    const day = now.getDate();
    const date = new Date(0);
    date.setFullYear(year, month, day + 1);
    date.setHours(0, 0, 0, 0);
    return date;
}

},{}],"dAxue":[function(require,module,exports) {
"use strict";
exports.startOfYesterday = startOfYesterday; /**
 * @name startOfYesterday
 * @category Day Helpers
 * @summary Return the start of yesterday.
 * @pure false
 *
 * @description
 * Return the start of yesterday.
 *
 * @returns The start of yesterday
 *
 * @example
 * // If today is 6 October 2014:
 * const result = startOfYesterday()
 * //=> Sun Oct 5 2014 00:00:00
 */ 
function startOfYesterday() {
    const now = new Date();
    const year = now.getFullYear();
    const month = now.getMonth();
    const day = now.getDate();
    const date = new Date(0);
    date.setFullYear(year, month, day - 1);
    date.setHours(0, 0, 0, 0);
    return date;
}

},{}],"bFznd":[function(require,module,exports) {
"use strict";
exports.sub = sub;
var _index = require("91c2f90d56fdcf39");
var _index2 = require("e9fb52a14c73dacb");
var _index3 = require("ebf995b47bb3f8a4");
/**
 * @name sub
 * @category Common Helpers
 * @summary Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.
 *
 * @description
 * Subtract the specified years, months, weeks, days, hours, minutes and seconds from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param duration - The object with years, months, weeks, days, hours, minutes and seconds to be subtracted
 *
 * | Key     | Description                        |
 * |---------|------------------------------------|
 * | years   | Amount of years to be subtracted   |
 * | months  | Amount of months to be subtracted  |
 * | weeks   | Amount of weeks to be subtracted   |
 * | days    | Amount of days to be subtracted    |
 * | hours   | Amount of hours to be subtracted   |
 * | minutes | Amount of minutes to be subtracted |
 * | seconds | Amount of seconds to be subtracted |
 *
 * All values default to 0
 *
 * @returns The new date with the seconds subtracted
 *
 * @example
 * // Subtract the following duration from 15 June 2017 15:29:20
 * const result = sub(new Date(2017, 5, 15, 15, 29, 20), {
 *   years: 2,
 *   months: 9,
 *   weeks: 1,
 *   days: 7,
 *   hours: 5,
 *   minutes: 9,
 *   seconds: 30
 * })
 * //=> Mon Sep 1 2014 10:19:50
 */ function sub(date, duration) {
    const { years = 0, months = 0, weeks = 0, days = 0, hours = 0, minutes = 0, seconds = 0 } = duration;
    // Subtract years and months
    const dateWithoutMonths = (0, _index2.subMonths)(date, months + years * 12);
    // Subtract weeks and days
    const dateWithoutDays = (0, _index.subDays)(dateWithoutMonths, days + weeks * 7);
    // Subtract hours, minutes and seconds
    const minutestoSub = minutes + hours * 60;
    const secondstoSub = seconds + minutestoSub * 60;
    const mstoSub = secondstoSub * 1000;
    const finalDate = (0, _index3.constructFrom)(date, dateWithoutDays.getTime() - mstoSub);
    return finalDate;
}

},{"91c2f90d56fdcf39":"3dD7a","e9fb52a14c73dacb":"bQpwZ","ebf995b47bb3f8a4":"hNMdA"}],"bQpwZ":[function(require,module,exports) {
"use strict";
exports.subMonths = subMonths;
var _index = require("fbb42da1293ae3b8");
/**
 * @name subMonths
 * @category Month Helpers
 * @summary Subtract the specified number of months from the given date.
 *
 * @description
 * Subtract the specified number of months from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of months to be subtracted.
 *
 * @returns The new date with the months subtracted
 *
 * @example
 * // Subtract 5 months from 1 February 2015:
 * const result = subMonths(new Date(2015, 1, 1), 5)
 * //=> Mon Sep 01 2014 00:00:00
 */ function subMonths(date, amount) {
    return (0, _index.addMonths)(date, -amount);
}

},{"fbb42da1293ae3b8":"alxIr"}],"7oOvu":[function(require,module,exports) {
"use strict";
exports.subBusinessDays = subBusinessDays;
var _index = require("8df6a7f983f79fd5");
/**
 * @name subBusinessDays
 * @category Day Helpers
 * @summary Substract the specified number of business days (mon - fri) to the given date.
 *
 * @description
 * Substract the specified number of business days (mon - fri) to the given date, ignoring weekends.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of business days to be subtracted.
 *
 * @returns The new date with the business days subtracted
 *
 * @example
 * // Substract 10 business days from 1 September 2014:
 * const result = subBusinessDays(new Date(2014, 8, 1), 10)
 * //=> Mon Aug 18 2014 00:00:00 (skipped weekend days)
 */ function subBusinessDays(date, amount) {
    return (0, _index.addBusinessDays)(date, -amount);
}

},{"8df6a7f983f79fd5":"475kI"}],"jVGj5":[function(require,module,exports) {
"use strict";
exports.subHours = subHours;
var _index = require("ebad1bf9dc571fa6");
/**
 * @name subHours
 * @category Hour Helpers
 * @summary Subtract the specified number of hours from the given date.
 *
 * @description
 * Subtract the specified number of hours from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of hours to be subtracted.
 *
 * @returns The new date with the hours subtracted
 *
 * @example
 * // Subtract 2 hours from 11 July 2014 01:00:00:
 * const result = subHours(new Date(2014, 6, 11, 1, 0), 2)
 * //=> Thu Jul 10 2014 23:00:00
 */ function subHours(date, amount) {
    return (0, _index.addHours)(date, -amount);
}

},{"ebad1bf9dc571fa6":"hzidA"}],"22JNI":[function(require,module,exports) {
"use strict";
exports.subMilliseconds = subMilliseconds;
var _index = require("7c01aad93387710b");
/**
 * @name subMilliseconds
 * @category Millisecond Helpers
 * @summary Subtract the specified number of milliseconds from the given date.
 *
 * @description
 * Subtract the specified number of milliseconds from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of milliseconds to be subtracted.
 *
 * @returns The new date with the milliseconds subtracted
 *
 * @example
 * // Subtract 750 milliseconds from 10 July 2014 12:45:30.000:
 * const result = subMilliseconds(new Date(2014, 6, 10, 12, 45, 30, 0), 750)
 * //=> Thu Jul 10 2014 12:45:29.250
 */ function subMilliseconds(date, amount) {
    return (0, _index.addMilliseconds)(date, -amount);
}

},{"7c01aad93387710b":"03zTk"}],"jPKrE":[function(require,module,exports) {
"use strict";
exports.subMinutes = subMinutes;
var _index = require("fd037b7c11707977");
/**
 * @name subMinutes
 * @category Minute Helpers
 * @summary Subtract the specified number of minutes from the given date.
 *
 * @description
 * Subtract the specified number of minutes from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of minutes to be subtracted.
 *
 * @returns The new date with the minutes subtracted
 *
 * @example
 * // Subtract 30 minutes from 10 July 2014 12:00:00:
 * const result = subMinutes(new Date(2014, 6, 10, 12, 0), 30)
 * //=> Thu Jul 10 2014 11:30:00
 */ function subMinutes(date, amount) {
    return (0, _index.addMinutes)(date, -amount);
}

},{"fd037b7c11707977":"7jsut"}],"7ieGr":[function(require,module,exports) {
"use strict";
exports.subQuarters = subQuarters;
var _index = require("86570987ed766639");
/**
 * @name subQuarters
 * @category Quarter Helpers
 * @summary Subtract the specified number of year quarters from the given date.
 *
 * @description
 * Subtract the specified number of year quarters from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of quarters to be subtracted.
 *
 * @returns The new date with the quarters subtracted
 *
 * @example
 * // Subtract 3 quarters from 1 September 2014:
 * const result = subQuarters(new Date(2014, 8, 1), 3)
 * //=> Sun Dec 01 2013 00:00:00
 */ function subQuarters(date, amount) {
    return (0, _index.addQuarters)(date, -amount);
}

},{"86570987ed766639":"jW81o"}],"cvB1W":[function(require,module,exports) {
"use strict";
exports.subSeconds = subSeconds;
var _index = require("2550c81d2c438461");
/**
 * @name subSeconds
 * @category Second Helpers
 * @summary Subtract the specified number of seconds from the given date.
 *
 * @description
 * Subtract the specified number of seconds from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of seconds to be subtracted.
 *
 * @returns The new date with the seconds subtracted
 *
 * @example
 * // Subtract 30 seconds from 10 July 2014 12:45:00:
 * const result = subSeconds(new Date(2014, 6, 10, 12, 45, 0), 30)
 * //=> Thu Jul 10 2014 12:44:30
 */ function subSeconds(date, amount) {
    return (0, _index.addSeconds)(date, -amount);
}

},{"2550c81d2c438461":"1jCRu"}],"20wf8":[function(require,module,exports) {
"use strict";
exports.subWeeks = subWeeks;
var _index = require("cd59f83469fafb63");
/**
 * @name subWeeks
 * @category Week Helpers
 * @summary Subtract the specified number of weeks from the given date.
 *
 * @description
 * Subtract the specified number of weeks from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of weeks to be subtracted.
 *
 * @returns The new date with the weeks subtracted
 *
 * @example
 * // Subtract 4 weeks from 1 September 2014:
 * const result = subWeeks(new Date(2014, 8, 1), 4)
 * //=> Mon Aug 04 2014 00:00:00
 */ function subWeeks(date, amount) {
    return (0, _index.addWeeks)(date, -amount);
}

},{"cd59f83469fafb63":"6sRN6"}],"jmZa1":[function(require,module,exports) {
"use strict";
exports.subYears = subYears;
var _index = require("324b48dd502ccac0");
/**
 * @name subYears
 * @category Year Helpers
 * @summary Subtract the specified number of years from the given date.
 *
 * @description
 * Subtract the specified number of years from the given date.
 *
 * @typeParam DateType - The `Date` type, the function operates on. Gets inferred from passed arguments. Allows to use extensions like [`UTCDate`](https://github.com/date-fns/utc).
 *
 * @param date - The date to be changed
 * @param amount - The amount of years to be subtracted.
 *
 * @returns The new date with the years subtracted
 *
 * @example
 * // Subtract 5 years from 1 September 2014:
 * const result = subYears(new Date(2014, 8, 1), 5)
 * //=> Tue Sep 01 2009 00:00:00
 */ function subYears(date, amount) {
    return (0, _index.addYears)(date, -amount);
}

},{"324b48dd502ccac0":"3IQD4"}],"6D2CR":[function(require,module,exports) {
"use strict";
exports.weeksToDays = weeksToDays;
var _index = require("359629129941baca");
/**
 * @name weeksToDays
 * @category Conversion Helpers
 * @summary Convert weeks to days.
 *
 * @description
 * Convert a number of weeks to a full number of days.
 *
 * @param weeks - The number of weeks to be converted
 *
 * @returns The number of weeks converted in days
 *
 * @example
 * // Convert 2 weeks into days
 * const result = weeksToDays(2)
 * //=> 14
 */ function weeksToDays(weeks) {
    return Math.trunc(weeks * _index.daysInWeek);
}

},{"359629129941baca":"1vXXw"}],"gWLQa":[function(require,module,exports) {
"use strict";
exports.yearsToDays = yearsToDays;
var _index = require("432a3015152e66ed");
/**
 * @name yearsToDays
 * @category Conversion Helpers
 * @summary Convert years to days.
 *
 * @description
 * Convert a number of years to a full number of days.
 *
 * @param years - The number of years to be converted
 *
 * @returns The number of years converted in days
 *
 * @example
 * // Convert 2 years into days
 * const result = yearsToDays(2)
 * //=> 730
 */ function yearsToDays(years) {
    return Math.trunc(years * _index.daysInYear);
}

},{"432a3015152e66ed":"1vXXw"}],"dD3ep":[function(require,module,exports) {
"use strict";
exports.yearsToMonths = yearsToMonths;
var _index = require("483a1f1b446e7a1c");
/**
 * @name yearsToMonths
 * @category Conversion Helpers
 * @summary Convert years to months.
 *
 * @description
 * Convert a number of years to a full number of months.
 *
 * @param years - The number of years to be converted
 *
 * @returns The number of years converted in months
 *
 * @example
 * // Convert 2 years into months
 * const result = yearsToMonths(2)
 * //=> 24
 */ function yearsToMonths(years) {
    return Math.trunc(years * _index.monthsInYear);
}

},{"483a1f1b446e7a1c":"1vXXw"}],"di2PR":[function(require,module,exports) {
"use strict";
exports.yearsToQuarters = yearsToQuarters;
var _index = require("387b0aecfe84b867");
/**
 * @name yearsToQuarters
 * @category Conversion Helpers
 * @summary Convert years to quarters.
 *
 * @description
 * Convert a number of years to a full number of quarters.
 *
 * @param years - The number of years to be converted
 *
 * @returns The number of years converted in quarters
 *
 * @example
 * // Convert 2 years to quarters
 * const result = yearsToQuarters(2)
 * //=> 8
 */ function yearsToQuarters(years) {
    return Math.trunc(years * _index.quartersInYear);
}

},{"387b0aecfe84b867":"1vXXw"}],"aigPy":[function(require,module,exports) {
"use strict";
var _index = require("b3c6856e97caace7");
Object.keys(_index).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index[key];
        }
    });
});
var _index2 = require("accb2ab1b9c9f7e");
Object.keys(_index2).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index2[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index2[key];
        }
    });
});
var _index3 = require("cbc8db7c026d1cf");
Object.keys(_index3).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index3[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index3[key];
        }
    });
});
var _index4 = require("c60fa9ecf540d2ff");
Object.keys(_index4).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index4[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index4[key];
        }
    });
});
var _index5 = require("dfd8a8789e298d11");
Object.keys(_index5).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index5[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index5[key];
        }
    });
});
var _index6 = require("7e2de1987cd044c3");
Object.keys(_index6).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index6[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index6[key];
        }
    });
});
var _index7 = require("7ef744c5c3086ce");
Object.keys(_index7).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index7[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index7[key];
        }
    });
});
var _index8 = require("1f9db1c920619a2f");
Object.keys(_index8).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index8[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index8[key];
        }
    });
});
var _index9 = require("242780e8aa6c3ec3");
Object.keys(_index9).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index9[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index9[key];
        }
    });
});
var _index10 = require("57c86dc4a06fc8e");
Object.keys(_index10).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index10[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index10[key];
        }
    });
});
var _index11 = require("9e8eeb843f09502b");
Object.keys(_index11).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index11[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index11[key];
        }
    });
});
var _index12 = require("b08961026b9db1a5");
Object.keys(_index12).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index12[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index12[key];
        }
    });
});
var _index13 = require("e337d67c73f755aa");
Object.keys(_index13).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index13[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index13[key];
        }
    });
});
var _index14 = require("6b05320e44fe9dc1");
Object.keys(_index14).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index14[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index14[key];
        }
    });
});
var _index15 = require("ae8b3b2a3119102a");
Object.keys(_index15).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index15[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index15[key];
        }
    });
});
var _index16 = require("e8760a35c59cf6f2");
Object.keys(_index16).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index16[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index16[key];
        }
    });
});
var _index17 = require("4c5d07e9c6644303");
Object.keys(_index17).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index17[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index17[key];
        }
    });
});
var _index18 = require("7659cc5be1516ff6");
Object.keys(_index18).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index18[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index18[key];
        }
    });
});
var _index19 = require("786c92f4e6183b29");
Object.keys(_index19).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index19[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index19[key];
        }
    });
});
var _index20 = require("2b4f2d735b83b3b0");
Object.keys(_index20).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index20[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index20[key];
        }
    });
});
var _index21 = require("11d9f6008bf1dba5");
Object.keys(_index21).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index21[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index21[key];
        }
    });
});
var _index22 = require("1fa65d71eeb3803a");
Object.keys(_index22).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index22[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index22[key];
        }
    });
});
var _index23 = require("66d95644800fd588");
Object.keys(_index23).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index23[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index23[key];
        }
    });
});
var _index24 = require("50b713b096822cc");
Object.keys(_index24).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index24[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index24[key];
        }
    });
});
var _index25 = require("7c5adb7b70bec2e2");
Object.keys(_index25).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index25[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index25[key];
        }
    });
});
var _index26 = require("45df65d63d47eb2");
Object.keys(_index26).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index26[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index26[key];
        }
    });
});
var _index27 = require("6f4cae2ca4f25b7");
Object.keys(_index27).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index27[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index27[key];
        }
    });
});
var _index28 = require("eac0915b10f1a084");
Object.keys(_index28).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index28[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index28[key];
        }
    });
});
var _index29 = require("c66de1cece99433c");
Object.keys(_index29).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index29[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index29[key];
        }
    });
});
var _index30 = require("834f6e2f5bdb020a");
Object.keys(_index30).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index30[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index30[key];
        }
    });
});
var _index31 = require("c8caee1056e9e4fb");
Object.keys(_index31).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index31[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index31[key];
        }
    });
});
var _index32 = require("df2d6774ae3018b0");
Object.keys(_index32).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index32[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index32[key];
        }
    });
});
var _index33 = require("c2669166a0656f78");
Object.keys(_index33).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index33[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index33[key];
        }
    });
});
var _index34 = require("51e349ad9180d196");
Object.keys(_index34).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index34[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index34[key];
        }
    });
});
var _index35 = require("ff458adee5125fe9");
Object.keys(_index35).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index35[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index35[key];
        }
    });
});
var _index36 = require("ee087e01fcb42dde");
Object.keys(_index36).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index36[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index36[key];
        }
    });
});
var _index37 = require("abfb02025ee2971f");
Object.keys(_index37).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index37[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index37[key];
        }
    });
});
var _index38 = require("a9488d2847818521");
Object.keys(_index38).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index38[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index38[key];
        }
    });
});
var _index39 = require("18b71ae88e58522f");
Object.keys(_index39).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index39[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index39[key];
        }
    });
});
var _index40 = require("f24fe449d710cc9f");
Object.keys(_index40).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index40[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index40[key];
        }
    });
});
var _index41 = require("64c6ad69835dca7b");
Object.keys(_index41).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index41[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index41[key];
        }
    });
});
var _index42 = require("d38c762849b6156");
Object.keys(_index42).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index42[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index42[key];
        }
    });
});
var _index43 = require("9bfe03f1cae59fbb");
Object.keys(_index43).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index43[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index43[key];
        }
    });
});
var _index44 = require("4a8f1ce758335566");
Object.keys(_index44).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index44[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index44[key];
        }
    });
});
var _index45 = require("c60e52a456ae4d47");
Object.keys(_index45).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index45[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index45[key];
        }
    });
});
var _index46 = require("dca4c527afe4cc20");
Object.keys(_index46).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index46[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index46[key];
        }
    });
});
var _index47 = require("3266e9f77795d07d");
Object.keys(_index47).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index47[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index47[key];
        }
    });
});
var _index48 = require("9a9641befd77f372");
Object.keys(_index48).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index48[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index48[key];
        }
    });
});
var _index49 = require("d4fa162941c1c3c1");
Object.keys(_index49).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index49[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index49[key];
        }
    });
});
var _index50 = require("b1528ae66d81ff61");
Object.keys(_index50).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index50[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index50[key];
        }
    });
});
var _index51 = require("f61c5c2c83401007");
Object.keys(_index51).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index51[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index51[key];
        }
    });
});
var _index52 = require("8448e7c28f068fba");
Object.keys(_index52).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index52[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index52[key];
        }
    });
});
var _index53 = require("4e2f1f45ac777209");
Object.keys(_index53).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index53[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index53[key];
        }
    });
});
var _index54 = require("d790f38424f523c5");
Object.keys(_index54).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index54[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index54[key];
        }
    });
});
var _index55 = require("98951c1ce009c589");
Object.keys(_index55).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index55[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index55[key];
        }
    });
});
var _index56 = require("1ccd2543edfbf0c1");
Object.keys(_index56).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index56[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index56[key];
        }
    });
});
var _index57 = require("a88fde008c29cc5d");
Object.keys(_index57).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index57[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index57[key];
        }
    });
});
var _index58 = require("52d03ff68b629af2");
Object.keys(_index58).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index58[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index58[key];
        }
    });
});
var _index59 = require("e8a4138d0ae99e4c");
Object.keys(_index59).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index59[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index59[key];
        }
    });
});
var _index60 = require("e685b1513bdf0bcb");
Object.keys(_index60).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index60[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index60[key];
        }
    });
});
var _index61 = require("fbc49908e258e899");
Object.keys(_index61).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index61[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index61[key];
        }
    });
});
var _index62 = require("943c1261f36b0430");
Object.keys(_index62).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index62[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index62[key];
        }
    });
});
var _index63 = require("347b432d44571d8b");
Object.keys(_index63).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index63[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index63[key];
        }
    });
});
var _index64 = require("bdaa8f7a29e8bf76");
Object.keys(_index64).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index64[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index64[key];
        }
    });
});
var _index65 = require("38a24fcb1c446216");
Object.keys(_index65).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index65[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index65[key];
        }
    });
});
var _index66 = require("cd410c354666008a");
Object.keys(_index66).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index66[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index66[key];
        }
    });
});
var _index67 = require("eaf7c097c4ba554c");
Object.keys(_index67).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index67[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index67[key];
        }
    });
});
var _index68 = require("8c0117fe249ee8a4");
Object.keys(_index68).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index68[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index68[key];
        }
    });
});
var _index69 = require("2b1c9d4c7e1b0f94");
Object.keys(_index69).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index69[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index69[key];
        }
    });
});
var _index70 = require("a832a11d00ec0c3b");
Object.keys(_index70).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index70[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index70[key];
        }
    });
});
var _index71 = require("c646c4f914f05f55");
Object.keys(_index71).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index71[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index71[key];
        }
    });
});
var _index72 = require("b9035e448cc1ec89");
Object.keys(_index72).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index72[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index72[key];
        }
    });
});
var _index73 = require("82d4828f44b0c9d4");
Object.keys(_index73).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index73[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index73[key];
        }
    });
});
var _index74 = require("e4260a05d34e3a06");
Object.keys(_index74).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index74[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index74[key];
        }
    });
});
var _index75 = require("81a53b3c9da3eba9");
Object.keys(_index75).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index75[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index75[key];
        }
    });
});
var _index76 = require("f094463d09345c15");
Object.keys(_index76).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index76[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index76[key];
        }
    });
});
var _index77 = require("cf7597c032cf0ea7");
Object.keys(_index77).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index77[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index77[key];
        }
    });
});
var _index78 = require("b7e45f2a385c95c3");
Object.keys(_index78).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index78[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index78[key];
        }
    });
});
var _index79 = require("8f41e674d1240c13");
Object.keys(_index79).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index79[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index79[key];
        }
    });
});
var _index80 = require("2ea1a847aa7dcc16");
Object.keys(_index80).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index80[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index80[key];
        }
    });
});
var _index81 = require("974c32ae355f67f2");
Object.keys(_index81).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index81[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index81[key];
        }
    });
});
var _index82 = require("324f9987e93aa19f");
Object.keys(_index82).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index82[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index82[key];
        }
    });
});
var _index83 = require("3df5e372ffa81255");
Object.keys(_index83).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index83[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index83[key];
        }
    });
});
var _index84 = require("4bd121ac024c46ca");
Object.keys(_index84).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index84[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index84[key];
        }
    });
});
var _index85 = require("2ed0dff84df6cc55");
Object.keys(_index85).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index85[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index85[key];
        }
    });
});
var _index86 = require("f820c242e9b3fe5d");
Object.keys(_index86).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index86[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index86[key];
        }
    });
});
var _index87 = require("ff2571b0b781ac03");
Object.keys(_index87).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index87[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index87[key];
        }
    });
});
var _index88 = require("55666780c188f0ff");
Object.keys(_index88).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index88[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index88[key];
        }
    });
});
var _index89 = require("5944db2cd22863ee");
Object.keys(_index89).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index89[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index89[key];
        }
    });
});
var _index90 = require("80e51d14ed24b70a");
Object.keys(_index90).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index90[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index90[key];
        }
    });
});
var _index91 = require("5a22abee3383b42a");
Object.keys(_index91).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index91[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index91[key];
        }
    });
});
var _index92 = require("bc18576757d90dc8");
Object.keys(_index92).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index92[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index92[key];
        }
    });
});
var _index93 = require("1df3eb3819e98e43");
Object.keys(_index93).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index93[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index93[key];
        }
    });
});
var _index94 = require("7f76da06aa7d0881");
Object.keys(_index94).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index94[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index94[key];
        }
    });
});
var _index95 = require("56ea4c612febb43");
Object.keys(_index95).forEach(function(key) {
    if (key === "default" || key === "__esModule") return;
    if (key in exports && exports[key] === _index95[key]) return;
    Object.defineProperty(exports, key, {
        enumerable: true,
        get: function() {
            return _index95[key];
        }
    });
});

},{"b3c6856e97caace7":"ioLlY","accb2ab1b9c9f7e":"5lCAU","cbc8db7c026d1cf":"jbocg","c60fa9ecf540d2ff":"hHaEC","dfd8a8789e298d11":"dJp9x","7e2de1987cd044c3":"CYEda","7ef744c5c3086ce":"7AZDZ","1f9db1c920619a2f":"4WOJl","242780e8aa6c3ec3":"5Vgj8","57c86dc4a06fc8e":"215qQ","9e8eeb843f09502b":"g9Tvn","b08961026b9db1a5":"5f4wy","e337d67c73f755aa":"9YTIY","6b05320e44fe9dc1":"eV5Od","ae8b3b2a3119102a":"l5QBy","e8760a35c59cf6f2":"i0gIP","4c5d07e9c6644303":"iW3rV","7659cc5be1516ff6":"eHgha","786c92f4e6183b29":"iykNF","2b4f2d735b83b3b0":"akm4a","11d9f6008bf1dba5":"aHW44","1fa65d71eeb3803a":"jj9GM","66d95644800fd588":"gKC15","50b713b096822cc":"enTRn","7c5adb7b70bec2e2":"fj2Uo","45df65d63d47eb2":"7KK4Q","6f4cae2ca4f25b7":"kpeeL","eac0915b10f1a084":"haY68","c66de1cece99433c":"c8hIE","834f6e2f5bdb020a":"dAuLY","c8caee1056e9e4fb":"kZKSS","df2d6774ae3018b0":"eeLkE","c2669166a0656f78":"ag9fr","51e349ad9180d196":"46enD","ff458adee5125fe9":"bV7qn","ee087e01fcb42dde":"dNhxm","abfb02025ee2971f":"c0EPs","a9488d2847818521":"eTBUU","18b71ae88e58522f":"dUu4i","f24fe449d710cc9f":"6oAfv","64c6ad69835dca7b":"fIgNR","d38c762849b6156":"0Xp9k","9bfe03f1cae59fbb":"iIOw5","4a8f1ce758335566":"lmmd8","c60e52a456ae4d47":"d9XPL","dca4c527afe4cc20":"eW3q3","3266e9f77795d07d":"7VdNn","9a9641befd77f372":"2UPSB","d4fa162941c1c3c1":"3va1W","b1528ae66d81ff61":"c0WY2","f61c5c2c83401007":"2MwJI","8448e7c28f068fba":"25RmW","4e2f1f45ac777209":"ctX96","d790f38424f523c5":"3CklB","98951c1ce009c589":"5Jxv0","1ccd2543edfbf0c1":"4CdGo","a88fde008c29cc5d":"b19vn","52d03ff68b629af2":"5g8ks","e8a4138d0ae99e4c":"i5dFT","e685b1513bdf0bcb":"2b4o3","fbc49908e258e899":"9EUCz","943c1261f36b0430":"hwiEe","347b432d44571d8b":"kr3Er","bdaa8f7a29e8bf76":"5Kl8C","38a24fcb1c446216":"a337R","cd410c354666008a":"3kfy1","eaf7c097c4ba554c":"fKqsG","8c0117fe249ee8a4":"7i3p4","2b1c9d4c7e1b0f94":"cJzCz","a832a11d00ec0c3b":"c7cdH","c646c4f914f05f55":"6NyPU","b9035e448cc1ec89":"arPoe","82d4828f44b0c9d4":"fr0qT","e4260a05d34e3a06":"enmUF","81a53b3c9da3eba9":"9uBVs","f094463d09345c15":"dmWLJ","cf7597c032cf0ea7":"4SIjy","b7e45f2a385c95c3":"3iW9A","8f41e674d1240c13":"7KgoU","2ea1a847aa7dcc16":"crVuJ","974c32ae355f67f2":"hOu7f","324f9987e93aa19f":"kRDTq","3df5e372ffa81255":"aRRLu","4bd121ac024c46ca":"6hGEr","2ed0dff84df6cc55":"frsgC","f820c242e9b3fe5d":"gLhd7","ff2571b0b781ac03":"ixjFL","55666780c188f0ff":"9lAi6","5944db2cd22863ee":"4ihbh","80e51d14ed24b70a":"a7qrF","5a22abee3383b42a":"n0TtW","bc18576757d90dc8":"kWnBp","1df3eb3819e98e43":"cJsC6","7f76da06aa7d0881":"fQfBM","56ea4c612febb43":"flOwS"}],"ioLlY":[function(require,module,exports) {
"use strict";
exports.af = void 0;
var _index = require("f4d149ddd09e7bbc");
var _index2 = require("4e6e9de22df4e6fd");
var _index3 = require("919917b66e3bc1e5");
var _index4 = require("65d0a2b098a5544e");
var _index5 = require("dc9b7e49111223b5");
/**
 * @category Locales
 * @summary Afrikaans locale.
 * @language Afrikaans
 * @iso-639-2 afr
 * @author Marnus Weststrate [@marnusw](https://github.com/marnusw)
 */ const af = exports.af = {
    code: "af",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"f4d149ddd09e7bbc":"1eI8B","4e6e9de22df4e6fd":"cLyps","919917b66e3bc1e5":"WJz5N","65d0a2b098a5544e":"3tY0x","dc9b7e49111223b5":"5TlXW"}],"1eI8B":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "minder as 'n sekonde",
        other: "minder as {{count}} sekondes"
    },
    xSeconds: {
        one: "1 sekonde",
        other: "{{count}} sekondes"
    },
    halfAMinute: "'n halwe minuut",
    lessThanXMinutes: {
        one: "minder as 'n minuut",
        other: "minder as {{count}} minute"
    },
    xMinutes: {
        one: "'n minuut",
        other: "{{count}} minute"
    },
    aboutXHours: {
        one: "ongeveer 1 uur",
        other: "ongeveer {{count}} ure"
    },
    xHours: {
        one: "1 uur",
        other: "{{count}} ure"
    },
    xDays: {
        one: "1 dag",
        other: "{{count}} dae"
    },
    aboutXWeeks: {
        one: "ongeveer 1 week",
        other: "ongeveer {{count}} weke"
    },
    xWeeks: {
        one: "1 week",
        other: "{{count}} weke"
    },
    aboutXMonths: {
        one: "ongeveer 1 maand",
        other: "ongeveer {{count}} maande"
    },
    xMonths: {
        one: "1 maand",
        other: "{{count}} maande"
    },
    aboutXYears: {
        one: "ongeveer 1 jaar",
        other: "ongeveer {{count}} jaar"
    },
    xYears: {
        one: "1 jaar",
        other: "{{count}} jaar"
    },
    overXYears: {
        one: "meer as 1 jaar",
        other: "meer as {{count}} jaar"
    },
    almostXYears: {
        one: "byna 1 jaar",
        other: "byna {{count}} jaar"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "oor " + result;
        else return result + " gelede";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"cLyps":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("889d0117512935ba");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "yyyy/MM/dd"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'om' {{time}}",
    long: "{{date}} 'om' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"889d0117512935ba":"6OYyu"}],"WJz5N":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'verlede' eeee 'om' p",
    yesterday: "'gister om' p",
    today: "'vandag om' p",
    tomorrow: "'m\xf4re om' p",
    nextWeek: "eeee 'om' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"3tY0x":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("a79466c33e1c8eda");
const eraValues = {
    narrow: [
        "vC",
        "nC"
    ],
    abbreviated: [
        "vC",
        "nC"
    ],
    wide: [
        "voor Christus",
        "na Christus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "1ste kwartaal",
        "2de kwartaal",
        "3de kwartaal",
        "4de kwartaal"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Jan",
        "Feb",
        "Mrt",
        "Apr",
        "Mei",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Okt",
        "Nov",
        "Des"
    ],
    wide: [
        "Januarie",
        "Februarie",
        "Maart",
        "April",
        "Mei",
        "Junie",
        "Julie",
        "Augustus",
        "September",
        "Oktober",
        "November",
        "Desember"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "D",
        "W",
        "D",
        "V",
        "S"
    ],
    short: [
        "So",
        "Ma",
        "Di",
        "Wo",
        "Do",
        "Vr",
        "Sa"
    ],
    abbreviated: [
        "Son",
        "Maa",
        "Din",
        "Woe",
        "Don",
        "Vry",
        "Sat"
    ],
    wide: [
        "Sondag",
        "Maandag",
        "Dinsdag",
        "Woensdag",
        "Donderdag",
        "Vrydag",
        "Saterdag"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
    },
    abbreviated: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
    },
    wide: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "middaguur",
        morning: "oggend",
        afternoon: "middag",
        evening: "laat middag",
        night: "aand"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
    },
    abbreviated: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
    },
    wide: {
        am: "vm",
        pm: "nm",
        midnight: "middernag",
        noon: "uur die middag",
        morning: "uur die oggend",
        afternoon: "uur die middag",
        evening: "uur die aand",
        night: "uur die aand"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    const number = Number(dirtyNumber);
    const rem100 = number % 100;
    if (rem100 < 20) switch(rem100){
        case 1:
        case 8:
            return number + "ste";
        default:
            return number + "de";
    }
    return number + "ste";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"a79466c33e1c8eda":"fGq1u"}],"5TlXW":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("7c77d1fd698b86fa");
var _index2 = require("12656d83d45f9fa6");
const matchOrdinalNumberPattern = /^(\d+)(ste|de)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^([vn]\.? ?C\.?)/,
    abbreviated: /^([vn]\. ?C\.?)/,
    wide: /^((voor|na) Christus)/
};
const parseEraPatterns = {
    any: [
        /^v/,
        /^n/
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^K[1234]/i,
    wide: /^[1234](st|d)e kwartaal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(Jan|Feb|Mrt|Apr|Mei|Jun|Jul|Aug|Sep|Okt|Nov|Dec)\.?/i,
    wide: /^(Januarie|Februarie|Maart|April|Mei|Junie|Julie|Augustus|September|Oktober|November|Desember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^J/i,
        /^F/i,
        /^M/i,
        /^A/i,
        /^M/i,
        /^J/i,
        /^J/i,
        /^A/i,
        /^S/i,
        /^O/i,
        /^N/i,
        /^D/i
    ],
    any: [
        /^Jan/i,
        /^Feb/i,
        /^Mrt/i,
        /^Apr/i,
        /^Mei/i,
        /^Jun/i,
        /^Jul/i,
        /^Aug/i,
        /^Sep/i,
        /^Okt/i,
        /^Nov/i,
        /^Dec/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smdwv]/i,
    short: /^(So|Ma|Di|Wo|Do|Vr|Sa)/i,
    abbreviated: /^(Son|Maa|Din|Woe|Don|Vry|Sat)/i,
    wide: /^(Sondag|Maandag|Dinsdag|Woensdag|Donderdag|Vrydag|Saterdag)/i
};
const parseDayPatterns = {
    narrow: [
        /^S/i,
        /^M/i,
        /^D/i,
        /^W/i,
        /^D/i,
        /^V/i,
        /^S/i
    ],
    any: [
        /^So/i,
        /^Ma/i,
        /^Di/i,
        /^Wo/i,
        /^Do/i,
        /^Vr/i,
        /^Sa/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(vm|nm|middernag|(?:uur )?die (oggend|middag|aand))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^vm/i,
        pm: /^nm/i,
        midnight: /^middernag/i,
        noon: /^middaguur/i,
        morning: /oggend/i,
        afternoon: /middag/i,
        evening: /laat middag/i,
        night: /aand/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"7c77d1fd698b86fa":"15lWd","12656d83d45f9fa6":"kWqg8"}],"5lCAU":[function(require,module,exports) {
"use strict";
exports.ar = void 0;
var _index = require("292cd849fbe1a131");
var _index2 = require("d74baa4c3b649961");
var _index3 = require("dd3a280ec3f5be93");
var _index4 = require("35d8100342df5c16");
var _index5 = require("31333ff9f7ccec8e");
/**
 * @category Locales
 * @summary Arabic locale (Modern Standard Arabic - Al-fussha).
 * @language Modern Standard Arabic
 * @iso-639-2 ara
 * @author Abdallah Hassan [@AbdallahAHO](https://github.com/AbdallahAHO)
 * @author Koussay Haj Kacem [@essana3](https://github.com/essana3)
 */ const ar = exports.ar = {
    code: "ar",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 6 /* Saturday */ ,
        firstWeekContainsDate: 1
    }
};

},{"292cd849fbe1a131":"hHwcZ","d74baa4c3b649961":"4O6GC","dd3a280ec3f5be93":"KpM7y","35d8100342df5c16":"6tpi6","31333ff9f7ccec8e":"iAVqu"}],"hHwcZ":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    xSeconds: {
        one: "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u062B\u0627\u0646\u064A\u062A\u0627\u0646",
        threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    halfAMinute: "\u0646\u0635\u0641 \u062F\u0642\u064A\u0642\u0629",
    lessThanXMinutes: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u0626\u0642",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    xMinutes: {
        one: "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u062F\u0642\u064A\u0642\u062A\u0627\u0646",
        threeToTen: "{{count}} \u062F\u0642\u0627\u0626\u0642",
        other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    aboutXHours: {
        one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xHours: {
        one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u0633\u0627\u0639\u062A\u0627\u0646",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
        other: "{{count}} \u0633\u0627\u0639\u0629"
    },
    xDays: {
        one: "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F",
        two: "\u064A\u0648\u0645\u0627\u0646",
        threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
        other: "{{count}} \u064A\u0648\u0645"
    },
    aboutXWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627",
        two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639 \u062A\u0642\u0631\u064A\u0628\u0627",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639\u0627 \u062A\u0642\u0631\u064A\u0628\u0627"
    },
    xWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F",
        two: "\u0623\u0633\u0628\u0648\u0639\u0627\u0646",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639\u0627"
    },
    aboutXMonths: {
        one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627",
        other: "{{count}} \u0634\u0647\u0631\u0627 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xMonths: {
        one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F",
        two: "\u0634\u0647\u0631\u0627\u0646",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
        other: "{{count}} \u0634\u0647\u0631\u0627"
    },
    aboutXYears: {
        one: "\u0633\u0646\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0633\u0646\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627",
        threeToTen: "{{count}} \u0633\u0646\u0648\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0633\u0646\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xYears: {
        one: "\u0633\u0646\u0629 \u0648\u0627\u062D\u062F",
        two: "\u0633\u0646\u062A\u0627\u0646",
        threeToTen: "{{count}} \u0633\u0646\u0648\u0627\u062A",
        other: "{{count}} \u0633\u0646\u0629"
    },
    overXYears: {
        one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0633\u0646\u0629",
        two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0633\u0646\u062A\u064A\u0646",
        threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0633\u0646\u0648\u0627\u062A",
        other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0633\u0646\u0629"
    },
    almostXYears: {
        one: "\u0645\u0627 \u064A\u0642\u0627\u0631\u0628 \u0633\u0646\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u0645\u0627 \u064A\u0642\u0627\u0631\u0628 \u0633\u0646\u062A\u064A\u0646",
        threeToTen: "\u0645\u0627 \u064A\u0642\u0627\u0631\u0628 {{count}} \u0633\u0646\u0648\u0627\u062A",
        other: "\u0645\u0627 \u064A\u0642\u0627\u0631\u0628 {{count}} \u0633\u0646\u0629"
    }
};
const formatDistance = (token, count, options)=>{
    const usageGroup = formatDistanceLocale[token];
    let result;
    if (typeof usageGroup === "string") result = usageGroup;
    else if (count === 1) result = usageGroup.one;
    else if (count === 2) result = usageGroup.two;
    else if (count <= 10) result = usageGroup.threeToTen.replace("{{count}}", String(count));
    else result = usageGroup.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u062E\u0644\u0627\u0644 " + result;
        else return "\u0645\u0646\u0630 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"4O6GC":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("be775221e7a420ea");
const dateFormats = {
    full: "EEEE\u060C do MMMM y",
    long: "do MMMM y",
    medium: "d MMM y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "HH:mm:ss",
    long: "HH:mm:ss",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' {{time}}",
    long: "{{date}} '\u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"be775221e7a420ea":"6OYyu"}],"KpM7y":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee '\u0627\u0644\u0645\u0627\u0636\u064A \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
    yesterday: "'\u0627\u0644\u0623\u0645\u0633 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
    today: "'\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
    tomorrow: "'\u063A\u062F\u0627 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
    nextWeek: "eeee '\u0627\u0644\u0642\u0627\u062F\u0645 \u0639\u0646\u062F \u0627\u0644\u0633\u0627\u0639\u0629' p",
    other: "P"
};
const formatRelative = (token)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"6tpi6":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("6757a4df79b58d12");
const eraValues = {
    narrow: [
        "\u0642",
        "\u0628"
    ],
    abbreviated: [
        "\u0642.\u0645.",
        "\u0628.\u0645."
    ],
    wide: [
        "\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F",
        "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u06311",
        "\u06312",
        "\u06313",
        "\u06314"
    ],
    wide: [
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"
    ]
};
const monthValues = {
    narrow: [
        "\u064A",
        "\u0641",
        "\u0645",
        "\u0623",
        "\u0645",
        "\u064A",
        "\u064A",
        "\u0623",
        "\u0633",
        "\u0623",
        "\u0646",
        "\u062F"
    ],
    abbreviated: [
        "\u064A\u0646\u0627\u064A\u0631",
        "\u0641\u0628\u0631\u0627\u064A\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0628\u0631\u064A\u0644",
        "\u0645\u0627\u064A\u0648",
        "\u064A\u0648\u0646\u064A\u0648",
        "\u064A\u0648\u0644\u064A\u0648",
        "\u0623\u063A\u0633\u0637\u0633",
        "\u0633\u0628\u062A\u0645\u0628\u0631",
        "\u0623\u0643\u062A\u0648\u0628\u0631",
        "\u0646\u0648\u0641\u0645\u0628\u0631",
        "\u062F\u064A\u0633\u0645\u0628\u0631"
    ],
    wide: [
        "\u064A\u0646\u0627\u064A\u0631",
        "\u0641\u0628\u0631\u0627\u064A\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0628\u0631\u064A\u0644",
        "\u0645\u0627\u064A\u0648",
        "\u064A\u0648\u0646\u064A\u0648",
        "\u064A\u0648\u0644\u064A\u0648",
        "\u0623\u063A\u0633\u0637\u0633",
        "\u0633\u0628\u062A\u0645\u0628\u0631",
        "\u0623\u0643\u062A\u0648\u0628\u0631",
        "\u0646\u0648\u0641\u0645\u0628\u0631",
        "\u062F\u064A\u0633\u0645\u0628\u0631"
    ]
};
const dayValues = {
    narrow: [
        "\u062D",
        "\u0646",
        "\u062B",
        "\u0631",
        "\u062E",
        "\u062C",
        "\u0633"
    ],
    short: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    abbreviated: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    wide: [
        "\u0627\u0644\u0623\u062D\u062F",
        "\u0627\u0644\u0627\u062B\u0646\u064A\u0646",
        "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u0627\u0644\u062E\u0645\u064A\u0633",
        "\u0627\u0644\u062C\u0645\u0639\u0629",
        "\u0627\u0644\u0633\u0628\u062A"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0638\u0647\u0631",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0638\u0647\u0631",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0638\u0647\u0631",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0638\u0647\u0631",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0638\u0647\u0631",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0638\u0647\u0631",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0645\u0646\u062A\u0635\u0641 \u0627\u0644\u0644\u064A\u0644"
    }
};
const ordinalNumber = (num)=>String(num);
const localize = exports.localize = {
    ordinalNumber: ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"6757a4df79b58d12":"fGq1u"}],"iAVqu":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("7842d0717073b37a");
var _index2 = require("f2b592793bc69d41");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /[قب]/,
    abbreviated: /[قب]\.م\./,
    wide: /(قبل|بعد) الميلاد/
};
const parseEraPatterns = {
    any: [
        /قبل/,
        /بعد/
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /ر[1234]/,
    wide: /الربع (الأول|الثاني|الثالث|الرابع)/
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[أيفمسند]/,
    abbreviated: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,
    wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
const parseMonthPatterns = {
    narrow: [
        /^ي/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ي/i,
        /^ي/i,
        /^أ/i,
        /^س/i,
        /^أ/i,
        /^ن/i,
        /^د/i
    ],
    any: [
        /^يناير/i,
        /^فبراير/i,
        /^مارس/i,
        /^أبريل/i,
        /^مايو/i,
        /^يونيو/i,
        /^يوليو/i,
        /^أغسطس/i,
        /^سبتمبر/i,
        /^أكتوبر/i,
        /^نوفمبر/i,
        /^ديسمبر/i
    ]
};
const matchDayPatterns = {
    narrow: /^[حنثرخجس]/i,
    short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
    abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
    wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
const parseDayPatterns = {
    narrow: [
        /^ح/i,
        /^ن/i,
        /^ث/i,
        /^ر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ],
    wide: [
        /^الأحد/i,
        /^الاثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
    ],
    any: [
        /^أح/i,
        /^اث/i,
        /^ث/i,
        /^أر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/,
    any: /^(ص|م|منتصف الليل|الظهر|بعد الظهر|في الصباح|في المساء|في الليل)/
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ص/,
        pm: /^م/,
        midnight: /منتصف الليل/,
        noon: /الظهر/,
        afternoon: /بعد الظهر/,
        morning: /في الصباح/,
        evening: /في المساء/,
        night: /في الليل/
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"7842d0717073b37a":"kWqg8","f2b592793bc69d41":"15lWd"}],"jbocg":[function(require,module,exports) {
"use strict";
exports.arDZ = void 0;
var _index = require("4e8930be393e66e");
var _index2 = require("70fd4d7207bd7b7c");
var _index3 = require("332ddc42190ad402");
var _index4 = require("a18dd21b1f6fcac5");
var _index5 = require("19871be061f60d1b");
/**
 * @category Locales
 * @summary Arabic locale (Algerian Arabic).
 * @language Algerian Arabic
 * @iso-639-2 ara
 * @author Badreddine Boumaza [@badre429](https://github.com/badre429)
 * @author Ahmed ElShahat [@elshahat](https://github.com/elshahat)
 */ const arDZ = exports.arDZ = {
    code: "ar-DZ",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"4e8930be393e66e":"eN2R7","70fd4d7207bd7b7c":"ij0c6","332ddc42190ad402":"i1A75","a18dd21b1f6fcac5":"1IsqT","19871be061f60d1b":"8dFhO"}],"eN2R7":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    xSeconds: {
        one: "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u062B\u0627\u0646\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    halfAMinute: "\u0646\u0635\u0641 \u062F\u0642\u064A\u0642\u0629",
    lessThanXMinutes: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u0626\u0642",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    xMinutes: {
        one: "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062F\u0642\u0627\u0626\u0642",
        other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    aboutXHours: {
        one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xHours: {
        one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
        other: "{{count}} \u0633\u0627\u0639\u0629"
    },
    xDays: {
        one: "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F",
        two: "\u064A\u0648\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
        other: "{{count}} \u064A\u0648\u0645"
    },
    aboutXWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F",
        two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639"
    },
    aboutXMonths: {
        one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xMonths: {
        one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F",
        two: "\u0634\u0647\u0631\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
        other: "{{count}} \u0634\u0647\u0631"
    },
    aboutXYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F",
        two: "\u0639\u0627\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "{{count}} \u0639\u0627\u0645"
    },
    overXYears: {
        one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645",
        two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645\u064A\u0646",
        threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0639\u0627\u0645"
    },
    almostXYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    }
};
const formatDistance = (token, count, options)=>{
    options = options || {};
    const usageGroup = formatDistanceLocale[token];
    let result;
    if (typeof usageGroup === "string") result = usageGroup;
    else if (count === 1) result = usageGroup.one;
    else if (count === 2) result = usageGroup.two;
    else if (count <= 10) result = usageGroup.threeToTen.replace("{{count}}", String(count));
    else result = usageGroup.other.replace("{{count}}", String(count));
    if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0641\u064A \u062E\u0644\u0627\u0644 " + result;
        else return "\u0645\u0646\u0630 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"ij0c6":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("fd7123c96f79427b");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u0639\u0646\u062F' {{time}}",
    long: "{{date}} '\u0639\u0646\u062F' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"fd7123c96f79427b":"6OYyu"}],"i1A75":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0623\u062E\u0631' eeee '\u0639\u0646\u062F' p",
    yesterday: "'\u0623\u0645\u0633 \u0639\u0646\u062F' p",
    today: "'\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F' p",
    tomorrow: "'\u063A\u062F\u0627\u064B \u0639\u0646\u062F' p",
    nextWeek: "eeee '\u0639\u0646\u062F' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>{
    return formatRelativeLocale[token];
};
exports.formatRelative = formatRelative;

},{}],"1IsqT":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("392da7c0c059b467");
const eraValues = {
    narrow: [
        "\u0642",
        "\u0628"
    ],
    abbreviated: [
        "\u0642.\u0645.",
        "\u0628.\u0645."
    ],
    wide: [
        "\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F",
        "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u06311",
        "\u06312",
        "\u06313",
        "\u06314"
    ],
    wide: [
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"
    ]
};
const monthValues = {
    narrow: [
        "\u062C",
        "\u0641",
        "\u0645",
        "\u0623",
        "\u0645",
        "\u062C",
        "\u062C",
        "\u0623",
        "\u0633",
        "\u0623",
        "\u0646",
        "\u062F"
    ],
    abbreviated: [
        "\u062C\u0627\u0646\u0640",
        "\u0641\u064A\u0641\u0640",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0641\u0631\u064A\u0644",
        "\u0645\u0627\u064A\u0640",
        "\u062C\u0648\u0627\u0646\u0640",
        "\u062C\u0648\u064A\u0640",
        "\u0623\u0648\u062A",
        "\u0633\u0628\u062A\u0640",
        "\u0623\u0643\u062A\u0640",
        "\u0646\u0648\u0641\u0640",
        "\u062F\u064A\u0633\u0640"
    ],
    wide: [
        "\u062C\u0627\u0646\u0641\u064A",
        "\u0641\u064A\u0641\u0631\u064A",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0641\u0631\u064A\u0644",
        "\u0645\u0627\u064A",
        "\u062C\u0648\u0627\u0646",
        "\u062C\u0648\u064A\u0644\u064A\u0629",
        "\u0623\u0648\u062A",
        "\u0633\u0628\u062A\u0645\u0628\u0631",
        "\u0623\u0643\u062A\u0648\u0628\u0631",
        "\u0646\u0648\u0641\u0645\u0628\u0631",
        "\u062F\u064A\u0633\u0645\u0628\u0631"
    ]
};
const dayValues = {
    narrow: [
        "\u062D",
        "\u0646",
        "\u062B",
        "\u0631",
        "\u062E",
        "\u062C",
        "\u0633"
    ],
    short: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    abbreviated: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u0640",
        "\u062B\u0644\u0627",
        "\u0623\u0631\u0628\u0640",
        "\u062E\u0645\u064A\u0640",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    wide: [
        "\u0627\u0644\u0623\u062D\u062F",
        "\u0627\u0644\u0627\u062B\u0646\u064A\u0646",
        "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u0627\u0644\u062E\u0645\u064A\u0633",
        "\u0627\u0644\u062C\u0645\u0639\u0629",
        "\u0627\u0644\u0633\u0628\u062A"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber: ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>Number(quarter) - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"392da7c0c059b467":"fGq1u"}],"8dFhO":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("b25cf3b59ad7aeac");
var _index2 = require("ad3a4dc9d8a3058b");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ق|ب)/i,
    abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
    wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
const parseEraPatterns = {
    any: [
        /^قبل/i,
        /^بعد/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^ر[1234]/i,
    wide: /^الربع [1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[جفمأسند]/i,
    abbreviated: /^(جان|فيف|مار|أفر|ماي|جوا|جوي|أوت|سبت|أكت|نوف|ديس)/i,
    wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ج/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ج/i,
        /^ج/i,
        /^أ/i,
        /^س/i,
        /^أ/i,
        /^ن/i,
        /^د/i
    ],
    any: [
        /^جان/i,
        /^فيف/i,
        /^مار/i,
        /^أفر/i,
        /^ماي/i,
        /^جوا/i,
        /^جوي/i,
        /^أوت/i,
        /^سبت/i,
        /^أكت/i,
        /^نوف/i,
        /^ديس/i
    ]
};
const matchDayPatterns = {
    narrow: /^[حنثرخجس]/i,
    short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
    abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
    wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
const parseDayPatterns = {
    narrow: [
        /^ح/i,
        /^ن/i,
        /^ث/i,
        /^ر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ],
    wide: [
        /^الأحد/i,
        /^الاثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
    ],
    any: [
        /^أح/i,
        /^اث/i,
        /^ث/i,
        /^أر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>Number(index) + 1
    }),
    month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"b25cf3b59ad7aeac":"kWqg8","ad3a4dc9d8a3058b":"15lWd"}],"hHaEC":[function(require,module,exports) {
"use strict";
exports.arEG = void 0;
var _index = require("c95762fb94d822a");
var _index2 = require("390df949e2624c12");
var _index3 = require("6984dd5f5cbc3728");
var _index4 = require("9421b2016fc38b46");
var _index5 = require("de3998ea2eb4eed");
/**
 * @category Locales
 * @summary Arabic locale (Egypt).
 * @language Arabic
 * @iso-639-2 ara
 * @author AbdAllah AbdElFattah [@AbdAllahAbdElFattah13](https://github.com/AbdAllahAbdElFattah13)
 */ const arEG = exports.arEG = {
    code: "ar-EG",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"c95762fb94d822a":"87OaQ","390df949e2624c12":"6gqlH","6984dd5f5cbc3728":"LpJzc","9421b2016fc38b46":"kxwIS","de3998ea2eb4eed":"kxpqQ"}],"87OaQ":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    xSeconds: {
        one: "\u062B\u0627\u0646\u064A\u0629",
        two: "\u062B\u0627\u0646\u064A\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    halfAMinute: "\u0646\u0635 \u062F\u0642\u064A\u0642\u0629",
    lessThanXMinutes: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u064A\u0642",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    xMinutes: {
        one: "\u062F\u0642\u064A\u0642\u0629",
        two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062F\u0642\u0627\u064A\u0642",
        other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    aboutXHours: {
        one: "\u062D\u0648\u0627\u0644\u064A \u0633\u0627\u0639\u0629",
        two: "\u062D\u0648\u0627\u0644\u064A \u0633\u0627\u0639\u062A\u064A\u0646",
        threeToTen: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0633\u0627\u0639\u0627\u062A",
        other: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0633\u0627\u0639\u0629"
    },
    xHours: {
        one: "\u0633\u0627\u0639\u0629",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
        other: "{{count}} \u0633\u0627\u0639\u0629"
    },
    xDays: {
        one: "\u064A\u0648\u0645",
        two: "\u064A\u0648\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
        other: "{{count}} \u064A\u0648\u0645"
    },
    aboutXWeeks: {
        one: "\u062D\u0648\u0627\u0644\u064A \u0623\u0633\u0628\u0648\u0639",
        two: "\u062D\u0648\u0627\u0644\u064A \u0623\u0633\u0628\u0648\u0639\u064A\u0646",
        threeToTen: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
        other: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0623\u0633\u0628\u0648\u0639"
    },
    xWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639",
        two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639"
    },
    aboutXMonths: {
        one: "\u062D\u0648\u0627\u0644\u064A \u0634\u0647\u0631",
        two: "\u062D\u0648\u0627\u0644\u064A \u0634\u0647\u0631\u064A\u0646",
        threeToTen: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0623\u0634\u0647\u0631",
        other: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0634\u0647\u0631"
    },
    xMonths: {
        one: "\u0634\u0647\u0631",
        two: "\u0634\u0647\u0631\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
        other: "{{count}} \u0634\u0647\u0631"
    },
    aboutXYears: {
        one: "\u062D\u0648\u0627\u0644\u064A \u0633\u0646\u0629",
        two: "\u062D\u0648\u0627\u0644\u064A \u0633\u0646\u062A\u064A\u0646",
        threeToTen: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0633\u0646\u064A\u0646",
        other: "\u062D\u0648\u0627\u0644\u064A {{count}} \u0633\u0646\u0629"
    },
    xYears: {
        one: "\u0639\u0627\u0645",
        two: "\u0639\u0627\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "{{count}} \u0639\u0627\u0645"
    },
    overXYears: {
        one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0633\u0646\u0629",
        two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0633\u0646\u062A\u064A\u0646",
        threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0633\u0646\u064A\u0646",
        other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0633\u0646\u0629"
    },
    almostXYears: {
        one: "\u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u064B\u0627",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u064B\u0627",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u064B\u0627",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u064B\u0627"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else if (count === 2) result = tokenValue.two;
    else if (count <= 10) result = tokenValue.threeToTen.replace("{{count}}", String(count));
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return `\u{641}\u{64A} \u{62E}\u{644}\u{627}\u{644} ${result}`;
        else return `\u{645}\u{646}\u{630} ${result}`;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"6gqlH":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("7dfe8b74d932e47d");
const dateFormats = {
    full: "EEEE\u060C do MMMM y",
    long: "do MMMM y",
    medium: "dd/MMM/y",
    short: "d/MM/y"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u0627\u0644\u0633\u0627\u0639\u0629' {{time}}",
    long: "{{date}} '\u0627\u0644\u0633\u0627\u0639\u0629' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"7dfe8b74d932e47d":"6OYyu"}],"LpJzc":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee '\u0627\u0644\u0644\u064A \u062C\u0627\u064A \u0627\u0644\u0633\u0627\u0639\u0629' p",
    yesterday: "'\u0625\u0645\u0628\u0627\u0631\u062D \u0627\u0644\u0633\u0627\u0639\u0629' p",
    today: "'\u0627\u0644\u0646\u0647\u0627\u0631\u062F\u0629 \u0627\u0644\u0633\u0627\u0639\u0629' p",
    tomorrow: "'\u0628\u0643\u0631\u0629 \u0627\u0644\u0633\u0627\u0639\u0629' p",
    nextWeek: "eeee '\u0627\u0644\u0633\u0627\u0639\u0629' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"kxwIS":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("399fa4eaa63f166d");
const eraValues = {
    narrow: [
        "\u0642",
        "\u0628"
    ],
    abbreviated: [
        "\u0642.\u0645",
        "\u0628.\u0645"
    ],
    wide: [
        "\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F",
        "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u06311",
        "\u06312",
        "\u06313",
        "\u06314"
    ],
    wide: [
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"
    ]
};
const monthValues = {
    narrow: [
        "\u064A",
        "\u0641",
        "\u0645",
        "\u0623",
        "\u0645",
        "\u064A",
        "\u064A",
        "\u0623",
        "\u0633",
        "\u0623",
        "\u0646",
        "\u062F"
    ],
    abbreviated: [
        "\u064A\u0646\u0627",
        "\u0641\u0628\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0628\u0631\u064A\u0644",
        "\u0645\u0627\u064A\u0648",
        "\u064A\u0648\u0646\u0640",
        "\u064A\u0648\u0644\u0640",
        "\u0623\u063A\u0633\u0640",
        "\u0633\u0628\u062A\u0640",
        "\u0623\u0643\u062A\u0640",
        "\u0646\u0648\u0641\u0640",
        "\u062F\u064A\u0633\u0640"
    ],
    wide: [
        "\u064A\u0646\u0627\u064A\u0631",
        "\u0641\u0628\u0631\u0627\u064A\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0628\u0631\u064A\u0644",
        "\u0645\u0627\u064A\u0648",
        "\u064A\u0648\u0646\u064A\u0648",
        "\u064A\u0648\u0644\u064A\u0648",
        "\u0623\u063A\u0633\u0637\u0633",
        "\u0633\u0628\u062A\u0645\u0628\u0631",
        "\u0623\u0643\u062A\u0648\u0628\u0631",
        "\u0646\u0648\u0641\u0645\u0628\u0631",
        "\u062F\u064A\u0633\u0645\u0628\u0631"
    ]
};
const dayValues = {
    narrow: [
        "\u062D",
        "\u0646",
        "\u062B",
        "\u0631",
        "\u062E",
        "\u062C",
        "\u0633"
    ],
    short: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    abbreviated: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    wide: [
        "\u0627\u0644\u0623\u062D\u062F",
        "\u0627\u0644\u0627\u062B\u0646\u064A\u0646",
        "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u0627\u0644\u062E\u0645\u064A\u0633",
        "\u0627\u0644\u062C\u0645\u0639\u0629",
        "\u0627\u0644\u0633\u0628\u062A"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631\u0627\u064B",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631\u0627\u064B",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631\u0627\u064B",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0638\u0647\u0631\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"399fa4eaa63f166d":"fGq1u"}],"kxpqQ":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("a24e04f253a0c375");
var _index2 = require("1bc5703e63edc98f");
const matchOrdinalNumberPattern = /^(\d+)/;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ق|ب)/g,
    abbreviated: /^(ق.م|ب.م)/g,
    wide: /^(قبل الميلاد|بعد الميلاد)/g
};
const parseEraPatterns = {
    any: [
        /^ق/g,
        /^ب/g
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/,
    abbreviated: /^ر[1234]/,
    wide: /^الربع (الأول|الثاني|الثالث|الرابع)/
};
const parseQuarterPatterns = {
    wide: [
        /الربع الأول/,
        /الربع الثاني/,
        /الربع الثالث/,
        /الربع الرابع/
    ],
    any: [
        /1/,
        /2/,
        /3/,
        /4/
    ]
};
const matchMonthPatterns = {
    narrow: /^(ي|ف|م|أ|س|ن|د)/,
    abbreviated: /^(ينا|فبر|مارس|أبريل|مايو|يونـ|يولـ|أغسـ|سبتـ|أكتـ|نوفـ|ديسـ)/,
    wide: /^(يناير|فبراير|مارس|أبريل|مايو|يونيو|يوليو|أغسطس|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
const parseMonthPatterns = {
    narrow: [
        /^ي/,
        /^ف/,
        /^م/,
        /^أ/,
        /^م/,
        /^ي/,
        /^ي/,
        /^أ/,
        /^س/,
        /^أ/,
        /^ن/,
        /^د/
    ],
    any: [
        /^ينا/,
        /^فبر/,
        /^مارس/,
        /^أبريل/,
        /^مايو/,
        /^يون/,
        /^يول/,
        /^أغس/,
        /^سبت/,
        /^أكت/,
        /^نوف/,
        /^ديس/
    ]
};
const matchDayPatterns = {
    narrow: /^(ح|ن|ث|ر|خ|ج|س)/,
    short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,
    abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/,
    wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/
};
const parseDayPatterns = {
    narrow: [
        /^ح/,
        /^ن/,
        /^ث/,
        /^ر/,
        /^خ/,
        /^ج/,
        /^س/
    ],
    any: [
        /أحد/,
        /اثنين/,
        /ثلاثاء/,
        /أربعاء/,
        /خميس/,
        /جمعة/,
        /سبت/
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ص|م|ن|ظ|في الصباح|بعد الظهر|في المساء|في الليل)/,
    abbreviated: /^(ص|م|نصف الليل|ظهراً|في الصباح|بعد الظهر|في المساء|في الليل)/,
    wide: /^(ص|م|نصف الليل|في الصباح|ظهراً|بعد الظهر|في المساء|في الليل)/,
    any: /^(ص|م|صباح|ظهر|مساء|ليل)/
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ص/,
        pm: /^م/,
        midnight: /^ن/,
        noon: /^ظ/,
        morning: /^ص/,
        afternoon: /^بعد/,
        evening: /^م/,
        night: /^ل/
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
            return parseInt(value, 10);
        }
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"a24e04f253a0c375":"15lWd","1bc5703e63edc98f":"kWqg8"}],"dJp9x":[function(require,module,exports) {
"use strict";
exports.arMA = void 0;
var _index = require("68b657f984e26e1b");
var _index2 = require("4f2cfbe8dfa8ce1c");
var _index3 = require("c52144c29c169108");
var _index4 = require("b43c716c955e9707");
var _index5 = require("ccc689c711f24c6a");
/**
 * @category Locales
 * @summary Arabic locale (Moroccan Arabic).
 * @language Moroccan Arabic
 * @iso-639-2 ara
 * @author Achraf Rrami [@rramiachraf](https://github.com/rramiachraf)
 */ const arMA = exports.arMA = {
    code: "ar-MA",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        // Monday is 1
        weekStartsOn: 1,
        firstWeekContainsDate: 1
    }
};

},{"68b657f984e26e1b":"bi5qk","4f2cfbe8dfa8ce1c":"bd6dP","c52144c29c169108":"90lJ0","b43c716c955e9707":"caQBj","ccc689c711f24c6a":"6D4X4"}],"bi5qk":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    xSeconds: {
        one: "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u062B\u0627\u0646\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    halfAMinute: "\u0646\u0635\u0641 \u062F\u0642\u064A\u0642\u0629",
    lessThanXMinutes: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u0626\u0642",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    xMinutes: {
        one: "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062F\u0642\u0627\u0626\u0642",
        other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    aboutXHours: {
        one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xHours: {
        one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
        other: "{{count}} \u0633\u0627\u0639\u0629"
    },
    xDays: {
        one: "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F",
        two: "\u064A\u0648\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
        other: "{{count}} \u064A\u0648\u0645"
    },
    aboutXWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F",
        two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639"
    },
    aboutXMonths: {
        one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xMonths: {
        one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F",
        two: "\u0634\u0647\u0631\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
        other: "{{count}} \u0634\u0647\u0631"
    },
    aboutXYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F",
        two: "\u0639\u0627\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "{{count}} \u0639\u0627\u0645"
    },
    overXYears: {
        one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645",
        two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645\u064A\u0646",
        threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0639\u0627\u0645"
    },
    almostXYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    }
};
const formatDistance = (token, count, options)=>{
    options = options || {};
    const usageGroup = formatDistanceLocale[token];
    let result;
    if (typeof usageGroup === "string") result = usageGroup;
    else if (count === 1) result = usageGroup.one;
    else if (count === 2) result = usageGroup.two;
    else if (count <= 10) result = usageGroup.threeToTen.replace("{{count}}", String(count));
    else result = usageGroup.other.replace("{{count}}", String(count));
    if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0641\u064A \u062E\u0644\u0627\u0644 " + result;
        else return "\u0645\u0646\u0630 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"bd6dP":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("11262e6db51041fc");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u0639\u0646\u062F' {{time}}",
    long: "{{date}} '\u0639\u0646\u062F' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"11262e6db51041fc":"6OYyu"}],"90lJ0":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0623\u062E\u0631' eeee '\u0639\u0646\u062F' p",
    yesterday: "'\u0623\u0645\u0633 \u0639\u0646\u062F' p",
    today: "'\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F' p",
    tomorrow: "'\u063A\u062F\u0627\u064B \u0639\u0646\u062F' p",
    nextWeek: "eeee '\u0639\u0646\u062F' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>{
    return formatRelativeLocale[token];
};
exports.formatRelative = formatRelative;

},{}],"caQBj":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("a4332bd20760a6aa");
const eraValues = {
    narrow: [
        "\u0642",
        "\u0628"
    ],
    abbreviated: [
        "\u0642.\u0645.",
        "\u0628.\u0645."
    ],
    wide: [
        "\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F",
        "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u06311",
        "\u06312",
        "\u06313",
        "\u06314"
    ],
    wide: [
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"
    ]
};
const monthValues = {
    narrow: [
        "\u064A",
        "\u0641",
        "\u0645",
        "\u0623",
        "\u0645",
        "\u064A",
        "\u064A",
        "\u063A",
        "\u0634",
        "\u0623",
        "\u0646",
        "\u062F"
    ],
    abbreviated: [
        "\u064A\u0646\u0627",
        "\u0641\u0628\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0628\u0631\u064A\u0644",
        "\u0645\u0627\u064A",
        "\u064A\u0648\u0646\u0640",
        "\u064A\u0648\u0644\u0640",
        "\u063A\u0634\u062A",
        "\u0634\u062A\u0646\u0640",
        "\u0623\u0643\u062A\u0640",
        "\u0646\u0648\u0646\u0640",
        "\u062F\u062C\u0646\u0640"
    ],
    wide: [
        "\u064A\u0646\u0627\u064A\u0631",
        "\u0641\u0628\u0631\u0627\u064A\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0628\u0631\u064A\u0644",
        "\u0645\u0627\u064A",
        "\u064A\u0648\u0646\u064A\u0648",
        "\u064A\u0648\u0644\u064A\u0648\u0632",
        "\u063A\u0634\u062A",
        "\u0634\u062A\u0646\u0628\u0631",
        "\u0623\u0643\u062A\u0648\u0628\u0631",
        "\u0646\u0648\u0646\u0628\u0631",
        "\u062F\u062C\u0646\u0628\u0631"
    ]
};
const dayValues = {
    narrow: [
        "\u062D",
        "\u0646",
        "\u062B",
        "\u0631",
        "\u062E",
        "\u062C",
        "\u0633"
    ],
    short: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    abbreviated: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u0640",
        "\u062B\u0644\u0627",
        "\u0623\u0631\u0628\u0640",
        "\u062E\u0645\u064A\u0640",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    wide: [
        "\u0627\u0644\u0623\u062D\u062F",
        "\u0627\u0644\u0625\u062B\u0646\u064A\u0646",
        "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u0627\u0644\u062E\u0645\u064A\u0633",
        "\u0627\u0644\u062C\u0645\u0639\u0629",
        "\u0627\u0644\u0633\u0628\u062A"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber: ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>Number(quarter) - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"a4332bd20760a6aa":"fGq1u"}],"6D4X4":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("d961b86694a8dcb0");
var _index2 = require("fc0750892caa830e");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ق|ب)/i,
    abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
    wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
const parseEraPatterns = {
    any: [
        /^قبل/i,
        /^بعد/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^ر[1234]/i,
    wide: /^الربع [1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[يفمأمسند]/i,
    abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i,
    wide: /^(ين|ف|مار|أب|ماي|يون|يول|غش|شت|أك|ن|د)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ي/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ي/i,
        /^ي/i,
        /^غ/i,
        /^ش/i,
        /^أ/i,
        /^ن/i,
        /^د/i
    ],
    any: [
        /^ين/i,
        /^فب/i,
        /^مار/i,
        /^أب/i,
        /^ماي/i,
        /^يون/i,
        /^يول/i,
        /^غشت/i,
        /^ش/i,
        /^أك/i,
        /^ن/i,
        /^د/i
    ]
};
const matchDayPatterns = {
    narrow: /^[حنثرخجس]/i,
    short: /^(أحد|إثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
    abbreviated: /^(أحد|إثن|ثلا|أرب|خمي|جمعة|سبت)/i,
    wide: /^(الأحد|الإثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
const parseDayPatterns = {
    narrow: [
        /^ح/i,
        /^ن/i,
        /^ث/i,
        /^ر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ],
    wide: [
        /^الأحد/i,
        /^الإثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
    ],
    any: [
        /^أح/i,
        /^إث/i,
        /^ث/i,
        /^أر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>Number(index) + 1
    }),
    month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"d961b86694a8dcb0":"kWqg8","fc0750892caa830e":"15lWd"}],"CYEda":[function(require,module,exports) {
"use strict";
exports.arSA = void 0;
var _index = require("43eab78463673c0f");
var _index2 = require("8ca424c02067a344");
var _index3 = require("e9399632da46fbfe");
var _index4 = require("896bbdef51685198");
var _index5 = require("f81eda51140ea20a");
/**
 * @category Locales
 * @summary Arabic locale (Sauid Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Dhaifallah Alwadani [@dalwadani](https://github.com/dalwadani)
 */ const arSA = exports.arSA = {
    code: "ar-SA",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"43eab78463673c0f":"70oUM","8ca424c02067a344":"ga6l8","e9399632da46fbfe":"awc8o","896bbdef51685198":"5GvIB","f81eda51140ea20a":"fqjTf"}],"70oUM":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    xSeconds: {
        one: "\u062B\u0627\u0646\u064A\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u062B\u0627\u0646\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    halfAMinute: "\u0646\u0635\u0641 \u062F\u0642\u064A\u0642\u0629",
    lessThanXMinutes: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u0626\u0642",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    xMinutes: {
        one: "\u062F\u0642\u064A\u0642\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062F\u0642\u0627\u0626\u0642",
        other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    aboutXHours: {
        one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xHours: {
        one: "\u0633\u0627\u0639\u0629 \u0648\u0627\u062D\u062F\u0629",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646",
        threeToTen: "{{count}} \u0633\u0627\u0639\u0627\u062A",
        other: "{{count}} \u0633\u0627\u0639\u0629"
    },
    xDays: {
        one: "\u064A\u0648\u0645 \u0648\u0627\u062D\u062F",
        two: "\u064A\u0648\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
        other: "{{count}} \u064A\u0648\u0645"
    },
    aboutXWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xWeeks: {
        one: "\u0623\u0633\u0628\u0648\u0639 \u0648\u0627\u062D\u062F",
        two: "\u0623\u0633\u0628\u0648\u0639\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0633\u0627\u0628\u064A\u0639",
        other: "{{count}} \u0623\u0633\u0628\u0648\u0639"
    },
    aboutXMonths: {
        one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xMonths: {
        one: "\u0634\u0647\u0631 \u0648\u0627\u062D\u062F",
        two: "\u0634\u0647\u0631\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631",
        other: "{{count}} \u0634\u0647\u0631"
    },
    aboutXYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    },
    xYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F",
        two: "\u0639\u0627\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "{{count}} \u0639\u0627\u0645"
    },
    overXYears: {
        one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645",
        two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645\u064A\u0646",
        threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0639\u0627\u0645"
    },
    almostXYears: {
        one: "\u0639\u0627\u0645 \u0648\u0627\u062D\u062F \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628\u0627\u064B"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else if (count === 2) result = tokenValue.two;
    else if (count <= 10) result = tokenValue.threeToTen.replace("{{count}}", String(count));
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0641\u064A \u062E\u0644\u0627\u0644 " + result;
        else return "\u0645\u0646\u0630 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"ga6l8":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("a759b58c5433bf79");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u0639\u0646\u062F' {{time}}",
    long: "{{date}} '\u0639\u0646\u062F' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"a759b58c5433bf79":"6OYyu"}],"awc8o":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0623\u062E\u0631' eeee '\u0639\u0646\u062F' p",
    yesterday: "'\u0623\u0645\u0633 \u0639\u0646\u062F' p",
    today: "'\u0627\u0644\u064A\u0648\u0645 \u0639\u0646\u062F' p",
    tomorrow: "'\u063A\u062F\u0627\u064B \u0639\u0646\u062F' p",
    nextWeek: "eeee '\u0639\u0646\u062F' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"5GvIB":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("28529185b4070820");
const eraValues = {
    narrow: [
        "\u0642",
        "\u0628"
    ],
    abbreviated: [
        "\u0642.\u0645.",
        "\u0628.\u0645."
    ],
    wide: [
        "\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F",
        "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u06311",
        "\u06312",
        "\u06313",
        "\u06314"
    ],
    wide: [
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"
    ]
};
const monthValues = {
    narrow: [
        "\u064A",
        "\u0641",
        "\u0645",
        "\u0623",
        "\u0645",
        "\u064A",
        "\u064A",
        "\u0623",
        "\u0633",
        "\u0623",
        "\u0646",
        "\u062F"
    ],
    abbreviated: [
        "\u064A\u0646\u0627",
        "\u0641\u0628\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0628\u0631\u064A\u0644",
        "\u0645\u0627\u064A\u0648",
        "\u064A\u0648\u0646\u0640",
        "\u064A\u0648\u0644\u0640",
        "\u0623\u063A\u0633\u0640",
        "\u0633\u0628\u062A\u0640",
        "\u0623\u0643\u062A\u0640",
        "\u0646\u0648\u0641\u0640",
        "\u062F\u064A\u0633\u0640"
    ],
    wide: [
        "\u064A\u0646\u0627\u064A\u0631",
        "\u0641\u0628\u0631\u0627\u064A\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0628\u0631\u064A\u0644",
        "\u0645\u0627\u064A\u0648",
        "\u064A\u0648\u0646\u064A\u0648",
        "\u064A\u0648\u0644\u064A\u0648",
        "\u0623\u063A\u0633\u0637\u0633",
        "\u0633\u0628\u062A\u0645\u0628\u0631",
        "\u0623\u0643\u062A\u0648\u0628\u0631",
        "\u0646\u0648\u0641\u0645\u0628\u0631",
        "\u062F\u064A\u0633\u0645\u0628\u0631"
    ]
};
const dayValues = {
    narrow: [
        "\u062D",
        "\u0646",
        "\u062B",
        "\u0631",
        "\u062E",
        "\u062C",
        "\u0633"
    ],
    short: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    abbreviated: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u0640",
        "\u062B\u0644\u0627",
        "\u0623\u0631\u0628\u0640",
        "\u062E\u0645\u064A\u0640",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    wide: [
        "\u0627\u0644\u0623\u062D\u062F",
        "\u0627\u0644\u0627\u062B\u0646\u064A\u0646",
        "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u0627\u0644\u062E\u0645\u064A\u0633",
        "\u0627\u0644\u062C\u0645\u0639\u0629",
        "\u0627\u0644\u0633\u0628\u062A"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0645\u0633\u0627\u0621\u0627\u064B",
        night: "\u0644\u064A\u0644\u0627\u064B"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    },
    wide: {
        am: "\u0635",
        pm: "\u0645",
        midnight: "\u0646\u0635\u0641 \u0627\u0644\u0644\u064A\u0644",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u0627\u062D\u0627\u064B",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0638\u0640\u0647\u0631",
        evening: "\u0641\u064A \u0627\u0644\u0645\u0633\u0627\u0621",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"28529185b4070820":"fGq1u"}],"fqjTf":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("5416dafbd3316a72");
var _index2 = require("903313bc0326fb46");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ق|ب)/i,
    abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?م\.?\s?|a\.?\s?d\.?|c\.?\s?)/i,
    wide: /^(قبل الميلاد|قبل الميلاد|بعد الميلاد|بعد الميلاد)/i
};
const parseEraPatterns = {
    any: [
        /^قبل/i,
        /^بعد/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^ر[1234]/i,
    wide: /^الربع [1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[يفمأمسند]/i,
    abbreviated: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i,
    wide: /^(ين|ف|مار|أب|ماي|يون|يول|أغ|س|أك|ن|د)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ي/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ي/i,
        /^ي/i,
        /^أ/i,
        /^س/i,
        /^أ/i,
        /^ن/i,
        /^د/i
    ],
    any: [
        /^ين/i,
        /^ف/i,
        /^مار/i,
        /^أب/i,
        /^ماي/i,
        /^يون/i,
        /^يول/i,
        /^أغ/i,
        /^س/i,
        /^أك/i,
        /^ن/i,
        /^د/i
    ]
};
const matchDayPatterns = {
    narrow: /^[حنثرخجس]/i,
    short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
    abbreviated: /^(أحد|اثن|ثلا|أرب|خمي|جمعة|سبت)/i,
    wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
const parseDayPatterns = {
    narrow: [
        /^ح/i,
        /^ن/i,
        /^ث/i,
        /^ر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ],
    wide: [
        /^الأحد/i,
        /^الاثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
    ],
    any: [
        /^أح/i,
        /^اث/i,
        /^ث/i,
        /^أر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,
    any: /^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mi/i,
        noon: /^no/i,
        morning: /morning/i,
        afternoon: /afternoon/i,
        evening: /evening/i,
        night: /night/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"5416dafbd3316a72":"15lWd","903313bc0326fb46":"kWqg8"}],"7AZDZ":[function(require,module,exports) {
"use strict";
exports.arTN = void 0;
var _index = require("d367ec8acb6600ab");
var _index2 = require("726e7a5212e85b20");
var _index3 = require("e3aa5493ad5f3507");
var _index4 = require("89c80afd0aaa64c9");
var _index5 = require("383e2afd39bcec47");
/**
 * @category Locales
 * @summary Arabic locale (Tunisian Arabic).
 * @language Arabic
 * @iso-639-2 ara
 * @author Koussay Haj Kacem [@essana3](https://github.com/essana3)
 */ const arTN = exports.arTN = {
    code: "ar-TN",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"d367ec8acb6600ab":"04ChU","726e7a5212e85b20":"c0VpX","e3aa5493ad5f3507":"cQf7V","89c80afd0aaa64c9":"81ys7","383e2afd39bcec47":"d76A4"}],"04ChU":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062B\u0627\u0646\u064A\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u0632\u0648\u0632 \u062B\u0648\u0627\u0646\u064A",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    xSeconds: {
        one: "\u062B\u0627\u0646\u064A\u0629",
        two: "\u0632\u0648\u0632 \u062B\u0648\u0627\u0646\u064A",
        threeToTen: "{{count}} \u062B\u0648\u0627\u0646\u064A",
        other: "{{count}} \u062B\u0627\u0646\u064A\u0629"
    },
    halfAMinute: "\u0646\u0635 \u062F\u0642\u064A\u0642\u0629",
    lessThanXMinutes: {
        one: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u0629",
        two: "\u0623\u0642\u0644 \u0645\u0646 \u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u0627\u064A\u0642",
        other: "\u0623\u0642\u0644 \u0645\u0646 {{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    xMinutes: {
        one: "\u062F\u0642\u064A\u0642\u0629",
        two: "\u062F\u0642\u064A\u0642\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062F\u0642\u0627\u064A\u0642",
        other: "{{count}} \u062F\u0642\u064A\u0642\u0629"
    },
    aboutXHours: {
        one: "\u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
        threeToTen: "{{count}} \u0633\u0648\u0627\u064A\u0639 \u062A\u0642\u0631\u064A\u0628",
        other: "{{count}} \u0633\u0627\u0639\u0629 \u062A\u0642\u0631\u064A\u0628"
    },
    xHours: {
        one: "\u0633\u0627\u0639\u0629",
        two: "\u0633\u0627\u0639\u062A\u064A\u0646",
        threeToTen: "{{count}} \u0633\u0648\u0627\u064A\u0639",
        other: "{{count}} \u0633\u0627\u0639\u0629"
    },
    xDays: {
        one: "\u0646\u0647\u0627\u0631",
        two: "\u0646\u0647\u0627\u0631\u064A\u0646",
        threeToTen: "{{count}} \u0623\u064A\u0627\u0645",
        other: "{{count}} \u064A\u0648\u0645"
    },
    aboutXWeeks: {
        one: "\u062C\u0645\u0639\u0629 \u062A\u0642\u0631\u064A\u0628",
        two: "\u062C\u0645\u0639\u062A\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
        threeToTen: "{{count}} \u062C\u0645\u0627\u0639 \u062A\u0642\u0631\u064A\u0628",
        other: "{{count}} \u062C\u0645\u0639\u0629 \u062A\u0642\u0631\u064A\u0628"
    },
    xWeeks: {
        one: "\u062C\u0645\u0639\u0629",
        two: "\u062C\u0645\u0639\u062A\u064A\u0646",
        threeToTen: "{{count}} \u062C\u0645\u0627\u0639",
        other: "{{count}} \u062C\u0645\u0639\u0629"
    },
    aboutXMonths: {
        one: "\u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628",
        two: "\u0634\u0647\u0631\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631\u0629 \u062A\u0642\u0631\u064A\u0628",
        other: "{{count}} \u0634\u0647\u0631 \u062A\u0642\u0631\u064A\u0628"
    },
    xMonths: {
        one: "\u0634\u0647\u0631",
        two: "\u0634\u0647\u0631\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0634\u0647\u0631\u0629",
        other: "{{count}} \u0634\u0647\u0631"
    },
    aboutXYears: {
        one: "\u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628"
    },
    xYears: {
        one: "\u0639\u0627\u0645",
        two: "\u0639\u0627\u0645\u064A\u0646",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "{{count}} \u0639\u0627\u0645"
    },
    overXYears: {
        one: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645",
        two: "\u0623\u0643\u062B\u0631 \u0645\u0646 \u0639\u0627\u0645\u064A\u0646",
        threeToTen: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0623\u0639\u0648\u0627\u0645",
        other: "\u0623\u0643\u062B\u0631 \u0645\u0646 {{count}} \u0639\u0627\u0645"
    },
    almostXYears: {
        one: "\u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628",
        two: "\u0639\u0627\u0645\u064A\u0646 \u062A\u0642\u0631\u064A\u0628",
        threeToTen: "{{count}} \u0623\u0639\u0648\u0627\u0645 \u062A\u0642\u0631\u064A\u0628",
        other: "{{count}} \u0639\u0627\u0645 \u062A\u0642\u0631\u064A\u0628"
    }
};
const formatDistance = (token, count, options)=>{
    const usageGroup = formatDistanceLocale[token];
    let result;
    if (typeof usageGroup === "string") result = usageGroup;
    else if (count === 1) result = usageGroup.one;
    else if (count === 2) result = usageGroup.two;
    else if (count <= 10) result = usageGroup.threeToTen.replace("{{count}}", String(count));
    else result = usageGroup.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0641\u064A " + result;
        else return "\u0639\u0646\u062F\u0648 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"c0VpX":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("77ab5e5b4b67b2e1");
const dateFormats = {
    full: "EEEE\u060C do MMMM y",
    long: "do MMMM y",
    medium: "d MMM y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "HH:mm:ss",
    long: "HH:mm:ss",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\u0645\u0639' {{time}}",
    long: "{{date}} '\u0645\u0639' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"77ab5e5b4b67b2e1":"6OYyu"}],"cQf7V":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee '\u0625\u0644\u064A \u0641\u0627\u062A \u0645\u0639' p",
    yesterday: "'\u0627\u0644\u0628\u0627\u0631\u062D \u0645\u0639' p",
    today: "'\u0627\u0644\u064A\u0648\u0645 \u0645\u0639' p",
    tomorrow: "'\u063A\u062F\u0648\u0629 \u0645\u0639' p",
    nextWeek: "eeee '\u0627\u0644\u062C\u0645\u0639\u0629 \u0627\u0644\u062C\u0627\u064A\u0629 \u0645\u0639' p '\u0646\u0647\u0627\u0631'",
    other: "P"
};
const formatRelative = (token)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"81ys7":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("2dde3ea34ea5d5c3");
const eraValues = {
    narrow: [
        "\u0642",
        "\u0628"
    ],
    abbreviated: [
        "\u0642.\u0645.",
        "\u0628.\u0645."
    ],
    wide: [
        "\u0642\u0628\u0644 \u0627\u0644\u0645\u064A\u0644\u0627\u062F",
        "\u0628\u0639\u062F \u0627\u0644\u0645\u064A\u0644\u0627\u062F"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u06311",
        "\u06312",
        "\u06313",
        "\u06314"
    ],
    wide: [
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0623\u0648\u0644",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0646\u064A",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u062B\u0627\u0644\u062B",
        "\u0627\u0644\u0631\u0628\u0639 \u0627\u0644\u0631\u0627\u0628\u0639"
    ]
};
const monthValues = {
    narrow: [
        "\u062F",
        "\u0646",
        "\u0623",
        "\u0633",
        "\u0623",
        "\u062C",
        "\u062C",
        "\u0645",
        "\u0623",
        "\u0645",
        "\u0641",
        "\u062C"
    ],
    abbreviated: [
        "\u062C\u0627\u0646\u0641\u064A",
        "\u0641\u064A\u0641\u0631\u064A",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0641\u0631\u064A\u0644",
        "\u0645\u0627\u064A",
        "\u062C\u0648\u0627\u0646",
        "\u062C\u0648\u064A\u0644\u064A\u0629",
        "\u0623\u0648\u062A",
        "\u0633\u0628\u062A\u0645\u0628\u0631",
        "\u0623\u0643\u062A\u0648\u0628\u0631",
        "\u0646\u0648\u0641\u0645\u0628\u0631",
        "\u062F\u064A\u0633\u0645\u0628\u0631"
    ],
    wide: [
        "\u062C\u0627\u0646\u0641\u064A",
        "\u0641\u064A\u0641\u0631\u064A",
        "\u0645\u0627\u0631\u0633",
        "\u0623\u0641\u0631\u064A\u0644",
        "\u0645\u0627\u064A",
        "\u062C\u0648\u0627\u0646",
        "\u062C\u0648\u064A\u0644\u064A\u0629",
        "\u0623\u0648\u062A",
        "\u0633\u0628\u062A\u0645\u0628\u0631",
        "\u0623\u0643\u062A\u0648\u0628\u0631",
        "\u0646\u0648\u0641\u0645\u0628\u0631",
        "\u062F\u064A\u0633\u0645\u0628\u0631"
    ]
};
const dayValues = {
    narrow: [
        "\u062D",
        "\u0646",
        "\u062B",
        "\u0631",
        "\u062E",
        "\u062C",
        "\u0633"
    ],
    short: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    abbreviated: [
        "\u0623\u062D\u062F",
        "\u0627\u062B\u0646\u064A\u0646",
        "\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u062E\u0645\u064A\u0633",
        "\u062C\u0645\u0639\u0629",
        "\u0633\u0628\u062A"
    ],
    wide: [
        "\u0627\u0644\u0623\u062D\u062F",
        "\u0627\u0644\u0627\u062B\u0646\u064A\u0646",
        "\u0627\u0644\u062B\u0644\u0627\u062B\u0627\u0621",
        "\u0627\u0644\u0623\u0631\u0628\u0639\u0627\u0621",
        "\u0627\u0644\u062E\u0645\u064A\u0633",
        "\u0627\u0644\u062C\u0645\u0639\u0629",
        "\u0627\u0644\u0633\u0628\u062A"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0639",
        morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        evening: "\u0627\u0644\u0639\u0634\u064A\u0629",
        night: "\u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0639",
        morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        evening: "\u0627\u0644\u0639\u0634\u064A\u0629",
        night: "\u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
    },
    wide: {
        am: "\u0635",
        pm: "\u0639",
        morning: "\u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        evening: "\u0627\u0644\u0639\u0634\u064A\u0629",
        night: "\u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0635",
        pm: "\u0639",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0641\u064A \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        evening: "\u0641\u064A \u0627\u0644\u0639\u0634\u064A\u0629",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
    },
    abbreviated: {
        am: "\u0635",
        pm: "\u0639",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0641\u064A \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        evening: "\u0641\u064A \u0627\u0644\u0639\u0634\u064A\u0629",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
    },
    wide: {
        am: "\u0635",
        pm: "\u0639",
        morning: "\u0641\u064A \u0627\u0644\u0635\u0628\u0627\u062D",
        noon: "\u0641\u064A \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        afternoon: "\u0628\u0639\u062F \u0627\u0644\u0642\u0627\u064A\u0644\u0629",
        evening: "\u0641\u064A \u0627\u0644\u0639\u0634\u064A\u0629",
        night: "\u0641\u064A \u0627\u0644\u0644\u064A\u0644",
        midnight: "\u0646\u0635 \u0627\u0644\u0644\u064A\u0644"
    }
};
const ordinalNumber = (num)=>String(num);
const localize = exports.localize = {
    ordinalNumber: ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"2dde3ea34ea5d5c3":"fGq1u"}],"d76A4":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("2706a333a0c6c42c");
var _index2 = require("8c3824b304259737");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /[قب]/,
    abbreviated: /[قب]\.م\./,
    wide: /(قبل|بعد) الميلاد/
};
const parseEraPatterns = {
    any: [
        /قبل/,
        /بعد/
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /ر[1234]/,
    wide: /الربع (الأول|الثاني|الثالث|الرابع)/
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[جفمأسند]/,
    abbreviated: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/,
    wide: /^(جانفي|فيفري|مارس|أفريل|ماي|جوان|جويلية|أوت|سبتمبر|أكتوبر|نوفمبر|ديسمبر)/
};
const parseMonthPatterns = {
    narrow: [
        /^ج/i,
        /^ف/i,
        /^م/i,
        /^أ/i,
        /^م/i,
        /^ج/i,
        /^ج/i,
        /^أ/i,
        /^س/i,
        /^أ/i,
        /^ن/i,
        /^د/i
    ],
    any: [
        /^جانفي/i,
        /^فيفري/i,
        /^مارس/i,
        /^أفريل/i,
        /^ماي/i,
        /^جوان/i,
        /^جويلية/i,
        /^أوت/i,
        /^سبتمبر/i,
        /^أكتوبر/i,
        /^نوفمبر/i,
        /^ديسمبر/i
    ]
};
const matchDayPatterns = {
    narrow: /^[حنثرخجس]/i,
    short: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
    abbreviated: /^(أحد|اثنين|ثلاثاء|أربعاء|خميس|جمعة|سبت)/i,
    wide: /^(الأحد|الاثنين|الثلاثاء|الأربعاء|الخميس|الجمعة|السبت)/i
};
const parseDayPatterns = {
    narrow: [
        /^ح/i,
        /^ن/i,
        /^ث/i,
        /^ر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ],
    wide: [
        /^الأحد/i,
        /^الاثنين/i,
        /^الثلاثاء/i,
        /^الأربعاء/i,
        /^الخميس/i,
        /^الجمعة/i,
        /^السبت/i
    ],
    any: [
        /^أح/i,
        /^اث/i,
        /^ث/i,
        /^أر/i,
        /^خ/i,
        /^ج/i,
        /^س/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ص|ع|ن ل|ل|(في|مع) (صباح|قايلة|عشية|ليل))/,
    any: /^([صع]|نص الليل|قايلة|(في|مع) (صباح|قايلة|عشية|ليل))/
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ص/,
        pm: /^ع/,
        midnight: /نص الليل/,
        noon: /قايلة/,
        afternoon: /بعد القايلة/,
        morning: /صباح/,
        evening: /عشية/,
        night: /ليل/
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"2706a333a0c6c42c":"kWqg8","8c3824b304259737":"15lWd"}],"4WOJl":[function(require,module,exports) {
"use strict";
exports.az = void 0;
var _index = require("63f5581862ec7483");
var _index2 = require("9f82fa988f50ec9a");
var _index3 = require("1f36350bf9c688d9");
var _index4 = require("68ea126658402551");
var _index5 = require("1c38065a56e76490");
/**
 * @category Locales
 * @summary Azerbaijani locale.
 * @language Azerbaijani
 * @iso-639-2 aze
 */ const az = exports.az = {
    code: "az",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 1
    }
};

},{"63f5581862ec7483":"8nP2a","9f82fa988f50ec9a":"ewaPx","1f36350bf9c688d9":"f2WCV","68ea126658402551":"26KkI","1c38065a56e76490":"2esAS"}],"8nP2a":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "bir saniy\u0259d\u0259n az",
        other: "{{count}} bir saniy\u0259d\u0259n az"
    },
    xSeconds: {
        one: "1 saniy\u0259",
        other: "{{count}} saniy\u0259"
    },
    halfAMinute: "yar\u0131m d\u0259qiq\u0259",
    lessThanXMinutes: {
        one: "bir d\u0259qiq\u0259d\u0259n az",
        other: "{{count}} bir d\u0259qiq\u0259d\u0259n az"
    },
    xMinutes: {
        one: "bir d\u0259qiq\u0259",
        other: "{{count}} d\u0259qiq\u0259"
    },
    aboutXHours: {
        one: "t\u0259xmin\u0259n 1 saat",
        other: "t\u0259xmin\u0259n {{count}} saat"
    },
    xHours: {
        one: "1 saat",
        other: "{{count}} saat"
    },
    xDays: {
        one: "1 g\xfcn",
        other: "{{count}} g\xfcn"
    },
    aboutXWeeks: {
        one: "t\u0259xmin\u0259n 1 h\u0259ft\u0259",
        other: "t\u0259xmin\u0259n {{count}} h\u0259ft\u0259"
    },
    xWeeks: {
        one: "1 h\u0259ft\u0259",
        other: "{{count}} h\u0259ft\u0259"
    },
    aboutXMonths: {
        one: "t\u0259xmin\u0259n 1 ay",
        other: "t\u0259xmin\u0259n {{count}} ay"
    },
    xMonths: {
        one: "1 ay",
        other: "{{count}} ay"
    },
    aboutXYears: {
        one: "t\u0259xmin\u0259n 1 il",
        other: "t\u0259xmin\u0259n {{count}} il"
    },
    xYears: {
        one: "1 il",
        other: "{{count}} il"
    },
    overXYears: {
        one: "1 ild\u0259n \xe7ox",
        other: "{{count}} ild\u0259n \xe7ox"
    },
    almostXYears: {
        one: "dem\u0259k olar ki 1 il",
        other: "dem\u0259k olar ki {{count}} il"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + " sonra";
        else return result + " \u0259vv\u0259l";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"ewaPx":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("c309ad678224c7d7");
const dateFormats = {
    full: "EEEE, do MMMM y 'il'",
    long: "do MMMM y 'il'",
    medium: "d MMM y 'il'",
    short: "dd.MM.yyyy"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}} - 'd\u0259'",
    long: "{{date}} {{time}} - 'd\u0259'",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"c309ad678224c7d7":"6OYyu"}],"f2WCV":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'sonuncu' eeee p -'d\u0259'",
    yesterday: "'d\xfcn\u0259n' p -'d\u0259'",
    today: "'bug\xfcn' p -'d\u0259'",
    tomorrow: "'sabah' p -'d\u0259'",
    nextWeek: "eeee p -'d\u0259'",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"26KkI":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("38415e137f52b1a5");
const eraValues = {
    narrow: [
        "e.\u0259",
        "b.e"
    ],
    abbreviated: [
        "e.\u0259",
        "b.e"
    ],
    wide: [
        "eram\u0131zdan \u0259vv\u0259l",
        "bizim era"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "1ci kvartal",
        "2ci kvartal",
        "3c\xfc kvartal",
        "4c\xfc kvartal"
    ]
};
const monthValues = {
    narrow: [
        "Y",
        "F",
        "M",
        "A",
        "M",
        "\u0130",
        "\u0130",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Yan",
        "Fev",
        "Mar",
        "Apr",
        "May",
        "\u0130yun",
        "\u0130yul",
        "Avq",
        "Sen",
        "Okt",
        "Noy",
        "Dek"
    ],
    wide: [
        "Yanvar",
        "Fevral",
        "Mart",
        "Aprel",
        "May",
        "\u0130yun",
        "\u0130yul",
        "Avqust",
        "Sentyabr",
        "Oktyabr",
        "Noyabr",
        "Dekabr"
    ]
};
const dayValues = {
    narrow: [
        "B.",
        "B.e",
        "\xc7.a",
        "\xc7.",
        "C.a",
        "C.",
        "\u015E."
    ],
    short: [
        "B.",
        "B.e",
        "\xc7.a",
        "\xc7.",
        "C.a",
        "C.",
        "\u015E."
    ],
    abbreviated: [
        "Baz",
        "Baz.e",
        "\xc7\u0259r.a",
        "\xc7\u0259r",
        "C\xfcm.a",
        "C\xfcm",
        "\u015E\u0259"
    ],
    wide: [
        "Bazar",
        "Bazar ert\u0259si",
        "\xc7\u0259r\u015F\u0259nb\u0259 ax\u015Fam\u0131",
        "\xc7\u0259r\u015F\u0259nb\u0259",
        "C\xfcm\u0259 ax\u015Fam\u0131",
        "C\xfcm\u0259",
        "\u015E\u0259nb\u0259"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "gec\u0259yar\u0131",
        noon: "g\xfcn",
        morning: "s\u0259h\u0259r",
        afternoon: "g\xfcnd\xfcz",
        evening: "ax\u015Fam",
        night: "gec\u0259"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "gec\u0259yar\u0131",
        noon: "g\xfcn",
        morning: "s\u0259h\u0259r",
        afternoon: "g\xfcnd\xfcz",
        evening: "ax\u015Fam",
        night: "gec\u0259"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gec\u0259yar\u0131",
        noon: "g\xfcn",
        morning: "s\u0259h\u0259r",
        afternoon: "g\xfcnd\xfcz",
        evening: "ax\u015Fam",
        night: "gec\u0259"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "gec\u0259yar\u0131",
        noon: "g\xfcn",
        morning: "s\u0259h\u0259r",
        afternoon: "g\xfcnd\xfcz",
        evening: "ax\u015Fam",
        night: "gec\u0259"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "gec\u0259yar\u0131",
        noon: "g\xfcn",
        morning: "s\u0259h\u0259r",
        afternoon: "g\xfcnd\xfcz",
        evening: "ax\u015Fam",
        night: "gec\u0259"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gec\u0259yar\u0131",
        noon: "g\xfcn",
        morning: "s\u0259h\u0259r",
        afternoon: "g\xfcnd\xfcz",
        evening: "ax\u015Fam",
        night: "gec\u0259"
    }
};
const suffixes = {
    1: "-inci",
    5: "-inci",
    8: "-inci",
    70: "-inci",
    80: "-inci",
    2: "-nci",
    7: "-nci",
    20: "-nci",
    50: "-nci",
    3: "-\xfcnc\xfc",
    4: "-\xfcnc\xfc",
    100: "-\xfcnc\xfc",
    6: "-nc\u0131",
    9: "-uncu",
    10: "-uncu",
    30: "-uncu",
    60: "-\u0131nc\u0131",
    90: "-\u0131nc\u0131"
};
const getSuffix = (number)=>{
    if (number === 0) // special case for zero
    return number + "-\u0131nc\u0131";
    const a = number % 10;
    const b = number % 100 - a;
    const c = number >= 100 ? 100 : null;
    if (suffixes[a]) return suffixes[a];
    else if (suffixes[b]) return suffixes[b];
    else if (c !== null) return suffixes[c];
    return "";
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    const suffix = getSuffix(number);
    return number + suffix;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"38415e137f52b1a5":"fGq1u"}],"2esAS":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("e1949435cf975ede");
var _index2 = require("5f8c11557d88627f");
const matchOrdinalNumberPattern = /^(\d+)(-?(ci|inci|nci|uncu|üncü|ncı))?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(b|a)$/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)$/i,
    wide: /^(bizim eradan əvvəl|bizim era)$/i
};
const parseEraPatterns = {
    any: [
        /^b$/i,
        /^(a|c)$/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]$/i,
    abbreviated: /^K[1234]$/i,
    wide: /^[1234](ci)? kvartal$/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[(?-i)yfmaisond]$/i,
    abbreviated: /^(Yan|Fev|Mar|Apr|May|İyun|İyul|Avq|Sen|Okt|Noy|Dek)$/i,
    wide: /^(Yanvar|Fevral|Mart|Aprel|May|İyun|İyul|Avgust|Sentyabr|Oktyabr|Noyabr|Dekabr)$/i
};
const parseMonthPatterns = {
    narrow: [
        /^[(?-i)y]$/i,
        /^[(?-i)f]$/i,
        /^[(?-i)m]$/i,
        /^[(?-i)a]$/i,
        /^[(?-i)m]$/i,
        /^[(?-i)i]$/i,
        /^[(?-i)i]$/i,
        /^[(?-i)a]$/i,
        /^[(?-i)s]$/i,
        /^[(?-i)o]$/i,
        /^[(?-i)n]$/i,
        /^[(?-i)d]$/i
    ],
    abbreviated: [
        /^Yan$/i,
        /^Fev$/i,
        /^Mar$/i,
        /^Apr$/i,
        /^May$/i,
        /^İyun$/i,
        /^İyul$/i,
        /^Avg$/i,
        /^Sen$/i,
        /^Okt$/i,
        /^Noy$/i,
        /^Dek$/i
    ],
    wide: [
        /^Yanvar$/i,
        /^Fevral$/i,
        /^Mart$/i,
        /^Aprel$/i,
        /^May$/i,
        /^İyun$/i,
        /^İyul$/i,
        /^Avgust$/i,
        /^Sentyabr$/i,
        /^Oktyabr$/i,
        /^Noyabr$/i,
        /^Dekabr$/i
    ]
};
const matchDayPatterns = {
    narrow: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
    short: /^(B\.|B\.e|Ç\.a|Ç\.|C\.a|C\.|Ş\.)$/i,
    abbreviated: /^(Baz\.e|Çər|Çər\.a|Cüm|Cüm\.a|Şə)$/i,
    wide: /^(Bazar|Bazar ertəsi|Çərşənbə axşamı|Çərşənbə|Cümə axşamı|Cümə|Şənbə)$/i
};
const parseDayPatterns = {
    narrow: [
        /^B\.$/i,
        /^B\.e$/i,
        /^Ç\.a$/i,
        /^Ç\.$/i,
        /^C\.a$/i,
        /^C\.$/i,
        /^Ş\.$/i
    ],
    abbreviated: [
        /^Baz$/i,
        /^Baz\.e$/i,
        /^Çər\.a$/i,
        /^Çər$/i,
        /^Cüm\.a$/i,
        /^Cüm$/i,
        /^Şə$/i
    ],
    wide: [
        /^Bazar$/i,
        /^Bazar ertəsi$/i,
        /^Çərşənbə axşamı$/i,
        /^Çərşənbə$/i,
        /^Cümə axşamı$/i,
        /^Cümə$/i,
        /^Şənbə$/i
    ],
    any: [
        /^B\.$/i,
        /^B\.e$/i,
        /^Ç\.a$/i,
        /^Ç\.$/i,
        /^C\.a$/i,
        /^C\.$/i,
        /^Ş\.$/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i,
    any: /^(am|pm|a\.m\.|p\.m\.|AM|PM|gecəyarı|gün|səhər|gündüz|axşam|gecə)$/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a$/i,
        pm: /^p$/i,
        midnight: /^gecəyarı$/i,
        noon: /^gün$/i,
        morning: /səhər$/i,
        afternoon: /gündüz$/i,
        evening: /axşam$/i,
        night: /gecə$/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "narrow"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"e1949435cf975ede":"15lWd","5f8c11557d88627f":"kWqg8"}],"5Vgj8":[function(require,module,exports) {
"use strict";
exports.be = void 0;
var _index = require("cf305dd0d7475c15");
var _index2 = require("f17257b6dd1046d1");
var _index3 = require("31230c836ccfb6ab");
var _index4 = require("e11ed060dd70c5b7");
var _index5 = require("709356b00fd80817");
/**
 * @category Locales
 * @summary Belarusian locale.
 * @language Belarusian
 * @iso-639-2 bel
 * @author Kiryl Anokhin [@alyrik](https://github.com/alyrik)
 * @author Martin Wind [@arvigeus](https://github.com/mawi12345)
 */ const be = exports.be = {
    code: "be",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"cf305dd0d7475c15":"bsHc8","f17257b6dd1046d1":"4zgCG","31230c836ccfb6ab":"3vBh9","e11ed060dd70c5b7":"eEcRo","709356b00fd80817":"hnJ4k"}],"bsHc8":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function declension(scheme, count) {
    // scheme for count=1 exists
    if (scheme.one !== undefined && count === 1) return scheme.one;
    const rem10 = count % 10;
    const rem100 = count % 100;
    // 1, 21, 31, ...
    if (rem10 === 1 && rem100 !== 11) return scheme.singularNominative.replace("{{count}}", String(count));
    else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) return scheme.singularGenitive.replace("{{count}}", String(count));
    else return scheme.pluralGenitive.replace("{{count}}", String(count));
}
function buildLocalizeTokenFn(scheme) {
    return (count, options)=>{
        if (options && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                if (scheme.future) return declension(scheme.future, count);
                else return "\u043F\u0440\u0430\u0437 " + declension(scheme.regular, count);
            } else {
                if (scheme.past) return declension(scheme.past, count);
                else return declension(scheme.regular, count) + " \u0442\u0430\u043C\u0443";
            }
        } else return declension(scheme.regular, count);
    };
}
const halfAMinute = (_, options)=>{
    if (options && options.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u043F\u0440\u0430\u0437 \u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B";
        else return "\u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B \u0442\u0430\u043C\u0443";
    }
    return "\u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B";
};
const formatDistanceLocale = {
    lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
            one: "\u043C\u0435\u043D\u0448 \u0437\u0430 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        future: {
            one: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        }
    }),
    xSeconds: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        past: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443 \u0442\u0430\u043C\u0443",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B \u0442\u0430\u043C\u0443",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0442\u0430\u043C\u0443"
        },
        future: {
            singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        }
    }),
    halfAMinute: halfAMinute,
    lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
            one: "\u043C\u0435\u043D\u0448 \u0437\u0430 \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
        },
        future: {
            one: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
        }
    }),
    xMinutes: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0430",
            singularGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
            pluralGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
        },
        past: {
            singularNominative: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443 \u0442\u0430\u043C\u0443",
            singularGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B \u0442\u0430\u043C\u0443",
            pluralGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D \u0442\u0430\u043C\u0443"
        },
        future: {
            singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
            pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
        }
    }),
    aboutXHours: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
            singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D",
            pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
        },
        future: {
            singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443",
            singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
            pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
        }
    }),
    xHours: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0430",
            singularGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
            pluralGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
        },
        past: {
            singularNominative: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443 \u0442\u0430\u043C\u0443",
            singularGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B \u0442\u0430\u043C\u0443",
            pluralGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D \u0442\u0430\u043C\u0443"
        },
        future: {
            singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443",
            singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
            pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
        }
    }),
    xDays: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0434\u0437\u0435\u043D\u044C",
            singularGenitive: "{{count}} \u0434\u043D\u0456",
            pluralGenitive: "{{count}} \u0434\u0437\u0451\u043D"
        }
    }),
    aboutXWeeks: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0442\u044B\u0434\u043D\u0456",
            singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0442\u044B\u0434\u043D\u044F\u045E",
            pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0442\u044B\u0434\u043D\u044F\u045E"
        },
        future: {
            singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0442\u044B\u0434\u0437\u0435\u043D\u044C",
            singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0442\u044B\u0434\u043D\u0456",
            pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0442\u044B\u0434\u043D\u044F\u045E"
        }
    }),
    xWeeks: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0442\u044B\u0434\u0437\u0435\u043D\u044C",
            singularGenitive: "{{count}} \u0442\u044B\u0434\u043D\u0456",
            pluralGenitive: "{{count}} \u0442\u044B\u0434\u043D\u044F\u045E"
        }
    }),
    aboutXMonths: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
            singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E",
            pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
        },
        future: {
            singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446",
            singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
            pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
        }
    }),
    xMonths: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u043C\u0435\u0441\u044F\u0446",
            singularGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
            pluralGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
        }
    }),
    aboutXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0433\u043E\u0434\u0430",
            singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u043E\u045E",
            pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u043E\u045E"
        },
        future: {
            singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
        }
    }),
    xYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0433\u043E\u0434",
            singularGenitive: "{{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "{{count}} \u0433\u0430\u0434\u043E\u045E"
        }
    }),
    overXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u0430\u0434\u043E\u045E"
        },
        future: {
            singularNominative: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
        }
    }),
    almostXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u0430\u0434\u043E\u045E"
        },
        future: {
            singularNominative: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
        }
    })
};
const formatDistance = (token, count, options)=>{
    options = options || {};
    return formatDistanceLocale[token](count, options);
};
exports.formatDistance = formatDistance;

},{}],"4zgCG":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("55e527f8211ead3b");
const dateFormats = {
    full: "EEEE, d MMMM y '\u0433.'",
    long: "d MMMM y '\u0433.'",
    medium: "d MMM y '\u0433.'",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    any: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"55e527f8211ead3b":"6OYyu"}],"3vBh9":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("b59e26971ef2ae7b");
var _index2 = require("14051c63e252b2f1");
const accusativeWeekdays = [
    "\u043D\u044F\u0434\u0437\u0435\u043B\u044E",
    "\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A",
    "\u0430\u045E\u0442\u043E\u0440\u0430\u043A",
    "\u0441\u0435\u0440\u0430\u0434\u0443",
    "\u0447\u0430\u0446\u0432\u0435\u0440",
    "\u043F\u044F\u0442\u043D\u0456\u0446\u0443",
    "\u0441\u0443\u0431\u043E\u0442\u0443"
];
function lastWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
        case 3:
        case 5:
        case 6:
            return "'\u0443 \u043C\u0456\u043D\u0443\u043B\u0443\u044E " + weekday + " \u0430' p";
        case 1:
        case 2:
        case 4:
            return "'\u0443 \u043C\u0456\u043D\u0443\u043B\u044B " + weekday + " \u0430' p";
    }
}
function thisWeek(day) {
    const weekday = accusativeWeekdays[day];
    return "'\u0443 " + weekday + " \u0430' p";
}
function nextWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
        case 3:
        case 5:
        case 6:
            return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443\u044E " + weekday + " \u0430' p";
        case 1:
        case 2:
        case 4:
            return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u044B " + weekday + " \u0430' p";
    }
}
const lastWeekFormat = (dirtyDate, baseDate, options)=>{
    const date = (0, _index2.toDate)(dirtyDate);
    const day = date.getDay();
    if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
    else return lastWeek(day);
};
const nextWeekFormat = (dirtyDate, baseDate, options)=>{
    const date = (0, _index2.toDate)(dirtyDate);
    const day = date.getDay();
    if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
    else return nextWeek(day);
};
const formatRelativeLocale = {
    lastWeek: lastWeekFormat,
    yesterday: "'\u0443\u0447\u043E\u0440\u0430 \u0430' p",
    today: "'\u0441\u0451\u043D\u043D\u044F \u0430' p",
    tomorrow: "'\u0437\u0430\u045E\u0442\u0440\u0430 \u0430' p",
    nextWeek: nextWeekFormat,
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"b59e26971ef2ae7b":"16SmB","14051c63e252b2f1":"actWA"}],"eEcRo":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("5859311c53424db1");
const eraValues = {
    narrow: [
        "\u0434\u0430 \u043D.\u044D.",
        "\u043D.\u044D."
    ],
    abbreviated: [
        "\u0434\u0430 \u043D. \u044D.",
        "\u043D. \u044D."
    ],
    wide: [
        "\u0434\u0430 \u043D\u0430\u0448\u0430\u0439 \u044D\u0440\u044B",
        "\u043D\u0430\u0448\u0430\u0439 \u044D\u0440\u044B"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u044B \u043A\u0432.",
        "2-\u0456 \u043A\u0432.",
        "3-\u0456 \u043A\u0432.",
        "4-\u044B \u043A\u0432."
    ],
    wide: [
        "1-\u044B \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "2-\u0456 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "3-\u0456 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "4-\u044B \u043A\u0432\u0430\u0440\u0442\u0430\u043B"
    ]
};
const monthValues = {
    narrow: [
        "\u0421",
        "\u041B",
        "\u0421",
        "\u041A",
        "\u041C",
        "\u0427",
        "\u041B",
        "\u0416",
        "\u0412",
        "\u041A",
        "\u041B",
        "\u0421"
    ],
    abbreviated: [
        "\u0441\u0442\u0443\u0434\u0437.",
        "\u043B\u044E\u0442.",
        "\u0441\u0430\u043A.",
        "\u043A\u0440\u0430\u0441.",
        "\u043C\u0430\u0439",
        "\u0447\u044D\u0440\u0432.",
        "\u043B\u0456\u043F.",
        "\u0436\u043D.",
        "\u0432\u0435\u0440.",
        "\u043A\u0430\u0441\u0442\u0440.",
        "\u043B\u0456\u0441\u0442.",
        "\u0441\u043D\u0435\u0436."
    ],
    wide: [
        "\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044C",
        "\u043B\u044E\u0442\u044B",
        "\u0441\u0430\u043A\u0430\u0432\u0456\u043A",
        "\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A",
        "\u043C\u0430\u0439",
        "\u0447\u044D\u0440\u0432\u0435\u043D\u044C",
        "\u043B\u0456\u043F\u0435\u043D\u044C",
        "\u0436\u043D\u0456\u0432\u0435\u043D\u044C",
        "\u0432\u0435\u0440\u0430\u0441\u0435\u043D\u044C",
        "\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A",
        "\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434",
        "\u0441\u043D\u0435\u0436\u0430\u043D\u044C"
    ]
};
const formattingMonthValues = {
    narrow: [
        "\u0421",
        "\u041B",
        "\u0421",
        "\u041A",
        "\u041C",
        "\u0427",
        "\u041B",
        "\u0416",
        "\u0412",
        "\u041A",
        "\u041B",
        "\u0421"
    ],
    abbreviated: [
        "\u0441\u0442\u0443\u0434\u0437.",
        "\u043B\u044E\u0442.",
        "\u0441\u0430\u043A.",
        "\u043A\u0440\u0430\u0441.",
        "\u043C\u0430\u044F",
        "\u0447\u044D\u0440\u0432.",
        "\u043B\u0456\u043F.",
        "\u0436\u043D.",
        "\u0432\u0435\u0440.",
        "\u043A\u0430\u0441\u0442\u0440.",
        "\u043B\u0456\u0441\u0442.",
        "\u0441\u043D\u0435\u0436."
    ],
    wide: [
        "\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044F",
        "\u043B\u044E\u0442\u0430\u0433\u0430",
        "\u0441\u0430\u043A\u0430\u0432\u0456\u043A\u0430",
        "\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A\u0430",
        "\u043C\u0430\u044F",
        "\u0447\u044D\u0440\u0432\u0435\u043D\u044F",
        "\u043B\u0456\u043F\u0435\u043D\u044F",
        "\u0436\u043D\u0456\u045E\u043D\u044F",
        "\u0432\u0435\u0440\u0430\u0441\u043D\u044F",
        "\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A\u0430",
        "\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434\u0430",
        "\u0441\u043D\u0435\u0436\u043D\u044F"
    ]
};
const dayValues = {
    narrow: [
        "\u041D",
        "\u041F",
        "\u0410",
        "\u0421",
        "\u0427",
        "\u041F",
        "\u0421"
    ],
    short: [
        "\u043D\u0434",
        "\u043F\u043D",
        "\u0430\u045E",
        "\u0441\u0440",
        "\u0447\u0446",
        "\u043F\u0442",
        "\u0441\u0431"
    ],
    abbreviated: [
        "\u043D\u044F\u0434\u0437",
        "\u043F\u0430\u043D",
        "\u0430\u045E\u0442",
        "\u0441\u0435\u0440",
        "\u0447\u0430\u0446",
        "\u043F\u044F\u0442",
        "\u0441\u0443\u0431"
    ],
    wide: [
        "\u043D\u044F\u0434\u0437\u0435\u043B\u044F",
        "\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A",
        "\u0430\u045E\u0442\u043E\u0440\u0430\u043A",
        "\u0441\u0435\u0440\u0430\u0434\u0430",
        "\u0447\u0430\u0446\u0432\u0435\u0440",
        "\u043F\u044F\u0442\u043D\u0456\u0446\u0430",
        "\u0441\u0443\u0431\u043E\u0442\u0430"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D.",
        noon: "\u043F\u043E\u045E\u0434.",
        morning: "\u0440\u0430\u043D.",
        afternoon: "\u0434\u0437\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447"
    },
    abbreviated: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D.",
        noon: "\u043F\u043E\u045E\u0434.",
        morning: "\u0440\u0430\u043D.",
        afternoon: "\u0434\u0437\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447"
    },
    wide: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D\u0430\u0447",
        noon: "\u043F\u043E\u045E\u0434\u0437\u0435\u043D\u044C",
        morning: "\u0440\u0430\u043D\u0456\u0446\u0430",
        afternoon: "\u0434\u0437\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447\u0430\u0440",
        night: "\u043D\u043E\u0447"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D.",
        noon: "\u043F\u043E\u045E\u0434.",
        morning: "\u0440\u0430\u043D.",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u044B"
    },
    abbreviated: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D.",
        noon: "\u043F\u043E\u045E\u0434.",
        morning: "\u0440\u0430\u043D.",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u044B"
    },
    wide: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D\u0430\u0447",
        noon: "\u043F\u043E\u045E\u0434\u0437\u0435\u043D\u044C",
        morning: "\u0440\u0430\u043D\u0456\u0446\u044B",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447\u0430\u0440\u0430",
        night: "\u043D\u043E\u0447\u044B"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const unit = String(options?.unit);
    const number = Number(dirtyNumber);
    let suffix;
    /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
   *  For date-month combinations should be used `d` formatter.
   *  Correct:   `d MMMM` (4 верасня)
   *  Incorrect: `do MMMM` (4-га верасня)
   *
   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
   *  So for phrase "5th day of month" (`do дзень месяца`)
   *  library will produce:            `5-га дзень месяца`
   *  but correct spelling should be:  `5-ы дзень месяца`
   *
   *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
   */ if (unit === "date") suffix = "-\u0433\u0430";
    else if (unit === "hour" || unit === "minute" || unit === "second") suffix = "-\u044F";
    else suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? "-\u0456" : "-\u044B";
    return number + suffix;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"5859311c53424db1":"fGq1u"}],"hnJ4k":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("145cc4ef1c46d34a");
var _index2 = require("61aac8373abdc74d");
const matchOrdinalNumberPattern = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^((да )?н\.?\s?э\.?)/i,
    abbreviated: /^((да )?н\.?\s?э\.?)/i,
    wide: /^(да нашай эры|нашай эры|наша эра)/i
};
const parseEraPatterns = {
    any: [
        /^д/i,
        /^н/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
    wide: /^[1234](-?[ыі]?)? квартал/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[слкмчжв]/i,
    abbreviated: /^(студз|лют|сак|крас|ма[йя]|чэрв|ліп|жн|вер|кастр|ліст|снеж)\.?/i,
    wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|ма[йя]|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|снеж(ань|ня))/i
};
const parseMonthPatterns = {
    narrow: [
        /^с/i,
        /^л/i,
        /^с/i,
        /^к/i,
        /^м/i,
        /^ч/i,
        /^л/i,
        /^ж/i,
        /^в/i,
        /^к/i,
        /^л/i,
        /^с/i
    ],
    any: [
        /^ст/i,
        /^лю/i,
        /^са/i,
        /^кр/i,
        /^ма/i,
        /^ч/i,
        /^ліп/i,
        /^ж/i,
        /^в/i,
        /^ка/i,
        /^ліс/i,
        /^сн/i
    ]
};
const matchDayPatterns = {
    narrow: /^[нпасч]/i,
    short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
    abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцв|чац|птн|пят|суб).?/i,
    wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацв(ер|ярга)|пятніц[аы]|субот[аы])/i
};
const parseDayPatterns = {
    narrow: [
        /^н/i,
        /^п/i,
        /^а/i,
        /^с/i,
        /^ч/i,
        /^п/i,
        /^с/i
    ],
    any: [
        /^н/i,
        /^п[ан]/i,
        /^а/i,
        /^с[ер]/i,
        /^ч/i,
        /^п[ят]/i,
        /^с[уб]/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
    abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
    wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^поўн/i,
        noon: /^поўд/i,
        morning: /^р/i,
        afternoon: /^д[зн]/i,
        evening: /^в/i,
        night: /^н/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"145cc4ef1c46d34a":"15lWd","61aac8373abdc74d":"kWqg8"}],"215qQ":[function(require,module,exports) {
"use strict";
exports.beTarask = void 0;
var _index = require("535aeffd349b0671");
var _index2 = require("e6229de472528537");
var _index3 = require("1326ccbc3664d38f");
var _index4 = require("cf5757d5a083952e");
var _index5 = require("50edc9b4e06c3c9c");
/**
 * @category Locales
 * @summary Belarusian Classic locale.
 * @language Belarusian Classic
 * @iso-639-2 bel
 * @author Ryhor Nopears [@nopears](https://github.com/nopears)
 */ const beTarask = exports.beTarask = {
    code: "be-tarask",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"535aeffd349b0671":"dCnyv","e6229de472528537":"5QIUo","1326ccbc3664d38f":"eUGAM","cf5757d5a083952e":"jCWzH","50edc9b4e06c3c9c":"b6zS0"}],"dCnyv":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function declension(scheme, count) {
    // scheme for count=1 exists
    if (scheme.one !== undefined && count === 1) return scheme.one;
    const rem10 = count % 10;
    const rem100 = count % 100;
    // 1, 21, 31, ...
    if (rem10 === 1 && rem100 !== 11) return scheme.singularNominative.replace("{{count}}", String(count));
    else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) return scheme.singularGenitive.replace("{{count}}", String(count));
    else return scheme.pluralGenitive.replace("{{count}}", String(count));
}
function buildLocalizeTokenFn(scheme) {
    return (count, options)=>{
        if (options && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                if (scheme.future) return declension(scheme.future, count);
                else return "\u043F\u0440\u0430\u0437 " + declension(scheme.regular, count);
            } else {
                if (scheme.past) return declension(scheme.past, count);
                else return declension(scheme.regular, count) + " \u0442\u0430\u043C\u0443";
            }
        } else return declension(scheme.regular, count);
    };
}
const halfAMinute = (_, options)=>{
    if (options && options.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u043F\u0440\u0430\u0437 \u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B";
        else return "\u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B \u0442\u0430\u043C\u0443";
    }
    return "\u043F\u0430\u045E\u0445\u0432\u0456\u043B\u0456\u043D\u044B";
};
const formatDistanceLocale = {
    lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
            one: "\u043C\u0435\u043D\u0448 \u0437\u0430 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        future: {
            one: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        }
    }),
    xSeconds: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        past: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443 \u0442\u0430\u043C\u0443",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B \u0442\u0430\u043C\u0443",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0442\u0430\u043C\u0443"
        },
        future: {
            singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        }
    }),
    halfAMinute: halfAMinute,
    lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
            one: "\u043C\u0435\u043D\u0448 \u0437\u0430 \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u0448 \u0437\u0430 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
        },
        future: {
            one: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
        }
    }),
    xMinutes: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0430",
            singularGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
            pluralGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
        },
        past: {
            singularNominative: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443 \u0442\u0430\u043C\u0443",
            singularGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B \u0442\u0430\u043C\u0443",
            pluralGenitive: "{{count}} \u0445\u0432\u0456\u043B\u0456\u043D \u0442\u0430\u043C\u0443"
        },
        future: {
            singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u0443",
            singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D\u044B",
            pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0445\u0432\u0456\u043B\u0456\u043D"
        }
    }),
    aboutXHours: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
            singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D",
            pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
        },
        future: {
            singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443",
            singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
            pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
        }
    }),
    xHours: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0430",
            singularGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
            pluralGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
        },
        past: {
            singularNominative: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443 \u0442\u0430\u043C\u0443",
            singularGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B \u0442\u0430\u043C\u0443",
            pluralGenitive: "{{count}} \u0433\u0430\u0434\u0437\u0456\u043D \u0442\u0430\u043C\u0443"
        },
        future: {
            singularNominative: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u0443",
            singularGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D\u044B",
            pluralGenitive: "\u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u0437\u0456\u043D"
        }
    }),
    xDays: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0434\u0437\u0435\u043D\u044C",
            singularGenitive: "{{count}} \u0434\u043D\u0456",
            pluralGenitive: "{{count}} \u0434\u0437\u0451\u043D"
        }
    }),
    aboutXWeeks: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0442\u044B\u0434\u043D\u0456",
            singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0442\u044B\u0434\u043D\u044F\u045E",
            pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0442\u044B\u0434\u043D\u044F\u045E"
        },
        future: {
            singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0442\u044B\u0434\u0437\u0435\u043D\u044C",
            singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0442\u044B\u0434\u043D\u0456",
            pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0442\u044B\u0434\u043D\u044F\u045E"
        }
    }),
    xWeeks: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0442\u044B\u0434\u0437\u0435\u043D\u044C",
            singularGenitive: "{{count}} \u0442\u044B\u0434\u043D\u0456",
            pluralGenitive: "{{count}} \u0442\u044B\u0434\u043D\u044F\u045E"
        }
    }),
    aboutXMonths: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
            singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E",
            pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
        },
        future: {
            singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446",
            singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
            pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
        }
    }),
    xMonths: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u043C\u0435\u0441\u044F\u0446",
            singularGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u044B",
            pluralGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0430\u045E"
        }
    }),
    aboutXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043A\u0430\u043B\u044F {{count}} \u0433\u043E\u0434\u0430",
            singularGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u043E\u045E",
            pluralGenitive: "\u043A\u0430\u043B\u044F {{count}} \u0433\u0430\u0434\u043E\u045E"
        },
        future: {
            singularNominative: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u043F\u0440\u044B\u0431\u043B\u0456\u0437\u043D\u0430 \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
        }
    }),
    xYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0433\u043E\u0434",
            singularGenitive: "{{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "{{count}} \u0433\u0430\u0434\u043E\u045E"
        }
    }),
    overXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u0431\u043E\u043B\u044C\u0448 \u0437\u0430 {{count}} \u0433\u0430\u0434\u043E\u045E"
        },
        future: {
            singularNominative: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u0431\u043E\u043B\u044C\u0448, \u0447\u044B\u043C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
        }
    }),
    almostXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u0430\u043C\u0430\u043B\u044C {{count}} \u0433\u0430\u0434\u043E\u045E"
        },
        future: {
            singularNominative: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u044B",
            pluralGenitive: "\u0430\u043C\u0430\u043B\u044C \u043F\u0440\u0430\u0437 {{count}} \u0433\u0430\u0434\u043E\u045E"
        }
    })
};
const formatDistance = (token, count, options)=>{
    options = options || {};
    return formatDistanceLocale[token](count, options);
};
exports.formatDistance = formatDistance;

},{}],"5QIUo":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("fe30610ca25f7358");
const dateFormats = {
    full: "EEEE, d MMMM y '\u0433.'",
    long: "d MMMM y '\u0433.'",
    medium: "d MMM y '\u0433.'",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    any: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"fe30610ca25f7358":"6OYyu"}],"eUGAM":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("5136c836acec0af8");
var _index2 = require("dfbe6d7d0e73dfb4");
const accusativeWeekdays = [
    "\u043D\u044F\u0434\u0437\u0435\u043B\u044E",
    "\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A",
    "\u0430\u045E\u0442\u043E\u0440\u0430\u043A",
    "\u0441\u0435\u0440\u0430\u0434\u0443",
    "\u0447\u0430\u0446\u044C\u0432\u0435\u0440",
    "\u043F\u044F\u0442\u043D\u0456\u0446\u0443",
    "\u0441\u0443\u0431\u043E\u0442\u0443"
];
function lastWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
        case 3:
        case 5:
        case 6:
            return "'\u0443 \u043C\u0456\u043D\u0443\u043B\u0443\u044E " + weekday + " \u0430' p";
        case 1:
        case 2:
        case 4:
            return "'\u0443 \u043C\u0456\u043D\u0443\u043B\u044B " + weekday + " \u0430' p";
    }
}
function thisWeek(day) {
    const weekday = accusativeWeekdays[day];
    return "'\u0443 " + weekday + " \u0430' p";
}
function nextWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
        case 3:
        case 5:
        case 6:
            return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443\u044E " + weekday + " \u0430' p";
        case 1:
        case 2:
        case 4:
            return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u044B " + weekday + " \u0430' p";
    }
}
const lastWeekFormat = (dirtyDate, baseDate, options)=>{
    const date = (0, _index2.toDate)(dirtyDate);
    const day = date.getDay();
    if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
    else return lastWeek(day);
};
const nextWeekFormat = (dirtyDate, baseDate, options)=>{
    const date = (0, _index2.toDate)(dirtyDate);
    const day = date.getDay();
    if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
    else return nextWeek(day);
};
const formatRelativeLocale = {
    lastWeek: lastWeekFormat,
    yesterday: "'\u0443\u0447\u043E\u0440\u0430 \u0430' p",
    today: "'\u0441\u0451\u043D\u044C\u043D\u044F \u0430' p",
    tomorrow: "'\u0437\u0430\u045E\u0442\u0440\u0430 \u0430' p",
    nextWeek: nextWeekFormat,
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"5136c836acec0af8":"16SmB","dfbe6d7d0e73dfb4":"actWA"}],"jCWzH":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("11ce67de6650b472");
const eraValues = {
    narrow: [
        "\u0434\u0430 \u043D.\u044D.",
        "\u043D.\u044D."
    ],
    abbreviated: [
        "\u0434\u0430 \u043D. \u044D.",
        "\u043D. \u044D."
    ],
    wide: [
        "\u0434\u0430 \u043D\u0430\u0448\u0430\u0439 \u044D\u0440\u044B",
        "\u043D\u0430\u0448\u0430\u0439 \u044D\u0440\u044B"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u044B \u043A\u0432.",
        "2-\u0456 \u043A\u0432.",
        "3-\u0456 \u043A\u0432.",
        "4-\u044B \u043A\u0432."
    ],
    wide: [
        "1-\u044B \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "2-\u0456 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "3-\u0456 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "4-\u044B \u043A\u0432\u0430\u0440\u0442\u0430\u043B"
    ]
};
const monthValues = {
    narrow: [
        "\u0421",
        "\u041B",
        "\u0421",
        "\u041A",
        "\u0422",
        "\u0427",
        "\u041B",
        "\u0416",
        "\u0412",
        "\u041A",
        "\u041B",
        "\u0421"
    ],
    abbreviated: [
        "\u0441\u0442\u0443\u0434\u0437.",
        "\u043B\u044E\u0442.",
        "\u0441\u0430\u043A.",
        "\u043A\u0440\u0430\u0441.",
        "\u0442\u0440\u0430\u0432.",
        "\u0447\u044D\u0440\u0432.",
        "\u043B\u0456\u043F.",
        "\u0436\u043D.",
        "\u0432\u0435\u0440.",
        "\u043A\u0430\u0441\u0442\u0440.",
        "\u043B\u0456\u0441\u0442.",
        "\u0441\u044C\u043D\u0435\u0436."
    ],
    wide: [
        "\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044C",
        "\u043B\u044E\u0442\u044B",
        "\u0441\u0430\u043A\u0430\u0432\u0456\u043A",
        "\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A",
        "\u0442\u0440\u0430\u0432\u0435\u043D\u044C",
        "\u0447\u044D\u0440\u0432\u0435\u043D\u044C",
        "\u043B\u0456\u043F\u0435\u043D\u044C",
        "\u0436\u043D\u0456\u0432\u0435\u043D\u044C",
        "\u0432\u0435\u0440\u0430\u0441\u0435\u043D\u044C",
        "\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A",
        "\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434",
        "\u0441\u044C\u043D\u0435\u0436\u0430\u043D\u044C"
    ]
};
const formattingMonthValues = {
    narrow: [
        "\u0421",
        "\u041B",
        "\u0421",
        "\u041A",
        "\u0422",
        "\u0427",
        "\u041B",
        "\u0416",
        "\u0412",
        "\u041A",
        "\u041B",
        "\u0421"
    ],
    abbreviated: [
        "\u0441\u0442\u0443\u0434\u0437.",
        "\u043B\u044E\u0442.",
        "\u0441\u0430\u043A.",
        "\u043A\u0440\u0430\u0441.",
        "\u0442\u0440\u0430\u0432.",
        "\u0447\u044D\u0440\u0432.",
        "\u043B\u0456\u043F.",
        "\u0436\u043D.",
        "\u0432\u0435\u0440.",
        "\u043A\u0430\u0441\u0442\u0440.",
        "\u043B\u0456\u0441\u0442.",
        "\u0441\u044C\u043D\u0435\u0436."
    ],
    wide: [
        "\u0441\u0442\u0443\u0434\u0437\u0435\u043D\u044F",
        "\u043B\u044E\u0442\u0430\u0433\u0430",
        "\u0441\u0430\u043A\u0430\u0432\u0456\u043A\u0430",
        "\u043A\u0440\u0430\u0441\u0430\u0432\u0456\u043A\u0430",
        "\u0442\u0440\u0430\u045E\u043D\u044F",
        "\u0447\u044D\u0440\u0432\u0435\u043D\u044F",
        "\u043B\u0456\u043F\u0435\u043D\u044F",
        "\u0436\u043D\u0456\u045E\u043D\u044F",
        "\u0432\u0435\u0440\u0430\u0441\u043D\u044F",
        "\u043A\u0430\u0441\u0442\u0440\u044B\u0447\u043D\u0456\u043A\u0430",
        "\u043B\u0456\u0441\u0442\u0430\u043F\u0430\u0434\u0430",
        "\u0441\u044C\u043D\u0435\u0436\u043D\u044F"
    ]
};
const dayValues = {
    narrow: [
        "\u041D",
        "\u041F",
        "\u0410",
        "\u0421",
        "\u0427",
        "\u041F",
        "\u0421"
    ],
    short: [
        "\u043D\u0434",
        "\u043F\u043D",
        "\u0430\u045E",
        "\u0441\u0440",
        "\u0447\u0446",
        "\u043F\u0442",
        "\u0441\u0431"
    ],
    abbreviated: [
        "\u043D\u044F\u0434\u0437",
        "\u043F\u0430\u043D",
        "\u0430\u045E\u0442",
        "\u0441\u0435\u0440",
        "\u0447\u0430\u0446\u044C",
        "\u043F\u044F\u0442",
        "\u0441\u0443\u0431"
    ],
    wide: [
        "\u043D\u044F\u0434\u0437\u0435\u043B\u044F",
        "\u043F\u0430\u043D\u044F\u0434\u0437\u0435\u043B\u0430\u043A",
        "\u0430\u045E\u0442\u043E\u0440\u0430\u043A",
        "\u0441\u0435\u0440\u0430\u0434\u0430",
        "\u0447\u0430\u0446\u044C\u0432\u0435\u0440",
        "\u043F\u044F\u0442\u043D\u0456\u0446\u0430",
        "\u0441\u0443\u0431\u043E\u0442\u0430"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D.",
        noon: "\u043F\u043E\u045E\u0434.",
        morning: "\u0440\u0430\u043D.",
        afternoon: "\u0434\u0437\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447"
    },
    abbreviated: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D.",
        noon: "\u043F\u043E\u045E\u0434.",
        morning: "\u0440\u0430\u043D.",
        afternoon: "\u0434\u0437\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447"
    },
    wide: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D\u0430\u0447",
        noon: "\u043F\u043E\u045E\u0434\u0437\u0435\u043D\u044C",
        morning: "\u0440\u0430\u043D\u0456\u0446\u0430",
        afternoon: "\u0434\u0437\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447\u0430\u0440",
        night: "\u043D\u043E\u0447"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D.",
        noon: "\u043F\u043E\u045E\u0434.",
        morning: "\u0440\u0430\u043D.",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u044B"
    },
    abbreviated: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D.",
        noon: "\u043F\u043E\u045E\u0434.",
        morning: "\u0440\u0430\u043D.",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u044B"
    },
    wide: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u045E\u043D\u0430\u0447",
        noon: "\u043F\u043E\u045E\u0434\u0437\u0435\u043D\u044C",
        morning: "\u0440\u0430\u043D\u0456\u0446\u044B",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447\u0430\u0440\u0430",
        night: "\u043D\u043E\u0447\u044B"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const unit = String(options?.unit);
    const number = Number(dirtyNumber);
    let suffix;
    /** Though it's an incorrect ordinal form of a date we use it here for consistency with other similar locales (ru, uk)
   *  For date-month combinations should be used `d` formatter.
   *  Correct:   `d MMMM` (4 верасня)
   *  Incorrect: `do MMMM` (4-га верасня)
   *
   *  But following the consistency leads to mistakes for literal uses of `do` formatter (ordinal day of month).
   *  So for phrase "5th day of month" (`do дзень месяца`)
   *  library will produce:            `5-га дзень месяца`
   *  but correct spelling should be:  `5-ы дзень месяца`
   *
   *  So I guess there should be a stand-alone and a formatting version of "day of month" formatters
   */ if (unit === "date") suffix = "-\u0433\u0430";
    else if (unit === "hour" || unit === "minute" || unit === "second") suffix = "-\u044F";
    else suffix = (number % 10 === 2 || number % 10 === 3) && number % 100 !== 12 && number % 100 !== 13 ? "-\u0456" : "-\u044B";
    return number + suffix;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"11ce67de6650b472":"fGq1u"}],"b6zS0":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("d6ed856dbf37975c");
var _index2 = require("f2ca1cd1a364282c");
const matchOrdinalNumberPattern = /^(\d+)(-?(е|я|га|і|ы|ае|ая|яя|шы|гі|ці|ты|мы))?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^((да )?н\.?\s?э\.?)/i,
    abbreviated: /^((да )?н\.?\s?э\.?)/i,
    wide: /^(да нашай эры|нашай эры|наша эра)/i
};
const parseEraPatterns = {
    any: [
        /^д/i,
        /^н/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234](-?[ыі]?)? кв.?/i,
    wide: /^[1234](-?[ыі]?)? квартал/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[слкмчжв]/i,
    abbreviated: /^(студз|лют|сак|крас|тр(ав)?|чэрв|ліп|жн|вер|кастр|ліст|сьнеж)\.?/i,
    wide: /^(студзен[ья]|лют(ы|ага)|сакавіка?|красавіка?|тра(вень|ўня)|чэрвен[ья]|ліпен[ья]|жні(вень|ўня)|верас(ень|ня)|кастрычніка?|лістапада?|сьнеж(ань|ня))/i
};
const parseMonthPatterns = {
    narrow: [
        /^с/i,
        /^л/i,
        /^с/i,
        /^к/i,
        /^т/i,
        /^ч/i,
        /^л/i,
        /^ж/i,
        /^в/i,
        /^к/i,
        /^л/i,
        /^с/i
    ],
    any: [
        /^ст/i,
        /^лю/i,
        /^са/i,
        /^кр/i,
        /^тр/i,
        /^ч/i,
        /^ліп/i,
        /^ж/i,
        /^в/i,
        /^ка/i,
        /^ліс/i,
        /^сн/i
    ]
};
const matchDayPatterns = {
    narrow: /^[нпасч]/i,
    short: /^(нд|ня|пн|па|аў|ат|ср|се|чц|ча|пт|пя|сб|су)\.?/i,
    abbreviated: /^(нядз?|ндз|пнд|пан|аўт|срд|сер|чцьв|чаць|птн|пят|суб).?/i,
    wide: /^(нядзел[яі]|панядзел(ак|ка)|аўтор(ак|ка)|серад[аы]|чацьв(ер|ярга)|пятніц[аы]|субот[аы])/i
};
const parseDayPatterns = {
    narrow: [
        /^н/i,
        /^п/i,
        /^а/i,
        /^с/i,
        /^ч/i,
        /^п/i,
        /^с/i
    ],
    any: [
        /^н/i,
        /^п[ан]/i,
        /^а/i,
        /^с[ер]/i,
        /^ч/i,
        /^п[ят]/i,
        /^с[уб]/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
    abbreviated: /^([дп]п|поўн\.?|поўд\.?|ран\.?|дзень|дня|веч\.?|ночы?)/i,
    wide: /^([дп]п|поўнач|поўдзень|раніц[аы]|дзень|дня|вечара?|ночы?)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^поўн/i,
        noon: /^поўд/i,
        morning: /^р/i,
        afternoon: /^д[зн]/i,
        evening: /^в/i,
        night: /^н/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"d6ed856dbf37975c":"15lWd","f2ca1cd1a364282c":"kWqg8"}],"g9Tvn":[function(require,module,exports) {
"use strict";
exports.bg = void 0;
var _index = require("898cf5cfce52f5d1");
var _index2 = require("81f76af74c53907c");
var _index3 = require("dd32ac2b0ebf8342");
var _index4 = require("78e504ec9dda1ccf");
var _index5 = require("5f4aced3fb7b8e68");
/**
 * @category Locales
 * @summary Bulgarian locale.
 * @language Bulgarian
 * @iso-639-2 bul
 * @author Nikolay Stoynov [@arvigeus](https://github.com/arvigeus)
 * @author Tsvetan Ovedenski [@fintara](https://github.com/fintara)
 */ const bg = exports.bg = {
    code: "bg",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"898cf5cfce52f5d1":"9fScG","81f76af74c53907c":"jrYMR","dd32ac2b0ebf8342":"cebWz","78e504ec9dda1ccf":"jEOVM","5f4aced3fb7b8e68":"7uKh6"}],"9fScG":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u043F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
        other: "\u043F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
    },
    xSeconds: {
        one: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
        other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
    },
    halfAMinute: "\u043F\u043E\u043B\u043E\u0432\u0438\u043D \u043C\u0438\u043D\u0443\u0442\u0430",
    lessThanXMinutes: {
        one: "\u043F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442 \u043C\u0438\u043D\u0443\u0442\u0430",
        other: "\u043F\u043E-\u043C\u0430\u043B\u043A\u043E \u043E\u0442 {{count}} \u043C\u0438\u043D\u0443\u0442\u0438"
    },
    xMinutes: {
        one: "1 \u043C\u0438\u043D\u0443\u0442\u0430",
        other: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0438"
    },
    aboutXHours: {
        one: "\u043E\u043A\u043E\u043B\u043E \u0447\u0430\u0441",
        other: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0447\u0430\u0441\u0430"
    },
    xHours: {
        one: "1 \u0447\u0430\u0441",
        other: "{{count}} \u0447\u0430\u0441\u0430"
    },
    xDays: {
        one: "1 \u0434\u0435\u043D",
        other: "{{count}} \u0434\u043D\u0438"
    },
    aboutXWeeks: {
        one: "\u043E\u043A\u043E\u043B\u043E \u0441\u0435\u0434\u043C\u0438\u0446\u0430",
        other: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0441\u0435\u0434\u043C\u0438\u0446\u0438"
    },
    xWeeks: {
        one: "1 \u0441\u0435\u0434\u043C\u0438\u0446\u0430",
        other: "{{count}} \u0441\u0435\u0434\u043C\u0438\u0446\u0438"
    },
    aboutXMonths: {
        one: "\u043E\u043A\u043E\u043B\u043E \u043C\u0435\u0441\u0435\u0446",
        other: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043C\u0435\u0441\u0435\u0446\u0430"
    },
    xMonths: {
        one: "1 \u043C\u0435\u0441\u0435\u0446",
        other: "{{count}} \u043C\u0435\u0441\u0435\u0446\u0430"
    },
    aboutXYears: {
        one: "\u043E\u043A\u043E\u043B\u043E \u0433\u043E\u0434\u0438\u043D\u0430",
        other: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
    },
    xYears: {
        one: "1 \u0433\u043E\u0434\u0438\u043D\u0430",
        other: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
    },
    overXYears: {
        one: "\u043D\u0430\u0434 \u0433\u043E\u0434\u0438\u043D\u0430",
        other: "\u043D\u0430\u0434 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
    },
    almostXYears: {
        one: "\u043F\u043E\u0447\u0442\u0438 \u0433\u043E\u0434\u0438\u043D\u0430",
        other: "\u043F\u043E\u0447\u0442\u0438 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0441\u043B\u0435\u0434 " + result;
        else return "\u043F\u0440\u0435\u0434\u0438 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"jrYMR":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("e21c745a44d6b7e");
const dateFormats = {
    full: "EEEE, dd MMMM yyyy",
    long: "dd MMMM yyyy",
    medium: "dd MMM yyyy",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    any: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"e21c745a44d6b7e":"6OYyu"}],"cebWz":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("d914a29b6c9bcfc");
var _index2 = require("49936eb00f3c9b03");
// Adapted from the `ru` translation
const weekdays = [
    "\u043D\u0435\u0434\u0435\u043B\u044F",
    "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A",
    "\u0432\u0442\u043E\u0440\u043D\u0438\u043A",
    "\u0441\u0440\u044F\u0434\u0430",
    "\u0447\u0435\u0442\u0432\u044A\u0440\u0442\u044A\u043A",
    "\u043F\u0435\u0442\u044A\u043A",
    "\u0441\u044A\u0431\u043E\u0442\u0430"
];
function lastWeek(day) {
    const weekday = weekdays[day];
    switch(day){
        case 0:
        case 3:
        case 6:
            return "'\u043C\u0438\u043D\u0430\u043B\u0430\u0442\u0430 " + weekday + " \u0432' p";
        case 1:
        case 2:
        case 4:
        case 5:
            return "'\u043C\u0438\u043D\u0430\u043B\u0438\u044F " + weekday + " \u0432' p";
    }
}
function thisWeek(day) {
    const weekday = weekdays[day];
    if (day === 2 /* Tue */ ) return "'\u0432\u044A\u0432 " + weekday + " \u0432' p";
    else return "'\u0432 " + weekday + " \u0432' p";
}
function nextWeek(day) {
    const weekday = weekdays[day];
    switch(day){
        case 0:
        case 3:
        case 6:
            return "'\u0441\u043B\u0435\u0434\u0432\u0430\u0449\u0430\u0442\u0430 " + weekday + " \u0432' p";
        case 1:
        case 2:
        case 4:
        case 5:
            return "'\u0441\u043B\u0435\u0434\u0432\u0430\u0449\u0438\u044F " + weekday + " \u0432' p";
    }
}
const lastWeekFormatToken = (dirtyDate, baseDate, options)=>{
    const date = (0, _index2.toDate)(dirtyDate);
    const day = date.getDay();
    if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
    else return lastWeek(day);
};
const nextWeekFormatToken = (dirtyDate, baseDate, options)=>{
    const date = (0, _index2.toDate)(dirtyDate);
    const day = date.getDay();
    if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
    else return nextWeek(day);
};
const formatRelativeLocale = {
    lastWeek: lastWeekFormatToken,
    yesterday: "'\u0432\u0447\u0435\u0440\u0430 \u0432' p",
    today: "'\u0434\u043D\u0435\u0441 \u0432' p",
    tomorrow: "'\u0443\u0442\u0440\u0435 \u0432' p",
    nextWeek: nextWeekFormatToken,
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"d914a29b6c9bcfc":"16SmB","49936eb00f3c9b03":"actWA"}],"jEOVM":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("e6cccfc788c51ea3");
const eraValues = {
    narrow: [
        "\u043F\u0440.\u043D.\u0435.",
        "\u043D.\u0435."
    ],
    abbreviated: [
        "\u043F\u0440\u0435\u0434\u0438 \u043D. \u0435.",
        "\u043D. \u0435."
    ],
    wide: [
        "\u043F\u0440\u0435\u0434\u0438 \u043D\u043E\u0432\u0430\u0442\u0430 \u0435\u0440\u0430",
        "\u043D\u043E\u0432\u0430\u0442\u0430 \u0435\u0440\u0430"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u0432\u043E \u0442\u0440\u0438\u043C\u0435\u0441.",
        "2-\u0440\u043E \u0442\u0440\u0438\u043C\u0435\u0441.",
        "3-\u0442\u043E \u0442\u0440\u0438\u043C\u0435\u0441.",
        "4-\u0442\u043E \u0442\u0440\u0438\u043C\u0435\u0441."
    ],
    wide: [
        "1-\u0432\u043E \u0442\u0440\u0438\u043C\u0435\u0441\u0435\u0447\u0438\u0435",
        "2-\u0440\u043E \u0442\u0440\u0438\u043C\u0435\u0441\u0435\u0447\u0438\u0435",
        "3-\u0442\u043E \u0442\u0440\u0438\u043C\u0435\u0441\u0435\u0447\u0438\u0435",
        "4-\u0442\u043E \u0442\u0440\u0438\u043C\u0435\u0441\u0435\u0447\u0438\u0435"
    ]
};
const monthValues = {
    abbreviated: [
        "\u044F\u043D\u0443",
        "\u0444\u0435\u0432",
        "\u043C\u0430\u0440",
        "\u0430\u043F\u0440",
        "\u043C\u0430\u0439",
        "\u044E\u043D\u0438",
        "\u044E\u043B\u0438",
        "\u0430\u0432\u0433",
        "\u0441\u0435\u043F",
        "\u043E\u043A\u0442",
        "\u043D\u043E\u0435",
        "\u0434\u0435\u043A"
    ],
    wide: [
        "\u044F\u043D\u0443\u0430\u0440\u0438",
        "\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438",
        "\u043C\u0430\u0440\u0442",
        "\u0430\u043F\u0440\u0438\u043B",
        "\u043C\u0430\u0439",
        "\u044E\u043D\u0438",
        "\u044E\u043B\u0438",
        "\u0430\u0432\u0433\u0443\u0441\u0442",
        "\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438",
        "\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438",
        "\u043D\u043E\u0435\u043C\u0432\u0440\u0438",
        "\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438"
    ]
};
const dayValues = {
    narrow: [
        "\u041D",
        "\u041F",
        "\u0412",
        "\u0421",
        "\u0427",
        "\u041F",
        "\u0421"
    ],
    short: [
        "\u043D\u0434",
        "\u043F\u043D",
        "\u0432\u0442",
        "\u0441\u0440",
        "\u0447\u0442",
        "\u043F\u0442",
        "\u0441\u0431"
    ],
    abbreviated: [
        "\u043D\u0435\u0434",
        "\u043F\u043E\u043D",
        "\u0432\u0442\u043E",
        "\u0441\u0440\u044F",
        "\u0447\u0435\u0442",
        "\u043F\u0435\u0442",
        "\u0441\u044A\u0431"
    ],
    wide: [
        "\u043D\u0435\u0434\u0435\u043B\u044F",
        "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A",
        "\u0432\u0442\u043E\u0440\u043D\u0438\u043A",
        "\u0441\u0440\u044F\u0434\u0430",
        "\u0447\u0435\u0442\u0432\u044A\u0440\u0442\u044A\u043A",
        "\u043F\u0435\u0442\u044A\u043A",
        "\u0441\u044A\u0431\u043E\u0442\u0430"
    ]
};
const dayPeriodValues = {
    wide: {
        am: "\u043F\u0440\u0435\u0434\u0438 \u043E\u0431\u044F\u0434",
        pm: "\u0441\u043B\u0435\u0434 \u043E\u0431\u044F\u0434",
        midnight: "\u0432 \u043F\u043E\u043B\u0443\u043D\u043E\u0449",
        noon: "\u043D\u0430 \u043E\u0431\u044F\u0434",
        morning: "\u0441\u0443\u0442\u0440\u0438\u043D\u0442\u0430",
        afternoon: "\u0441\u043B\u0435\u0434\u043E\u0431\u0435\u0434",
        evening: "\u0432\u0435\u0447\u0435\u0440\u0442\u0430",
        night: "\u043F\u0440\u0435\u0437 \u043D\u043E\u0449\u0442\u0430"
    }
};
function isFeminine(unit) {
    return unit === "year" || unit === "week" || unit === "minute" || unit === "second";
}
function isNeuter(unit) {
    return unit === "quarter";
}
function numberWithSuffix(number, unit, masculine, feminine, neuter) {
    const suffix = isNeuter(unit) ? neuter : isFeminine(unit) ? feminine : masculine;
    return number + "-" + suffix;
}
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = options?.unit;
    if (number === 0) return numberWithSuffix(0, unit, "\u0435\u0432", "\u0435\u0432\u0430", "\u0435\u0432\u043E");
    else if (number % 1000 === 0) return numberWithSuffix(number, unit, "\u0435\u043D", "\u043D\u0430", "\u043D\u043E");
    else if (number % 100 === 0) return numberWithSuffix(number, unit, "\u0442\u0435\u043D", "\u0442\u043D\u0430", "\u0442\u043D\u043E");
    const rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) switch(rem100 % 10){
        case 1:
            return numberWithSuffix(number, unit, "\u0432\u0438", "\u0432\u0430", "\u0432\u043E");
        case 2:
            return numberWithSuffix(number, unit, "\u0440\u0438", "\u0440\u0430", "\u0440\u043E");
        case 7:
        case 8:
            return numberWithSuffix(number, unit, "\u043C\u0438", "\u043C\u0430", "\u043C\u043E");
    }
    return numberWithSuffix(number, unit, "\u0442\u0438", "\u0442\u0430", "\u0442\u043E");
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"e6cccfc788c51ea3":"fGq1u"}],"7uKh6":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("cf9d90d16f93ca1a");
var _index2 = require("3287dae5a18c7f71");
const matchOrdinalNumberPattern = /^(\d+)(-?[врмт][аи]|-?т?(ен|на)|-?(ев|ева))?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^((пр)?н\.?\s?е\.?)/i,
    abbreviated: /^((пр)?н\.?\s?е\.?)/i,
    wide: /^(преди новата ера|новата ера|нова ера)/i
};
const parseEraPatterns = {
    any: [
        /^п/i,
        /^н/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234](-?[врт]?o?)? тримес.?/i,
    wide: /^[1234](-?[врт]?о?)? тримесечие/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchDayPatterns = {
    narrow: /^[нпвсч]/i,
    short: /^(нд|пн|вт|ср|чт|пт|сб)/i,
    abbreviated: /^(нед|пон|вто|сря|чет|пет|съб)/i,
    wide: /^(неделя|понеделник|вторник|сряда|четвъртък|петък|събота)/i
};
const parseDayPatterns = {
    narrow: [
        /^н/i,
        /^п/i,
        /^в/i,
        /^с/i,
        /^ч/i,
        /^п/i,
        /^с/i
    ],
    any: [
        /^н[ед]/i,
        /^п[он]/i,
        /^вт/i,
        /^ср/i,
        /^ч[ет]/i,
        /^п[ет]/i,
        /^с[ъб]/i
    ]
};
const matchMonthPatterns = {
    abbreviated: /^(яну|фев|мар|апр|май|юни|юли|авг|сеп|окт|ное|дек)/i,
    wide: /^(януари|февруари|март|април|май|юни|юли|август|септември|октомври|ноември|декември)/i
};
const parseMonthPatterns = {
    any: [
        /^я/i,
        /^ф/i,
        /^мар/i,
        /^ап/i,
        /^май/i,
        /^юн/i,
        /^юл/i,
        /^ав/i,
        /^се/i,
        /^окт/i,
        /^но/i,
        /^де/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(преди о|след о|в по|на о|през|веч|сут|следо)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^преди о/i,
        pm: /^след о/i,
        midnight: /^в пол/i,
        noon: /^на об/i,
        morning: /^сут/i,
        afternoon: /^следо/i,
        evening: /^веч/i,
        night: /^през н/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"cf9d90d16f93ca1a":"15lWd","3287dae5a18c7f71":"kWqg8"}],"5f4wy":[function(require,module,exports) {
"use strict";
exports.bn = void 0;
var _index = require("c72d52ddb2cb79a4");
var _index2 = require("a9900fc37277f6b5");
var _index3 = require("b9f42caeac1a88d5");
var _index4 = require("9f274b682a2f0d85");
var _index5 = require("8845ec07b725904");
/**
 * @category Locales
 * @summary Bengali locale.
 * @language Bengali
 * @iso-639-2 ben
 * @author Touhidur Rahman [@touhidrahman](https://github.com/touhidrahman)
 * @author Farhad Yasir [@nutboltu](https://github.com/nutboltu)
 */ const bn = exports.bn = {
    code: "bn",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"c72d52ddb2cb79a4":"dvEeV","a9900fc37277f6b5":"9x0Tv","b9f42caeac1a88d5":"1GMxD","9f274b682a2f0d85":"3jgO9","8845ec07b725904":"lFmB0"}],"dvEeV":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
var _index = require("9dfbc4b03fa6712b");
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1",
        other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1"
    },
    xSeconds: {
        one: "\u09E7 \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1",
        other: "{{count}} \u09B8\u09C7\u0995\u09C7\u09A8\u09CD\u09A1"
    },
    halfAMinute: "\u0986\u09A7 \u09AE\u09BF\u09A8\u09BF\u099F",
    lessThanXMinutes: {
        one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09AE\u09BF\u09A8\u09BF\u099F",
        other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09AE\u09BF\u09A8\u09BF\u099F"
    },
    xMinutes: {
        one: "\u09E7 \u09AE\u09BF\u09A8\u09BF\u099F",
        other: "{{count}} \u09AE\u09BF\u09A8\u09BF\u099F"
    },
    aboutXHours: {
        one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u0998\u09A8\u09CD\u099F\u09BE",
        other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u0998\u09A8\u09CD\u099F\u09BE"
    },
    xHours: {
        one: "\u09E7 \u0998\u09A8\u09CD\u099F\u09BE",
        other: "{{count}} \u0998\u09A8\u09CD\u099F\u09BE"
    },
    xDays: {
        one: "\u09E7 \u09A6\u09BF\u09A8",
        other: "{{count}} \u09A6\u09BF\u09A8"
    },
    aboutXWeeks: {
        one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09B8\u09AA\u09CD\u09A4\u09BE\u09B9",
        other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09B8\u09AA\u09CD\u09A4\u09BE\u09B9"
    },
    xWeeks: {
        one: "\u09E7 \u09B8\u09AA\u09CD\u09A4\u09BE\u09B9",
        other: "{{count}} \u09B8\u09AA\u09CD\u09A4\u09BE\u09B9"
    },
    aboutXMonths: {
        one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09AE\u09BE\u09B8",
        other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09AE\u09BE\u09B8"
    },
    xMonths: {
        one: "\u09E7 \u09AE\u09BE\u09B8",
        other: "{{count}} \u09AE\u09BE\u09B8"
    },
    aboutXYears: {
        one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09AC\u099B\u09B0",
        other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09AC\u099B\u09B0"
    },
    xYears: {
        one: "\u09E7 \u09AC\u099B\u09B0",
        other: "{{count}} \u09AC\u099B\u09B0"
    },
    overXYears: {
        one: "\u09E7 \u09AC\u099B\u09B0\u09C7\u09B0 \u09AC\u09C7\u09B6\u09BF",
        other: "{{count}} \u09AC\u099B\u09B0\u09C7\u09B0 \u09AC\u09C7\u09B6\u09BF"
    },
    almostXYears: {
        one: "\u09AA\u09CD\u09B0\u09BE\u09DF \u09E7 \u09AC\u099B\u09B0",
        other: "\u09AA\u09CD\u09B0\u09BE\u09DF {{count}} \u09AC\u099B\u09B0"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", (0, _index.numberToLocale)(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + " \u098F\u09B0 \u09AE\u09A7\u09CD\u09AF\u09C7";
        else return result + " \u0986\u0997\u09C7";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{"9dfbc4b03fa6712b":"3jgO9"}],"3jgO9":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
exports.numberToLocale = numberToLocale;
var _index = require("20e3e32927c24e41");
const numberValues = {
    locale: {
        1: "\u09E7",
        2: "\u09E8",
        3: "\u09E9",
        4: "\u09EA",
        5: "\u09EB",
        6: "\u09EC",
        7: "\u09ED",
        8: "\u09EE",
        9: "\u09EF",
        0: "\u09E6"
    },
    number: {
        "\u09E7": "1",
        "\u09E8": "2",
        "\u09E9": "3",
        "\u09EA": "4",
        "\u09EB": "5",
        "\u09EC": "6",
        "\u09ED": "7",
        "\u09EE": "8",
        "\u09EF": "9",
        "\u09E6": "0"
    }
};
const eraValues = {
    narrow: [
        "\u0996\u09CD\u09B0\u09BF\u0983\u09AA\u09C2\u0983",
        "\u0996\u09CD\u09B0\u09BF\u0983"
    ],
    abbreviated: [
        "\u0996\u09CD\u09B0\u09BF\u0983\u09AA\u09C2\u09B0\u09CD\u09AC",
        "\u0996\u09CD\u09B0\u09BF\u0983"
    ],
    wide: [
        "\u0996\u09CD\u09B0\u09BF\u09B8\u09CD\u099F\u09AA\u09C2\u09B0\u09CD\u09AC",
        "\u0996\u09CD\u09B0\u09BF\u09B8\u09CD\u099F\u09BE\u09AC\u09CD\u09A6"
    ]
};
const quarterValues = {
    narrow: [
        "\u09E7",
        "\u09E8",
        "\u09E9",
        "\u09EA"
    ],
    abbreviated: [
        "\u09E7\u09A4\u09CD\u09B0\u09C8",
        "\u09E8\u09A4\u09CD\u09B0\u09C8",
        "\u09E9\u09A4\u09CD\u09B0\u09C8",
        "\u09EA\u09A4\u09CD\u09B0\u09C8"
    ],
    wide: [
        "\u09E7\u09AE \u09A4\u09CD\u09B0\u09C8\u09AE\u09BE\u09B8\u09BF\u0995",
        "\u09E8\u09DF \u09A4\u09CD\u09B0\u09C8\u09AE\u09BE\u09B8\u09BF\u0995",
        "\u09E9\u09DF \u09A4\u09CD\u09B0\u09C8\u09AE\u09BE\u09B8\u09BF\u0995",
        "\u09EA\u09B0\u09CD\u09A5 \u09A4\u09CD\u09B0\u09C8\u09AE\u09BE\u09B8\u09BF\u0995"
    ]
};
const monthValues = {
    narrow: [
        "\u099C\u09BE\u09A8\u09C1",
        "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1",
        "\u09AE\u09BE\u09B0\u09CD\u099A",
        "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2",
        "\u09AE\u09C7",
        "\u099C\u09C1\u09A8",
        "\u099C\u09C1\u09B2\u09BE\u0987",
        "\u0986\u0997\u09B8\u09CD\u099F",
        "\u09B8\u09C7\u09AA\u09CD\u099F",
        "\u0985\u0995\u09CD\u099F\u09CB",
        "\u09A8\u09AD\u09C7",
        "\u09A1\u09BF\u09B8\u09C7"
    ],
    abbreviated: [
        "\u099C\u09BE\u09A8\u09C1",
        "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1",
        "\u09AE\u09BE\u09B0\u09CD\u099A",
        "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2",
        "\u09AE\u09C7",
        "\u099C\u09C1\u09A8",
        "\u099C\u09C1\u09B2\u09BE\u0987",
        "\u0986\u0997\u09B8\u09CD\u099F",
        "\u09B8\u09C7\u09AA\u09CD\u099F",
        "\u0985\u0995\u09CD\u099F\u09CB",
        "\u09A8\u09AD\u09C7",
        "\u09A1\u09BF\u09B8\u09C7"
    ],
    wide: [
        "\u099C\u09BE\u09A8\u09C1\u09DF\u09BE\u09B0\u09BF",
        "\u09AB\u09C7\u09AC\u09CD\u09B0\u09C1\u09DF\u09BE\u09B0\u09BF",
        "\u09AE\u09BE\u09B0\u09CD\u099A",
        "\u098F\u09AA\u09CD\u09B0\u09BF\u09B2",
        "\u09AE\u09C7",
        "\u099C\u09C1\u09A8",
        "\u099C\u09C1\u09B2\u09BE\u0987",
        "\u0986\u0997\u09B8\u09CD\u099F",
        "\u09B8\u09C7\u09AA\u09CD\u099F\u09C7\u09AE\u09CD\u09AC\u09B0",
        "\u0985\u0995\u09CD\u099F\u09CB\u09AC\u09B0",
        "\u09A8\u09AD\u09C7\u09AE\u09CD\u09AC\u09B0",
        "\u09A1\u09BF\u09B8\u09C7\u09AE\u09CD\u09AC\u09B0"
    ]
};
const dayValues = {
    narrow: [
        "\u09B0",
        "\u09B8\u09CB",
        "\u09AE",
        "\u09AC\u09C1",
        "\u09AC\u09C3",
        "\u09B6\u09C1",
        "\u09B6"
    ],
    short: [
        "\u09B0\u09AC\u09BF",
        "\u09B8\u09CB\u09AE",
        "\u09AE\u0999\u09CD\u0997\u09B2",
        "\u09AC\u09C1\u09A7",
        "\u09AC\u09C3\u09B9",
        "\u09B6\u09C1\u0995\u09CD\u09B0",
        "\u09B6\u09A8\u09BF"
    ],
    abbreviated: [
        "\u09B0\u09AC\u09BF",
        "\u09B8\u09CB\u09AE",
        "\u09AE\u0999\u09CD\u0997\u09B2",
        "\u09AC\u09C1\u09A7",
        "\u09AC\u09C3\u09B9",
        "\u09B6\u09C1\u0995\u09CD\u09B0",
        "\u09B6\u09A8\u09BF"
    ],
    wide: [
        "\u09B0\u09AC\u09BF\u09AC\u09BE\u09B0",
        "\u09B8\u09CB\u09AE\u09AC\u09BE\u09B0",
        "\u09AE\u0999\u09CD\u0997\u09B2\u09AC\u09BE\u09B0",
        "\u09AC\u09C1\u09A7\u09AC\u09BE\u09B0",
        "\u09AC\u09C3\u09B9\u09B8\u09CD\u09AA\u09A4\u09BF\u09AC\u09BE\u09B0 ",
        "\u09B6\u09C1\u0995\u09CD\u09B0\u09AC\u09BE\u09B0",
        "\u09B6\u09A8\u09BF\u09AC\u09BE\u09B0"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u09AA\u09C2",
        pm: "\u0985\u09AA",
        midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
        noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
        morning: "\u09B8\u0995\u09BE\u09B2",
        afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
        evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
        night: "\u09B0\u09BE\u09A4"
    },
    abbreviated: {
        am: "\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8",
        pm: "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A8",
        midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
        noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
        morning: "\u09B8\u0995\u09BE\u09B2",
        afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
        evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
        night: "\u09B0\u09BE\u09A4"
    },
    wide: {
        am: "\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8",
        pm: "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A8",
        midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
        noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
        morning: "\u09B8\u0995\u09BE\u09B2",
        afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
        evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
        night: "\u09B0\u09BE\u09A4"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u09AA\u09C2",
        pm: "\u0985\u09AA",
        midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
        noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
        morning: "\u09B8\u0995\u09BE\u09B2",
        afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
        evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
        night: "\u09B0\u09BE\u09A4"
    },
    abbreviated: {
        am: "\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8",
        pm: "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A8",
        midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
        noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
        morning: "\u09B8\u0995\u09BE\u09B2",
        afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
        evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
        night: "\u09B0\u09BE\u09A4"
    },
    wide: {
        am: "\u09AA\u09C2\u09B0\u09CD\u09AC\u09BE\u09B9\u09CD\u09A8",
        pm: "\u0985\u09AA\u09B0\u09BE\u09B9\u09CD\u09A8",
        midnight: "\u09AE\u09A7\u09CD\u09AF\u09B0\u09BE\u09A4",
        noon: "\u09AE\u09A7\u09CD\u09AF\u09BE\u09B9\u09CD\u09A8",
        morning: "\u09B8\u0995\u09BE\u09B2",
        afternoon: "\u09AC\u09BF\u0995\u09BE\u09B2",
        evening: "\u09B8\u09A8\u09CD\u09A7\u09CD\u09AF\u09BE",
        night: "\u09B0\u09BE\u09A4"
    }
};
function dateOrdinalNumber(number, localeNumber) {
    if (number > 18 && number <= 31) return localeNumber + "\u09B6\u09C7";
    else switch(number){
        case 1:
            return localeNumber + "\u09B2\u09BE";
        case 2:
        case 3:
            return localeNumber + "\u09B0\u09BE";
        case 4:
            return localeNumber + "\u09A0\u09BE";
        default:
            return localeNumber + "\u0987";
    }
}
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const localeNumber = numberToLocale(number);
    const unit = options?.unit;
    if (unit === "date") return dateOrdinalNumber(number, localeNumber);
    if (number > 10 || number === 0) return localeNumber + "\u09A4\u09AE";
    const rem10 = number % 10;
    switch(rem10){
        case 2:
        case 3:
            return localeNumber + "\u09DF";
        case 4:
            return localeNumber + "\u09B0\u09CD\u09A5";
        case 6:
            return localeNumber + "\u09B7\u09CD\u09A0";
        default:
            return localeNumber + "\u09AE";
    }
};
// function localeToNumber(locale: string): number {
//   const enNumber = locale.toString().replace(/[১২৩৪৫৬৭৮৯০]/g, function (match) {
//     return numberValues.number[match as keyof typeof numberValues.number]
//   })
//   return Number(enNumber)
// }
function numberToLocale(enNumber) {
    return enNumber.toString().replace(/\d/g, function(match) {
        return numberValues.locale[match];
    });
}
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"20e3e32927c24e41":"fGq1u"}],"9x0Tv":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("a9e384b62b8898ec");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} {{time}} '\u09B8\u09AE\u09DF'",
    long: "{{date}} {{time}} '\u09B8\u09AE\u09DF'",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"a9e384b62b8898ec":"6OYyu"}],"1GMxD":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0997\u09A4' eeee '\u09B8\u09AE\u09DF' p",
    yesterday: "'\u0997\u09A4\u0995\u09BE\u09B2' '\u09B8\u09AE\u09DF' p",
    today: "'\u0986\u099C' '\u09B8\u09AE\u09DF' p",
    tomorrow: "'\u0986\u0997\u09BE\u09AE\u09C0\u0995\u09BE\u09B2' '\u09B8\u09AE\u09DF' p",
    nextWeek: "eeee '\u09B8\u09AE\u09DF' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"lFmB0":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("5658ae1463a87ae3");
var _index2 = require("707f0a4285b173f");
const matchOrdinalNumberPattern = /^(\d+)(ম|য়|র্থ|ষ্ঠ|শে|ই|তম)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(খ্রিঃপূঃ|খ্রিঃ)/i,
    abbreviated: /^(খ্রিঃপূর্ব|খ্রিঃ)/i,
    wide: /^(খ্রিস্টপূর্ব|খ্রিস্টাব্দ)/i
};
const parseEraPatterns = {
    narrow: [
        /^খ্রিঃপূঃ/i,
        /^খ্রিঃ/i
    ],
    abbreviated: [
        /^খ্রিঃপূর্ব/i,
        /^খ্রিঃ/i
    ],
    wide: [
        /^খ্রিস্টপূর্ব/i,
        /^খ্রিস্টাব্দ/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[১২৩৪]/i,
    abbreviated: /^[১২৩৪]ত্রৈ/i,
    wide: /^[১২৩৪](ম|য়|র্থ)? ত্রৈমাসিক/i
};
const parseQuarterPatterns = {
    any: [
        /১/i,
        /২/i,
        /৩/i,
        /৪/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
    abbreviated: /^(জানু|ফেব্রু|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্ট|অক্টো|নভে|ডিসে)/i,
    wide: /^(জানুয়ারি|ফেব্রুয়ারি|মার্চ|এপ্রিল|মে|জুন|জুলাই|আগস্ট|সেপ্টেম্বর|অক্টোবর|নভেম্বর|ডিসেম্বর)/i
};
const parseMonthPatterns = {
    any: [
        /^জানু/i,
        /^ফেব্রু/i,
        /^মার্চ/i,
        /^এপ্রিল/i,
        /^মে/i,
        /^জুন/i,
        /^জুলাই/i,
        /^আগস্ট/i,
        /^সেপ্ট/i,
        /^অক্টো/i,
        /^নভে/i,
        /^ডিসে/i
    ]
};
const matchDayPatterns = {
    narrow: /^(র|সো|ম|বু|বৃ|শু|শ)+/i,
    short: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
    abbreviated: /^(রবি|সোম|মঙ্গল|বুধ|বৃহ|শুক্র|শনি)+/i,
    wide: /^(রবিবার|সোমবার|মঙ্গলবার|বুধবার|বৃহস্পতিবার |শুক্রবার|শনিবার)+/i
};
const parseDayPatterns = {
    narrow: [
        /^র/i,
        /^সো/i,
        /^ম/i,
        /^বু/i,
        /^বৃ/i,
        /^শু/i,
        /^শ/i
    ],
    short: [
        /^রবি/i,
        /^সোম/i,
        /^মঙ্গল/i,
        /^বুধ/i,
        /^বৃহ/i,
        /^শুক্র/i,
        /^শনি/i
    ],
    abbreviated: [
        /^রবি/i,
        /^সোম/i,
        /^মঙ্গল/i,
        /^বুধ/i,
        /^বৃহ/i,
        /^শুক্র/i,
        /^শনি/i
    ],
    wide: [
        /^রবিবার/i,
        /^সোমবার/i,
        /^মঙ্গলবার/i,
        /^বুধবার/i,
        /^বৃহস্পতিবার /i,
        /^শুক্রবার/i,
        /^শনিবার/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(পূ|অপ|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
    abbreviated: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i,
    wide: /^(পূর্বাহ্ন|অপরাহ্ন|মধ্যরাত|মধ্যাহ্ন|সকাল|বিকাল|সন্ধ্যা|রাত)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^পূ/i,
        pm: /^অপ/i,
        midnight: /^মধ্যরাত/i,
        noon: /^মধ্যাহ্ন/i,
        morning: /সকাল/i,
        afternoon: /বিকাল/i,
        evening: /সন্ধ্যা/i,
        night: /রাত/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "wide"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"5658ae1463a87ae3":"15lWd","707f0a4285b173f":"kWqg8"}],"9YTIY":[function(require,module,exports) {
"use strict";
exports.bs = void 0;
var _index = require("d9176a1fdecfe9ce");
var _index2 = require("3cf48bacd7daec50");
var _index3 = require("750ae6c40d9d26d4");
var _index4 = require("c808cc6c37c575bd");
var _index5 = require("1311138ec01a823d");
/**
 * @category Locales
 * @summary Bosnian locale.
 * @language Bosnian
 * @iso-639-2 bos
 * @author Branislav Lazić [@branislavlazic](https://github.com/branislavlazic)
 */ const bs = exports.bs = {
    code: "bs",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"d9176a1fdecfe9ce":"bYt51","3cf48bacd7daec50":"5RoyX","750ae6c40d9d26d4":"dpMKD","c808cc6c37c575bd":"eUo2q","1311138ec01a823d":"aQE3D"}],"bYt51":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: {
            standalone: "manje od 1 sekunde",
            withPrepositionAgo: "manje od 1 sekunde",
            withPrepositionIn: "manje od 1 sekundu"
        },
        dual: "manje od {{count}} sekunde",
        other: "manje od {{count}} sekundi"
    },
    xSeconds: {
        one: {
            standalone: "1 sekunda",
            withPrepositionAgo: "1 sekunde",
            withPrepositionIn: "1 sekundu"
        },
        dual: "{{count}} sekunde",
        other: "{{count}} sekundi"
    },
    halfAMinute: "pola minute",
    lessThanXMinutes: {
        one: {
            standalone: "manje od 1 minute",
            withPrepositionAgo: "manje od 1 minute",
            withPrepositionIn: "manje od 1 minutu"
        },
        dual: "manje od {{count}} minute",
        other: "manje od {{count}} minuta"
    },
    xMinutes: {
        one: {
            standalone: "1 minuta",
            withPrepositionAgo: "1 minute",
            withPrepositionIn: "1 minutu"
        },
        dual: "{{count}} minute",
        other: "{{count}} minuta"
    },
    aboutXHours: {
        one: {
            standalone: "oko 1 sat",
            withPrepositionAgo: "oko 1 sat",
            withPrepositionIn: "oko 1 sat"
        },
        dual: "oko {{count}} sata",
        other: "oko {{count}} sati"
    },
    xHours: {
        one: {
            standalone: "1 sat",
            withPrepositionAgo: "1 sat",
            withPrepositionIn: "1 sat"
        },
        dual: "{{count}} sata",
        other: "{{count}} sati"
    },
    xDays: {
        one: {
            standalone: "1 dan",
            withPrepositionAgo: "1 dan",
            withPrepositionIn: "1 dan"
        },
        dual: "{{count}} dana",
        other: "{{count}} dana"
    },
    aboutXWeeks: {
        one: {
            standalone: "oko 1 sedmicu",
            withPrepositionAgo: "oko 1 sedmicu",
            withPrepositionIn: "oko 1 sedmicu"
        },
        dual: "oko {{count}} sedmice",
        other: "oko {{count}} sedmice"
    },
    xWeeks: {
        one: {
            standalone: "1 sedmicu",
            withPrepositionAgo: "1 sedmicu",
            withPrepositionIn: "1 sedmicu"
        },
        dual: "{{count}} sedmice",
        other: "{{count}} sedmice"
    },
    aboutXMonths: {
        one: {
            standalone: "oko 1 mjesec",
            withPrepositionAgo: "oko 1 mjesec",
            withPrepositionIn: "oko 1 mjesec"
        },
        dual: "oko {{count}} mjeseca",
        other: "oko {{count}} mjeseci"
    },
    xMonths: {
        one: {
            standalone: "1 mjesec",
            withPrepositionAgo: "1 mjesec",
            withPrepositionIn: "1 mjesec"
        },
        dual: "{{count}} mjeseca",
        other: "{{count}} mjeseci"
    },
    aboutXYears: {
        one: {
            standalone: "oko 1 godinu",
            withPrepositionAgo: "oko 1 godinu",
            withPrepositionIn: "oko 1 godinu"
        },
        dual: "oko {{count}} godine",
        other: "oko {{count}} godina"
    },
    xYears: {
        one: {
            standalone: "1 godina",
            withPrepositionAgo: "1 godine",
            withPrepositionIn: "1 godinu"
        },
        dual: "{{count}} godine",
        other: "{{count}} godina"
    },
    overXYears: {
        one: {
            standalone: "preko 1 godinu",
            withPrepositionAgo: "preko 1 godinu",
            withPrepositionIn: "preko 1 godinu"
        },
        dual: "preko {{count}} godine",
        other: "preko {{count}} godina"
    },
    almostXYears: {
        one: {
            standalone: "gotovo 1 godinu",
            withPrepositionAgo: "gotovo 1 godinu",
            withPrepositionIn: "gotovo 1 godinu"
        },
        dual: "gotovo {{count}} godine",
        other: "gotovo {{count}} godina"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) {
        if (options?.addSuffix) {
            if (options.comparison && options.comparison > 0) result = tokenValue.one.withPrepositionIn;
            else result = tokenValue.one.withPrepositionAgo;
        } else result = tokenValue.one.standalone;
    } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
    String(count).substr(-2, 1) !== "1" // unless the 2nd to last digit is "1"
    ) result = tokenValue.dual.replace("{{count}}", String(count));
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "za " + result;
        else return "prije " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"5RoyX":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("457ab4f3392cf71c");
const dateFormats = {
    full: "EEEE, d. MMMM yyyy.",
    long: "d. MMMM yyyy.",
    medium: "d. MMM yy.",
    short: "dd. MM. yy."
};
const timeFormats = {
    full: "HH:mm:ss (zzzz)",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'u' {{time}}",
    long: "{{date}} 'u' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"457ab4f3392cf71c":"6OYyu"}],"dpMKD":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        switch(date.getDay()){
            case 0:
                return "'pro\u0161le nedjelje u' p";
            case 3:
                return "'pro\u0161le srijede u' p";
            case 6:
                return "'pro\u0161le subote u' p";
            default:
                return "'pro\u0161li' EEEE 'u' p";
        }
    },
    yesterday: "'ju\u010De u' p",
    today: "'danas u' p",
    tomorrow: "'sutra u' p",
    nextWeek: (date)=>{
        switch(date.getDay()){
            case 0:
                return "'sljede\u0107e nedjelje u' p";
            case 3:
                return "'sljede\u0107u srijedu u' p";
            case 6:
                return "'sljede\u0107u subotu u' p";
            default:
                return "'sljede\u0107i' EEEE 'u' p";
        }
    },
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"eUo2q":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("9714d3f3cab4444d");
const eraValues = {
    narrow: [
        "pr.n.e.",
        "AD"
    ],
    abbreviated: [
        "pr. Hr.",
        "po. Hr."
    ],
    wide: [
        "Prije Hrista",
        "Poslije Hrista"
    ]
};
const quarterValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4."
    ],
    abbreviated: [
        "1. kv.",
        "2. kv.",
        "3. kv.",
        "4. kv."
    ],
    wide: [
        "1. kvartal",
        "2. kvartal",
        "3. kvartal",
        "4. kvartal"
    ]
};
const monthValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
    ],
    abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "avg",
        "sep",
        "okt",
        "nov",
        "dec"
    ],
    wide: [
        "januar",
        "februar",
        "mart",
        "april",
        "maj",
        "juni",
        "juli",
        "avgust",
        "septembar",
        "oktobar",
        "novembar",
        "decembar"
    ]
};
const formattingMonthValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
    ],
    abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "avg",
        "sep",
        "okt",
        "nov",
        "dec"
    ],
    wide: [
        "januar",
        "februar",
        "mart",
        "april",
        "maj",
        "juni",
        "juli",
        "avgust",
        "septembar",
        "oktobar",
        "novembar",
        "decembar"
    ]
};
const dayValues = {
    narrow: [
        "N",
        "P",
        "U",
        "S",
        "\u010C",
        "P",
        "S"
    ],
    short: [
        "ned",
        "pon",
        "uto",
        "sre",
        "\u010Det",
        "pet",
        "sub"
    ],
    abbreviated: [
        "ned",
        "pon",
        "uto",
        "sre",
        "\u010Det",
        "pet",
        "sub"
    ],
    wide: [
        "nedjelja",
        "ponedjeljak",
        "utorak",
        "srijeda",
        "\u010Detvrtak",
        "petak",
        "subota"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uve\u010De",
        night: "no\u0107u"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uve\u010De",
        night: "no\u0107u"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "poslije podne",
        evening: "uve\u010De",
        night: "no\u0107u"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uve\u010De",
        night: "no\u0107u"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uve\u010De",
        night: "no\u0107u"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "poslije podne",
        evening: "uve\u010De",
        night: "no\u0107u"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return String(number) + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"9714d3f3cab4444d":"fGq1u"}],"aQE3D":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("2d21683a50814326");
var _index2 = require("664de031d5541c49");
const matchOrdinalNumberPattern = /^(\d+)\./i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(pr\.n\.e\.|AD)/i,
    abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
    wide: /^(Prije Hrista|prije nove ere|Poslije Hrista|nova era)/i
};
const parseEraPatterns = {
    any: [
        /^pr/i,
        /^(po|nova)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]\.\s?kv\.?/i,
    wide: /^[1234]\. kvartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(10|11|12|[123456789])\./i,
    abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
    wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(juni|juna)|(juli|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
};
const parseMonthPatterns = {
    narrow: [
        /^1/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^7/i,
        /^8/i,
        /^9/i,
        /^10/i,
        /^11/i,
        /^12/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^avg/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[npusčc]/i,
    short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
    abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
    wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^w/i,
        /^t/i,
        /^f/i,
        /^s/i
    ],
    any: [
        /^su/i,
        /^m/i,
        /^tu/i,
        /^w/i,
        /^th/i,
        /^f/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|poslije podne|ujutru)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(poslije\s|po)+podne/i,
        evening: /(uvece|uveče)/i,
        night: /(nocu|noću)/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"2d21683a50814326":"15lWd","664de031d5541c49":"kWqg8"}],"eV5Od":[function(require,module,exports) {
"use strict";
exports.ca = void 0;
var _index = require("b8b70435ca7b9140");
var _index2 = require("93bcc77bb4835130");
var _index3 = require("10b5f6a7bfc29234");
var _index4 = require("15cc93bc8415d19b");
var _index5 = require("84a66080af67671a");
/**
 * @category Locales
 * @summary Catalan locale.
 * @language Catalan
 * @iso-639-2 cat
 * @author Guillermo Grau [@guigrpa](https://github.com/guigrpa)
 * @author Alex Vizcaino [@avizcaino](https://github.com/avizcaino)
 */ const ca = exports.ca = {
    code: "ca",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"b8b70435ca7b9140":"fCRVS","93bcc77bb4835130":"9cePN","10b5f6a7bfc29234":"9UxgD","15cc93bc8415d19b":"g4bKA","84a66080af67671a":"9DYOu"}],"fCRVS":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
/**
 * Davant de les xifres que es diuen amb vocal inicial, 1 i 11, s'apostrofen els articles el i la i la preposició de igual que si estiguessin escrits amb lletres.
 *    l'1 de juliol ('l'u')
 *    l'11 de novembre ('l'onze')
 *    l'11a clàusula del contracte ('l'onzena')
 *    la contractació d'11 jugadors ('d'onze')
 *    l'aval d'11.000 socis ('d'onze mil')
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=apostrofaci%25F3+davant+xifres&action=Principal&method=detall_completa&numPagina=1&idHit=11236&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=11236&titol=apostrofaci%F3%20davant%20de%20xifres%20%2F%20apostrofaci%F3%20davant%20de%201%20i%2011&numeroResultat=1&clickLink=detall&tipusCerca=cerca.normes
 */ const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "menys d'un segon",
        eleven: "menys d'onze segons",
        other: "menys de {{count}} segons"
    },
    xSeconds: {
        one: "1 segon",
        other: "{{count}} segons"
    },
    halfAMinute: "mig minut",
    lessThanXMinutes: {
        one: "menys d'un minut",
        eleven: "menys d'onze minuts",
        other: "menys de {{count}} minuts"
    },
    xMinutes: {
        one: "1 minut",
        other: "{{count}} minuts"
    },
    aboutXHours: {
        one: "aproximadament una hora",
        other: "aproximadament {{count}} hores"
    },
    xHours: {
        one: "1 hora",
        other: "{{count}} hores"
    },
    xDays: {
        one: "1 dia",
        other: "{{count}} dies"
    },
    aboutXWeeks: {
        one: "aproximadament una setmana",
        other: "aproximadament {{count}} setmanes"
    },
    xWeeks: {
        one: "1 setmana",
        other: "{{count}} setmanes"
    },
    aboutXMonths: {
        one: "aproximadament un mes",
        other: "aproximadament {{count}} mesos"
    },
    xMonths: {
        one: "1 mes",
        other: "{{count}} mesos"
    },
    aboutXYears: {
        one: "aproximadament un any",
        other: "aproximadament {{count}} anys"
    },
    xYears: {
        one: "1 any",
        other: "{{count}} anys"
    },
    overXYears: {
        one: "m\xe9s d'un any",
        eleven: "m\xe9s d'onze anys",
        other: "m\xe9s de {{count}} anys"
    },
    almostXYears: {
        one: "gaireb\xe9 un any",
        other: "gaireb\xe9 {{count}} anys"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else if (count === 11 && tokenValue.eleven) result = tokenValue.eleven;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "en " + result;
        else return "fa " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"9cePN":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("d414e9ef45ec13a4");
const dateFormats = {
    full: "EEEE, d 'de' MMMM y",
    long: "d 'de' MMMM y",
    medium: "d MMM y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'a les' {{time}}",
    long: "{{date}} 'a les' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"d414e9ef45ec13a4":"6OYyu"}],"9UxgD":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'el' eeee 'passat a la' LT",
    yesterday: "'ahir a la' p",
    today: "'avui a la' p",
    tomorrow: "'dem\xe0 a la' p",
    nextWeek: "eeee 'a la' p",
    other: "P"
};
const formatRelativeLocalePlural = {
    lastWeek: "'el' eeee 'passat a les' p",
    yesterday: "'ahir a les' p",
    today: "'avui a les' p",
    tomorrow: "'dem\xe0 a les' p",
    nextWeek: "eeee 'a les' p",
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    if (date.getHours() !== 1) return formatRelativeLocalePlural[token];
    return formatRelativeLocale[token];
};
exports.formatRelative = formatRelative;

},{}],"g4bKA":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("12783be9a93391b4");
/**
 * General information
 * Reference: https://aplicacions.llengua.gencat.cat
 * Reference: https://www.uoc.edu/portal/ca/servei-linguistic/convencions/abreviacions/simbols/simbols-habituals.html
 */ /**
 * Abans de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abans+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6876&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6876&titol=abans%20de%20Crist%20(abreviatura)%20/%20abans%20de%20Crist%20(sigla)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
 * Desprest de Crist: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=despr%E9s+de+crist&action=Principal&method=detall_completa&numPagina=1&idHit=6879&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=6879&titol=despr%E9s%20de%20Crist%20(sigla)%20/%20despr%E9s%20de%20Crist%20(abreviatura)&numeroResultat=1&clickLink=detall&tipusCerca=cerca.fitxes
 */ const eraValues = {
    narrow: [
        "aC",
        "dC"
    ],
    abbreviated: [
        "a. de C.",
        "d. de C."
    ],
    wide: [
        "abans de Crist",
        "despr\xe9s de Crist"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    wide: [
        "1r trimestre",
        "2n trimestre",
        "3r trimestre",
        "4t trimestre"
    ]
};
/**
 * Dins d'un text convé fer servir la forma sencera dels mesos, ja que sempre és més clar el mot sencer que l'abreviatura, encara que aquesta sigui força coneguda.
 * Cal reservar, doncs, les abreviatures per a les llistes o classificacions, els gràfics, les taules o quadres estadístics, els textos publicitaris, etc.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviacions+mesos&action=Principal&method=detall_completa&numPagina=1&idHit=8402&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8402&titol=abreviatures%20dels%20mesos%20de%20l%27any&numeroResultat=5&clickLink=detall&tipusCerca=cerca.fitxes
 */ const monthValues = {
    narrow: [
        "GN",
        "FB",
        "M\xc7",
        "AB",
        "MG",
        "JN",
        "JL",
        "AG",
        "ST",
        "OC",
        "NV",
        "DS"
    ],
    /**
   * Les abreviatures dels mesos de l'any es formen seguint una de les normes generals de formació d'abreviatures.
   * S'escriu la primera síl·laba i les consonants de la síl·laba següent anteriors a la primera vocal.
   * Els mesos de març, maig i juny no s'abreugen perquè són paraules d'una sola síl·laba.
   */ abbreviated: [
        "gen.",
        "febr.",
        "mar\xe7",
        "abr.",
        "maig",
        "juny",
        "jul.",
        "ag.",
        "set.",
        "oct.",
        "nov.",
        "des."
    ],
    wide: [
        "gener",
        "febrer",
        "mar\xe7",
        "abril",
        "maig",
        "juny",
        "juliol",
        "agost",
        "setembre",
        "octubre",
        "novembre",
        "desembre"
    ]
};
/**
 * Les abreviatures dels dies de la setmana comencen totes amb la lletra d.
 * Tot seguit porten la consonant següent a la i, excepte en el cas de dimarts, dimecres i diumenge, en què aquesta consonant és la m i, per tant, hi podria haver confusió.
 * Per evitar-ho, s'ha substituït la m per una t (en el cas de dimarts), una c (en el cas de dimecres) i una g (en el cas de diumenge), respectivament.
 *
 * Seguint la norma general d'ús de les abreviatures, les dels dies de la setmana sempre porten punt final.
 * Igualment, van amb la primera lletra en majúscula quan la paraula sencera també hi aniria.
 * En canvi, van amb la primera lletra en minúscula quan la inicial de la paraula sencera també hi aniria.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?input_cercar=abreviatures+dies&action=Principal&method=detall_completa&numPagina=1&idHit=8387&database=FITXES_PUB&tipusFont=Fitxes%20de%20l%27Optimot&idFont=8387&titol=abreviatures%20dels%20dies%20de%20la%20setmana&numeroResultat=1&clickLink=detall&tipusCerca=cerca.tot
 */ const dayValues = {
    narrow: [
        "dg.",
        "dl.",
        "dt.",
        "dm.",
        "dj.",
        "dv.",
        "ds."
    ],
    short: [
        "dg.",
        "dl.",
        "dt.",
        "dm.",
        "dj.",
        "dv.",
        "ds."
    ],
    abbreviated: [
        "dg.",
        "dl.",
        "dt.",
        "dm.",
        "dj.",
        "dv.",
        "ds."
    ],
    wide: [
        "diumenge",
        "dilluns",
        "dimarts",
        "dimecres",
        "dijous",
        "divendres",
        "dissabte"
    ]
};
/**
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/index.html?action=Principal&method=detall&input_cercar=parts+del+dia&numPagina=1&database=FITXES_PUB&idFont=12801&idHit=12801&tipusFont=Fitxes+de+l%27Optimot&numeroResultat=1&databases_avansada=&categories_avansada=&clickLink=detall&titol=Nom+de+les+parts+del+dia&tematica=&tipusCerca=cerca.fitxes
 */ const dayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "mat\xed",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
    },
    abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "mat\xed",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
    },
    wide: {
        am: "ante meridiem",
        pm: "post meridiem",
        midnight: "mitjanit",
        noon: "migdia",
        morning: "mat\xed",
        afternoon: "tarda",
        evening: "vespre",
        night: "nit"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del mat\xed",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del mat\xed",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
    },
    wide: {
        am: "ante meridiem",
        pm: "post meridiem",
        midnight: "de la mitjanit",
        noon: "del migdia",
        morning: "del mat\xed",
        afternoon: "de la tarda",
        evening: "del vespre",
        night: "de la nit"
    }
};
/**
 * Quan van en singular, els nombres ordinals es representen, en forma d’abreviatura, amb la xifra seguida de l’última lletra del mot desplegat.
 * És optatiu posar punt després de la lletra.
 *
 * Reference: https://aplicacions.llengua.gencat.cat/llc/AppJava/pdf/abrevia.pdf#page=18
 */ const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    const rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) switch(rem100 % 10){
        case 1:
            return number + "r";
        case 2:
            return number + "n";
        case 3:
            return number + "r";
        case 4:
            return number + "t";
    }
    return number + "\xe8";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"12783be9a93391b4":"fGq1u"}],"9DYOu":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("9806fc325eec5485");
var _index2 = require("1cef86968c193078");
const matchOrdinalNumberPattern = /^(\d+)(è|r|n|r|t)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(aC|dC)/i,
    abbreviated: /^(a. de C.|d. de C.)/i,
    wide: /^(abans de Crist|despr[eé]s de Crist)/i
};
const parseEraPatterns = {
    narrow: [
        /^aC/i,
        /^dC/i
    ],
    abbreviated: [
        /^(a. de C.)/i,
        /^(d. de C.)/i
    ],
    wide: [
        /^(abans de Crist)/i,
        /^(despr[eé]s de Crist)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^T[1234]/i,
    wide: /^[1234](è|r|n|r|t)? trimestre/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(GN|FB|MÇ|AB|MG|JN|JL|AG|ST|OC|NV|DS)/i,
    abbreviated: /^(gen.|febr.|març|abr.|maig|juny|jul.|ag.|set.|oct.|nov.|des.)/i,
    wide: /^(gener|febrer|març|abril|maig|juny|juliol|agost|setembre|octubre|novembre|desembre)/i
};
const parseMonthPatterns = {
    narrow: [
        /^GN/i,
        /^FB/i,
        /^MÇ/i,
        /^AB/i,
        /^MG/i,
        /^JN/i,
        /^JL/i,
        /^AG/i,
        /^ST/i,
        /^OC/i,
        /^NV/i,
        /^DS/i
    ],
    abbreviated: [
        /^gen./i,
        /^febr./i,
        /^març/i,
        /^abr./i,
        /^maig/i,
        /^juny/i,
        /^jul./i,
        /^ag./i,
        /^set./i,
        /^oct./i,
        /^nov./i,
        /^des./i
    ],
    wide: [
        /^gener/i,
        /^febrer/i,
        /^març/i,
        /^abril/i,
        /^maig/i,
        /^juny/i,
        /^juliol/i,
        /^agost/i,
        /^setembre/i,
        /^octubre/i,
        /^novembre/i,
        /^desembre/i
    ]
};
const matchDayPatterns = {
    narrow: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
    short: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
    abbreviated: /^(dg\.|dl\.|dt\.|dm\.|dj\.|dv\.|ds\.)/i,
    wide: /^(diumenge|dilluns|dimarts|dimecres|dijous|divendres|dissabte)/i
};
const parseDayPatterns = {
    narrow: [
        /^dg./i,
        /^dl./i,
        /^dt./i,
        /^dm./i,
        /^dj./i,
        /^dv./i,
        /^ds./i
    ],
    abbreviated: [
        /^dg./i,
        /^dl./i,
        /^dt./i,
        /^dm./i,
        /^dj./i,
        /^dv./i,
        /^ds./i
    ],
    wide: [
        /^diumenge/i,
        /^dilluns/i,
        /^dimarts/i,
        /^dimecres/i,
        /^dijous/i,
        /^divendres/i,
        /^disssabte/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mn|md|(del|de la) (matí|tarda|vespre|nit))/i,
    abbreviated: /^([ap]\.?\s?m\.?|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i,
    wide: /^(ante meridiem|post meridiem|mitjanit|migdia|(del|de la) (matí|tarda|vespre|nit))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mitjanit/i,
        noon: /^migdia/i,
        morning: /matí/i,
        afternoon: /tarda/i,
        evening: /vespre/i,
        night: /nit/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "wide"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "wide"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"9806fc325eec5485":"15lWd","1cef86968c193078":"kWqg8"}],"l5QBy":[function(require,module,exports) {
"use strict";
exports.ckb = void 0;
var _index = require("ea2688f3c58c9bcb");
var _index2 = require("dc2bbb9a7e5b1468");
var _index3 = require("70149864fb464008");
var _index4 = require("fcaeb0a9d86641e0");
var _index5 = require("17330957f60dc5d3");
/**
 * @type {Locale}
 * @category Locales
 * @summary Central Kurdish locale.
 * @language Central Kurdish
 * @iso-639-2 kur
 * @author Revan Sarbast [@Revan99]{@link https://github.com/Revan99}
 */ const ckb = exports.ckb = {
    code: "ckb",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"ea2688f3c58c9bcb":"9lmJ2","dc2bbb9a7e5b1468":"dHRcc","70149864fb464008":"gnh8T","fcaeb0a9d86641e0":"gAOl6","17330957f60dc5d3":"eHjvl"}],"9lmJ2":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u06A9\u06D5\u0645\u062A\u0631 \u0644\u06D5 \u06CC\u06D5\u06A9 \u0686\u0631\u06A9\u06D5",
        other: "\u06A9\u06D5\u0645\u062A\u0631 \u0644\u06D5 {{count}} \u0686\u0631\u06A9\u06D5"
    },
    xSeconds: {
        one: "1 \u0686\u0631\u06A9\u06D5",
        other: "{{count}} \u0686\u0631\u06A9\u06D5"
    },
    halfAMinute: "\u0646\u06CC\u0648 \u06A9\u0627\u062A\u0698\u0645\u06CE\u0631",
    lessThanXMinutes: {
        one: "\u06A9\u06D5\u0645\u062A\u0631 \u0644\u06D5 \u06CC\u06D5\u06A9 \u062E\u0648\u0644\u06D5\u06A9",
        other: "\u06A9\u06D5\u0645\u062A\u0631 \u0644\u06D5 {{count}} \u062E\u0648\u0644\u06D5\u06A9"
    },
    xMinutes: {
        one: "1 \u062E\u0648\u0644\u06D5\u06A9",
        other: "{{count}} \u062E\u0648\u0644\u06D5\u06A9"
    },
    aboutXHours: {
        one: "\u062F\u06D5\u0648\u0631\u0648\u0628\u06D5\u0631\u06CC 1 \u06A9\u0627\u062A\u0698\u0645\u06CE\u0631",
        other: "\u062F\u06D5\u0648\u0631\u0648\u0628\u06D5\u0631\u06CC {{count}} \u06A9\u0627\u062A\u0698\u0645\u06CE\u0631"
    },
    xHours: {
        one: "1 \u06A9\u0627\u062A\u0698\u0645\u06CE\u0631",
        other: "{{count}} \u06A9\u0627\u062A\u0698\u0645\u06CE\u0631"
    },
    xDays: {
        one: "1 \u0695\u06C6\u0698",
        other: "{{count}} \u0698\u06C6\u0698"
    },
    aboutXWeeks: {
        one: "\u062F\u06D5\u0648\u0631\u0648\u0628\u06D5\u0631\u06CC 1 \u0647\u06D5\u0641\u062A\u06D5",
        other: "\u062F\u0648\u0631\u0648\u0628\u06D5\u0631\u06CC {{count}} \u0647\u06D5\u0641\u062A\u06D5"
    },
    xWeeks: {
        one: "1 \u0647\u06D5\u0641\u062A\u06D5",
        other: "{{count}} \u0647\u06D5\u0641\u062A\u06D5"
    },
    aboutXMonths: {
        one: "\u062F\u0627\u0648\u0631\u0648\u0628\u06D5\u0631\u06CC 1 \u0645\u0627\u0646\u06AF",
        other: "\u062F\u06D5\u0648\u0631\u0648\u0628\u06D5\u0631\u06CC {{count}} \u0645\u0627\u0646\u06AF"
    },
    xMonths: {
        one: "1 \u0645\u0627\u0646\u06AF",
        other: "{{count}} \u0645\u0627\u0646\u06AF"
    },
    aboutXYears: {
        one: "\u062F\u06D5\u0648\u0631\u0648\u0628\u06D5\u0631\u06CC  1 \u0633\u0627\u06B5",
        other: "\u062F\u06D5\u0648\u0631\u0648\u0628\u06D5\u0631\u06CC {{count}} \u0633\u0627\u06B5"
    },
    xYears: {
        one: "1 \u0633\u0627\u06B5",
        other: "{{count}} \u0633\u0627\u06B5"
    },
    overXYears: {
        one: "\u0632\u06CC\u0627\u062A\u0631 \u0644\u06D5 \u0633\u0627\u06B5\u06CE\u06A9",
        other: "\u0632\u06CC\u0627\u062A\u0631 \u0644\u06D5 {{count}} \u0633\u0627\u06B5"
    },
    almostXYears: {
        one: "\u0628\u06D5\u0646\u0632\u06CC\u06A9\u06D5\u06CC\u06CC \u0633\u0627\u06B5\u06CE\u06A9  ",
        other: "\u0628\u06D5\u0646\u0632\u06CC\u06A9\u06D5\u06CC\u06CC {{count}} \u0633\u0627\u06B5"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0644\u06D5 \u0645\u0627\u0648\u06D5\u06CC " + result + "\u062F\u0627";
        else return result + "\u067E\u06CE\u0634 \u0626\u06CE\u0633\u062A\u0627";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"dHRcc":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("37359c273f132a5c");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u06A9\u0627\u062A\u0698\u0645\u06CE\u0631' {{time}}",
    long: "{{date}} '\u06A9\u0627\u062A\u0698\u0645\u06CE\u0631' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"37359c273f132a5c":"6OYyu"}],"gnh8T":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0647\u06D5\u0641\u062A\u06D5\u06CC \u0695\u0627\u0628\u0631\u062F\u0648\u0648' eeee '\u06A9\u0627\u062A\u0698\u0645\u06CE\u0631' p",
    yesterday: "'\u062F\u0648\u06CE\u0646\u06CE \u06A9\u0627\u062A\u0698\u0645\u06CE\u0631' p",
    today: "'\u0626\u06D5\u0645\u0695\u06C6 \u06A9\u0627\u062A\u0698\u0645\u06CE\u0631' p",
    tomorrow: "'\u0628\u06D5\u06CC\u0627\u0646\u06CC \u06A9\u0627\u062A\u0698\u0645\u06CE\u0631' p",
    nextWeek: "eeee '\u06A9\u0627\u062A\u0698\u0645\u06CE\u0631' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"gAOl6":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("8db81c20e02cc00f");
const eraValues = {
    narrow: [
        "\u067E",
        "\u062F"
    ],
    abbreviated: [
        "\u067E-\u0632",
        "\u062F-\u0632"
    ],
    wide: [
        "\u067E\u06CE\u0634 \u0632\u0627\u06CC\u0646",
        "\u062F\u0648\u0627\u06CC \u0632\u0627\u06CC\u0646"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u06861\u0645",
        "\u06862\u0645",
        "\u06863\u0645",
        "\u06864\u0645"
    ],
    wide: [
        "\u0686\u0627\u0631\u06D5\u06AF\u06CC \u06CC\u06D5\u06A9\u06D5\u0645",
        "\u0686\u0627\u0631\u06D5\u06AF\u06CC \u062F\u0648\u0648\u06D5\u0645",
        "\u0686\u0627\u0631\u06D5\u06AF\u06CC \u0633\u06CE\u06CC\u06D5\u0645",
        "\u0686\u0627\u0631\u06D5\u06AF\u06CC \u0686\u0648\u0627\u0631\u06D5\u0645"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "\u06A9-\u062F",
        "\u0634",
        "\u0626\u0627",
        "\u0646",
        "\u0645",
        "\u062D",
        "\u062A",
        "\u0626\u0627",
        "\u0626\u06D5",
        "\u062A\u0634-\u06CC",
        "\u062A\u0634-\u062F",
        "\u06A9-\u06CC"
    ],
    abbreviated: [
        "\u06A9\u0627\u0646-\u062F\u0648\u0648",
        "\u0634\u0648\u0628",
        "\u0626\u0627\u062F",
        "\u0646\u06CC\u0633",
        "\u0645\u0627\u06CC\u0633",
        "\u062D\u0648\u0632",
        "\u062A\u06D5\u0645",
        "\u0626\u0627\u0628",
        "\u0626\u06D5\u0644",
        "\u062A\u0634-\u06CC\u06D5\u06A9",
        "\u062A\u0634-\u062F\u0648\u0648",
        "\u06A9\u0627\u0646-\u06CC\u06D5\u06A9"
    ],
    wide: [
        "\u06A9\u0627\u0646\u0648\u0648\u0646\u06CC \u062F\u0648\u0648\u06D5\u0645",
        "\u0634\u0648\u0628\u0627\u062A",
        "\u0626\u0627\u062F\u0627\u0631",
        "\u0646\u06CC\u0633\u0627\u0646",
        "\u0645\u0627\u06CC\u0633",
        "\u062D\u0648\u0632\u06D5\u06CC\u0631\u0627\u0646",
        "\u062A\u06D5\u0645\u0645\u0648\u0632",
        "\u0626\u0627\u0628",
        "\u0626\u06D5\u06CC\u0644\u0648\u0644",
        "\u062A\u0634\u0631\u06CC\u0646\u06CC \u06CC\u06D5\u06A9\u06D5\u0645",
        "\u062A\u0634\u0631\u06CC\u0646\u06CC \u062F\u0648\u0648\u06D5\u0645",
        "\u06A9\u0627\u0646\u0648\u0648\u0646\u06CC \u06CC\u06D5\u06A9\u06D5\u0645"
    ]
};
const dayValues = {
    narrow: [
        "\u06CC-\u0634",
        "\u062F-\u0634",
        "\u0633-\u0634",
        "\u0686-\u0634",
        "\u067E-\u0634",
        "\u0647\u06D5",
        "\u0634"
    ],
    short: [
        "\u06CC\u06D5-\u0634\u06D5",
        "\u062F\u0648\u0648-\u0634\u06D5",
        "\u0633\u06CE-\u0634\u06D5",
        "\u0686\u0648-\u0634\u06D5",
        "\u067E\u06CE-\u0634\u06D5",
        "\u0647\u06D5\u06CC",
        "\u0634\u06D5"
    ],
    abbreviated: [
        "\u06CC\u06D5\u06A9-\u0634\u06D5\u0645",
        "\u062F\u0648\u0648-\u0634\u06D5\u0645",
        "\u0633\u06CE-\u0634\u06D5\u0645",
        "\u0686\u0648\u0627\u0631-\u0634\u06D5\u0645",
        "\u067E\u06CE\u0646\u062C-\u0634\u06D5\u0645",
        "\u0647\u06D5\u06CC\u0646\u06CC",
        "\u0634\u06D5\u0645\u06D5"
    ],
    wide: [
        "\u06CC\u06D5\u06A9 \u0634\u06D5\u0645\u06D5",
        "\u062F\u0648\u0648 \u0634\u06D5\u0645\u06D5",
        "\u0633\u06CE \u0634\u06D5\u0645\u06D5",
        "\u0686\u0648\u0627\u0631 \u0634\u06D5\u0645\u06D5",
        "\u067E\u06CE\u0646\u062C \u0634\u06D5\u0645\u06D5",
        "\u0647\u06D5\u06CC\u0646\u06CC",
        "\u0634\u06D5\u0645\u06D5"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u067E",
        pm: "\u062F",
        midnight: "\u0646-\u0634",
        noon: "\u0646",
        morning: "\u0628\u06D5\u06CC\u0627\u0646\u06CC",
        afternoon: "\u062F\u0648\u0627\u06CC \u0646\u06CC\u0648\u06D5\u0695\u06C6",
        evening: "\u0626\u06CE\u0648\u0627\u0631\u06D5",
        night: "\u0634\u06D5\u0648"
    },
    abbreviated: {
        am: "\u067E-\u0646",
        pm: "\u062F-\u0646",
        midnight: "\u0646\u06CC\u0648\u06D5 \u0634\u06D5\u0648",
        noon: "\u0646\u06CC\u0648\u06D5\u0695\u06C6",
        morning: "\u0628\u06D5\u06CC\u0627\u0646\u06CC",
        afternoon: "\u062F\u0648\u0627\u06CC \u0646\u06CC\u0648\u06D5\u0695\u06C6",
        evening: "\u0626\u06CE\u0648\u0627\u0631\u06D5",
        night: "\u0634\u06D5\u0648"
    },
    wide: {
        am: "\u067E\u06CE\u0634 \u0646\u06CC\u0648\u06D5\u0695\u06C6",
        pm: "\u062F\u0648\u0627\u06CC \u0646\u06CC\u0648\u06D5\u0695\u06C6",
        midnight: "\u0646\u06CC\u0648\u06D5 \u0634\u06D5\u0648",
        noon: "\u0646\u06CC\u0648\u06D5\u0695\u06C6",
        morning: "\u0628\u06D5\u06CC\u0627\u0646\u06CC",
        afternoon: "\u062F\u0648\u0627\u06CC \u0646\u06CC\u0648\u06D5\u0695\u06C6",
        evening: "\u0626\u06CE\u0648\u0627\u0631\u06D5",
        night: "\u0634\u06D5\u0648"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u067E",
        pm: "\u062F",
        midnight: "\u0646-\u0634",
        noon: "\u0646",
        morning: "\u0644\u06D5 \u0628\u06D5\u06CC\u0627\u0646\u06CC\u062F\u0627",
        afternoon: "\u0644\u06D5 \u062F\u0648\u0627\u06CC \u0646\u06CC\u0648\u06D5\u0695\u06C6\u062F\u0627",
        evening: "\u0644\u06D5 \u0626\u06CE\u0648\u0627\u0631\u06D5\u062F\u0627",
        night: "\u0644\u06D5 \u0634\u06D5\u0648\u062F\u0627"
    },
    abbreviated: {
        am: "\u067E-\u0646",
        pm: "\u062F-\u0646",
        midnight: "\u0646\u06CC\u0648\u06D5 \u0634\u06D5\u0648",
        noon: "\u0646\u06CC\u0648\u06D5\u0695\u06C6",
        morning: "\u0644\u06D5 \u0628\u06D5\u06CC\u0627\u0646\u06CC\u062F\u0627",
        afternoon: "\u0644\u06D5 \u062F\u0648\u0627\u06CC \u0646\u06CC\u0648\u06D5\u0695\u06C6\u062F\u0627",
        evening: "\u0644\u06D5 \u0626\u06CE\u0648\u0627\u0631\u06D5\u062F\u0627",
        night: "\u0644\u06D5 \u0634\u06D5\u0648\u062F\u0627"
    },
    wide: {
        am: "\u067E\u06CE\u0634 \u0646\u06CC\u0648\u06D5\u0695\u06C6",
        pm: "\u062F\u0648\u0627\u06CC \u0646\u06CC\u0648\u06D5\u0695\u06C6",
        midnight: "\u0646\u06CC\u0648\u06D5 \u0634\u06D5\u0648",
        noon: "\u0646\u06CC\u0648\u06D5\u0695\u06C6",
        morning: "\u0644\u06D5 \u0628\u06D5\u06CC\u0627\u0646\u06CC\u062F\u0627",
        afternoon: "\u0644\u06D5 \u062F\u0648\u0627\u06CC \u0646\u06CC\u0648\u06D5\u0695\u06C6\u062F\u0627",
        evening: "\u0644\u06D5 \u0626\u06CE\u0648\u0627\u0631\u06D5\u062F\u0627",
        night: "\u0644\u06D5 \u0634\u06D5\u0648\u062F\u0627"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"8db81c20e02cc00f":"fGq1u"}],"eHjvl":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("efb9d2b007a7532");
var _index2 = require("dfd4857b3f935c67");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(پ|د)/i,
    abbreviated: /^(پ-ز|د.ز)/i,
    wide: /^(پێش زاین| دوای زاین)/i
};
const parseEraPatterns = {
    any: [
        /^د/g,
        /^پ/g
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^م[1234]چ/i,
    wide: /^(یەکەم|دووەم|سێیەم| چوارەم) (چارەگی)? quarter/i
};
const parseQuarterPatterns = {
    wide: [
        /چارەگی یەکەم/,
        /چارەگی دووەم/,
        /چارەگی سيیەم/,
        /چارەگی چوارەم/
    ],
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(ک-د|ش|ئا|ن|م|ح|ت|ئە|تش-ی|تش-د|ک-ی)/i,
    abbreviated: /^(کان-دوو|شوب|ئاد|نیس|مایس|حوز|تەم|ئاب|ئەل|تش-یەک|تش-دوو|کان-یەک)/i,
    wide: /^(کانوونی دووەم|شوبات|ئادار|نیسان|مایس|حوزەیران|تەمموز|ئاب|ئەیلول|تشرینی یەکەم|تشرینی دووەم|کانوونی یەکەم)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ک-د/i,
        /^ش/i,
        /^ئا/i,
        /^ن/i,
        /^م/i,
        /^ح/i,
        /^ت/i,
        /^ئا/i,
        /^ئە/i,
        /^تش-ی/i,
        /^تش-د/i,
        /^ک-ی/i
    ],
    any: [
        /^کان-دوو/i,
        /^شوب/i,
        /^ئاد/i,
        /^نیس/i,
        /^مایس/i,
        /^حوز/i,
        /^تەم/i,
        /^ئاب/i,
        /^ئەل/i,
        /^تش-یەک/i,
        /^تش-دوو/i,
        /^|کان-یەک/i
    ]
};
const matchDayPatterns = {
    narrow: /^(ش|ی|د|س|چ|پ|هە)/i,
    short: /^(یە-شە|دوو-شە|سێ-شە|چو-شە|پێ-شە|هە|شە)/i,
    abbreviated: /^(یەک-شەم|دوو-شەم|سێ-شەم|چوار-شەم|پێنخ-شەم|هەینی|شەمە)/i,
    wide: /^(یەک شەمە|دوو شەمە|سێ شەمە|چوار شەمە|پێنج شەمە|هەینی|شەمە)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^w/i,
        /^t/i,
        /^f/i,
        /^s/i
    ],
    any: [
        /^su/i,
        /^m/i,
        /^tu/i,
        /^w/i,
        /^th/i,
        /^f/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(پ|د|ن-ش|ن| (بەیانی|دوای نیوەڕۆ|ئێوارە|شەو))/i,
    abbreviated: /^(پ-ن|د-ن|نیوە شەو|نیوەڕۆ|بەیانی|دوای نیوەڕۆ|ئێوارە|شەو)/,
    wide: /^(پێش نیوەڕۆ|دوای نیوەڕۆ|نیوەڕۆ|نیوە شەو|لەبەیانیدا|لەدواینیوەڕۆدا|لە ئێوارەدا|لە شەودا)/,
    any: /^(پ|د|بەیانی|نیوەڕۆ|ئێوارە|شەو)/
};
const parseDayPeriodPatterns = {
    any: {
        am: /^د/i,
        pm: /^پ/i,
        midnight: /^ن-ش/i,
        noon: /^ن/i,
        morning: /بەیانی/i,
        afternoon: /دواینیوەڕۆ/i,
        evening: /ئێوارە/i,
        night: /شەو/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"efb9d2b007a7532":"15lWd","dfd4857b3f935c67":"kWqg8"}],"i0gIP":[function(require,module,exports) {
"use strict";
exports.cs = void 0;
var _index = require("67c134dbb371d36");
var _index2 = require("3a8c5966c21d7316");
var _index3 = require("eeae4cb75235a2f1");
var _index4 = require("21243b74ef77cfbd");
var _index5 = require("d5a3f97e64d65c38");
/**
 * @category Locales
 * @summary Czech locale.
 * @language Czech
 * @iso-639-2 ces
 * @author David Rus [@davidrus](https://github.com/davidrus)
 * @author Pavel Hrách [@SilenY](https://github.com/SilenY)
 * @author Jozef Bíroš [@JozefBiros](https://github.com/JozefBiros)
 */ const cs = exports.cs = {
    code: "cs",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"67c134dbb371d36":"hY8fP","3a8c5966c21d7316":"hPmR9","eeae4cb75235a2f1":"2VGGa","21243b74ef77cfbd":"iUPIq","d5a3f97e64d65c38":"2OmS3"}],"hY8fP":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: {
            regular: "m\xe9n\u011B ne\u017E 1 sekunda",
            past: "p\u0159ed m\xe9n\u011B ne\u017E 1 sekundou",
            future: "za m\xe9n\u011B ne\u017E 1 sekundu"
        },
        few: {
            regular: "m\xe9n\u011B ne\u017E {{count}} sekundy",
            past: "p\u0159ed m\xe9n\u011B ne\u017E {{count}} sekundami",
            future: "za m\xe9n\u011B ne\u017E {{count}} sekundy"
        },
        many: {
            regular: "m\xe9n\u011B ne\u017E {{count}} sekund",
            past: "p\u0159ed m\xe9n\u011B ne\u017E {{count}} sekundami",
            future: "za m\xe9n\u011B ne\u017E {{count}} sekund"
        }
    },
    xSeconds: {
        one: {
            regular: "1 sekunda",
            past: "p\u0159ed 1 sekundou",
            future: "za 1 sekundu"
        },
        few: {
            regular: "{{count}} sekundy",
            past: "p\u0159ed {{count}} sekundami",
            future: "za {{count}} sekundy"
        },
        many: {
            regular: "{{count}} sekund",
            past: "p\u0159ed {{count}} sekundami",
            future: "za {{count}} sekund"
        }
    },
    halfAMinute: {
        type: "other",
        other: {
            regular: "p\u016Fl minuty",
            past: "p\u0159ed p\u016Fl minutou",
            future: "za p\u016Fl minuty"
        }
    },
    lessThanXMinutes: {
        one: {
            regular: "m\xe9n\u011B ne\u017E 1 minuta",
            past: "p\u0159ed m\xe9n\u011B ne\u017E 1 minutou",
            future: "za m\xe9n\u011B ne\u017E 1 minutu"
        },
        few: {
            regular: "m\xe9n\u011B ne\u017E {{count}} minuty",
            past: "p\u0159ed m\xe9n\u011B ne\u017E {{count}} minutami",
            future: "za m\xe9n\u011B ne\u017E {{count}} minuty"
        },
        many: {
            regular: "m\xe9n\u011B ne\u017E {{count}} minut",
            past: "p\u0159ed m\xe9n\u011B ne\u017E {{count}} minutami",
            future: "za m\xe9n\u011B ne\u017E {{count}} minut"
        }
    },
    xMinutes: {
        one: {
            regular: "1 minuta",
            past: "p\u0159ed 1 minutou",
            future: "za 1 minutu"
        },
        few: {
            regular: "{{count}} minuty",
            past: "p\u0159ed {{count}} minutami",
            future: "za {{count}} minuty"
        },
        many: {
            regular: "{{count}} minut",
            past: "p\u0159ed {{count}} minutami",
            future: "za {{count}} minut"
        }
    },
    aboutXHours: {
        one: {
            regular: "p\u0159ibli\u017En\u011B 1 hodina",
            past: "p\u0159ibli\u017En\u011B p\u0159ed 1 hodinou",
            future: "p\u0159ibli\u017En\u011B za 1 hodinu"
        },
        few: {
            regular: "p\u0159ibli\u017En\u011B {{count}} hodiny",
            past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} hodinami",
            future: "p\u0159ibli\u017En\u011B za {{count}} hodiny"
        },
        many: {
            regular: "p\u0159ibli\u017En\u011B {{count}} hodin",
            past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} hodinami",
            future: "p\u0159ibli\u017En\u011B za {{count}} hodin"
        }
    },
    xHours: {
        one: {
            regular: "1 hodina",
            past: "p\u0159ed 1 hodinou",
            future: "za 1 hodinu"
        },
        few: {
            regular: "{{count}} hodiny",
            past: "p\u0159ed {{count}} hodinami",
            future: "za {{count}} hodiny"
        },
        many: {
            regular: "{{count}} hodin",
            past: "p\u0159ed {{count}} hodinami",
            future: "za {{count}} hodin"
        }
    },
    xDays: {
        one: {
            regular: "1 den",
            past: "p\u0159ed 1 dnem",
            future: "za 1 den"
        },
        few: {
            regular: "{{count}} dny",
            past: "p\u0159ed {{count}} dny",
            future: "za {{count}} dny"
        },
        many: {
            regular: "{{count}} dn\xed",
            past: "p\u0159ed {{count}} dny",
            future: "za {{count}} dn\xed"
        }
    },
    aboutXWeeks: {
        one: {
            regular: "p\u0159ibli\u017En\u011B 1 t\xfdden",
            past: "p\u0159ibli\u017En\u011B p\u0159ed 1 t\xfddnem",
            future: "p\u0159ibli\u017En\u011B za 1 t\xfdden"
        },
        few: {
            regular: "p\u0159ibli\u017En\u011B {{count}} t\xfddny",
            past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} t\xfddny",
            future: "p\u0159ibli\u017En\u011B za {{count}} t\xfddny"
        },
        many: {
            regular: "p\u0159ibli\u017En\u011B {{count}} t\xfddn\u016F",
            past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} t\xfddny",
            future: "p\u0159ibli\u017En\u011B za {{count}} t\xfddn\u016F"
        }
    },
    xWeeks: {
        one: {
            regular: "1 t\xfdden",
            past: "p\u0159ed 1 t\xfddnem",
            future: "za 1 t\xfdden"
        },
        few: {
            regular: "{{count}} t\xfddny",
            past: "p\u0159ed {{count}} t\xfddny",
            future: "za {{count}} t\xfddny"
        },
        many: {
            regular: "{{count}} t\xfddn\u016F",
            past: "p\u0159ed {{count}} t\xfddny",
            future: "za {{count}} t\xfddn\u016F"
        }
    },
    aboutXMonths: {
        one: {
            regular: "p\u0159ibli\u017En\u011B 1 m\u011Bs\xedc",
            past: "p\u0159ibli\u017En\u011B p\u0159ed 1 m\u011Bs\xedcem",
            future: "p\u0159ibli\u017En\u011B za 1 m\u011Bs\xedc"
        },
        few: {
            regular: "p\u0159ibli\u017En\u011B {{count}} m\u011Bs\xedce",
            past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} m\u011Bs\xedci",
            future: "p\u0159ibli\u017En\u011B za {{count}} m\u011Bs\xedce"
        },
        many: {
            regular: "p\u0159ibli\u017En\u011B {{count}} m\u011Bs\xedc\u016F",
            past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} m\u011Bs\xedci",
            future: "p\u0159ibli\u017En\u011B za {{count}} m\u011Bs\xedc\u016F"
        }
    },
    xMonths: {
        one: {
            regular: "1 m\u011Bs\xedc",
            past: "p\u0159ed 1 m\u011Bs\xedcem",
            future: "za 1 m\u011Bs\xedc"
        },
        few: {
            regular: "{{count}} m\u011Bs\xedce",
            past: "p\u0159ed {{count}} m\u011Bs\xedci",
            future: "za {{count}} m\u011Bs\xedce"
        },
        many: {
            regular: "{{count}} m\u011Bs\xedc\u016F",
            past: "p\u0159ed {{count}} m\u011Bs\xedci",
            future: "za {{count}} m\u011Bs\xedc\u016F"
        }
    },
    aboutXYears: {
        one: {
            regular: "p\u0159ibli\u017En\u011B 1 rok",
            past: "p\u0159ibli\u017En\u011B p\u0159ed 1 rokem",
            future: "p\u0159ibli\u017En\u011B za 1 rok"
        },
        few: {
            regular: "p\u0159ibli\u017En\u011B {{count}} roky",
            past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} roky",
            future: "p\u0159ibli\u017En\u011B za {{count}} roky"
        },
        many: {
            regular: "p\u0159ibli\u017En\u011B {{count}} rok\u016F",
            past: "p\u0159ibli\u017En\u011B p\u0159ed {{count}} roky",
            future: "p\u0159ibli\u017En\u011B za {{count}} rok\u016F"
        }
    },
    xYears: {
        one: {
            regular: "1 rok",
            past: "p\u0159ed 1 rokem",
            future: "za 1 rok"
        },
        few: {
            regular: "{{count}} roky",
            past: "p\u0159ed {{count}} roky",
            future: "za {{count}} roky"
        },
        many: {
            regular: "{{count}} rok\u016F",
            past: "p\u0159ed {{count}} roky",
            future: "za {{count}} rok\u016F"
        }
    },
    overXYears: {
        one: {
            regular: "v\xedce ne\u017E 1 rok",
            past: "p\u0159ed v\xedce ne\u017E 1 rokem",
            future: "za v\xedce ne\u017E 1 rok"
        },
        few: {
            regular: "v\xedce ne\u017E {{count}} roky",
            past: "p\u0159ed v\xedce ne\u017E {{count}} roky",
            future: "za v\xedce ne\u017E {{count}} roky"
        },
        many: {
            regular: "v\xedce ne\u017E {{count}} rok\u016F",
            past: "p\u0159ed v\xedce ne\u017E {{count}} roky",
            future: "za v\xedce ne\u017E {{count}} rok\u016F"
        }
    },
    almostXYears: {
        one: {
            regular: "skoro 1 rok",
            past: "skoro p\u0159ed 1 rokem",
            future: "skoro za 1 rok"
        },
        few: {
            regular: "skoro {{count}} roky",
            past: "skoro p\u0159ed {{count}} roky",
            future: "skoro za {{count}} roky"
        },
        many: {
            regular: "skoro {{count}} rok\u016F",
            past: "skoro p\u0159ed {{count}} roky",
            future: "skoro za {{count}} rok\u016F"
        }
    }
};
const formatDistance = (token, count, options)=>{
    let pluralResult;
    const tokenValue = formatDistanceLocale[token];
    // cs pluralization
    if (tokenValue.type === "other") pluralResult = tokenValue.other;
    else if (count === 1) pluralResult = tokenValue.one;
    else if (count > 1 && count < 5) pluralResult = tokenValue.few;
    else pluralResult = tokenValue.many;
    // times
    const suffixExist = options?.addSuffix === true;
    const comparison = options?.comparison;
    let timeResult;
    if (suffixExist && comparison === -1) timeResult = pluralResult.past;
    else if (suffixExist && comparison === 1) timeResult = pluralResult.future;
    else timeResult = pluralResult.regular;
    return timeResult.replace("{{count}}", String(count));
};
exports.formatDistance = formatDistance;

},{}],"hPmR9":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("29c09d106cc329ea");
const dateFormats = {
    full: "EEEE, d. MMMM yyyy",
    long: "d. MMMM yyyy",
    medium: "d. M. yyyy",
    short: "dd.MM.yyyy"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'v' {{time}}",
    long: "{{date}} 'v' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"29c09d106cc329ea":"6OYyu"}],"2VGGa":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const accusativeWeekdays = [
    "ned\u011Bli",
    "pond\u011Bl\xed",
    "\xfater\xfd",
    "st\u0159edu",
    "\u010Dtvrtek",
    "p\xe1tek",
    "sobotu"
];
const formatRelativeLocale = {
    lastWeek: "'posledn\xed' eeee 've' p",
    yesterday: "'v\u010Dera v' p",
    today: "'dnes v' p",
    tomorrow: "'z\xedtra v' p",
    nextWeek: (date)=>{
        const day = date.getDay();
        return "'v " + accusativeWeekdays[day] + " o' p";
    },
    other: "P"
};
const formatRelative = (token, date)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"iUPIq":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("f5290273c41a86cb");
const eraValues = {
    narrow: [
        "p\u0159. n. l.",
        "n. l."
    ],
    abbreviated: [
        "p\u0159. n. l.",
        "n. l."
    ],
    wide: [
        "p\u0159ed na\u0161\xedm letopo\u010Dtem",
        "na\u0161eho letopo\u010Dtu"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1. \u010Dtvrtlet\xed",
        "2. \u010Dtvrtlet\xed",
        "3. \u010Dtvrtlet\xed",
        "4. \u010Dtvrtlet\xed"
    ],
    wide: [
        "1. \u010Dtvrtlet\xed",
        "2. \u010Dtvrtlet\xed",
        "3. \u010Dtvrtlet\xed",
        "4. \u010Dtvrtlet\xed"
    ]
};
const monthValues = {
    narrow: [
        "L",
        "\xda",
        "B",
        "D",
        "K",
        "\u010C",
        "\u010C",
        "S",
        "Z",
        "\u0158",
        "L",
        "P"
    ],
    abbreviated: [
        "led",
        "\xfano",
        "b\u0159e",
        "dub",
        "kv\u011B",
        "\u010Dvn",
        "\u010Dvc",
        "srp",
        "z\xe1\u0159",
        "\u0159\xedj",
        "lis",
        "pro"
    ],
    wide: [
        "leden",
        "\xfanor",
        "b\u0159ezen",
        "duben",
        "kv\u011Bten",
        "\u010Derven",
        "\u010Dervenec",
        "srpen",
        "z\xe1\u0159\xed",
        "\u0159\xedjen",
        "listopad",
        "prosinec"
    ]
};
const formattingMonthValues = {
    narrow: [
        "L",
        "\xda",
        "B",
        "D",
        "K",
        "\u010C",
        "\u010C",
        "S",
        "Z",
        "\u0158",
        "L",
        "P"
    ],
    abbreviated: [
        "led",
        "\xfano",
        "b\u0159e",
        "dub",
        "kv\u011B",
        "\u010Dvn",
        "\u010Dvc",
        "srp",
        "z\xe1\u0159",
        "\u0159\xedj",
        "lis",
        "pro"
    ],
    wide: [
        "ledna",
        "\xfanora",
        "b\u0159ezna",
        "dubna",
        "kv\u011Btna",
        "\u010Dervna",
        "\u010Dervence",
        "srpna",
        "z\xe1\u0159\xed",
        "\u0159\xedjna",
        "listopadu",
        "prosince"
    ]
};
const dayValues = {
    narrow: [
        "ne",
        "po",
        "\xfat",
        "st",
        "\u010Dt",
        "p\xe1",
        "so"
    ],
    short: [
        "ne",
        "po",
        "\xfat",
        "st",
        "\u010Dt",
        "p\xe1",
        "so"
    ],
    abbreviated: [
        "ned",
        "pon",
        "\xfate",
        "st\u0159",
        "\u010Dtv",
        "p\xe1t",
        "sob"
    ],
    wide: [
        "ned\u011Ble",
        "pond\u011Bl\xed",
        "\xfater\xfd",
        "st\u0159eda",
        "\u010Dtvrtek",
        "p\xe1tek",
        "sobota"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "dop.",
        pm: "odp.",
        midnight: "p\u016Flnoc",
        noon: "poledne",
        morning: "r\xe1no",
        afternoon: "odpoledne",
        evening: "ve\u010Der",
        night: "noc"
    },
    abbreviated: {
        am: "dop.",
        pm: "odp.",
        midnight: "p\u016Flnoc",
        noon: "poledne",
        morning: "r\xe1no",
        afternoon: "odpoledne",
        evening: "ve\u010Der",
        night: "noc"
    },
    wide: {
        am: "dopoledne",
        pm: "odpoledne",
        midnight: "p\u016Flnoc",
        noon: "poledne",
        morning: "r\xe1no",
        afternoon: "odpoledne",
        evening: "ve\u010Der",
        night: "noc"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "dop.",
        pm: "odp.",
        midnight: "p\u016Flnoc",
        noon: "poledne",
        morning: "r\xe1no",
        afternoon: "odpoledne",
        evening: "ve\u010Der",
        night: "noc"
    },
    abbreviated: {
        am: "dop.",
        pm: "odp.",
        midnight: "p\u016Flnoc",
        noon: "poledne",
        morning: "r\xe1no",
        afternoon: "odpoledne",
        evening: "ve\u010Der",
        night: "noc"
    },
    wide: {
        am: "dopoledne",
        pm: "odpoledne",
        midnight: "p\u016Flnoc",
        noon: "poledne",
        morning: "r\xe1no",
        afternoon: "odpoledne",
        evening: "ve\u010Der",
        night: "noc"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"f5290273c41a86cb":"fGq1u"}],"2OmS3":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("453ebc06bb079826");
var _index2 = require("b474f67e10f57cd5");
const matchOrdinalNumberPattern = /^(\d+)\.?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(p[řr](\.|ed) Kr\.|p[řr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
    abbreviated: /^(p[řr](\.|ed) Kr\.|p[řr](\.|ed) n\. l\.|po Kr\.|n\. l\.)/i,
    wide: /^(p[řr](\.|ed) Kristem|p[řr](\.|ed) na[šs][íi]m letopo[čc]tem|po Kristu|na[šs]eho letopo[čc]tu)/i
};
const parseEraPatterns = {
    any: [
        /^p[řr]/i,
        /^(po|n)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]\. [čc]tvrtlet[íi]/i,
    wide: /^[1234]\. [čc]tvrtlet[íi]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[lúubdkčcszřrlp]/i,
    abbreviated: /^(led|[úu]no|b[řr]e|dub|kv[ěe]|[čc]vn|[čc]vc|srp|z[áa][řr]|[řr][íi]j|lis|pro)/i,
    wide: /^(leden|ledna|[úu]nora?|b[řr]ezen|b[řr]ezna|duben|dubna|kv[ěe]ten|kv[ěe]tna|[čc]erven(ec|ce)?|[čc]ervna|srpen|srpna|z[áa][řr][íi]|[řr][íi]jen|[řr][íi]jna|listopad(a|u)?|prosinec|prosince)/i
};
const parseMonthPatterns = {
    narrow: [
        /^l/i,
        /^[úu]/i,
        /^b/i,
        /^d/i,
        /^k/i,
        /^[čc]/i,
        /^[čc]/i,
        /^s/i,
        /^z/i,
        /^[řr]/i,
        /^l/i,
        /^p/i
    ],
    any: [
        /^led/i,
        /^[úu]n/i,
        /^b[řr]e/i,
        /^dub/i,
        /^kv[ěe]/i,
        /^[čc]vn|[čc]erven(?!\w)|[čc]ervna/i,
        /^[čc]vc|[čc]erven(ec|ce)/i,
        /^srp/i,
        /^z[áa][řr]/i,
        /^[řr][íi]j/i,
        /^lis/i,
        /^pro/i
    ]
};
const matchDayPatterns = {
    narrow: /^[npuúsčps]/i,
    short: /^(ne|po|[úu]t|st|[čc]t|p[áa]|so)/i,
    abbreviated: /^(ned|pon|[úu]te|st[rř]|[čc]tv|p[áa]t|sob)/i,
    wide: /^(ned[ěe]le|pond[ěe]l[íi]|[úu]ter[ýy]|st[řr]eda|[čc]tvrtek|p[áa]tek|sobota)/i
};
const parseDayPatterns = {
    narrow: [
        /^n/i,
        /^p/i,
        /^[úu]/i,
        /^s/i,
        /^[čc]/i,
        /^p/i,
        /^s/i
    ],
    any: [
        /^ne/i,
        /^po/i,
        /^[úu]t/i,
        /^st/i,
        /^[čc]t/i,
        /^p[áa]/i,
        /^so/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^dopoledne|dop\.?|odpoledne|odp\.?|p[ůu]lnoc|poledne|r[áa]no|odpoledne|ve[čc]er|(v )?noci?/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^dop/i,
        pm: /^odp/i,
        midnight: /^p[ůu]lnoc/i,
        noon: /^poledne/i,
        morning: /r[áa]no/i,
        afternoon: /odpoledne/i,
        evening: /ve[čc]er/i,
        night: /noc/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"453ebc06bb079826":"15lWd","b474f67e10f57cd5":"kWqg8"}],"iW3rV":[function(require,module,exports) {
"use strict";
exports.cy = void 0;
var _index = require("ddf64192df6f2c5f");
var _index2 = require("34330426699ccd2f");
var _index3 = require("65dd199af63f2b4d");
var _index4 = require("573ef0cd94c6d89");
var _index5 = require("13042b8dc3134c37");
/**
 * @category Locales
 * @summary Welsh locale.
 * @language Welsh
 * @iso-639-2 cym
 * @author Elwyn Malethan [@elmomalmo](https://github.com/elmomalmo)
 */ const cy = exports.cy = {
    code: "cy",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"ddf64192df6f2c5f":"kh7M9","34330426699ccd2f":"6MrgX","65dd199af63f2b4d":"6q7nA","573ef0cd94c6d89":"558g0","13042b8dc3134c37":"ic2rt"}],"kh7M9":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "llai na eiliad",
        other: "llai na {{count}} eiliad"
    },
    xSeconds: {
        one: "1 eiliad",
        other: "{{count}} eiliad"
    },
    halfAMinute: "hanner munud",
    lessThanXMinutes: {
        one: "llai na munud",
        two: "llai na 2 funud",
        other: "llai na {{count}} munud"
    },
    xMinutes: {
        one: "1 munud",
        two: "2 funud",
        other: "{{count}} munud"
    },
    aboutXHours: {
        one: "tua 1 awr",
        other: "tua {{count}} awr"
    },
    xHours: {
        one: "1 awr",
        other: "{{count}} awr"
    },
    xDays: {
        one: "1 diwrnod",
        two: "2 ddiwrnod",
        other: "{{count}} diwrnod"
    },
    aboutXWeeks: {
        one: "tua 1 wythnos",
        two: "tua pythefnos",
        other: "tua {{count}} wythnos"
    },
    xWeeks: {
        one: "1 wythnos",
        two: "pythefnos",
        other: "{{count}} wythnos"
    },
    aboutXMonths: {
        one: "tua 1 mis",
        two: "tua 2 fis",
        other: "tua {{count}} mis"
    },
    xMonths: {
        one: "1 mis",
        two: "2 fis",
        other: "{{count}} mis"
    },
    aboutXYears: {
        one: "tua 1 flwyddyn",
        two: "tua 2 flynedd",
        other: "tua {{count}} mlynedd"
    },
    xYears: {
        one: "1 flwyddyn",
        two: "2 flynedd",
        other: "{{count}} mlynedd"
    },
    overXYears: {
        one: "dros 1 flwyddyn",
        two: "dros 2 flynedd",
        other: "dros {{count}} mlynedd"
    },
    almostXYears: {
        one: "bron 1 flwyddyn",
        two: "bron 2 flynedd",
        other: "bron {{count}} mlynedd"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else if (count === 2 && !!tokenValue.two) result = tokenValue.two;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "mewn " + result;
        else return result + " yn \xf4l";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"6MrgX":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("3ab25f32ea169a6e");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} 'am' {{time}}",
    long: "{{date}} 'am' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"3ab25f32ea169a6e":"6OYyu"}],"6q7nA":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'diwethaf am' p",
    yesterday: "'ddoe am' p",
    today: "'heddiw am' p",
    tomorrow: "'yfory am' p",
    nextWeek: "eeee 'am' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"558g0":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("61072d353cb8fbe3");
const eraValues = {
    narrow: [
        "C",
        "O"
    ],
    abbreviated: [
        "CC",
        "OC"
    ],
    wide: [
        "Cyn Crist",
        "Ar \xf4l Crist"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Ch1",
        "Ch2",
        "Ch3",
        "Ch4"
    ],
    wide: [
        "Chwarter 1af",
        "2ail chwarter",
        "3ydd chwarter",
        "4ydd chwarter"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "I",
        "Ch",
        "Ma",
        "E",
        "Mi",
        "Me",
        "G",
        "A",
        "Md",
        "H",
        "T",
        "Rh"
    ],
    abbreviated: [
        "Ion",
        "Chwe",
        "Maw",
        "Ebr",
        "Mai",
        "Meh",
        "Gor",
        "Aws",
        "Med",
        "Hyd",
        "Tach",
        "Rhag"
    ],
    wide: [
        "Ionawr",
        "Chwefror",
        "Mawrth",
        "Ebrill",
        "Mai",
        "Mehefin",
        "Gorffennaf",
        "Awst",
        "Medi",
        "Hydref",
        "Tachwedd",
        "Rhagfyr"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "Ll",
        "M",
        "M",
        "I",
        "G",
        "S"
    ],
    short: [
        "Su",
        "Ll",
        "Ma",
        "Me",
        "Ia",
        "Gw",
        "Sa"
    ],
    abbreviated: [
        "Sul",
        "Llun",
        "Maw",
        "Mer",
        "Iau",
        "Gwe",
        "Sad"
    ],
    wide: [
        "dydd Sul",
        "dydd Llun",
        "dydd Mawrth",
        "dydd Mercher",
        "dydd Iau",
        "dydd Gwener",
        "dydd Sadwrn"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "b",
        pm: "h",
        midnight: "hn",
        noon: "hd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
    },
    abbreviated: {
        am: "yb",
        pm: "yh",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
    },
    wide: {
        am: "y.b.",
        pm: "y.h.",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "bore",
        afternoon: "prynhawn",
        evening: "gyda'r nos",
        night: "nos"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "b",
        pm: "h",
        midnight: "hn",
        noon: "hd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
    },
    abbreviated: {
        am: "yb",
        pm: "yh",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
    },
    wide: {
        am: "y.b.",
        pm: "y.h.",
        midnight: "hanner nos",
        noon: "hanner dydd",
        morning: "yn y bore",
        afternoon: "yn y prynhawn",
        evening: "gyda'r nos",
        night: "yn y nos"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    if (number < 20) switch(number){
        case 0:
            return number + "fed";
        case 1:
            return number + "af";
        case 2:
            return number + "ail";
        case 3:
        case 4:
            return number + "ydd";
        case 5:
        case 6:
            return number + "ed";
        case 7:
        case 8:
        case 9:
        case 10:
        case 12:
        case 15:
        case 18:
            return number + "fed";
        case 11:
        case 13:
        case 14:
        case 16:
        case 17:
        case 19:
            return number + "eg";
    }
    else if (number >= 50 && number <= 60 || number === 80 || number >= 100) return number + "fed";
    return number + "ain";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"61072d353cb8fbe3":"fGq1u"}],"ic2rt":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("4039f0ab286fb5be");
var _index2 = require("39479a1eab961500");
const matchOrdinalNumberPattern = /^(\d+)(af|ail|ydd|ed|fed|eg|ain)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(c|o)/i,
    abbreviated: /^(c\.?\s?c\.?|o\.?\s?c\.?)/i,
    wide: /^(cyn christ|ar ôl crist|ar ol crist)/i
};
const parseEraPatterns = {
    wide: [
        /^c/i,
        /^(ar ôl crist|ar ol crist)/i
    ],
    any: [
        /^c/i,
        /^o/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^ch[1234]/i,
    wide: /^(chwarter 1af)|([234](ail|ydd)? chwarter)/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(i|ch|m|e|g|a|h|t|rh)/i,
    abbreviated: /^(ion|chwe|maw|ebr|mai|meh|gor|aws|med|hyd|tach|rhag)/i,
    wide: /^(ionawr|chwefror|mawrth|ebrill|mai|mehefin|gorffennaf|awst|medi|hydref|tachwedd|rhagfyr)/i
};
const parseMonthPatterns = {
    narrow: [
        /^i/i,
        /^ch/i,
        /^m/i,
        /^e/i,
        /^m/i,
        /^m/i,
        /^g/i,
        /^a/i,
        /^m/i,
        /^h/i,
        /^t/i,
        /^rh/i
    ],
    any: [
        /^io/i,
        /^ch/i,
        /^maw/i,
        /^e/i,
        /^mai/i,
        /^meh/i,
        /^g/i,
        /^a/i,
        /^med/i,
        /^h/i,
        /^t/i,
        /^rh/i
    ]
};
const matchDayPatterns = {
    narrow: /^(s|ll|m|i|g)/i,
    short: /^(su|ll|ma|me|ia|gw|sa)/i,
    abbreviated: /^(sul|llun|maw|mer|iau|gwe|sad)/i,
    wide: /^dydd (sul|llun|mawrth|mercher|iau|gwener|sadwrn)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^ll/i,
        /^m/i,
        /^m/i,
        /^i/i,
        /^g/i,
        /^s/i
    ],
    wide: [
        /^dydd su/i,
        /^dydd ll/i,
        /^dydd ma/i,
        /^dydd me/i,
        /^dydd i/i,
        /^dydd g/i,
        /^dydd sa/i
    ],
    any: [
        /^su/i,
        /^ll/i,
        /^ma/i,
        /^me/i,
        /^i/i,
        /^g/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(b|h|hn|hd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i,
    any: /^(y\.?\s?[bh]\.?|hanner nos|hanner dydd|(yn y|y|yr|gyda'r) (bore|prynhawn|nos|hwyr))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^b|(y\.?\s?b\.?)/i,
        pm: /^h|(y\.?\s?h\.?)|(yr hwyr)/i,
        midnight: /^hn|hanner nos/i,
        noon: /^hd|hanner dydd/i,
        morning: /bore/i,
        afternoon: /prynhawn/i,
        evening: /^gyda'r nos$/i,
        night: /blah/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"4039f0ab286fb5be":"15lWd","39479a1eab961500":"kWqg8"}],"eHgha":[function(require,module,exports) {
"use strict";
exports.da = void 0;
var _index = require("66001c9785ecf1a2");
var _index2 = require("e8d333aee9ab3535");
var _index3 = require("d7cf2630e6214b67");
var _index4 = require("241e08e80f9cc623");
var _index5 = require("93d501618be9b17c");
/**
 * @category Locales
 * @summary Danish locale.
 * @language Danish
 * @iso-639-2 dan
 * @author Mathias Wøbbe [@MathiasKandelborg](https://github.com/MathiasKandelborg)
 * @author Anders B. Hansen [@Andersbiha](https://github.com/Andersbiha)
 * @author [@kgram](https://github.com/kgram)
 * @author [@stefanbugge](https://github.com/stefanbugge)
 */ const da = exports.da = {
    code: "da",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"66001c9785ecf1a2":"g9BgI","e8d333aee9ab3535":"2i7N7","d7cf2630e6214b67":"gh8KW","241e08e80f9cc623":"aMfGV","93d501618be9b17c":"2LYTT"}],"g9BgI":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "mindre end \xe9t sekund",
        other: "mindre end {{count}} sekunder"
    },
    xSeconds: {
        one: "1 sekund",
        other: "{{count}} sekunder"
    },
    halfAMinute: "\xe9t halvt minut",
    lessThanXMinutes: {
        one: "mindre end \xe9t minut",
        other: "mindre end {{count}} minutter"
    },
    xMinutes: {
        one: "1 minut",
        other: "{{count}} minutter"
    },
    aboutXHours: {
        one: "cirka 1 time",
        other: "cirka {{count}} timer"
    },
    xHours: {
        one: "1 time",
        other: "{{count}} timer"
    },
    xDays: {
        one: "1 dag",
        other: "{{count}} dage"
    },
    aboutXWeeks: {
        one: "cirka 1 uge",
        other: "cirka {{count}} uger"
    },
    xWeeks: {
        one: "1 uge",
        other: "{{count}} uger"
    },
    aboutXMonths: {
        one: "cirka 1 m\xe5ned",
        other: "cirka {{count}} m\xe5neder"
    },
    xMonths: {
        one: "1 m\xe5ned",
        other: "{{count}} m\xe5neder"
    },
    aboutXYears: {
        one: "cirka 1 \xe5r",
        other: "cirka {{count}} \xe5r"
    },
    xYears: {
        one: "1 \xe5r",
        other: "{{count}} \xe5r"
    },
    overXYears: {
        one: "over 1 \xe5r",
        other: "over {{count}} \xe5r"
    },
    almostXYears: {
        one: "n\xe6sten 1 \xe5r",
        other: "n\xe6sten {{count}} \xe5r"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "om " + result;
        else return result + " siden";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"2i7N7":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("9668b842dd902c65");
const dateFormats = {
    full: "EEEE 'den' d. MMMM y",
    long: "d. MMMM y",
    medium: "d. MMM y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'kl'. {{time}}",
    long: "{{date}} 'kl'. {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"9668b842dd902c65":"6OYyu"}],"gh8KW":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'sidste' eeee 'kl.' p",
    yesterday: "'i g\xe5r kl.' p",
    today: "'i dag kl.' p",
    tomorrow: "'i morgen kl.' p",
    nextWeek: "'p\xe5' eeee 'kl.' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"aMfGV":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("43cd442e72b0a0b5");
const eraValues = {
    narrow: [
        "fvt",
        "vt"
    ],
    abbreviated: [
        "f.v.t.",
        "v.t."
    ],
    wide: [
        "f\xf8r vesterlandsk tidsregning",
        "vesterlandsk tidsregning"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1. kvt.",
        "2. kvt.",
        "3. kvt.",
        "4. kvt."
    ],
    wide: [
        "1. kvartal",
        "2. kvartal",
        "3. kvartal",
        "4. kvartal"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mar.",
        "apr.",
        "maj",
        "jun.",
        "jul.",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
    ],
    wide: [
        "januar",
        "februar",
        "marts",
        "april",
        "maj",
        "juni",
        "juli",
        "august",
        "september",
        "oktober",
        "november",
        "december"
    ]
};
// Note that 'Days - abbreviated - Formatting' has periods at the end.
// https://www.unicode.org/cldr/charts/32/summary/da.html#1760
// This makes grammatical sense in danish, as most abbreviations have periods.
const dayValues = {
    narrow: [
        "S",
        "M",
        "T",
        "O",
        "T",
        "F",
        "L"
    ],
    short: [
        "s\xf8",
        "ma",
        "ti",
        "on",
        "to",
        "fr",
        "l\xf8"
    ],
    abbreviated: [
        "s\xf8n.",
        "man.",
        "tir.",
        "ons.",
        "tor.",
        "fre.",
        "l\xf8r."
    ],
    wide: [
        "s\xf8ndag",
        "mandag",
        "tirsdag",
        "onsdag",
        "torsdag",
        "fredag",
        "l\xf8rdag"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnat",
        noon: "middag",
        morning: "morgen",
        afternoon: "eftermiddag",
        evening: "aften",
        night: "nat"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnat",
        noon: "middag",
        morning: "om morgenen",
        afternoon: "om eftermiddagen",
        evening: "om aftenen",
        night: "om natten"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"43cd442e72b0a0b5":"fGq1u"}],"2LYTT":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("32a554736d1b3fab");
var _index2 = require("697e5b8e5377a735");
const matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(fKr|fvt|eKr|vt)/i,
    abbreviated: /^(f\.Kr\.?|f\.v\.t\.?|e\.Kr\.?|v\.t\.)/i,
    wide: /^(f.Kr.|før vesterlandsk tidsregning|e.Kr.|vesterlandsk tidsregning)/i
};
const parseEraPatterns = {
    any: [
        /^f/i,
        /^(v|e)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]. kvt\./i,
    wide: /^[1234]\.? kvartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan.|feb.|mar.|apr.|maj|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
    wide: /^(januar|februar|marts|april|maj|juni|juli|august|september|oktober|november|december)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smtofl]/i,
    short: /^(søn.|man.|tir.|ons.|tor.|fre.|lør.)/i,
    abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
    wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^o/i,
        /^t/i,
        /^f/i,
        /^l/i
    ],
    any: [
        /^s/i,
        /^m/i,
        /^ti/i,
        /^o/i,
        /^to/i,
        /^f/i,
        /^l/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i,
    any: /^([ap]\.?\s?m\.?|midnat|middag|(om) (morgenen|eftermiddagen|aftenen|natten))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /midnat/i,
        noon: /middag/i,
        morning: /morgen/i,
        afternoon: /eftermiddag/i,
        evening: /aften/i,
        night: /nat/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"32a554736d1b3fab":"15lWd","697e5b8e5377a735":"kWqg8"}],"iykNF":[function(require,module,exports) {
"use strict";
exports.de = void 0;
var _index = require("bd58236a6066255f");
var _index2 = require("8b25386b4fd2a3a3");
var _index3 = require("3dd57907395679b5");
var _index4 = require("503ce73631470add");
var _index5 = require("851ff5fe116ae3fd");
/**
 * @category Locales
 * @summary German locale.
 * @language German
 * @iso-639-2 deu
 * @author Thomas Eilmsteiner [@DeMuu](https://github.com/DeMuu)
 * @author Asia [@asia-t](https://github.com/asia-t)
 * @author Van Vuong Ngo [@vanvuongngo](https://github.com/vanvuongngo)
 * @author RomanErnst [@pex](https://github.com/pex)
 * @author Philipp Keck [@Philipp91](https://github.com/Philipp91)
 */ const de = exports.de = {
    code: "de",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"bd58236a6066255f":"9mpni","8b25386b4fd2a3a3":"hTqtm","3dd57907395679b5":"gKUnf","503ce73631470add":"fhy4r","851ff5fe116ae3fd":"i68q4"}],"9mpni":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        standalone: {
            one: "weniger als 1 Sekunde",
            other: "weniger als {{count}} Sekunden"
        },
        withPreposition: {
            one: "weniger als 1 Sekunde",
            other: "weniger als {{count}} Sekunden"
        }
    },
    xSeconds: {
        standalone: {
            one: "1 Sekunde",
            other: "{{count}} Sekunden"
        },
        withPreposition: {
            one: "1 Sekunde",
            other: "{{count}} Sekunden"
        }
    },
    halfAMinute: {
        standalone: "eine halbe Minute",
        withPreposition: "einer halben Minute"
    },
    lessThanXMinutes: {
        standalone: {
            one: "weniger als 1 Minute",
            other: "weniger als {{count}} Minuten"
        },
        withPreposition: {
            one: "weniger als 1 Minute",
            other: "weniger als {{count}} Minuten"
        }
    },
    xMinutes: {
        standalone: {
            one: "1 Minute",
            other: "{{count}} Minuten"
        },
        withPreposition: {
            one: "1 Minute",
            other: "{{count}} Minuten"
        }
    },
    aboutXHours: {
        standalone: {
            one: "etwa 1 Stunde",
            other: "etwa {{count}} Stunden"
        },
        withPreposition: {
            one: "etwa 1 Stunde",
            other: "etwa {{count}} Stunden"
        }
    },
    xHours: {
        standalone: {
            one: "1 Stunde",
            other: "{{count}} Stunden"
        },
        withPreposition: {
            one: "1 Stunde",
            other: "{{count}} Stunden"
        }
    },
    xDays: {
        standalone: {
            one: "1 Tag",
            other: "{{count}} Tage"
        },
        withPreposition: {
            one: "1 Tag",
            other: "{{count}} Tagen"
        }
    },
    aboutXWeeks: {
        standalone: {
            one: "etwa 1 Woche",
            other: "etwa {{count}} Wochen"
        },
        withPreposition: {
            one: "etwa 1 Woche",
            other: "etwa {{count}} Wochen"
        }
    },
    xWeeks: {
        standalone: {
            one: "1 Woche",
            other: "{{count}} Wochen"
        },
        withPreposition: {
            one: "1 Woche",
            other: "{{count}} Wochen"
        }
    },
    aboutXMonths: {
        standalone: {
            one: "etwa 1 Monat",
            other: "etwa {{count}} Monate"
        },
        withPreposition: {
            one: "etwa 1 Monat",
            other: "etwa {{count}} Monaten"
        }
    },
    xMonths: {
        standalone: {
            one: "1 Monat",
            other: "{{count}} Monate"
        },
        withPreposition: {
            one: "1 Monat",
            other: "{{count}} Monaten"
        }
    },
    aboutXYears: {
        standalone: {
            one: "etwa 1 Jahr",
            other: "etwa {{count}} Jahre"
        },
        withPreposition: {
            one: "etwa 1 Jahr",
            other: "etwa {{count}} Jahren"
        }
    },
    xYears: {
        standalone: {
            one: "1 Jahr",
            other: "{{count}} Jahre"
        },
        withPreposition: {
            one: "1 Jahr",
            other: "{{count}} Jahren"
        }
    },
    overXYears: {
        standalone: {
            one: "mehr als 1 Jahr",
            other: "mehr als {{count}} Jahre"
        },
        withPreposition: {
            one: "mehr als 1 Jahr",
            other: "mehr als {{count}} Jahren"
        }
    },
    almostXYears: {
        standalone: {
            one: "fast 1 Jahr",
            other: "fast {{count}} Jahre"
        },
        withPreposition: {
            one: "fast 1 Jahr",
            other: "fast {{count}} Jahren"
        }
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = options?.addSuffix ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "in " + result;
        else return "vor " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"hTqtm":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("2e246269719585e4");
// DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
const dateFormats = {
    full: "EEEE, do MMMM y",
    long: "do MMMM y",
    medium: "do MMM y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'um' {{time}}",
    long: "{{date}} 'um' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"2e246269719585e4":"6OYyu"}],"gKUnf":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'letzten' eeee 'um' p",
    yesterday: "'gestern um' p",
    today: "'heute um' p",
    tomorrow: "'morgen um' p",
    nextWeek: "eeee 'um' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"fhy4r":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("9a0871eafdd2604a");
const eraValues = {
    narrow: [
        "v.Chr.",
        "n.Chr."
    ],
    abbreviated: [
        "v.Chr.",
        "n.Chr."
    ],
    wide: [
        "vor Christus",
        "nach Christus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1. Quartal",
        "2. Quartal",
        "3. Quartal",
        "4. Quartal"
    ]
};
// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Jan",
        "Feb",
        "M\xe4r",
        "Apr",
        "Mai",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Okt",
        "Nov",
        "Dez"
    ],
    wide: [
        "Januar",
        "Februar",
        "M\xe4rz",
        "April",
        "Mai",
        "Juni",
        "Juli",
        "August",
        "September",
        "Oktober",
        "November",
        "Dezember"
    ]
};
// https://st.unicode.org/cldr-apps/v#/de/Gregorian/
const formattingMonthValues = {
    narrow: monthValues.narrow,
    abbreviated: [
        "Jan.",
        "Feb.",
        "M\xe4rz",
        "Apr.",
        "Mai",
        "Juni",
        "Juli",
        "Aug.",
        "Sep.",
        "Okt.",
        "Nov.",
        "Dez."
    ],
    wide: monthValues.wide
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "D",
        "M",
        "D",
        "F",
        "S"
    ],
    short: [
        "So",
        "Mo",
        "Di",
        "Mi",
        "Do",
        "Fr",
        "Sa"
    ],
    abbreviated: [
        "So.",
        "Mo.",
        "Di.",
        "Mi.",
        "Do.",
        "Fr.",
        "Sa."
    ],
    wide: [
        "Sonntag",
        "Montag",
        "Dienstag",
        "Mittwoch",
        "Donnerstag",
        "Freitag",
        "Samstag"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
const dayPeriodValues = {
    narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachm.",
        evening: "Abend",
        night: "Nacht"
    },
    abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
    },
    wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachm.",
        evening: "abends",
        night: "nachts"
    },
    abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
    },
    wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        formattingValues: formattingMonthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"9a0871eafdd2604a":"fGq1u"}],"i68q4":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("246c081e87072e41");
var _index2 = require("205e7260645c62a2");
const matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
    abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
    wide: /^(vor Christus|vor unserer Zeitrechnung|nach Christus|unserer Zeitrechnung)/i
};
const parseEraPatterns = {
    any: [
        /^v/i,
        /^n/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](\.)? Quartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(j[aä]n|feb|mär[z]?|apr|mai|jun[i]?|jul[i]?|aug|sep|okt|nov|dez)\.?/i,
    wide: /^(januar|februar|märz|april|mai|juni|juli|august|september|oktober|november|dezember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^j[aä]/i,
        /^f/i,
        /^mär/i,
        /^ap/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smdmf]/i,
    short: /^(so|mo|di|mi|do|fr|sa)/i,
    abbreviated: /^(son?|mon?|die?|mit?|don?|fre?|sam?)\.?/i,
    wide: /^(sonntag|montag|dienstag|mittwoch|donnerstag|freitag|samstag)/i
};
const parseDayPatterns = {
    any: [
        /^so/i,
        /^mo/i,
        /^di/i,
        /^mi/i,
        /^do/i,
        /^f/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(vm\.?|nm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
    abbreviated: /^(vorm\.?|nachm\.?|Mitternacht|Mittag|morgens|nachm\.?|abends|nachts)/i,
    wide: /^(vormittags|nachmittags|Mitternacht|Mittag|morgens|nachmittags|abends|nachts)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^v/i,
        pm: /^n/i,
        midnight: /^Mitte/i,
        noon: /^Mitta/i,
        morning: /morgens/i,
        afternoon: /nachmittags/i,
        evening: /abends/i,
        night: /nachts/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"246c081e87072e41":"15lWd","205e7260645c62a2":"kWqg8"}],"akm4a":[function(require,module,exports) {
"use strict";
exports.deAT = void 0;
var _index = require("144b0cef60fce946");
var _index2 = require("777204ce2b92c8b5");
var _index3 = require("ffd5d83109df4c9c");
var _index4 = require("9df67c16773abc60");
var _index5 = require("1ed634e29422d5e2"); // difference to 'de' locale
/**
 * @category Locales
 * @summary German locale (Austria).
 * @language German
 * @iso-639-2 deu
 * @author Christoph Tobias Stenglein [@cstenglein](https://github.com/cstenglein)
 */ const deAT = exports.deAT = {
    code: "de-AT",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index5.localize,
    match: _index4.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"144b0cef60fce946":"9mpni","777204ce2b92c8b5":"hTqtm","ffd5d83109df4c9c":"gKUnf","9df67c16773abc60":"i68q4","1ed634e29422d5e2":"2Euwf"}],"2Euwf":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("a1f7aa36fa1c78c3");
const eraValues = {
    narrow: [
        "v.Chr.",
        "n.Chr."
    ],
    abbreviated: [
        "v.Chr.",
        "n.Chr."
    ],
    wide: [
        "vor Christus",
        "nach Christus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1. Quartal",
        "2. Quartal",
        "3. Quartal",
        "4. Quartal"
    ]
};
// Note: in German, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "J\xe4n",
        "Feb",
        "M\xe4r",
        "Apr",
        "Mai",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Okt",
        "Nov",
        "Dez"
    ],
    wide: [
        "J\xe4nner",
        "Februar",
        "M\xe4rz",
        "April",
        "Mai",
        "Juni",
        "Juli",
        "August",
        "September",
        "Oktober",
        "November",
        "Dezember"
    ]
};
// https://st.unicode.org/cldr-apps/v#/de_AT/Gregorian/
const formattingMonthValues = {
    narrow: monthValues.narrow,
    abbreviated: [
        "J\xe4n.",
        "Feb.",
        "M\xe4rz",
        "Apr.",
        "Mai",
        "Juni",
        "Juli",
        "Aug.",
        "Sep.",
        "Okt.",
        "Nov.",
        "Dez."
    ],
    wide: monthValues.wide
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "D",
        "M",
        "D",
        "F",
        "S"
    ],
    short: [
        "So",
        "Mo",
        "Di",
        "Mi",
        "Do",
        "Fr",
        "Sa"
    ],
    abbreviated: [
        "So.",
        "Mo.",
        "Di.",
        "Mi.",
        "Do.",
        "Fr.",
        "Sa."
    ],
    wide: [
        "Sonntag",
        "Montag",
        "Dienstag",
        "Mittwoch",
        "Donnerstag",
        "Freitag",
        "Samstag"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/de.html#1881
const dayPeriodValues = {
    narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachm.",
        evening: "Abend",
        night: "Nacht"
    },
    abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
    },
    wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "Morgen",
        afternoon: "Nachmittag",
        evening: "Abend",
        night: "Nacht"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "vm.",
        pm: "nm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachm.",
        evening: "abends",
        night: "nachts"
    },
    abbreviated: {
        am: "vorm.",
        pm: "nachm.",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
    },
    wide: {
        am: "vormittags",
        pm: "nachmittags",
        midnight: "Mitternacht",
        noon: "Mittag",
        morning: "morgens",
        afternoon: "nachmittags",
        evening: "abends",
        night: "nachts"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        formattingValues: formattingMonthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"a1f7aa36fa1c78c3":"fGq1u"}],"aHW44":[function(require,module,exports) {
"use strict";
exports.el = void 0;
var _index = require("c76aa9c71412c8e5");
var _index2 = require("f41601f99312a51");
var _index3 = require("3c6f8ba2b335a666");
var _index4 = require("711407dc02a4d8fa");
var _index5 = require("7a03b3d0952bf27e");
/**
 * @category Locales
 * @summary Greek locale.
 * @language Greek
 * @iso-639-2 ell
 * @author Fanis Katsimpas [@fanixk](https://github.com/fanixk)
 * @author Theodoros Orfanidis [@teoulas](https://github.com/teoulas)
 */ const el = exports.el = {
    code: "el",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"c76aa9c71412c8e5":"7P35U","f41601f99312a51":"h26L2","3c6f8ba2b335a666":"6PSyy","711407dc02a4d8fa":"8XXtC","7a03b3d0952bf27e":"huHVh"}],"7P35U":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u03BB\u03B9\u03B3\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC \u03AD\u03BD\u03B1 \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03BF",
        other: "\u03BB\u03B9\u03B3\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC {{count}} \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03B1"
    },
    xSeconds: {
        one: "1 \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03BF",
        other: "{{count}} \u03B4\u03B5\u03C5\u03C4\u03B5\u03C1\u03CC\u03BB\u03B5\u03C0\u03C4\u03B1"
    },
    halfAMinute: "\u03BC\u03B9\u03C3\u03CC \u03BB\u03B5\u03C0\u03C4\u03CC",
    lessThanXMinutes: {
        one: "\u03BB\u03B9\u03B3\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC \u03AD\u03BD\u03B1 \u03BB\u03B5\u03C0\u03C4\u03CC",
        other: "\u03BB\u03B9\u03B3\u03CC\u03C4\u03B5\u03C1\u03BF \u03B1\u03C0\u03CC {{count}} \u03BB\u03B5\u03C0\u03C4\u03AC"
    },
    xMinutes: {
        one: "1 \u03BB\u03B5\u03C0\u03C4\u03CC",
        other: "{{count}} \u03BB\u03B5\u03C0\u03C4\u03AC"
    },
    aboutXHours: {
        one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03CE\u03C1\u03B1",
        other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03CE\u03C1\u03B5\u03C2"
    },
    xHours: {
        one: "1 \u03CE\u03C1\u03B1",
        other: "{{count}} \u03CE\u03C1\u03B5\u03C2"
    },
    xDays: {
        one: "1 \u03B7\u03BC\u03AD\u03C1\u03B1",
        other: "{{count}} \u03B7\u03BC\u03AD\u03C1\u03B5\u03C2"
    },
    aboutXWeeks: {
        one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1",
        other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B5\u03C2"
    },
    xWeeks: {
        one: "1 \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B1",
        other: "{{count}} \u03B5\u03B2\u03B4\u03BF\u03BC\u03AC\u03B4\u03B5\u03C2"
    },
    aboutXMonths: {
        one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03BC\u03AE\u03BD\u03B1\u03C2",
        other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03BC\u03AE\u03BD\u03B5\u03C2"
    },
    xMonths: {
        one: "1 \u03BC\u03AE\u03BD\u03B1\u03C2",
        other: "{{count}} \u03BC\u03AE\u03BD\u03B5\u03C2"
    },
    aboutXYears: {
        one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03C7\u03C1\u03CC\u03BD\u03BF",
        other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1"
    },
    xYears: {
        one: "1 \u03C7\u03C1\u03CC\u03BD\u03BF",
        other: "{{count}} \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1"
    },
    overXYears: {
        one: "\u03C0\u03AC\u03BD\u03C9 \u03B1\u03C0\u03CC 1 \u03C7\u03C1\u03CC\u03BD\u03BF",
        other: "\u03C0\u03AC\u03BD\u03C9 \u03B1\u03C0\u03CC {{count}} \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1"
    },
    almostXYears: {
        one: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 1 \u03C7\u03C1\u03CC\u03BD\u03BF",
        other: "\u03C0\u03B5\u03C1\u03AF\u03C0\u03BF\u03C5 {{count}} \u03C7\u03C1\u03CC\u03BD\u03B9\u03B1"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u03C3\u03B5 " + result;
        else return result + " \u03C0\u03C1\u03B9\u03BD";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"h26L2":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("d6b2ea9d44b2239c");
const dateFormats = {
    full: "EEEE, d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "d/M/yy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} - {{time}}",
    long: "{{date}} - {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"d6b2ea9d44b2239c":"6OYyu"}],"6PSyy":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        switch(date.getDay()){
            case 6:
                return "'\u03C4\u03BF \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03BF' eeee '\u03C3\u03C4\u03B9\u03C2' p";
            default:
                return "'\u03C4\u03B7\u03BD \u03C0\u03C1\u03BF\u03B7\u03B3\u03BF\u03CD\u03BC\u03B5\u03BD\u03B7' eeee '\u03C3\u03C4\u03B9\u03C2' p";
        }
    },
    yesterday: "'\u03C7\u03B8\u03B5\u03C2 \u03C3\u03C4\u03B9\u03C2' p",
    today: "'\u03C3\u03AE\u03BC\u03B5\u03C1\u03B1 \u03C3\u03C4\u03B9\u03C2' p",
    tomorrow: "'\u03B1\u03CD\u03C1\u03B9\u03BF \u03C3\u03C4\u03B9\u03C2' p",
    nextWeek: "eeee '\u03C3\u03C4\u03B9\u03C2' p",
    other: "P"
};
const formatRelative = (token, date)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"8XXtC":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("578af887c136646a");
const eraValues = {
    narrow: [
        "\u03C0\u03A7",
        "\u03BC\u03A7"
    ],
    abbreviated: [
        "\u03C0.\u03A7.",
        "\u03BC.\u03A7."
    ],
    wide: [
        "\u03C0\u03C1\u03BF \u03A7\u03C1\u03B9\u03C3\u03C4\u03BF\u03CD",
        "\u03BC\u03B5\u03C4\u03AC \u03A7\u03C1\u03B9\u03C3\u03C4\u03CC\u03BD"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u03A41",
        "\u03A42",
        "\u03A43",
        "\u03A44"
    ],
    wide: [
        "1\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF",
        "2\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF",
        "3\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF",
        "4\u03BF \u03C4\u03C1\u03AF\u03BC\u03B7\u03BD\u03BF"
    ]
};
const monthValues = {
    narrow: [
        "\u0399",
        "\u03A6",
        "\u039C",
        "\u0391",
        "\u039C",
        "\u0399",
        "\u0399",
        "\u0391",
        "\u03A3",
        "\u039F",
        "\u039D",
        "\u0394"
    ],
    abbreviated: [
        "\u0399\u03B1\u03BD",
        "\u03A6\u03B5\u03B2",
        "\u039C\u03AC\u03C1",
        "\u0391\u03C0\u03C1",
        "\u039C\u03AC\u03B9",
        "\u0399\u03BF\u03CD\u03BD",
        "\u0399\u03BF\u03CD\u03BB",
        "\u0391\u03CD\u03B3",
        "\u03A3\u03B5\u03C0",
        "\u039F\u03BA\u03C4",
        "\u039D\u03BF\u03AD",
        "\u0394\u03B5\u03BA"
    ],
    wide: [
        "\u0399\u03B1\u03BD\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2",
        "\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03AC\u03C1\u03B9\u03BF\u03C2",
        "\u039C\u03AC\u03C1\u03C4\u03B9\u03BF\u03C2",
        "\u0391\u03C0\u03C1\u03AF\u03BB\u03B9\u03BF\u03C2",
        "\u039C\u03AC\u03B9\u03BF\u03C2",
        "\u0399\u03BF\u03CD\u03BD\u03B9\u03BF\u03C2",
        "\u0399\u03BF\u03CD\u03BB\u03B9\u03BF\u03C2",
        "\u0391\u03CD\u03B3\u03BF\u03C5\u03C3\u03C4\u03BF\u03C2",
        "\u03A3\u03B5\u03C0\u03C4\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2",
        "\u039F\u03BA\u03C4\u03CE\u03B2\u03C1\u03B9\u03BF\u03C2",
        "\u039D\u03BF\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2",
        "\u0394\u03B5\u03BA\u03AD\u03BC\u03B2\u03C1\u03B9\u03BF\u03C2"
    ]
};
const formattingMonthValues = {
    narrow: [
        "\u0399",
        "\u03A6",
        "\u039C",
        "\u0391",
        "\u039C",
        "\u0399",
        "\u0399",
        "\u0391",
        "\u03A3",
        "\u039F",
        "\u039D",
        "\u0394"
    ],
    abbreviated: [
        "\u0399\u03B1\u03BD",
        "\u03A6\u03B5\u03B2",
        "\u039C\u03B1\u03C1",
        "\u0391\u03C0\u03C1",
        "\u039C\u03B1\u0390",
        "\u0399\u03BF\u03C5\u03BD",
        "\u0399\u03BF\u03C5\u03BB",
        "\u0391\u03C5\u03B3",
        "\u03A3\u03B5\u03C0",
        "\u039F\u03BA\u03C4",
        "\u039D\u03BF\u03B5",
        "\u0394\u03B5\u03BA"
    ],
    wide: [
        "\u0399\u03B1\u03BD\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5",
        "\u03A6\u03B5\u03B2\u03C1\u03BF\u03C5\u03B1\u03C1\u03AF\u03BF\u03C5",
        "\u039C\u03B1\u03C1\u03C4\u03AF\u03BF\u03C5",
        "\u0391\u03C0\u03C1\u03B9\u03BB\u03AF\u03BF\u03C5",
        "\u039C\u03B1\u0390\u03BF\u03C5",
        "\u0399\u03BF\u03C5\u03BD\u03AF\u03BF\u03C5",
        "\u0399\u03BF\u03C5\u03BB\u03AF\u03BF\u03C5",
        "\u0391\u03C5\u03B3\u03BF\u03CD\u03C3\u03C4\u03BF\u03C5",
        "\u03A3\u03B5\u03C0\u03C4\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5",
        "\u039F\u03BA\u03C4\u03C9\u03B2\u03C1\u03AF\u03BF\u03C5",
        "\u039D\u03BF\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5",
        "\u0394\u03B5\u03BA\u03B5\u03BC\u03B2\u03C1\u03AF\u03BF\u03C5"
    ]
};
const dayValues = {
    narrow: [
        "\u039A",
        "\u0394",
        "T",
        "\u03A4",
        "\u03A0",
        "\u03A0",
        "\u03A3"
    ],
    short: [
        "\u039A\u03C5",
        "\u0394\u03B5",
        "\u03A4\u03C1",
        "\u03A4\u03B5",
        "\u03A0\u03AD",
        "\u03A0\u03B1",
        "\u03A3\u03AC"
    ],
    abbreviated: [
        "\u039A\u03C5\u03C1",
        "\u0394\u03B5\u03C5",
        "\u03A4\u03C1\u03AF",
        "\u03A4\u03B5\u03C4",
        "\u03A0\u03AD\u03BC",
        "\u03A0\u03B1\u03C1",
        "\u03A3\u03AC\u03B2"
    ],
    wide: [
        "\u039A\u03C5\u03C1\u03B9\u03B1\u03BA\u03AE",
        "\u0394\u03B5\u03C5\u03C4\u03AD\u03C1\u03B1",
        "\u03A4\u03C1\u03AF\u03C4\u03B7",
        "\u03A4\u03B5\u03C4\u03AC\u03C1\u03C4\u03B7",
        "\u03A0\u03AD\u03BC\u03C0\u03C4\u03B7",
        "\u03A0\u03B1\u03C1\u03B1\u03C3\u03BA\u03B5\u03C5\u03AE",
        "\u03A3\u03AC\u03B2\u03B2\u03B1\u03C4\u03BF"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u03C0\u03BC",
        pm: "\u03BC\u03BC",
        midnight: "\u03BC\u03B5\u03C3\u03AC\u03BD\u03C5\u03C7\u03C4\u03B1",
        noon: "\u03BC\u03B5\u03C3\u03B7\u03BC\u03AD\u03C1\u03B9",
        morning: "\u03C0\u03C1\u03C9\u03AF",
        afternoon: "\u03B1\u03C0\u03CC\u03B3\u03B5\u03C5\u03BC\u03B1",
        evening: "\u03B2\u03C1\u03AC\u03B4\u03C5",
        night: "\u03BD\u03CD\u03C7\u03C4\u03B1"
    },
    abbreviated: {
        am: "\u03C0.\u03BC.",
        pm: "\u03BC.\u03BC.",
        midnight: "\u03BC\u03B5\u03C3\u03AC\u03BD\u03C5\u03C7\u03C4\u03B1",
        noon: "\u03BC\u03B5\u03C3\u03B7\u03BC\u03AD\u03C1\u03B9",
        morning: "\u03C0\u03C1\u03C9\u03AF",
        afternoon: "\u03B1\u03C0\u03CC\u03B3\u03B5\u03C5\u03BC\u03B1",
        evening: "\u03B2\u03C1\u03AC\u03B4\u03C5",
        night: "\u03BD\u03CD\u03C7\u03C4\u03B1"
    },
    wide: {
        am: "\u03C0.\u03BC.",
        pm: "\u03BC.\u03BC.",
        midnight: "\u03BC\u03B5\u03C3\u03AC\u03BD\u03C5\u03C7\u03C4\u03B1",
        noon: "\u03BC\u03B5\u03C3\u03B7\u03BC\u03AD\u03C1\u03B9",
        morning: "\u03C0\u03C1\u03C9\u03AF",
        afternoon: "\u03B1\u03C0\u03CC\u03B3\u03B5\u03C5\u03BC\u03B1",
        evening: "\u03B2\u03C1\u03AC\u03B4\u03C5",
        night: "\u03BD\u03CD\u03C7\u03C4\u03B1"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = options?.unit;
    let suffix;
    if (unit === "year" || unit === "month") suffix = "\u03BF\u03C2";
    else if (unit === "week" || unit === "dayOfYear" || unit === "day" || unit === "hour" || unit === "date") suffix = "\u03B7";
    else suffix = "\u03BF";
    return number + suffix;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"578af887c136646a":"fGq1u"}],"huHVh":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("8b72a27b9e549fe9");
var _index2 = require("81b7ac18de889064");
const matchOrdinalNumberPattern = /^(\d+)(ος|η|ο)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(πΧ|μΧ)/i,
    abbreviated: /^(π\.?\s?χ\.?|π\.?\s?κ\.?\s?χ\.?|μ\.?\s?χ\.?|κ\.?\s?χ\.?)/i,
    wide: /^(προ Χριστο(ύ|υ)|πριν απ(ό|ο) την Κοιν(ή|η) Χρονολογ(ί|ι)α|μετ(ά|α) Χριστ(ό|ο)ν|Κοιν(ή|η) Χρονολογ(ί|ι)α)/i
};
const parseEraPatterns = {
    any: [
        /^π/i,
        /^(μ|κ)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^τ[1234]/i,
    wide: /^[1234]ο? τρ(ί|ι)μηνο/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[ιφμαμιιασονδ]/i,
    abbreviated: /^(ιαν|φεβ|μ[άα]ρ|απρ|μ[άα][ιΐ]|ιο[ύυ]ν|ιο[ύυ]λ|α[ύυ]γ|σεπ|οκτ|νο[έε]|δεκ)/i,
    wide: /^(μ[άα][ιΐ]|α[ύυ]γο[υύ]στ)(ος|ου)|(ιανου[άα]ρ|φεβρου[άα]ρ|μ[άα]ρτ|απρ[ίι]λ|ιο[ύυ]ν|ιο[ύυ]λ|σεπτ[έε]μβρ|οκτ[ώω]βρ|νο[έε]μβρ|δεκ[έε]μβρ)(ιος|ίου)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ι/i,
        /^φ/i,
        /^μ/i,
        /^α/i,
        /^μ/i,
        /^ι/i,
        /^ι/i,
        /^α/i,
        /^σ/i,
        /^ο/i,
        /^ν/i,
        /^δ/i
    ],
    any: [
        /^ια/i,
        /^φ/i,
        /^μ[άα]ρ/i,
        /^απ/i,
        /^μ[άα][ιΐ]/i,
        /^ιο[ύυ]ν/i,
        /^ιο[ύυ]λ/i,
        /^α[ύυ]/i,
        /^σ/i,
        /^ο/i,
        /^ν/i,
        /^δ/i
    ]
};
const matchDayPatterns = {
    narrow: /^[κδτπσ]/i,
    short: /^(κυ|δε|τρ|τε|π[εέ]|π[αά]|σ[αά])/i,
    abbreviated: /^(κυρ|δευ|τρι|τετ|πεμ|παρ|σαβ)/i,
    wide: /^(κυριακ(ή|η)|δευτ(έ|ε)ρα|τρ(ί|ι)τη|τετ(ά|α)ρτη|π(έ|ε)μπτη|παρασκευ(ή|η)|σ(ά|α)ββατο)/i
};
const parseDayPatterns = {
    narrow: [
        /^κ/i,
        /^δ/i,
        /^τ/i,
        /^τ/i,
        /^π/i,
        /^π/i,
        /^σ/i
    ],
    any: [
        /^κ/i,
        /^δ/i,
        /^τρ/i,
        /^τε/i,
        /^π[εέ]/i,
        /^π[αά]/i,
        /^σ/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(πμ|μμ|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i,
    any: /^([πμ]\.?\s?μ\.?|μεσ(ά|α)νυχτα|μεσημ(έ|ε)ρι|πρω(ί|ι)|απ(ό|ο)γευμα|βρ(ά|α)δυ|ν(ύ|υ)χτα)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^πμ|π\.\s?μ\./i,
        pm: /^μμ|μ\.\s?μ\./i,
        midnight: /^μεσάν/i,
        noon: /^μεσημ(έ|ε)/i,
        morning: /πρω(ί|ι)/i,
        afternoon: /απ(ό|ο)γευμα/i,
        evening: /βρ(ά|α)δυ/i,
        night: /ν(ύ|υ)χτα/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"8b72a27b9e549fe9":"15lWd","81b7ac18de889064":"kWqg8"}],"jj9GM":[function(require,module,exports) {
"use strict";
exports.enAU = void 0;
var _index = require("279cb4045d9adcb4");
var _index2 = require("e82837d985a85884");
var _index3 = require("86fd8de7e59ddbd9");
var _index4 = require("4d4a3fc6a489b597");
var _index5 = require("2dbf6ef4ce6f842b");
/**
 * @category Locales
 * @summary English locale (Australia).
 * @language English
 * @iso-639-2 eng
 * @author Julien Malige [@JulienMalige](https://github.com/JulienMalige)
 */ const enAU = exports.enAU = {
    code: "en-AU",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"279cb4045d9adcb4":"9Lz1e","e82837d985a85884":"kCWyU","86fd8de7e59ddbd9":"6KKLO","4d4a3fc6a489b597":"ldfCO","2dbf6ef4ce6f842b":"c3v7R"}],"kCWyU":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("53822df0a0449e0");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"53822df0a0449e0":"6OYyu"}],"gKC15":[function(require,module,exports) {
"use strict";
exports.enCA = void 0;
var _index = require("48ef005f7c057a9a");
var _index2 = require("8c1f0862d81f6866");
var _index3 = require("44f9c9f6f999583a");
var _index4 = require("bf5963ecf9083077");
var _index5 = require("c118c39c25690493");
/**
 * @category Locales
 * @summary English locale (Canada).
 * @language English
 * @iso-639-2 eng
 * @author Mark Owsiak [@markowsiak](https://github.com/markowsiak)
 * @author Marco Imperatore [@mimperatore](https://github.com/mimperatore)
 */ const enCA = exports.enCA = {
    code: "en-CA",
    formatDistance: _index4.formatDistance,
    formatLong: _index5.formatLong,
    formatRelative: _index.formatRelative,
    localize: _index2.localize,
    match: _index3.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"48ef005f7c057a9a":"6KKLO","8c1f0862d81f6866":"ldfCO","44f9c9f6f999583a":"c3v7R","bf5963ecf9083077":"9wCI7","c118c39c25690493":"7mgJJ"}],"9wCI7":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "less than a second",
        other: "less than {{count}} seconds"
    },
    xSeconds: {
        one: "a second",
        other: "{{count}} seconds"
    },
    halfAMinute: "half a minute",
    lessThanXMinutes: {
        one: "less than a minute",
        other: "less than {{count}} minutes"
    },
    xMinutes: {
        one: "a minute",
        other: "{{count}} minutes"
    },
    aboutXHours: {
        one: "about an hour",
        other: "about {{count}} hours"
    },
    xHours: {
        one: "an hour",
        other: "{{count}} hours"
    },
    xDays: {
        one: "a day",
        other: "{{count}} days"
    },
    aboutXWeeks: {
        one: "about a week",
        other: "about {{count}} weeks"
    },
    xWeeks: {
        one: "a week",
        other: "{{count}} weeks"
    },
    aboutXMonths: {
        one: "about a month",
        other: "about {{count}} months"
    },
    xMonths: {
        one: "a month",
        other: "{{count}} months"
    },
    aboutXYears: {
        one: "about a year",
        other: "about {{count}} years"
    },
    xYears: {
        one: "a year",
        other: "{{count}} years"
    },
    overXYears: {
        one: "over a year",
        other: "over {{count}} years"
    },
    almostXYears: {
        one: "almost a year",
        other: "almost {{count}} years"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "in " + result;
        else return result + " ago";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"7mgJJ":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("3ede3866caa6163b");
const dateFormats = {
    full: "EEEE, MMMM do, yyyy",
    long: "MMMM do, yyyy",
    medium: "MMM d, yyyy",
    short: "yyyy-MM-dd"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"3ede3866caa6163b":"6OYyu"}],"enTRn":[function(require,module,exports) {
"use strict";
exports.enGB = void 0;
var _index = require("34beb04fb89d4f38");
var _index2 = require("2a360770b36f1630");
var _index3 = require("fd7f02555f7fc58c");
var _index4 = require("7c46047fe08fac0d");
var _index5 = require("fc2189c122b464e1");
/**
 * @category Locales
 * @summary English locale (United Kingdom).
 * @language English
 * @iso-639-2 eng
 * @author Alex [@glintik](https://github.com/glintik)
 */ const enGB = exports.enGB = {
    code: "en-GB",
    formatDistance: _index.formatDistance,
    formatLong: _index5.formatLong,
    formatRelative: _index2.formatRelative,
    localize: _index3.localize,
    match: _index4.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"34beb04fb89d4f38":"9Lz1e","2a360770b36f1630":"6KKLO","fd7f02555f7fc58c":"ldfCO","7c46047fe08fac0d":"c3v7R","fc2189c122b464e1":"aJFYU"}],"aJFYU":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("fcd1c3298fbaf230");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"fcd1c3298fbaf230":"6OYyu"}],"fj2Uo":[function(require,module,exports) {
"use strict";
exports.enIE = void 0;
var _index = require("73cf6de2a7ecdc8c");
var _index2 = require("8be1366bbfafcc6d");
var _index3 = require("e2a6e985cab5d079");
var _index4 = require("e404d66d02998c47");
var _index5 = require("63da6d574711707b");
/**
 * @category Locales
 * @summary English locale (Ireland).
 * @language English
 * @iso-639-2 eng
 * @author Tetiana [@tan75](https://github.com/tan75)
 */ const enIE = exports.enIE = {
    code: "en-IE",
    formatDistance: _index.formatDistance,
    formatLong: _index5.formatLong,
    formatRelative: _index2.formatRelative,
    localize: _index3.localize,
    match: _index4.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"73cf6de2a7ecdc8c":"9Lz1e","8be1366bbfafcc6d":"6KKLO","e2a6e985cab5d079":"ldfCO","e404d66d02998c47":"c3v7R","63da6d574711707b":"aJFYU"}],"7KK4Q":[function(require,module,exports) {
"use strict";
exports.enIN = void 0;
var _index = require("f5bf2521f829f109");
var _index2 = require("55a44961f822f5cd");
var _index3 = require("786614ce61ae78e");
var _index4 = require("d8cb44fb2bc76b46");
var _index5 = require("6b631d2305f09c07");
/**
 * @category Locales
 * @summary English locale (India).
 * @language English
 * @iso-639-2 eng
 * @author Galeel Bhasha Satthar [@gbhasha](https://github.com/gbhasha)
 */ const enIN = exports.enIN = {
    code: "en-IN",
    formatDistance: _index.formatDistance,
    formatLong: _index5.formatLong,
    formatRelative: _index2.formatRelative,
    localize: _index3.localize,
    match: _index4.match,
    options: {
        weekStartsOn: 1,
        firstWeekContainsDate: 4
    }
};

},{"f5bf2521f829f109":"9Lz1e","55a44961f822f5cd":"6KKLO","786614ce61ae78e":"ldfCO","d8cb44fb2bc76b46":"c3v7R","6b631d2305f09c07":"5Vyw8"}],"5Vyw8":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("576e43ef4668e701");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM, yyyy",
    medium: "d MMM, yyyy",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"576e43ef4668e701":"6OYyu"}],"kpeeL":[function(require,module,exports) {
"use strict";
exports.enNZ = void 0;
var _index = require("c3c38b75bd6b3ec5");
var _index2 = require("18b6dbe8d7ceb8d3");
var _index3 = require("18d190fb5d529f88");
var _index4 = require("b600f4707635bf0c");
var _index5 = require("af54e3b8723fa4cb");
/**
 * @category Locales
 * @summary English locale (New Zealand).
 * @language English
 * @iso-639-2 eng
 * @author Murray Lucas [@muntact](https://github.com/muntact)
 */ const enNZ = exports.enNZ = {
    code: "en-NZ",
    formatDistance: _index.formatDistance,
    formatLong: _index5.formatLong,
    formatRelative: _index2.formatRelative,
    localize: _index3.localize,
    match: _index4.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"c3c38b75bd6b3ec5":"9Lz1e","18b6dbe8d7ceb8d3":"6KKLO","18d190fb5d529f88":"ldfCO","b600f4707635bf0c":"c3v7R","af54e3b8723fa4cb":"7kftp"}],"7kftp":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("42b96d28dfbcace4");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"42b96d28dfbcace4":"6OYyu"}],"c8hIE":[function(require,module,exports) {
"use strict";
exports.enZA = void 0;
var _index = require("84d287b718840465");
var _index2 = require("914cc49493d5860f");
var _index3 = require("e08cc93c2537d58");
var _index4 = require("9420311b511987df");
var _index5 = require("d66ac0f8e7ab5340");
/**
 * @category Locales
 * @summary English locale (South Africa).
 * @language English
 * @iso-639-2 eng
 * @author Shaila Kavrakova [@shaykav](https://github.com/shaykav)
 */ const enZA = exports.enZA = {
    code: "en-ZA",
    formatDistance: _index.formatDistance,
    formatLong: _index5.formatLong,
    formatRelative: _index2.formatRelative,
    localize: _index3.localize,
    match: _index4.match,
    options: {
        weekStartsOn: 0,
        firstWeekContainsDate: 1
    }
};

},{"84d287b718840465":"9Lz1e","914cc49493d5860f":"6KKLO","e08cc93c2537d58":"ldfCO","9420311b511987df":"c3v7R","d66ac0f8e7ab5340":"1HJkJ"}],"1HJkJ":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("bd656ccec0fa286e");
const dateFormats = {
    full: "EEEE, dd MMMM yyyy",
    long: "dd MMMM yyyy",
    medium: "dd MMM yyyy",
    short: "yyyy/MM/dd"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'at' {{time}}",
    long: "{{date}} 'at' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"bd656ccec0fa286e":"6OYyu"}],"dAuLY":[function(require,module,exports) {
"use strict";
exports.eo = void 0;
var _index = require("a6699ea6e770894d");
var _index2 = require("e649ada6edb881b0");
var _index3 = require("8a0d20d9f64b2a18");
var _index4 = require("9b971b7e1c3c170");
var _index5 = require("bd90a7acd8d504cd");
/**
 * @category Locales
 * @summary Esperanto locale.
 * @language Esperanto
 * @iso-639-2 epo
 * @author date-fns
 */ const eo = exports.eo = {
    code: "eo",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"a6699ea6e770894d":"fxBE3","e649ada6edb881b0":"f3mp4","8a0d20d9f64b2a18":"26loe","9b971b7e1c3c170":"geuVc","bd90a7acd8d504cd":"bETvh"}],"fxBE3":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "malpli ol sekundo",
        other: "malpli ol {{count}} sekundoj"
    },
    xSeconds: {
        one: "1 sekundo",
        other: "{{count}} sekundoj"
    },
    halfAMinute: "duonminuto",
    lessThanXMinutes: {
        one: "malpli ol minuto",
        other: "malpli ol {{count}} minutoj"
    },
    xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutoj"
    },
    aboutXHours: {
        one: "proksimume 1 horo",
        other: "proksimume {{count}} horoj"
    },
    xHours: {
        one: "1 horo",
        other: "{{count}} horoj"
    },
    xDays: {
        one: "1 tago",
        other: "{{count}} tagoj"
    },
    aboutXMonths: {
        one: "proksimume 1 monato",
        other: "proksimume {{count}} monatoj"
    },
    xWeeks: {
        one: "1 semajno",
        other: "{{count}} semajnoj"
    },
    aboutXWeeks: {
        one: "proksimume 1 semajno",
        other: "proksimume {{count}} semajnoj"
    },
    xMonths: {
        one: "1 monato",
        other: "{{count}} monatoj"
    },
    aboutXYears: {
        one: "proksimume 1 jaro",
        other: "proksimume {{count}} jaroj"
    },
    xYears: {
        one: "1 jaro",
        other: "{{count}} jaroj"
    },
    overXYears: {
        one: "pli ol 1 jaro",
        other: "pli ol {{count}} jaroj"
    },
    almostXYears: {
        one: "preska\u016D 1 jaro",
        other: "preska\u016D {{count}} jaroj"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options?.comparison && options.comparison > 0) return "post " + result;
        else return "anta\u016D " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"f3mp4":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("ab194971aa3b5dc4");
const dateFormats = {
    full: "EEEE, do 'de' MMMM y",
    long: "y-MMMM-dd",
    medium: "y-MMM-dd",
    short: "yyyy-MM-dd"
};
const timeFormats = {
    full: "Ho 'horo kaj' m:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    any: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"ab194971aa3b5dc4":"6OYyu"}],"26loe":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'pasinta' eeee 'je' p",
    yesterday: "'hiera\u016D je' p",
    today: "'hodia\u016D je' p",
    tomorrow: "'morga\u016D je' p",
    nextWeek: "eeee 'je' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"geuVc":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("f0858b6aa67eaa69");
const eraValues = {
    narrow: [
        "aK",
        "pK"
    ],
    abbreviated: [
        "a.K.E.",
        "p.K.E."
    ],
    wide: [
        "anta\u016D Komuna Erao",
        "Komuna Erao"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "1-a kvaronjaro",
        "2-a kvaronjaro",
        "3-a kvaronjaro",
        "4-a kvaronjaro"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "a\u016Dg",
        "sep",
        "okt",
        "nov",
        "dec"
    ],
    wide: [
        "januaro",
        "februaro",
        "marto",
        "aprilo",
        "majo",
        "junio",
        "julio",
        "a\u016Dgusto",
        "septembro",
        "oktobro",
        "novembro",
        "decembro"
    ]
};
const dayValues = {
    narrow: [
        "D",
        "L",
        "M",
        "M",
        "\u0134",
        "V",
        "S"
    ],
    short: [
        "di",
        "lu",
        "ma",
        "me",
        "\u0135a",
        "ve",
        "sa"
    ],
    abbreviated: [
        "dim",
        "lun",
        "mar",
        "mer",
        "\u0135a\u016D",
        "ven",
        "sab"
    ],
    wide: [
        "diman\u0109o",
        "lundo",
        "mardo",
        "merkredo",
        "\u0135a\u016Ddo",
        "vendredo",
        "sabato"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
    },
    abbreviated: {
        am: "a.t.m.",
        pm: "p.t.m.",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
    },
    wide: {
        am: "anta\u016Dtagmeze",
        pm: "posttagmeze",
        midnight: "noktomezo",
        noon: "tagmezo",
        morning: "matene",
        afternoon: "posttagmeze",
        evening: "vespere",
        night: "nokte"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    const number = Number(dirtyNumber);
    return number + "-a";
};
const localize = exports.localize = {
    ordinalNumber: ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: function(quarter) {
            return Number(quarter) - 1;
        }
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"f0858b6aa67eaa69":"fGq1u"}],"bETvh":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("3a9f17858abb1286");
var _index2 = require("95400904a4d83aae");
const matchOrdinalNumberPattern = /^(\d+)(-?a)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^([ap]k)/i,
    abbreviated: /^([ap]\.?\s?k\.?\s?e\.?)/i,
    wide: /^((antaǔ |post )?komuna erao)/i
};
const parseEraPatterns = {
    any: [
        /^a/i,
        /^[kp]/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^k[1234]/i,
    wide: /^[1234](-?a)? kvaronjaro/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|a(ŭ|ux|uh|u)g|sep|okt|nov|dec)/i,
    wide: /^(januaro|februaro|marto|aprilo|majo|junio|julio|a(ŭ|ux|uh|u)gusto|septembro|oktobro|novembro|decembro)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^a(u|ŭ)/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[dlmĵjvs]/i,
    short: /^(di|lu|ma|me|(ĵ|jx|jh|j)a|ve|sa)/i,
    abbreviated: /^(dim|lun|mar|mer|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)|ven|sab)/i,
    wide: /^(diman(ĉ|cx|ch|c)o|lundo|mardo|merkredo|(ĵ|jx|jh|j)a(ŭ|ux|uh|u)do|vendredo|sabato)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^m/i,
        /^(j|ĵ)/i,
        /^v/i,
        /^s/i
    ],
    any: [
        /^d/i,
        /^l/i,
        /^ma/i,
        /^me/i,
        /^(j|ĵ)/i,
        /^v/i,
        /^s/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^([ap]|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
    abbreviated: /^([ap][.\s]?t[.\s]?m[.\s]?|(posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo])/i,
    wide: /^(anta(ŭ|ux)tagmez|posttagmez|noktomez|tagmez|maten|vesper|nokt)[eo]/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^noktom/i,
        noon: /^t/i,
        morning: /^m/i,
        afternoon: /^posttagmeze/i,
        evening: /^v/i,
        night: /^n/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
            return parseInt(value, 10);
        }
    }),
    era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: function(index) {
            return index + 1;
        }
    }),
    month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"3a9f17858abb1286":"kWqg8","95400904a4d83aae":"15lWd"}],"kZKSS":[function(require,module,exports) {
"use strict";
exports.es = void 0;
var _index = require("cf352cd085bfd7b8");
var _index2 = require("6159c3a868428aa1");
var _index3 = require("e5f56c6159a5b387");
var _index4 = require("75948c9988c45e24");
var _index5 = require("8970b40afd19739f");
/**
 * @category Locales
 * @summary Spanish locale.
 * @language Spanish
 * @iso-639-2 spa
 * @author Juan Angosto [@juanangosto](https://github.com/juanangosto)
 * @author Guillermo Grau [@guigrpa](https://github.com/guigrpa)
 * @author Fernando Agüero [@fjaguero](https://github.com/fjaguero)
 * @author Gastón Haro [@harogaston](https://github.com/harogaston)
 * @author Yago Carballo [@YagoCarballo](https://github.com/YagoCarballo)
 */ const es = exports.es = {
    code: "es",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"cf352cd085bfd7b8":"6RaOb","6159c3a868428aa1":"aQSsH","e5f56c6159a5b387":"6AWlF","75948c9988c45e24":"1wsUm","8970b40afd19739f":"2ICXd"}],"6RaOb":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "menos de un segundo",
        other: "menos de {{count}} segundos"
    },
    xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
    },
    halfAMinute: "medio minuto",
    lessThanXMinutes: {
        one: "menos de un minuto",
        other: "menos de {{count}} minutos"
    },
    xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
    },
    aboutXHours: {
        one: "alrededor de 1 hora",
        other: "alrededor de {{count}} horas"
    },
    xHours: {
        one: "1 hora",
        other: "{{count}} horas"
    },
    xDays: {
        one: "1 d\xeda",
        other: "{{count}} d\xedas"
    },
    aboutXWeeks: {
        one: "alrededor de 1 semana",
        other: "alrededor de {{count}} semanas"
    },
    xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
    },
    aboutXMonths: {
        one: "alrededor de 1 mes",
        other: "alrededor de {{count}} meses"
    },
    xMonths: {
        one: "1 mes",
        other: "{{count}} meses"
    },
    aboutXYears: {
        one: "alrededor de 1 a\xf1o",
        other: "alrededor de {{count}} a\xf1os"
    },
    xYears: {
        one: "1 a\xf1o",
        other: "{{count}} a\xf1os"
    },
    overXYears: {
        one: "m\xe1s de 1 a\xf1o",
        other: "m\xe1s de {{count}} a\xf1os"
    },
    almostXYears: {
        one: "casi 1 a\xf1o",
        other: "casi {{count}} a\xf1os"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "en " + result;
        else return "hace " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"aQSsH":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("67ce4dcada0b6cb5");
const dateFormats = {
    full: "EEEE, d 'de' MMMM 'de' y",
    long: "d 'de' MMMM 'de' y",
    medium: "d MMM y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'a las' {{time}}",
    long: "{{date}} 'a las' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"67ce4dcada0b6cb5":"6OYyu"}],"6AWlF":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'el' eeee 'pasado a la' p",
    yesterday: "'ayer a la' p",
    today: "'hoy a la' p",
    tomorrow: "'ma\xf1ana a la' p",
    nextWeek: "eeee 'a la' p",
    other: "P"
};
const formatRelativeLocalePlural = {
    lastWeek: "'el' eeee 'pasado a las' p",
    yesterday: "'ayer a las' p",
    today: "'hoy a las' p",
    tomorrow: "'ma\xf1ana a las' p",
    nextWeek: "eeee 'a las' p",
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    if (date.getHours() !== 1) return formatRelativeLocalePlural[token];
    else return formatRelativeLocale[token];
};
exports.formatRelative = formatRelative;

},{}],"1wsUm":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("df2cff8423595cb4");
const eraValues = {
    narrow: [
        "AC",
        "DC"
    ],
    abbreviated: [
        "AC",
        "DC"
    ],
    wide: [
        "antes de cristo",
        "despu\xe9s de cristo"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    wide: [
        "1\xba trimestre",
        "2\xba trimestre",
        "3\xba trimestre",
        "4\xba trimestre"
    ]
};
const monthValues = {
    narrow: [
        "e",
        "f",
        "m",
        "a",
        "m",
        "j",
        "j",
        "a",
        "s",
        "o",
        "n",
        "d"
    ],
    abbreviated: [
        "ene",
        "feb",
        "mar",
        "abr",
        "may",
        "jun",
        "jul",
        "ago",
        "sep",
        "oct",
        "nov",
        "dic"
    ],
    wide: [
        "enero",
        "febrero",
        "marzo",
        "abril",
        "mayo",
        "junio",
        "julio",
        "agosto",
        "septiembre",
        "octubre",
        "noviembre",
        "diciembre"
    ]
};
const dayValues = {
    narrow: [
        "d",
        "l",
        "m",
        "m",
        "j",
        "v",
        "s"
    ],
    short: [
        "do",
        "lu",
        "ma",
        "mi",
        "ju",
        "vi",
        "s\xe1"
    ],
    abbreviated: [
        "dom",
        "lun",
        "mar",
        "mi\xe9",
        "jue",
        "vie",
        "s\xe1b"
    ],
    wide: [
        "domingo",
        "lunes",
        "martes",
        "mi\xe9rcoles",
        "jueves",
        "viernes",
        "s\xe1bado"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "ma\xf1ana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "ma\xf1ana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "ma\xf1ana",
        afternoon: "tarde",
        evening: "tarde",
        night: "noche"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "de la ma\xf1ana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "de la ma\xf1ana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoche",
        noon: "mediodia",
        morning: "de la ma\xf1ana",
        afternoon: "de la tarde",
        evening: "de la tarde",
        night: "de la noche"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "\xba";
};
const localize = exports.localize = {
    ordinalNumber: ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>Number(quarter) - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"df2cff8423595cb4":"fGq1u"}],"2ICXd":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("51ef2a298606a038");
var _index2 = require("2b3aa79e83d5804d");
const matchOrdinalNumberPattern = /^(\d+)(º)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ac|dc|a|d)/i,
    abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
    wide: /^(antes de cristo|antes de la era com[uú]n|despu[eé]s de cristo|era com[uú]n)/i
};
const parseEraPatterns = {
    any: [
        /^ac/i,
        /^dc/i
    ],
    wide: [
        /^(antes de cristo|antes de la era com[uú]n)/i,
        /^(despu[eé]s de cristo|era com[uú]n)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^T[1234]/i,
    wide: /^[1234](º)? trimestre/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[efmajsond]/i,
    abbreviated: /^(ene|feb|mar|abr|may|jun|jul|ago|sep|oct|nov|dic)/i,
    wide: /^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i
};
const parseMonthPatterns = {
    narrow: [
        /^e/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^en/i,
        /^feb/i,
        /^mar/i,
        /^abr/i,
        /^may/i,
        /^jun/i,
        /^jul/i,
        /^ago/i,
        /^sep/i,
        /^oct/i,
        /^nov/i,
        /^dic/i
    ]
};
const matchDayPatterns = {
    narrow: /^[dlmjvs]/i,
    short: /^(do|lu|ma|mi|ju|vi|s[áa])/i,
    abbreviated: /^(dom|lun|mar|mi[ée]|jue|vie|s[áa]b)/i,
    wide: /^(domingo|lunes|martes|mi[ée]rcoles|jueves|viernes|s[áa]bado)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^m/i,
        /^j/i,
        /^v/i,
        /^s/i
    ],
    any: [
        /^do/i,
        /^lu/i,
        /^ma/i,
        /^mi/i,
        /^ju/i,
        /^vi/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mn|md|(de la|a las) (mañana|tarde|noche))/i,
    any: /^([ap]\.?\s?m\.?|medianoche|mediodia|(de la|a las) (mañana|tarde|noche))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /mañana/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noche/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
            return parseInt(value, 10);
        }
    }),
    era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"51ef2a298606a038":"kWqg8","2b3aa79e83d5804d":"15lWd"}],"eeLkE":[function(require,module,exports) {
"use strict";
exports.et = void 0;
var _index = require("f85fad9b03157d20");
var _index2 = require("59bb3d2ee307b7b9");
var _index3 = require("3e9474410608de94");
var _index4 = require("3d801bbc926a8b88");
var _index5 = require("eb548a624364cb5b");
/**
 * @category Locales
 * @summary Estonian locale.
 * @language Estonian
 * @iso-639-2 est
 * @author Priit Hansen [@HansenPriit](https://github.com/priithansen)
 */ const et = exports.et = {
    code: "et",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"f85fad9b03157d20":"dtvgp","59bb3d2ee307b7b9":"apKVX","3e9474410608de94":"405Y7","3d801bbc926a8b88":"aZsMq","eb548a624364cb5b":"cBMzR"}],"dtvgp":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        standalone: {
            one: "v\xe4hem kui \xfcks sekund",
            other: "v\xe4hem kui {{count}} sekundit"
        },
        withPreposition: {
            one: "v\xe4hem kui \xfche sekundi",
            other: "v\xe4hem kui {{count}} sekundi"
        }
    },
    xSeconds: {
        standalone: {
            one: "\xfcks sekund",
            other: "{{count}} sekundit"
        },
        withPreposition: {
            one: "\xfche sekundi",
            other: "{{count}} sekundi"
        }
    },
    halfAMinute: {
        standalone: "pool minutit",
        withPreposition: "poole minuti"
    },
    lessThanXMinutes: {
        standalone: {
            one: "v\xe4hem kui \xfcks minut",
            other: "v\xe4hem kui {{count}} minutit"
        },
        withPreposition: {
            one: "v\xe4hem kui \xfche minuti",
            other: "v\xe4hem kui {{count}} minuti"
        }
    },
    xMinutes: {
        standalone: {
            one: "\xfcks minut",
            other: "{{count}} minutit"
        },
        withPreposition: {
            one: "\xfche minuti",
            other: "{{count}} minuti"
        }
    },
    aboutXHours: {
        standalone: {
            one: "umbes \xfcks tund",
            other: "umbes {{count}} tundi"
        },
        withPreposition: {
            one: "umbes \xfche tunni",
            other: "umbes {{count}} tunni"
        }
    },
    xHours: {
        standalone: {
            one: "\xfcks tund",
            other: "{{count}} tundi"
        },
        withPreposition: {
            one: "\xfche tunni",
            other: "{{count}} tunni"
        }
    },
    xDays: {
        standalone: {
            one: "\xfcks p\xe4ev",
            other: "{{count}} p\xe4eva"
        },
        withPreposition: {
            one: "\xfche p\xe4eva",
            other: "{{count}} p\xe4eva"
        }
    },
    aboutXWeeks: {
        standalone: {
            one: "umbes \xfcks n\xe4dal",
            other: "umbes {{count}} n\xe4dalat"
        },
        withPreposition: {
            one: "umbes \xfche n\xe4dala",
            other: "umbes {{count}} n\xe4dala"
        }
    },
    xWeeks: {
        standalone: {
            one: "\xfcks n\xe4dal",
            other: "{{count}} n\xe4dalat"
        },
        withPreposition: {
            one: "\xfche n\xe4dala",
            other: "{{count}} n\xe4dala"
        }
    },
    aboutXMonths: {
        standalone: {
            one: "umbes \xfcks kuu",
            other: "umbes {{count}} kuud"
        },
        withPreposition: {
            one: "umbes \xfche kuu",
            other: "umbes {{count}} kuu"
        }
    },
    xMonths: {
        standalone: {
            one: "\xfcks kuu",
            other: "{{count}} kuud"
        },
        withPreposition: {
            one: "\xfche kuu",
            other: "{{count}} kuu"
        }
    },
    aboutXYears: {
        standalone: {
            one: "umbes \xfcks aasta",
            other: "umbes {{count}} aastat"
        },
        withPreposition: {
            one: "umbes \xfche aasta",
            other: "umbes {{count}} aasta"
        }
    },
    xYears: {
        standalone: {
            one: "\xfcks aasta",
            other: "{{count}} aastat"
        },
        withPreposition: {
            one: "\xfche aasta",
            other: "{{count}} aasta"
        }
    },
    overXYears: {
        standalone: {
            one: "rohkem kui \xfcks aasta",
            other: "rohkem kui {{count}} aastat"
        },
        withPreposition: {
            one: "rohkem kui \xfche aasta",
            other: "rohkem kui {{count}} aasta"
        }
    },
    almostXYears: {
        standalone: {
            one: "peaaegu \xfcks aasta",
            other: "peaaegu {{count}} aastat"
        },
        withPreposition: {
            one: "peaaegu \xfche aasta",
            other: "peaaegu {{count}} aasta"
        }
    }
};
const formatDistance = (token, count, options)=>{
    const usageGroup = options?.addSuffix ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
    let result;
    if (typeof usageGroup === "string") result = usageGroup;
    else if (count === 1) result = usageGroup.one;
    else result = usageGroup.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + " p\xe4rast";
        else return result + " eest";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"apKVX":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("d4622da68c0655b1");
const dateFormats = {
    full: "EEEE, d. MMMM y",
    long: "d. MMMM y",
    medium: "d. MMM y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'kell' {{time}}",
    long: "{{date}} 'kell' {{time}}",
    medium: "{{date}}. {{time}}",
    short: "{{date}}. {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"d4622da68c0655b1":"6OYyu"}],"405Y7":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'eelmine' eeee 'kell' p",
    yesterday: "'eile kell' p",
    today: "'t\xe4na kell' p",
    tomorrow: "'homme kell' p",
    nextWeek: "'j\xe4rgmine' eeee 'kell' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"aZsMq":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("5ccd7d289e97aee5");
const eraValues = {
    narrow: [
        "e.m.a",
        "m.a.j"
    ],
    abbreviated: [
        "e.m.a",
        "m.a.j"
    ],
    wide: [
        "enne meie ajaarvamist",
        "meie ajaarvamise j\xe4rgi"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "1. kvartal",
        "2. kvartal",
        "3. kvartal",
        "4. kvartal"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "V",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jaan",
        "veebr",
        "m\xe4rts",
        "apr",
        "mai",
        "juuni",
        "juuli",
        "aug",
        "sept",
        "okt",
        "nov",
        "dets"
    ],
    wide: [
        "jaanuar",
        "veebruar",
        "m\xe4rts",
        "aprill",
        "mai",
        "juuni",
        "juuli",
        "august",
        "september",
        "oktoober",
        "november",
        "detsember"
    ]
};
const dayValues = {
    narrow: [
        "P",
        "E",
        "T",
        "K",
        "N",
        "R",
        "L"
    ],
    short: [
        "P",
        "E",
        "T",
        "K",
        "N",
        "R",
        "L"
    ],
    abbreviated: [
        "p\xfchap.",
        "esmasp.",
        "teisip.",
        "kolmap.",
        "neljap.",
        "reede.",
        "laup."
    ],
    wide: [
        "p\xfchap\xe4ev",
        "esmasp\xe4ev",
        "teisip\xe4ev",
        "kolmap\xe4ev",
        "neljap\xe4ev",
        "reede",
        "laup\xe4ev"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "kesk\xf6\xf6",
        noon: "keskp\xe4ev",
        morning: "hommik",
        afternoon: "p\xe4rastl\xf5una",
        evening: "\xf5htu",
        night: "\xf6\xf6"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "kesk\xf6\xf6",
        noon: "keskp\xe4ev",
        morning: "hommik",
        afternoon: "p\xe4rastl\xf5una",
        evening: "\xf5htu",
        night: "\xf6\xf6"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "kesk\xf6\xf6",
        noon: "keskp\xe4ev",
        morning: "hommik",
        afternoon: "p\xe4rastl\xf5una",
        evening: "\xf5htu",
        night: "\xf6\xf6"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "kesk\xf6\xf6l",
        noon: "keskp\xe4eval",
        morning: "hommikul",
        afternoon: "p\xe4rastl\xf5unal",
        evening: "\xf5htul",
        night: "\xf6\xf6sel"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "kesk\xf6\xf6l",
        noon: "keskp\xe4eval",
        morning: "hommikul",
        afternoon: "p\xe4rastl\xf5unal",
        evening: "\xf5htul",
        night: "\xf6\xf6sel"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "kesk\xf6\xf6l",
        noon: "keskp\xe4eval",
        morning: "hommikul",
        afternoon: "p\xe4rastl\xf5unal",
        evening: "\xf5htul",
        night: "\xf6\xf6sel"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: monthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: dayValues,
        defaultFormattingWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"5ccd7d289e97aee5":"fGq1u"}],"cBMzR":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("b6d4312301ff83ce");
var _index2 = require("1a6c484c83a1f856");
const matchOrdinalNumberPattern = /^\d+\./i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
    abbreviated: /^(e\.m\.a|m\.a\.j|eKr|pKr)/i,
    wide: /^(enne meie ajaarvamist|meie ajaarvamise järgi|enne Kristust|pärast Kristust)/i
};
const parseEraPatterns = {
    any: [
        /^e/i,
        /^(m|p)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^K[1234]/i,
    wide: /^[1234](\.)? kvartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jvmasond]/i,
    abbreviated: /^(jaan|veebr|märts|apr|mai|juuni|juuli|aug|sept|okt|nov|dets)/i,
    wide: /^(jaanuar|veebruar|märts|aprill|mai|juuni|juuli|august|september|oktoober|november|detsember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^v/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^v/i,
        /^mär/i,
        /^ap/i,
        /^mai/i,
        /^juun/i,
        /^juul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[petknrl]/i,
    short: /^[petknrl]/i,
    abbreviated: /^(püh?|esm?|tei?|kolm?|nel?|ree?|laup?)\.?/i,
    wide: /^(pühapäev|esmaspäev|teisipäev|kolmapäev|neljapäev|reede|laupäev)/i
};
const parseDayPatterns = {
    any: [
        /^p/i,
        /^e/i,
        /^t/i,
        /^k/i,
        /^n/i,
        /^r/i,
        /^l/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(am|pm|keskööl?|keskpäev(al)?|hommik(ul)?|pärastlõunal?|õhtul?|öö(sel)?)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^keskö/i,
        noon: /^keskp/i,
        morning: /hommik/i,
        afternoon: /pärastlõuna/i,
        evening: /õhtu/i,
        night: /öö/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"b6d4312301ff83ce":"15lWd","1a6c484c83a1f856":"kWqg8"}],"ag9fr":[function(require,module,exports) {
"use strict";
exports.eu = void 0;
var _index = require("1ffc09367e6f24a");
var _index2 = require("72d3f083f6edd4d3");
var _index3 = require("af668b712d645a12");
var _index4 = require("9bdb802b9270ca76");
var _index5 = require("1cf60e08e8cf79ba");
/**
 * @category Locales
 * @summary Basque locale.
 * @language Basque
 * @iso-639-2 eus
 * @author Jacob Söderblom [@JacobSoderblom](https://github.com/JacobSoderblom)
 */ const eu = exports.eu = {
    code: "eu",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"1ffc09367e6f24a":"kxNw9","72d3f083f6edd4d3":"3SbwJ","af668b712d645a12":"ck00B","9bdb802b9270ca76":"fDIAd","1cf60e08e8cf79ba":"OeAef"}],"kxNw9":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "segundo bat baino gutxiago",
        other: "{{count}} segundo baino gutxiago"
    },
    xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundo"
    },
    halfAMinute: "minutu erdi",
    lessThanXMinutes: {
        one: "minutu bat baino gutxiago",
        other: "{{count}} minutu baino gutxiago"
    },
    xMinutes: {
        one: "1 minutu",
        other: "{{count}} minutu"
    },
    aboutXHours: {
        one: "1 ordu gutxi gorabehera",
        other: "{{count}} ordu gutxi gorabehera"
    },
    xHours: {
        one: "1 ordu",
        other: "{{count}} ordu"
    },
    xDays: {
        one: "1 egun",
        other: "{{count}} egun"
    },
    aboutXWeeks: {
        one: "aste 1 inguru",
        other: "{{count}} aste inguru"
    },
    xWeeks: {
        one: "1 aste",
        other: "{{count}} astean"
    },
    aboutXMonths: {
        one: "1 hilabete gutxi gorabehera",
        other: "{{count}} hilabete gutxi gorabehera"
    },
    xMonths: {
        one: "1 hilabete",
        other: "{{count}} hilabete"
    },
    aboutXYears: {
        one: "1 urte gutxi gorabehera",
        other: "{{count}} urte gutxi gorabehera"
    },
    xYears: {
        one: "1 urte",
        other: "{{count}} urte"
    },
    overXYears: {
        one: "1 urte baino gehiago",
        other: "{{count}} urte baino gehiago"
    },
    almostXYears: {
        one: "ia 1 urte",
        other: "ia {{count}} urte"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "en " + result;
        else return "duela " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"3SbwJ":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("147607822be055e3");
const dateFormats = {
    full: "EEEE, y'ko' MMMM'ren' d'a' y'ren'",
    long: "y'ko' MMMM'ren' d'a'",
    medium: "y MMM d",
    short: "yy/MM/dd"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'tan' {{time}}",
    long: "{{date}} 'tan' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"147607822be055e3":"6OYyu"}],"ck00B":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'joan den' eeee, LT",
    yesterday: "'atzo,' p",
    today: "'gaur,' p",
    tomorrow: "'bihar,' p",
    nextWeek: "eeee, p",
    other: "P"
};
const formatRelativeLocalePlural = {
    lastWeek: "'joan den' eeee, p",
    yesterday: "'atzo,' p",
    today: "'gaur,' p",
    tomorrow: "'bihar,' p",
    nextWeek: "eeee, p",
    other: "P"
};
const formatRelative = (token, date)=>{
    if (date.getHours() !== 1) return formatRelativeLocalePlural[token];
    return formatRelativeLocale[token];
};
exports.formatRelative = formatRelative;

},{}],"fDIAd":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("ad541e035f3e6b14");
const eraValues = {
    narrow: [
        "k.a.",
        "k.o."
    ],
    abbreviated: [
        "k.a.",
        "k.o."
    ],
    wide: [
        "kristo aurretik",
        "kristo ondoren"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1H",
        "2H",
        "3H",
        "4H"
    ],
    wide: [
        "1. hiruhilekoa",
        "2. hiruhilekoa",
        "3. hiruhilekoa",
        "4. hiruhilekoa"
    ]
};
const monthValues = {
    narrow: [
        "u",
        "o",
        "m",
        "a",
        "m",
        "e",
        "u",
        "a",
        "i",
        "u",
        "a",
        "a"
    ],
    abbreviated: [
        "urt",
        "ots",
        "mar",
        "api",
        "mai",
        "eka",
        "uzt",
        "abu",
        "ira",
        "urr",
        "aza",
        "abe"
    ],
    wide: [
        "urtarrila",
        "otsaila",
        "martxoa",
        "apirila",
        "maiatza",
        "ekaina",
        "uztaila",
        "abuztua",
        "iraila",
        "urria",
        "azaroa",
        "abendua"
    ]
};
const dayValues = {
    narrow: [
        "i",
        "a",
        "a",
        "a",
        "o",
        "o",
        "l"
    ],
    short: [
        "ig",
        "al",
        "as",
        "az",
        "og",
        "or",
        "lr"
    ],
    abbreviated: [
        "iga",
        "ast",
        "ast",
        "ast",
        "ost",
        "ost",
        "lar"
    ],
    wide: [
        "igandea",
        "astelehena",
        "asteartea",
        "asteazkena",
        "osteguna",
        "ostirala",
        "larunbata"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "ge",
        noon: "eg",
        morning: "goiza",
        afternoon: "arratsaldea",
        evening: "arratsaldea",
        night: "gaua"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "gauerdia",
        noon: "eguerdia",
        morning: "goiza",
        afternoon: "arratsaldea",
        evening: "arratsaldea",
        night: "gaua"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gauerdia",
        noon: "eguerdia",
        morning: "goiza",
        afternoon: "arratsaldea",
        evening: "arratsaldea",
        night: "gaua"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "ge",
        noon: "eg",
        morning: "goizean",
        afternoon: "arratsaldean",
        evening: "arratsaldean",
        night: "gauean"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "gauerdia",
        noon: "eguerdia",
        morning: "goizean",
        afternoon: "arratsaldean",
        evening: "arratsaldean",
        night: "gauean"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gauerdia",
        noon: "eguerdia",
        morning: "goizean",
        afternoon: "arratsaldean",
        evening: "arratsaldean",
        night: "gauean"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"ad541e035f3e6b14":"fGq1u"}],"OeAef":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("4c150f10fc3feb99");
var _index2 = require("49c2e710ab06a949");
const matchOrdinalNumberPattern = /^(\d+)(.)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(k.a.|k.o.)/i,
    abbreviated: /^(k.a.|k.o.)/i,
    wide: /^(kristo aurretik|kristo ondoren)/i
};
const parseEraPatterns = {
    narrow: [
        /^k.a./i,
        /^k.o./i
    ],
    abbreviated: [
        /^(k.a.)/i,
        /^(k.o.)/i
    ],
    wide: [
        /^(kristo aurretik)/i,
        /^(kristo ondoren)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]H/i,
    wide: /^[1234](.)? hiruhilekoa/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[uomaei]/i,
    abbreviated: /^(urt|ots|mar|api|mai|eka|uzt|abu|ira|urr|aza|abe)/i,
    wide: /^(urtarrila|otsaila|martxoa|apirila|maiatza|ekaina|uztaila|abuztua|iraila|urria|azaroa|abendua)/i
};
const parseMonthPatterns = {
    narrow: [
        /^u/i,
        /^o/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^e/i,
        /^u/i,
        /^a/i,
        /^i/i,
        /^u/i,
        /^a/i,
        /^a/i
    ],
    any: [
        /^urt/i,
        /^ots/i,
        /^mar/i,
        /^api/i,
        /^mai/i,
        /^eka/i,
        /^uzt/i,
        /^abu/i,
        /^ira/i,
        /^urr/i,
        /^aza/i,
        /^abe/i
    ]
};
const matchDayPatterns = {
    narrow: /^[iaol]/i,
    short: /^(ig|al|as|az|og|or|lr)/i,
    abbreviated: /^(iga|ast|ast|ast|ost|ost|lar)/i,
    wide: /^(igandea|astelehena|asteartea|asteazkena|osteguna|ostirala|larunbata)/i
};
const parseDayPatterns = {
    narrow: [
        /^i/i,
        /^a/i,
        /^a/i,
        /^a/i,
        /^o/i,
        /^o/i,
        /^l/i
    ],
    short: [
        /^ig/i,
        /^al/i,
        /^as/i,
        /^az/i,
        /^og/i,
        /^or/i,
        /^lr/i
    ],
    abbreviated: [
        /^iga/i,
        /^ast/i,
        /^ast/i,
        /^ast/i,
        /^ost/i,
        /^ost/i,
        /^lar/i
    ],
    wide: [
        /^igandea/i,
        /^astelehena/i,
        /^asteartea/i,
        /^asteazkena/i,
        /^osteguna/i,
        /^ostirala/i,
        /^larunbata/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|ge|eg|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i,
    any: /^([ap]\.?\s?m\.?|gauerdia|eguerdia|((goiza|goizean)|arratsaldea|(gaua|gauean)))/i
};
const parseDayPeriodPatterns = {
    narrow: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^ge/i,
        noon: /^eg/i,
        morning: /goiz/i,
        afternoon: /arratsaldea/i,
        evening: /arratsaldea/i,
        night: /gau/i
    },
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^gauerdia/i,
        noon: /^eguerdia/i,
        morning: /goiz/i,
        afternoon: /arratsaldea/i,
        evening: /arratsaldea/i,
        night: /gau/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "wide"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"4c150f10fc3feb99":"15lWd","49c2e710ab06a949":"kWqg8"}],"46enD":[function(require,module,exports) {
"use strict";
exports.faIR = void 0;
var _index = require("f67eae212c9bd7dd");
var _index2 = require("e15995c228db8118");
var _index3 = require("61be277db3e6aab9");
var _index4 = require("b13dff9fa27816d3");
var _index5 = require("fb818321d275ff71");
/**
 * @category Locales
 * @summary Persian/Farsi locale (Iran).
 * @language Persian
 * @iso-639-2 ira
 * @author Morteza Ziyae [@mort3za](https://github.com/mort3za)
 */ const faIR = exports.faIR = {
    code: "fa-IR",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 6 /* Saturday */ ,
        firstWeekContainsDate: 1
    }
};

},{"f67eae212c9bd7dd":"hci8u","e15995c228db8118":"dsgyz","61be277db3e6aab9":"htbZ8","b13dff9fa27816d3":"jFGxj","fb818321d275ff71":"b2VWQ"}],"hci8u":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u06A9\u0645\u062A\u0631 \u0627\u0632 \u06CC\u06A9 \u062B\u0627\u0646\u06CC\u0647",
        other: "\u06A9\u0645\u062A\u0631 \u0627\u0632 {{count}} \u062B\u0627\u0646\u06CC\u0647"
    },
    xSeconds: {
        one: "1 \u062B\u0627\u0646\u06CC\u0647",
        other: "{{count}} \u062B\u0627\u0646\u06CC\u0647"
    },
    halfAMinute: "\u0646\u06CC\u0645 \u062F\u0642\u06CC\u0642\u0647",
    lessThanXMinutes: {
        one: "\u06A9\u0645\u062A\u0631 \u0627\u0632 \u06CC\u06A9 \u062F\u0642\u06CC\u0642\u0647",
        other: "\u06A9\u0645\u062A\u0631 \u0627\u0632 {{count}} \u062F\u0642\u06CC\u0642\u0647"
    },
    xMinutes: {
        one: "1 \u062F\u0642\u06CC\u0642\u0647",
        other: "{{count}} \u062F\u0642\u06CC\u0642\u0647"
    },
    aboutXHours: {
        one: "\u062D\u062F\u0648\u062F 1 \u0633\u0627\u0639\u062A",
        other: "\u062D\u062F\u0648\u062F {{count}} \u0633\u0627\u0639\u062A"
    },
    xHours: {
        one: "1 \u0633\u0627\u0639\u062A",
        other: "{{count}} \u0633\u0627\u0639\u062A"
    },
    xDays: {
        one: "1 \u0631\u0648\u0632",
        other: "{{count}} \u0631\u0648\u0632"
    },
    aboutXWeeks: {
        one: "\u062D\u062F\u0648\u062F 1 \u0647\u0641\u062A\u0647",
        other: "\u062D\u062F\u0648\u062F {{count}} \u0647\u0641\u062A\u0647"
    },
    xWeeks: {
        one: "1 \u0647\u0641\u062A\u0647",
        other: "{{count}} \u0647\u0641\u062A\u0647"
    },
    aboutXMonths: {
        one: "\u062D\u062F\u0648\u062F 1 \u0645\u0627\u0647",
        other: "\u062D\u062F\u0648\u062F {{count}} \u0645\u0627\u0647"
    },
    xMonths: {
        one: "1 \u0645\u0627\u0647",
        other: "{{count}} \u0645\u0627\u0647"
    },
    aboutXYears: {
        one: "\u062D\u062F\u0648\u062F 1 \u0633\u0627\u0644",
        other: "\u062D\u062F\u0648\u062F {{count}} \u0633\u0627\u0644"
    },
    xYears: {
        one: "1 \u0633\u0627\u0644",
        other: "{{count}} \u0633\u0627\u0644"
    },
    overXYears: {
        one: "\u0628\u06CC\u0634\u062A\u0631 \u0627\u0632 1 \u0633\u0627\u0644",
        other: "\u0628\u06CC\u0634\u062A\u0631 \u0627\u0632 {{count}} \u0633\u0627\u0644"
    },
    almostXYears: {
        one: "\u0646\u0632\u062F\u06CC\u06A9 1 \u0633\u0627\u0644",
        other: "\u0646\u0632\u062F\u06CC\u06A9 {{count}} \u0633\u0627\u0644"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u062F\u0631 " + result;
        else return result + " \u0642\u0628\u0644";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"dsgyz":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("743d5cfcf92718c3");
const dateFormats = {
    full: "EEEE do MMMM y",
    long: "do MMMM y",
    medium: "d MMM y",
    short: "yyyy/MM/dd"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u062F\u0631' {{time}}",
    long: "{{date}} '\u062F\u0631' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"743d5cfcf92718c3":"6OYyu"}],"htbZ8":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee '\u06AF\u0630\u0634\u062A\u0647 \u062F\u0631' p",
    yesterday: "'\u062F\u06CC\u0631\u0648\u0632 \u062F\u0631' p",
    today: "'\u0627\u0645\u0631\u0648\u0632 \u062F\u0631' p",
    tomorrow: "'\u0641\u0631\u062F\u0627 \u062F\u0631' p",
    nextWeek: "eeee '\u062F\u0631' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"jFGxj":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("ea6095ff65d8cd1d");
const eraValues = {
    narrow: [
        "\u0642",
        "\u0628"
    ],
    abbreviated: [
        "\u0642.\u0645.",
        "\u0628.\u0645."
    ],
    wide: [
        "\u0642\u0628\u0644 \u0627\u0632 \u0645\u06CC\u0644\u0627\u062F",
        "\u0628\u0639\u062F \u0627\u0632 \u0645\u06CC\u0644\u0627\u062F"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u0633\u200C\u06451",
        "\u0633\u200C\u06452",
        "\u0633\u200C\u06453",
        "\u0633\u200C\u06454"
    ],
    wide: [
        "\u0633\u0647\u200C\u0645\u0627\u0647\u0647 1",
        "\u0633\u0647\u200C\u0645\u0627\u0647\u0647 2",
        "\u0633\u0647\u200C\u0645\u0627\u0647\u0647 3",
        "\u0633\u0647\u200C\u0645\u0627\u0647\u0647 4"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "\u0698",
        "\u0641",
        "\u0645",
        "\u0622",
        "\u0645",
        "\u062C",
        "\u062C",
        "\u0622",
        "\u0633",
        "\u0627",
        "\u0646",
        "\u062F"
    ],
    abbreviated: [
        "\u0698\u0627\u0646\u0640",
        "\u0641\u0648\u0631",
        "\u0645\u0627\u0631\u0633",
        "\u0622\u067E\u0631",
        "\u0645\u06CC",
        "\u062C\u0648\u0646",
        "\u062C\u0648\u0644\u0640",
        "\u0622\u06AF\u0648",
        "\u0633\u067E\u062A\u0640",
        "\u0627\u06A9\u062A\u0640",
        "\u0646\u0648\u0627\u0645\u0640",
        "\u062F\u0633\u0627\u0645\u0640"
    ],
    wide: [
        "\u0698\u0627\u0646\u0648\u06CC\u0647",
        "\u0641\u0648\u0631\u06CC\u0647",
        "\u0645\u0627\u0631\u0633",
        "\u0622\u067E\u0631\u06CC\u0644",
        "\u0645\u06CC",
        "\u062C\u0648\u0646",
        "\u062C\u0648\u0644\u0627\u06CC",
        "\u0622\u06AF\u0648\u0633\u062A",
        "\u0633\u067E\u062A\u0627\u0645\u0628\u0631",
        "\u0627\u06A9\u062A\u0628\u0631",
        "\u0646\u0648\u0627\u0645\u0628\u0631",
        "\u062F\u0633\u0627\u0645\u0628\u0631"
    ]
};
const dayValues = {
    narrow: [
        "\u06CC",
        "\u062F",
        "\u0633",
        "\u0686",
        "\u067E",
        "\u062C",
        "\u0634"
    ],
    short: [
        "1\u0634",
        "2\u0634",
        "3\u0634",
        "4\u0634",
        "5\u0634",
        "\u062C",
        "\u0634"
    ],
    abbreviated: [
        "\u06CC\u06A9\u0634\u0646\u0628\u0647",
        "\u062F\u0648\u0634\u0646\u0628\u0647",
        "\u0633\u0647\u200C\u0634\u0646\u0628\u0647",
        "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
        "\u067E\u0646\u062C\u0634\u0646\u0628\u0647",
        "\u062C\u0645\u0639\u0647",
        "\u0634\u0646\u0628\u0647"
    ],
    wide: [
        "\u06CC\u06A9\u0634\u0646\u0628\u0647",
        "\u062F\u0648\u0634\u0646\u0628\u0647",
        "\u0633\u0647\u200C\u0634\u0646\u0628\u0647",
        "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
        "\u067E\u0646\u062C\u0634\u0646\u0628\u0647",
        "\u062C\u0645\u0639\u0647",
        "\u0634\u0646\u0628\u0647"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0642",
        pm: "\u0628",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0635",
        afternoon: "\u0628.\u0638.",
        evening: "\u0639",
        night: "\u0634"
    },
    abbreviated: {
        am: "\u0642.\u0638.",
        pm: "\u0628.\u0638.",
        midnight: "\u0646\u06CC\u0645\u0647\u200C\u0634\u0628",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u062D",
        afternoon: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
        evening: "\u0639\u0635\u0631",
        night: "\u0634\u0628"
    },
    wide: {
        am: "\u0642\u0628\u0644\u200C\u0627\u0632\u0638\u0647\u0631",
        pm: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
        midnight: "\u0646\u06CC\u0645\u0647\u200C\u0634\u0628",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u062D",
        afternoon: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
        evening: "\u0639\u0635\u0631",
        night: "\u0634\u0628"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0642",
        pm: "\u0628",
        midnight: "\u0646",
        noon: "\u0638",
        morning: "\u0635",
        afternoon: "\u0628.\u0638.",
        evening: "\u0639",
        night: "\u0634"
    },
    abbreviated: {
        am: "\u0642.\u0638.",
        pm: "\u0628.\u0638.",
        midnight: "\u0646\u06CC\u0645\u0647\u200C\u0634\u0628",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u062D",
        afternoon: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
        evening: "\u0639\u0635\u0631",
        night: "\u0634\u0628"
    },
    wide: {
        am: "\u0642\u0628\u0644\u200C\u0627\u0632\u0638\u0647\u0631",
        pm: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
        midnight: "\u0646\u06CC\u0645\u0647\u200C\u0634\u0628",
        noon: "\u0638\u0647\u0631",
        morning: "\u0635\u0628\u062D",
        afternoon: "\u0628\u0639\u062F\u0627\u0632\u0638\u0647\u0631",
        evening: "\u0639\u0635\u0631",
        night: "\u0634\u0628"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"ea6095ff65d8cd1d":"fGq1u"}],"b2VWQ":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("41f1b0832828e9e3");
var _index2 = require("9726bf3f9b95c1e9");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ق|ب)/i,
    abbreviated: /^(ق\.?\s?م\.?|ق\.?\s?د\.?\s?م\.?|م\.?\s?|د\.?\s?م\.?)/i,
    wide: /^(قبل از میلاد|قبل از دوران مشترک|میلادی|دوران مشترک|بعد از میلاد)/i
};
const parseEraPatterns = {
    any: [
        /^قبل/i,
        /^بعد/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^س‌م[1234]/i,
    wide: /^سه‌ماهه [1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[جژفمآاماسند]/i,
    abbreviated: /^(جنو|ژانـ|ژانویه|فوریه|فور|مارس|آوریل|آپر|مه|می|ژوئن|جون|جول|جولـ|ژوئیه|اوت|آگو|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نوامـ|دسامبر|دسامـ|دسم)/i,
    wide: /^(ژانویه|جنوری|فبروری|فوریه|مارچ|مارس|آپریل|اپریل|ایپریل|آوریل|مه|می|ژوئن|جون|جولای|ژوئیه|آگست|اگست|آگوست|اوت|سپتمبر|سپتامبر|اکتبر|اکتوبر|نوامبر|نومبر|دسامبر|دسمبر)/i
};
const parseMonthPatterns = {
    narrow: [
        /^(ژ|ج)/i,
        /^ف/i,
        /^م/i,
        /^(آ|ا)/i,
        /^م/i,
        /^(ژ|ج)/i,
        /^(ج|ژ)/i,
        /^(آ|ا)/i,
        /^س/i,
        /^ا/i,
        /^ن/i,
        /^د/i
    ],
    any: [
        /^ژا/i,
        /^ف/i,
        /^ما/i,
        /^آپ/i,
        /^(می|مه)/i,
        /^(ژوئن|جون)/i,
        /^(ژوئی|جول)/i,
        /^(اوت|آگ)/i,
        /^س/i,
        /^(اوک|اک)/i,
        /^ن/i,
        /^د/i
    ]
};
const matchDayPatterns = {
    narrow: /^[شیدسچپج]/i,
    short: /^(ش|ج|1ش|2ش|3ش|4ش|5ش)/i,
    abbreviated: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i,
    wide: /^(یکشنبه|دوشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|جمعه|شنبه)/i
};
const parseDayPatterns = {
    narrow: [
        /^ی/i,
        /^دو/i,
        /^س/i,
        /^چ/i,
        /^پ/i,
        /^ج/i,
        /^ش/i
    ],
    any: [
        /^(ی|1ش|یکشنبه)/i,
        /^(د|2ش|دوشنبه)/i,
        /^(س|3ش|سه‌شنبه)/i,
        /^(چ|4ش|چهارشنبه)/i,
        /^(پ|5ش|پنجشنبه)/i,
        /^(ج|جمعه)/i,
        /^(ش|شنبه)/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ب|ق|ن|ظ|ص|ب.ظ.|ع|ش)/i,
    abbreviated: /^(ق.ظ.|ب.ظ.|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i,
    wide: /^(قبل‌ازظهر|نیمه‌شب|ظهر|صبح|بعدازظهر|عصر|شب)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^(ق|ق.ظ.|قبل‌ازظهر)/i,
        pm: /^(ب|ب.ظ.|بعدازظهر)/i,
        midnight: /^(‌نیمه‌شب|ن)/i,
        noon: /^(ظ|ظهر)/i,
        morning: /(ص|صبح)/i,
        afternoon: /(ب|ب.ظ.|بعدازظهر)/i,
        evening: /(ع|عصر)/i,
        night: /(ش|شب)/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"41f1b0832828e9e3":"15lWd","9726bf3f9b95c1e9":"kWqg8"}],"bV7qn":[function(require,module,exports) {
"use strict";
exports.fi = void 0;
var _index = require("30fbeec6af44b024");
var _index2 = require("d7531c28716ca93a");
var _index3 = require("2c7603a5bea4f4f1");
var _index4 = require("9b71fab545bdf02e");
var _index5 = require("2590b7cc195fb97b");
/**
 * @category Locales
 * @summary Finnish locale.
 * @language Finnish
 * @iso-639-2 fin
 * @author Pyry-Samuli Lahti [@Pyppe](https://github.com/Pyppe)
 * @author Edo Rivai [@mikolajgrzyb](https://github.com/mikolajgrzyb)
 * @author Samu Juvonen [@sjuvonen](https://github.com/sjuvonen)
 */ const fi = exports.fi = {
    code: "fi",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"30fbeec6af44b024":"bKp4y","d7531c28716ca93a":"8GbX7","2c7603a5bea4f4f1":"9eHnl","9b71fab545bdf02e":"3jDLo","2590b7cc195fb97b":"4wX94"}],"bKp4y":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function futureSeconds(text) {
    return text.replace(/sekuntia?/, "sekunnin");
}
function futureMinutes(text) {
    return text.replace(/minuuttia?/, "minuutin");
}
function futureHours(text) {
    return text.replace(/tuntia?/, "tunnin");
}
function futureDays(text) {
    return text.replace(/päivää?/, "p\xe4iv\xe4n");
}
function futureWeeks(text) {
    return text.replace(/(viikko|viikkoa)/, "viikon");
}
function futureMonths(text) {
    return text.replace(/(kuukausi|kuukautta)/, "kuukauden");
}
function futureYears(text) {
    return text.replace(/(vuosi|vuotta)/, "vuoden");
}
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "alle sekunti",
        other: "alle {{count}} sekuntia",
        futureTense: futureSeconds
    },
    xSeconds: {
        one: "sekunti",
        other: "{{count}} sekuntia",
        futureTense: futureSeconds
    },
    halfAMinute: {
        one: "puoli minuuttia",
        other: "puoli minuuttia",
        futureTense: (_text)=>"puolen minuutin"
    },
    lessThanXMinutes: {
        one: "alle minuutti",
        other: "alle {{count}} minuuttia",
        futureTense: futureMinutes
    },
    xMinutes: {
        one: "minuutti",
        other: "{{count}} minuuttia",
        futureTense: futureMinutes
    },
    aboutXHours: {
        one: "noin tunti",
        other: "noin {{count}} tuntia",
        futureTense: futureHours
    },
    xHours: {
        one: "tunti",
        other: "{{count}} tuntia",
        futureTense: futureHours
    },
    xDays: {
        one: "p\xe4iv\xe4",
        other: "{{count}} p\xe4iv\xe4\xe4",
        futureTense: futureDays
    },
    aboutXWeeks: {
        one: "noin viikko",
        other: "noin {{count}} viikkoa",
        futureTense: futureWeeks
    },
    xWeeks: {
        one: "viikko",
        other: "{{count}} viikkoa",
        futureTense: futureWeeks
    },
    aboutXMonths: {
        one: "noin kuukausi",
        other: "noin {{count}} kuukautta",
        futureTense: futureMonths
    },
    xMonths: {
        one: "kuukausi",
        other: "{{count}} kuukautta",
        futureTense: futureMonths
    },
    aboutXYears: {
        one: "noin vuosi",
        other: "noin {{count}} vuotta",
        futureTense: futureYears
    },
    xYears: {
        one: "vuosi",
        other: "{{count}} vuotta",
        futureTense: futureYears
    },
    overXYears: {
        one: "yli vuosi",
        other: "yli {{count}} vuotta",
        futureTense: futureYears
    },
    almostXYears: {
        one: "l\xe4hes vuosi",
        other: "l\xe4hes {{count}} vuotta",
        futureTense: futureYears
    }
};
const formatDistance = (token, count, options)=>{
    const tokenValue = formatDistanceLocale[token];
    const result = count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return tokenValue.futureTense(result) + " kuluttua";
        else return result + " sitten";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"8GbX7":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("87ece13b0dfebac2");
const dateFormats = {
    full: "eeee d. MMMM y",
    long: "d. MMMM y",
    medium: "d. MMM y",
    short: "d.M.y"
};
const timeFormats = {
    full: "HH.mm.ss zzzz",
    long: "HH.mm.ss z",
    medium: "HH.mm.ss",
    short: "HH.mm"
};
const dateTimeFormats = {
    full: "{{date}} 'klo' {{time}}",
    long: "{{date}} 'klo' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"87ece13b0dfebac2":"6OYyu"}],"9eHnl":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'viime' eeee 'klo' p",
    yesterday: "'eilen klo' p",
    today: "'t\xe4n\xe4\xe4n klo' p",
    tomorrow: "'huomenna klo' p",
    nextWeek: "'ensi' eeee 'klo' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"3jDLo":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("479ca542730d6f6");
const eraValues = {
    narrow: [
        "eaa.",
        "jaa."
    ],
    abbreviated: [
        "eaa.",
        "jaa."
    ],
    wide: [
        "ennen ajanlaskun alkua",
        "j\xe4lkeen ajanlaskun alun"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1. kvartaali",
        "2. kvartaali",
        "3. kvartaali",
        "4. kvartaali"
    ]
};
const monthValues = {
    narrow: [
        "T",
        "H",
        "M",
        "H",
        "T",
        "K",
        "H",
        "E",
        "S",
        "L",
        "M",
        "J"
    ],
    abbreviated: [
        "tammi",
        "helmi",
        "maalis",
        "huhti",
        "touko",
        "kes\xe4",
        "hein\xe4",
        "elo",
        "syys",
        "loka",
        "marras",
        "joulu"
    ],
    wide: [
        "tammikuu",
        "helmikuu",
        "maaliskuu",
        "huhtikuu",
        "toukokuu",
        "kes\xe4kuu",
        "hein\xe4kuu",
        "elokuu",
        "syyskuu",
        "lokakuu",
        "marraskuu",
        "joulukuu"
    ]
};
const formattingMonthValues = {
    narrow: monthValues.narrow,
    abbreviated: monthValues.abbreviated,
    wide: [
        "tammikuuta",
        "helmikuuta",
        "maaliskuuta",
        "huhtikuuta",
        "toukokuuta",
        "kes\xe4kuuta",
        "hein\xe4kuuta",
        "elokuuta",
        "syyskuuta",
        "lokakuuta",
        "marraskuuta",
        "joulukuuta"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "T",
        "K",
        "T",
        "P",
        "L"
    ],
    short: [
        "su",
        "ma",
        "ti",
        "ke",
        "to",
        "pe",
        "la"
    ],
    abbreviated: [
        "sunn.",
        "maan.",
        "tiis.",
        "kesk.",
        "torst.",
        "perj.",
        "la"
    ],
    wide: [
        "sunnuntai",
        "maanantai",
        "tiistai",
        "keskiviikko",
        "torstai",
        "perjantai",
        "lauantai"
    ]
};
const formattingDayValues = {
    narrow: dayValues.narrow,
    short: dayValues.short,
    abbreviated: dayValues.abbreviated,
    wide: [
        "sunnuntaina",
        "maanantaina",
        "tiistaina",
        "keskiviikkona",
        "torstaina",
        "perjantaina",
        "lauantaina"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "ap",
        pm: "ip",
        midnight: "keskiy\xf6",
        noon: "keskip\xe4iv\xe4",
        morning: "ap",
        afternoon: "ip",
        evening: "illalla",
        night: "y\xf6ll\xe4"
    },
    abbreviated: {
        am: "ap",
        pm: "ip",
        midnight: "keskiy\xf6",
        noon: "keskip\xe4iv\xe4",
        morning: "ap",
        afternoon: "ip",
        evening: "illalla",
        night: "y\xf6ll\xe4"
    },
    wide: {
        am: "ap",
        pm: "ip",
        midnight: "keskiy\xf6ll\xe4",
        noon: "keskip\xe4iv\xe4ll\xe4",
        morning: "aamup\xe4iv\xe4ll\xe4",
        afternoon: "iltap\xe4iv\xe4ll\xe4",
        evening: "illalla",
        night: "y\xf6ll\xe4"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"479ca542730d6f6":"fGq1u"}],"4wX94":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("45b3cfb748446b11");
var _index2 = require("c232d76e7e435e97");
const matchOrdinalNumberPattern = /^(\d+)(\.)/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(e|j)/i,
    abbreviated: /^(eaa.|jaa.)/i,
    wide: /^(ennen ajanlaskun alkua|jälkeen ajanlaskun alun)/i
};
const parseEraPatterns = {
    any: [
        /^e/i,
        /^j/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234]\.? kvartaali/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[thmkeslj]/i,
    abbreviated: /^(tammi|helmi|maalis|huhti|touko|kesä|heinä|elo|syys|loka|marras|joulu)/i,
    wide: /^(tammikuu|helmikuu|maaliskuu|huhtikuu|toukokuu|kesäkuu|heinäkuu|elokuu|syyskuu|lokakuu|marraskuu|joulukuu)(ta)?/i
};
const parseMonthPatterns = {
    narrow: [
        /^t/i,
        /^h/i,
        /^m/i,
        /^h/i,
        /^t/i,
        /^k/i,
        /^h/i,
        /^e/i,
        /^s/i,
        /^l/i,
        /^m/i,
        /^j/i
    ],
    any: [
        /^ta/i,
        /^hel/i,
        /^maa/i,
        /^hu/i,
        /^to/i,
        /^k/i,
        /^hei/i,
        /^e/i,
        /^s/i,
        /^l/i,
        /^mar/i,
        /^j/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smtkpl]/i,
    short: /^(su|ma|ti|ke|to|pe|la)/i,
    abbreviated: /^(sunn.|maan.|tiis.|kesk.|torst.|perj.|la)/i,
    wide: /^(sunnuntai|maanantai|tiistai|keskiviikko|torstai|perjantai|lauantai)(na)?/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^k/i,
        /^t/i,
        /^p/i,
        /^l/i
    ],
    any: [
        /^s/i,
        /^m/i,
        /^ti/i,
        /^k/i,
        /^to/i,
        /^p/i,
        /^l/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ap|ip|keskiyö|keskipäivä|aamupäivällä|iltapäivällä|illalla|yöllä)/i,
    any: /^(ap|ip|keskiyöllä|keskipäivällä|aamupäivällä|iltapäivällä|illalla|yöllä)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ap/i,
        pm: /^ip/i,
        midnight: /^keskiyö/i,
        noon: /^keskipäivä/i,
        morning: /aamupäivällä/i,
        afternoon: /iltapäivällä/i,
        evening: /illalla/i,
        night: /yöllä/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"45b3cfb748446b11":"15lWd","c232d76e7e435e97":"kWqg8"}],"dNhxm":[function(require,module,exports) {
"use strict";
exports.fr = void 0;
var _index = require("dbdeb9b93e2a49af");
var _index2 = require("49c60f41bb5896b3");
var _index3 = require("11e35cfee7c82834");
var _index4 = require("226cbe02e88c15cf");
var _index5 = require("49d37bb03cbe99a");
/**
 * @category Locales
 * @summary French locale.
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau](https://github.com/izeau)
 * @author François B [@fbonzon](https://github.com/fbonzon)
 */ const fr = exports.fr = {
    code: "fr",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"dbdeb9b93e2a49af":"4VabP","49c60f41bb5896b3":"ihKbY","11e35cfee7c82834":"5Mc60","226cbe02e88c15cf":"3MyFw","49d37bb03cbe99a":"lUwPW"}],"4VabP":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "moins d\u2019une seconde",
        other: "moins de {{count}} secondes"
    },
    xSeconds: {
        one: "1 seconde",
        other: "{{count}} secondes"
    },
    halfAMinute: "30 secondes",
    lessThanXMinutes: {
        one: "moins d\u2019une minute",
        other: "moins de {{count}} minutes"
    },
    xMinutes: {
        one: "1 minute",
        other: "{{count}} minutes"
    },
    aboutXHours: {
        one: "environ 1 heure",
        other: "environ {{count}} heures"
    },
    xHours: {
        one: "1 heure",
        other: "{{count}} heures"
    },
    xDays: {
        one: "1 jour",
        other: "{{count}} jours"
    },
    aboutXWeeks: {
        one: "environ 1 semaine",
        other: "environ {{count}} semaines"
    },
    xWeeks: {
        one: "1 semaine",
        other: "{{count}} semaines"
    },
    aboutXMonths: {
        one: "environ 1 mois",
        other: "environ {{count}} mois"
    },
    xMonths: {
        one: "1 mois",
        other: "{{count}} mois"
    },
    aboutXYears: {
        one: "environ 1 an",
        other: "environ {{count}} ans"
    },
    xYears: {
        one: "1 an",
        other: "{{count}} ans"
    },
    overXYears: {
        one: "plus d\u2019un an",
        other: "plus de {{count}} ans"
    },
    almostXYears: {
        one: "presqu\u2019un an",
        other: "presque {{count}} ans"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const form = formatDistanceLocale[token];
    if (typeof form === "string") result = form;
    else if (count === 1) result = form.one;
    else result = form.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "dans " + result;
        else return "il y a " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"ihKbY":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("d69e0035eba59a41");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\xe0' {{time}}",
    long: "{{date}} '\xe0' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"d69e0035eba59a41":"6OYyu"}],"5Mc60":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'dernier \xe0' p",
    yesterday: "'hier \xe0' p",
    today: "'aujourd\u2019hui \xe0' p",
    tomorrow: "'demain \xe0' p'",
    nextWeek: "eeee 'prochain \xe0' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"3MyFw":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("512b4cf74d659c0a");
const eraValues = {
    narrow: [
        "av. J.-C",
        "ap. J.-C"
    ],
    abbreviated: [
        "av. J.-C",
        "ap. J.-C"
    ],
    wide: [
        "avant J\xe9sus-Christ",
        "apr\xe8s J\xe9sus-Christ"
    ]
};
const quarterValues = {
    narrow: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    abbreviated: [
        "1er trim.",
        "2\xe8me trim.",
        "3\xe8me trim.",
        "4\xe8me trim."
    ],
    wide: [
        "1er trimestre",
        "2\xe8me trimestre",
        "3\xe8me trimestre",
        "4\xe8me trimestre"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "janv.",
        "f\xe9vr.",
        "mars",
        "avr.",
        "mai",
        "juin",
        "juil.",
        "ao\xfbt",
        "sept.",
        "oct.",
        "nov.",
        "d\xe9c."
    ],
    wide: [
        "janvier",
        "f\xe9vrier",
        "mars",
        "avril",
        "mai",
        "juin",
        "juillet",
        "ao\xfbt",
        "septembre",
        "octobre",
        "novembre",
        "d\xe9cembre"
    ]
};
const dayValues = {
    narrow: [
        "D",
        "L",
        "M",
        "M",
        "J",
        "V",
        "S"
    ],
    short: [
        "di",
        "lu",
        "ma",
        "me",
        "je",
        "ve",
        "sa"
    ],
    abbreviated: [
        "dim.",
        "lun.",
        "mar.",
        "mer.",
        "jeu.",
        "ven.",
        "sam."
    ],
    wide: [
        "dimanche",
        "lundi",
        "mardi",
        "mercredi",
        "jeudi",
        "vendredi",
        "samedi"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "mat.",
        afternoon: "ap.m.",
        evening: "soir",
        night: "mat."
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "matin",
        afternoon: "apr\xe8s-midi",
        evening: "soir",
        night: "matin"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "minuit",
        noon: "midi",
        morning: "du matin",
        afternoon: "de l\u2019apr\xe8s-midi",
        evening: "du soir",
        night: "du matin"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = options?.unit;
    if (number === 0) return "0";
    const feminineUnits = [
        "year",
        "week",
        "hour",
        "minute",
        "second"
    ];
    let suffix;
    if (number === 1) suffix = unit && feminineUnits.includes(unit) ? "\xe8re" : "er";
    else suffix = "\xe8me";
    return number + suffix;
};
const LONG_MONTHS_TOKENS = [
    "MMM",
    "MMMM"
];
const localize = exports.localize = {
    preprocessor: (date, parts)=>{
        // Replaces the `do` tokens with `d` when used with long month tokens and the day of the month is greater than one.
        // Use case "do MMMM" => 1er août, 29 août
        // see https://github.com/date-fns/date-fns/issues/1391
        if (date.getDate() === 1) return parts;
        const hasLongMonthToken = parts.some((part)=>part.isToken && LONG_MONTHS_TOKENS.includes(part.value));
        if (!hasLongMonthToken) return parts;
        return parts.map((part)=>part.isToken && part.value === "do" ? {
                isToken: true,
                value: "d"
            } : part);
    },
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"512b4cf74d659c0a":"fGq1u"}],"lUwPW":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("e77a6bd390506aca");
var _index2 = require("d9e314894c5c4775");
const matchOrdinalNumberPattern = /^(\d+)(ième|ère|ème|er|e)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(av\.J\.C|ap\.J\.C|ap\.J\.-C)/i,
    abbreviated: /^(av\.J\.-C|av\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
    wide: /^(avant Jésus-Christ|après Jésus-Christ)/i
};
const parseEraPatterns = {
    any: [
        /^av/i,
        /^ap/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^T?[1234]/i,
    abbreviated: /^[1234](er|ème|e)? trim\.?/i,
    wide: /^[1234](er|ème|e)? trimestre/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(janv|févr|mars|avr|mai|juin|juill|juil|août|sept|oct|nov|déc)\.?/i,
    wide: /^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^av/i,
        /^ma/i,
        /^juin/i,
        /^juil/i,
        /^ao/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[lmjvsd]/i,
    short: /^(di|lu|ma|me|je|ve|sa)/i,
    abbreviated: /^(dim|lun|mar|mer|jeu|ven|sam)\.?/i,
    wide: /^(dimanche|lundi|mardi|mercredi|jeudi|vendredi|samedi)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^m/i,
        /^j/i,
        /^v/i,
        /^s/i
    ],
    any: [
        /^di/i,
        /^lu/i,
        /^ma/i,
        /^me/i,
        /^je/i,
        /^ve/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|minuit|midi|mat\.?|ap\.?m\.?|soir|nuit)/i,
    any: /^([ap]\.?\s?m\.?|du matin|de l'après[-\s]midi|du soir|de la nuit)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^min/i,
        noon: /^mid/i,
        morning: /mat/i,
        afternoon: /ap/i,
        evening: /soir/i,
        night: /nuit/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"e77a6bd390506aca":"15lWd","d9e314894c5c4775":"kWqg8"}],"c0EPs":[function(require,module,exports) {
"use strict";
exports.frCA = void 0;
var _index = require("63f12bfb31ce69a2");
var _index2 = require("268ae379f1a62743");
var _index3 = require("75c9a449d2d7ca96");
var _index4 = require("32df6258e52d4b12");
var _index5 = require("8eb1552f38c0e044"); // Same as fr
// Unique for fr-CA
/**
 * @category Locales
 * @summary French locale (Canada).
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau](https://github.com/izeau)
 * @author François B [@fbonzon](https://github.com/fbonzon)
 * @author Gabriele Petrioli [@gpetrioli](https://github.com/gpetrioli)
 */ const frCA = exports.frCA = {
    code: "fr-CA",
    formatDistance: _index.formatDistance,
    formatLong: _index5.formatLong,
    formatRelative: _index2.formatRelative,
    localize: _index3.localize,
    match: _index4.match,
    // Unique for fr-CA
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"63f12bfb31ce69a2":"4VabP","268ae379f1a62743":"5Mc60","75c9a449d2d7ca96":"3MyFw","32df6258e52d4b12":"lUwPW","8eb1552f38c0e044":"dWMlq"}],"dWMlq":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("d27f45e6980d4f6");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "yy-MM-dd"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\xe0' {{time}}",
    long: "{{date}} '\xe0' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"d27f45e6980d4f6":"6OYyu"}],"eTBUU":[function(require,module,exports) {
"use strict";
exports.frCH = void 0;
var _index = require("1988f79959714942");
var _index2 = require("68b4bc583950d872");
var _index3 = require("e6ff6847e63b866a");
var _index4 = require("8ed4c9b54079a619");
var _index5 = require("1e7f2c9c49998a60"); // Same as fr
// Unique for fr-CH
/**
 * @category Locales
 * @summary French locale (Switzerland).
 * @language French
 * @iso-639-2 fra
 * @author Jean Dupouy [@izeau](https://github.com/izeau)
 * @author François B [@fbonzon](https://github.com/fbonzon)
 * @author Van Vuong Ngo [@vanvuongngo](https://github.com/vanvuongngo)
 * @author Alex Hoeing [@dcbn](https://github.com/dcbn)
 */ const frCH = exports.frCH = {
    code: "fr-CH",
    formatDistance: _index.formatDistance,
    formatLong: _index4.formatLong,
    formatRelative: _index5.formatRelative,
    localize: _index2.localize,
    match: _index3.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"1988f79959714942":"4VabP","68b4bc583950d872":"3MyFw","e6ff6847e63b866a":"lUwPW","8ed4c9b54079a619":"kyvjF","1e7f2c9c49998a60":"aqdEh"}],"kyvjF":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("3a906c87c5c42cd6");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\xe0' {{time}}",
    long: "{{date}} '\xe0' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"3a906c87c5c42cd6":"6OYyu"}],"aqdEh":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'la semaine derni\xe8re \xe0' p",
    yesterday: "'hier \xe0' p",
    today: "'aujourd\u2019hui \xe0' p",
    tomorrow: "'demain \xe0' p'",
    nextWeek: "eeee 'la semaine prochaine \xe0' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"dUu4i":[function(require,module,exports) {
"use strict";
exports.fy = void 0;
var _index = require("ad798af3237ba150");
var _index2 = require("4ad57081f7465515");
var _index3 = require("fe149c955da8419");
var _index4 = require("d10de4a7d27c3cd");
var _index5 = require("263030562e0d4af0");
/**
 * @category Locales
 * @summary Western Frisian locale (Netherlands).
 * @language West Frisian
 * @iso-639-2 fry
 * @author Damon Asberg [@damon02](https://github.com/damon02)
 */ const fy = exports.fy = {
    code: "fy",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"ad798af3237ba150":"5l4Ak","4ad57081f7465515":"5ggm4","fe149c955da8419":"d6L8K","d10de4a7d27c3cd":"9VLSB","263030562e0d4af0":"hBb3o"}],"5l4Ak":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "minder as 1 sekonde",
        other: "minder as {{count}} sekonden"
    },
    xSeconds: {
        one: "1 sekonde",
        other: "{{count}} sekonden"
    },
    halfAMinute: "oardel min\xfat",
    lessThanXMinutes: {
        one: "minder as 1 min\xfat",
        other: "minder as {{count}} minuten"
    },
    xMinutes: {
        one: "1 min\xfat",
        other: "{{count}} minuten"
    },
    aboutXHours: {
        one: "sawat 1 oere",
        other: "sawat {{count}} oere"
    },
    xHours: {
        one: "1 oere",
        other: "{{count}} oere"
    },
    xDays: {
        one: "1 dei",
        other: "{{count}} dagen"
    },
    aboutXWeeks: {
        one: "sawat 1 wike",
        other: "sawat {{count}} wiken"
    },
    xWeeks: {
        one: "1 wike",
        other: "{{count}} wiken"
    },
    aboutXMonths: {
        one: "sawat 1 moanne",
        other: "sawat {{count}} moannen"
    },
    xMonths: {
        one: "1 moanne",
        other: "{{count}} moannen"
    },
    aboutXYears: {
        one: "sawat 1 jier",
        other: "sawat {{count}} jier"
    },
    xYears: {
        one: "1 jier",
        other: "{{count}} jier"
    },
    overXYears: {
        one: "mear as 1 jier",
        other: "mear as {{count}}s jier"
    },
    almostXYears: {
        one: "hast 1 jier",
        other: "hast {{count}} jier"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "oer " + result;
        else return result + " lyn";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"5ggm4":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("4c15d296bcc104b9");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd-MM-y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'om' {{time}}",
    long: "{{date}} 'om' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"4c15d296bcc104b9":"6OYyu"}],"d6L8K":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\xf4fr\xfbne' eeee 'om' p",
    yesterday: "'juster om' p",
    today: "'hjoed om' p",
    tomorrow: "'moarn om' p",
    nextWeek: "eeee 'om' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"9VLSB":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("288a81ec22cb773e");
const eraValues = {
    narrow: [
        "f.K.",
        "n.K."
    ],
    abbreviated: [
        "f.Kr.",
        "n.Kr."
    ],
    wide: [
        "foar Kristus",
        "nei Kristus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "1e fearnsjier",
        "2e fearnsjier",
        "3e fearnsjier",
        "4e fearnsjier"
    ]
};
const monthValues = {
    narrow: [
        "j",
        "f",
        "m",
        "a",
        "m",
        "j",
        "j",
        "a",
        "s",
        "o",
        "n",
        "d"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mrt.",
        "apr.",
        "mai.",
        "jun.",
        "jul.",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "des."
    ],
    wide: [
        "jannewaris",
        "febrewaris",
        "maart",
        "april",
        "maaie",
        "juny",
        "july",
        "augustus",
        "septimber",
        "oktober",
        "novimber",
        "desimber"
    ]
};
const dayValues = {
    narrow: [
        "s",
        "m",
        "t",
        "w",
        "t",
        "f",
        "s"
    ],
    short: [
        "si",
        "mo",
        "ti",
        "wo",
        "to",
        "fr",
        "so"
    ],
    abbreviated: [
        "snein",
        "moa",
        "tii",
        "woa",
        "ton",
        "fre",
        "sneon"
    ],
    wide: [
        "snein",
        "moandei",
        "tiisdei",
        "woansdei",
        "tongersdei",
        "freed",
        "sneon"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "middei",
        morning: "moarns",
        afternoon: "middeis",
        evening: "j\xfbns",
        night: "nachts"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "middei",
        morning: "moarns",
        afternoon: "middeis",
        evening: "j\xfbns",
        night: "nachts"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "middei",
        morning: "moarns",
        afternoon: "middeis",
        evening: "j\xfbns",
        night: "nachts"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "e";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"288a81ec22cb773e":"fGq1u"}],"hBb3o":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("9653fdcbf6d8fa49");
var _index2 = require("a5de92fccce5c183");
const matchOrdinalNumberPattern = /^(\d+)e?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^([fn]\.? ?K\.?)/,
    abbreviated: /^([fn]\. ?Kr\.?)/,
    wide: /^((foar|nei) Kristus)/
};
const parseEraPatterns = {
    any: [
        /^f/,
        /^n/
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^K[1234]/i,
    wide: /^[1234]e fearnsjier/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan.|feb.|mrt.|apr.|mai.|jun.|jul.|aug.|sep.|okt.|nov.|des.)/i,
    wide: /^(jannewaris|febrewaris|maart|april|maaie|juny|july|augustus|septimber|oktober|novimber|desimber)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^jan/i,
        /^feb/i,
        /^m(r|a)/i,
        /^apr/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^sep/i,
        /^okt/i,
        /^nov/i,
        /^des/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(si|mo|ti|wo|to|fr|so)/i,
    abbreviated: /^(snein|moa|tii|woa|ton|fre|sneon)/i,
    wide: /^(snein|moandei|tiisdei|woansdei|tongersdei|freed|sneon)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^w/i,
        /^t/i,
        /^f/i,
        /^s/i
    ],
    any: [
        /^sn/i,
        /^mo/i,
        /^ti/i,
        /^wo/i,
        /^to/i,
        /^fr/i,
        /^sn/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(am|pm|middernacht|middeis|moarns|middei|jûns|nachts)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^middei/i,
        morning: /moarns/i,
        afternoon: /^middeis/i,
        evening: /jûns/i,
        night: /nachts/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"9653fdcbf6d8fa49":"15lWd","a5de92fccce5c183":"kWqg8"}],"6oAfv":[function(require,module,exports) {
"use strict";
exports.gd = void 0;
var _index = require("61a01bd348dc5423");
var _index2 = require("e958cdaf332b3c59");
var _index3 = require("a309c13f68577373");
var _index4 = require("d3bf7e3f5c704684");
var _index5 = require("34339ad2c064fd38");
/**
 * @category Locales
 * @summary Scottish Gaelic.
 * @language Scottish Gaelic
 * @iso-639-2 gla
 * @author Lee Driscoll [@leedriscoll](https://github.com/leedriscoll)
 */ const gd = exports.gd = {
    code: "gd",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"61a01bd348dc5423":"fgrmO","e958cdaf332b3c59":"604rw","a309c13f68577373":"68f9D","d3bf7e3f5c704684":"dDrGh","34339ad2c064fd38":"aGblo"}],"fgrmO":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "nas lugha na diog",
        other: "nas lugha na {{count}} diogan"
    },
    xSeconds: {
        one: "1 diog",
        two: "2 dhiog",
        twenty: "20 diog",
        other: "{{count}} diogan"
    },
    halfAMinute: "leth mhionaid",
    lessThanXMinutes: {
        one: "nas lugha na mionaid",
        other: "nas lugha na {{count}} mionaidean"
    },
    xMinutes: {
        one: "1 mionaid",
        two: "2 mhionaid",
        twenty: "20 mionaid",
        other: "{{count}} mionaidean"
    },
    aboutXHours: {
        one: "mu uair de th\xecde",
        other: "mu {{count}} uairean de th\xecde"
    },
    xHours: {
        one: "1 uair de th\xecde",
        two: "2 uair de th\xecde",
        twenty: "20 uair de th\xecde",
        other: "{{count}} uairean de th\xecde"
    },
    xDays: {
        one: "1 l\xe0",
        other: "{{count}} l\xe0"
    },
    aboutXWeeks: {
        one: "mu 1 seachdain",
        other: "mu {{count}} seachdainean"
    },
    xWeeks: {
        one: "1 seachdain",
        other: "{{count}} seachdainean"
    },
    aboutXMonths: {
        one: "mu mh\xecos",
        other: "mu {{count}} m\xecosan"
    },
    xMonths: {
        one: "1 m\xecos",
        other: "{{count}} m\xecosan"
    },
    aboutXYears: {
        one: "mu bhliadhna",
        other: "mu {{count}} bliadhnaichean"
    },
    xYears: {
        one: "1 bhliadhna",
        other: "{{count}} bliadhna"
    },
    overXYears: {
        one: "c\xf2rr is bliadhna",
        other: "c\xf2rr is {{count}} bliadhnaichean"
    },
    almostXYears: {
        one: "cha mh\xf2r bliadhna",
        other: "cha mh\xf2r {{count}} bliadhnaichean"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else if (count === 2 && !!tokenValue.two) result = tokenValue.two;
    else if (count === 20 && !!tokenValue.twenty) result = tokenValue.twenty;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "ann an " + result;
        else return "o chionn " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"604rw":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("50adfb9f0c993763");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} 'aig' {{time}}",
    long: "{{date}} 'aig' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"50adfb9f0c993763":"6OYyu"}],"68f9D":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'mu dheireadh' eeee 'aig' p",
    yesterday: "'an-d\xe8 aig' p",
    today: "'an-diugh aig' p",
    tomorrow: "'a-m\xe0ireach aig' p",
    nextWeek: "eeee 'aig' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"dDrGh":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("a49c0dbe0da6cc4b");
const eraValues = {
    narrow: [
        "R",
        "A"
    ],
    abbreviated: [
        "RC",
        "AD"
    ],
    wide: [
        "ro Chr\xecosta",
        "anno domini"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "C1",
        "C2",
        "C3",
        "C4"
    ],
    wide: [
        "a' chiad chairteal",
        "an d\xe0rna cairteal",
        "an treas cairteal",
        "an ceathramh cairteal"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "F",
        "G",
        "M",
        "G",
        "C",
        "\xd2",
        "I",
        "L",
        "S",
        "D",
        "S",
        "D"
    ],
    abbreviated: [
        "Faoi",
        "Gear",
        "M\xe0rt",
        "Gibl",
        "C\xe8it",
        "\xd2gmh",
        "Iuch",
        "L\xf9n",
        "Sult",
        "D\xe0mh",
        "Samh",
        "D\xf9bh"
    ],
    wide: [
        "Am Faoilleach",
        "An Gearran",
        "Am M\xe0rt",
        "An Giblean",
        "An C\xe8itean",
        "An t-\xd2gmhios",
        "An t-Iuchar",
        "An L\xf9nastal",
        "An t-Sultain",
        "An D\xe0mhair",
        "An t-Samhain",
        "An D\xf9bhlachd"
    ]
};
const dayValues = {
    narrow: [
        "D",
        "L",
        "M",
        "C",
        "A",
        "H",
        "S"
    ],
    short: [
        "D\xf2",
        "Lu",
        "M\xe0",
        "Ci",
        "Ar",
        "Ha",
        "Sa"
    ],
    abbreviated: [
        "Did",
        "Dil",
        "Dim",
        "Dic",
        "Dia",
        "Dih",
        "Dis"
    ],
    wide: [
        "Did\xf2mhnaich",
        "Diluain",
        "Dim\xe0irt",
        "Diciadain",
        "Diardaoin",
        "Dihaoine",
        "Disathairne"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "m",
        pm: "f",
        midnight: "m.o.",
        noon: "m.l.",
        morning: "madainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "oidhche"
    },
    abbreviated: {
        am: "M.",
        pm: "F.",
        midnight: "meadhan oidhche",
        noon: "meadhan l\xe0",
        morning: "madainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "oidhche"
    },
    wide: {
        am: "m.",
        pm: "f.",
        midnight: "meadhan oidhche",
        noon: "meadhan l\xe0",
        morning: "madainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "oidhche"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "m",
        pm: "f",
        midnight: "m.o.",
        noon: "m.l.",
        morning: "sa mhadainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "air an oidhche"
    },
    abbreviated: {
        am: "M.",
        pm: "F.",
        midnight: "meadhan oidhche",
        noon: "meadhan l\xe0",
        morning: "sa mhadainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "air an oidhche"
    },
    wide: {
        am: "m.",
        pm: "f.",
        midnight: "meadhan oidhche",
        noon: "meadhan l\xe0",
        morning: "sa mhadainn",
        afternoon: "feasgar",
        evening: "feasgar",
        night: "air an oidhche"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    const number = Number(dirtyNumber);
    const rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) switch(rem100 % 10){
        case 1:
            return number + "d";
        case 2:
            return number + "na";
    }
    if (rem100 === 12) return number + "na";
    return number + "mh";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"a49c0dbe0da6cc4b":"fGq1u"}],"aGblo":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("ec03c01b7b4c260d");
var _index2 = require("2cad8c0d471d48a9");
const matchOrdinalNumberPattern = /^(\d+)(d|na|tr|mh)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(r|a)/i,
    abbreviated: /^(r\.?\s?c\.?|r\.?\s?a\.?\s?c\.?|a\.?\s?d\.?|a\.?\s?c\.?)/i,
    wide: /^(ro Chrìosta|ron aois choitchinn|anno domini|aois choitcheann)/i
};
const parseEraPatterns = {
    any: [
        /^b/i,
        /^(a|c)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^c[1234]/i,
    wide: /^[1234](cd|na|tr|mh)? cairteal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[fgmcòilsd]/i,
    abbreviated: /^(faoi|gear|màrt|gibl|cèit|ògmh|iuch|lùn|sult|dàmh|samh|dùbh)/i,
    wide: /^(am faoilleach|an gearran|am màrt|an giblean|an cèitean|an t-Ògmhios|an t-Iuchar|an lùnastal|an t-Sultain|an dàmhair|an t-Samhain|an dùbhlachd)/i
};
const parseMonthPatterns = {
    narrow: [
        /^f/i,
        /^g/i,
        /^m/i,
        /^g/i,
        /^c/i,
        /^ò/i,
        /^i/i,
        /^l/i,
        /^s/i,
        /^d/i,
        /^s/i,
        /^d/i
    ],
    any: [
        /^fa/i,
        /^ge/i,
        /^mà/i,
        /^gi/i,
        /^c/i,
        /^ò/i,
        /^i/i,
        /^l/i,
        /^su/i,
        /^d/i,
        /^sa/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[dlmcahs]/i,
    short: /^(dò|lu|mà|ci|ar|ha|sa)/i,
    abbreviated: /^(did|dil|dim|dic|dia|dih|dis)/i,
    wide: /^(didòmhnaich|diluain|dimàirt|diciadain|diardaoin|dihaoine|disathairne)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^c/i,
        /^a/i,
        /^h/i,
        /^s/i
    ],
    any: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^c/i,
        /^a/i,
        /^h/i,
        /^s/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mi|n|(san|aig) (madainn|feasgar|feasgar|oidhche))/i,
    any: /^([ap]\.?\s?m\.?|meadhan oidhche|meadhan là|(san|aig) (madainn|feasgar|feasgar|oidhche))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^m/i,
        pm: /^f/i,
        midnight: /^meadhan oidhche/i,
        noon: /^meadhan là/i,
        morning: /sa mhadainn/i,
        afternoon: /feasgar/i,
        evening: /feasgar/i,
        night: /air an oidhche/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"ec03c01b7b4c260d":"15lWd","2cad8c0d471d48a9":"kWqg8"}],"fIgNR":[function(require,module,exports) {
"use strict";
exports.gl = void 0;
var _index = require("864eacb6c678c12a");
var _index2 = require("1c87398392840378");
var _index3 = require("efdeef4fc9f32c58");
var _index4 = require("60bb8c76ffb5274d");
var _index5 = require("eb30a2d5a1b16f37");
/**
 * @category Locales
 * @summary Galician locale.
 * @language Galician
 * @iso-639-2 glg
 * @author Alberto Doval - Cocodin Technology[@cocodinTech](https://github.com/cocodinTech)
 * @author Fidel Pita [@fidelpita](https://github.com/fidelpita)
 */ const gl = exports.gl = {
    code: "gl",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"864eacb6c678c12a":"OsgJa","1c87398392840378":"73QwD","efdeef4fc9f32c58":"itlT6","60bb8c76ffb5274d":"4KCGV","eb30a2d5a1b16f37":"1ZA1J"}],"OsgJa":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "menos dun segundo",
        other: "menos de {{count}} segundos"
    },
    xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
    },
    halfAMinute: "medio minuto",
    lessThanXMinutes: {
        one: "menos dun minuto",
        other: "menos de {{count}} minutos"
    },
    xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
    },
    aboutXHours: {
        one: "arredor dunha hora",
        other: "arredor de {{count}} horas"
    },
    xHours: {
        one: "1 hora",
        other: "{{count}} horas"
    },
    xDays: {
        one: "1 d\xeda",
        other: "{{count}} d\xedas"
    },
    aboutXWeeks: {
        one: "arredor dunha semana",
        other: "arredor de {{count}} semanas"
    },
    xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
    },
    aboutXMonths: {
        one: "arredor de 1 mes",
        other: "arredor de {{count}} meses"
    },
    xMonths: {
        one: "1 mes",
        other: "{{count}} meses"
    },
    aboutXYears: {
        one: "arredor dun ano",
        other: "arredor de {{count}} anos"
    },
    xYears: {
        one: "1 ano",
        other: "{{count}} anos"
    },
    overXYears: {
        one: "m\xe1is dun ano",
        other: "m\xe1is de {{count}} anos"
    },
    almostXYears: {
        one: "case un ano",
        other: "case {{count}} anos"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "en " + result;
        else return "hai " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"73QwD":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("c8b4093e53cb90de");
const dateFormats = {
    full: "EEEE, d 'de' MMMM y",
    long: "d 'de' MMMM y",
    medium: "d MMM y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\xe1s' {{time}}",
    long: "{{date}} '\xe1s' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"c8b4093e53cb90de":"6OYyu"}],"itlT6":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'o' eeee 'pasado \xe1' LT",
    yesterday: "'onte \xe1' p",
    today: "'hoxe \xe1' p",
    tomorrow: "'ma\xf1\xe1 \xe1' p",
    nextWeek: "eeee '\xe1' p",
    other: "P"
};
const formatRelativeLocalePlural = {
    lastWeek: "'o' eeee 'pasado \xe1s' p",
    yesterday: "'onte \xe1s' p",
    today: "'hoxe \xe1s' p",
    tomorrow: "'ma\xf1\xe1 \xe1s' p",
    nextWeek: "eeee '\xe1s' p",
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    if (date.getHours() !== 1) return formatRelativeLocalePlural[token];
    return formatRelativeLocale[token];
};
exports.formatRelative = formatRelative;

},{}],"4KCGV":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("bfef3faa06ce016");
const eraValues = {
    narrow: [
        "AC",
        "DC"
    ],
    abbreviated: [
        "AC",
        "DC"
    ],
    wide: [
        "antes de cristo",
        "despois de cristo"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    wide: [
        "1\xba trimestre",
        "2\xba trimestre",
        "3\xba trimestre",
        "4\xba trimestre"
    ]
};
const monthValues = {
    narrow: [
        "e",
        "f",
        "m",
        "a",
        "m",
        "j",
        "j",
        "a",
        "s",
        "o",
        "n",
        "d"
    ],
    abbreviated: [
        "xan",
        "feb",
        "mar",
        "abr",
        "mai",
        "xun",
        "xul",
        "ago",
        "set",
        "out",
        "nov",
        "dec"
    ],
    wide: [
        "xaneiro",
        "febreiro",
        "marzo",
        "abril",
        "maio",
        "xu\xf1o",
        "xullo",
        "agosto",
        "setembro",
        "outubro",
        "novembro",
        "decembro"
    ]
};
const dayValues = {
    narrow: [
        "d",
        "l",
        "m",
        "m",
        "j",
        "v",
        "s"
    ],
    short: [
        "do",
        "lu",
        "ma",
        "me",
        "xo",
        "ve",
        "sa"
    ],
    abbreviated: [
        "dom",
        "lun",
        "mar",
        "mer",
        "xov",
        "ven",
        "sab"
    ],
    wide: [
        "domingo",
        "luns",
        "martes",
        "m\xe9rcores",
        "xoves",
        "venres",
        "s\xe1bado"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "ma\xf1\xe1",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoite",
        noon: "mediod\xeda",
        morning: "ma\xf1\xe1",
        afternoon: "tarde",
        evening: "tardi\xf1a",
        night: "noite"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoite",
        noon: "mediod\xeda",
        morning: "ma\xf1\xe1",
        afternoon: "tarde",
        evening: "tardi\xf1a",
        night: "noite"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "da ma\xf1\xe1",
        afternoon: "da tarde",
        evening: "da tardi\xf1a",
        night: "da noite"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "medianoite",
        noon: "mediod\xeda",
        morning: "da ma\xf1\xe1",
        afternoon: "da tarde",
        evening: "da tardi\xf1a",
        night: "da noite"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "medianoite",
        noon: "mediod\xeda",
        morning: "da ma\xf1\xe1",
        afternoon: "da tarde",
        evening: "da tardi\xf1a",
        night: "da noite"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "\xba";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"bfef3faa06ce016":"fGq1u"}],"1ZA1J":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("a22a9199b8f6d928");
var _index2 = require("cfc9ac17e1041520");
const matchOrdinalNumberPattern = /^(\d+)(º)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ac|dc|a|d)/i,
    abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
    wide: /^(antes de cristo|antes da era com[uú]n|despois de cristo|era com[uú]n)/i
};
const parseEraPatterns = {
    any: [
        /^ac/i,
        /^dc/i
    ],
    wide: [
        /^(antes de cristo|antes da era com[uú]n)/i,
        /^(despois de cristo|era com[uú]n)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^T[1234]/i,
    wide: /^[1234](º)? trimestre/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[xfmasond]/i,
    abbreviated: /^(xan|feb|mar|abr|mai|xun|xul|ago|set|out|nov|dec)/i,
    wide: /^(xaneiro|febreiro|marzo|abril|maio|xuño|xullo|agosto|setembro|outubro|novembro|decembro)/i
};
const parseMonthPatterns = {
    narrow: [
        /^x/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^x/i,
        /^x/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^xan/i,
        /^feb/i,
        /^mar/i,
        /^abr/i,
        /^mai/i,
        /^xun/i,
        /^xul/i,
        /^ago/i,
        /^set/i,
        /^out/i,
        /^nov/i,
        /^dec/i
    ]
};
const matchDayPatterns = {
    narrow: /^[dlmxvs]/i,
    short: /^(do|lu|ma|me|xo|ve|sa)/i,
    abbreviated: /^(dom|lun|mar|mer|xov|ven|sab)/i,
    wide: /^(domingo|luns|martes|m[eé]rcores|xoves|venres|s[áa]bado)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^m/i,
        /^x/i,
        /^v/i,
        /^s/i
    ],
    any: [
        /^do/i,
        /^lu/i,
        /^ma/i,
        /^me/i,
        /^xo/i,
        /^ve/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mn|md|(da|[aá]s) (mañ[aá]|tarde|noite))/i,
    any: /^([ap]\.?\s?m\.?|medianoite|mediod[ií]a|(da|[aá]s) (mañ[aá]|tarde|noite))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /^md/i,
        morning: /mañ[aá]/i,
        afternoon: /tarde/i,
        evening: /tardiña/i,
        night: /noite/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"a22a9199b8f6d928":"15lWd","cfc9ac17e1041520":"kWqg8"}],"0Xp9k":[function(require,module,exports) {
"use strict";
exports.gu = void 0;
var _index = require("72a1a2f972d12b05");
var _index2 = require("4123530bb3c10a47");
var _index3 = require("ca2ecd59838d83fe");
var _index4 = require("faa3e5b17ddd6b7a");
var _index5 = require("182805ad901868ce");
/**
 * @category Locales
 * @summary Gujarati locale (India).
 * @language Gujarati
 * @iso-639-2 guj
 * @author Manaday Mavani [@ManadayM](https://github.com/manadaym)
 */ const gu = exports.gu = {
    code: "gu",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"72a1a2f972d12b05":"wenQM","4123530bb3c10a47":"ccjZB","ca2ecd59838d83fe":"5OBme","faa3e5b17ddd6b7a":"1q9FY","182805ad901868ce":"8Nltn"}],"wenQM":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
// Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0AB9\u0AAE\u0AA3\u0ABE\u0A82",
        other: "\u200B\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0AB8\u0AC7\u0A95\u0A82\u0AA1"
    },
    xSeconds: {
        one: "1 \u0AB8\u0AC7\u0A95\u0A82\u0AA1",
        other: "{{count}} \u0AB8\u0AC7\u0A95\u0A82\u0AA1"
    },
    halfAMinute: "\u0A85\u0AA1\u0AA7\u0AC0 \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F",
    lessThanXMinutes: {
        one: "\u0A86 \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F",
        other: "\u200B\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F"
    },
    xMinutes: {
        one: "1 \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F",
        other: "{{count}} \u0AAE\u0ABF\u0AA8\u0ABF\u0A9F"
    },
    aboutXHours: {
        one: "\u200B\u0A86\u0AB6\u0AB0\u0AC7 1 \u0A95\u0AB2\u0ABE\u0A95",
        other: "\u200B\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0A95\u0AB2\u0ABE\u0A95"
    },
    xHours: {
        one: "1 \u0A95\u0AB2\u0ABE\u0A95",
        other: "{{count}} \u0A95\u0AB2\u0ABE\u0A95"
    },
    xDays: {
        one: "1 \u0AA6\u0ABF\u0AB5\u0AB8",
        other: "{{count}} \u0AA6\u0ABF\u0AB5\u0AB8"
    },
    aboutXWeeks: {
        one: "\u0A86\u0AB6\u0AB0\u0AC7 1 \u0A85\u0AA0\u0AB5\u0ABE\u0AA1\u0ABF\u0AAF\u0AC1\u0A82",
        other: "\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0A85\u0AA0\u0AB5\u0ABE\u0AA1\u0ABF\u0AAF\u0ABE"
    },
    xWeeks: {
        one: "1 \u0A85\u0AA0\u0AB5\u0ABE\u0AA1\u0ABF\u0AAF\u0AC1\u0A82",
        other: "{{count}} \u0A85\u0AA0\u0AB5\u0ABE\u0AA1\u0ABF\u0AAF\u0ABE"
    },
    aboutXMonths: {
        one: "\u0A86\u0AB6\u0AB0\u0AC7 1 \u0AAE\u0AB9\u0ABF\u0AA8\u0ACB",
        other: "\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0AAE\u0AB9\u0ABF\u0AA8\u0ABE"
    },
    xMonths: {
        one: "1 \u0AAE\u0AB9\u0ABF\u0AA8\u0ACB",
        other: "{{count}} \u0AAE\u0AB9\u0ABF\u0AA8\u0ABE"
    },
    aboutXYears: {
        one: "\u0A86\u0AB6\u0AB0\u0AC7 1 \u0AB5\u0AB0\u0ACD\u0AB7",
        other: "\u0A86\u0AB6\u0AB0\u0AC7 {{count}} \u0AB5\u0AB0\u0ACD\u0AB7"
    },
    xYears: {
        one: "1 \u0AB5\u0AB0\u0ACD\u0AB7",
        other: "{{count}} \u0AB5\u0AB0\u0ACD\u0AB7"
    },
    overXYears: {
        one: "1 \u0AB5\u0AB0\u0ACD\u0AB7\u0AA5\u0AC0 \u0AB5\u0AA7\u0AC1",
        other: "{{count}} \u0AB5\u0AB0\u0ACD\u0AB7\u0AA5\u0AC0 \u0AB5\u0AA7\u0AC1"
    },
    almostXYears: {
        one: "\u0AB2\u0A97\u0AAD\u0A97 1 \u0AB5\u0AB0\u0ACD\u0AB7",
        other: "\u0AB2\u0A97\u0AAD\u0A97 {{count}} \u0AB5\u0AB0\u0ACD\u0AB7"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u0AAE\u0ABE\u0A82";
        else return result + " \u0AAA\u0AB9\u0AC7\u0AB2\u0ABE\u0A82";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"ccjZB":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("7d5afa146b9caad9");
//Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
const dateFormats = {
    full: "EEEE, d MMMM, y",
    long: "d MMMM, y",
    medium: "d MMM, y",
    short: "d/M/yy"
};
const timeFormats = {
    full: "hh:mm:ss a zzzz",
    long: "hh:mm:ss a z",
    medium: "hh:mm:ss a",
    short: "hh:mm a"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"7d5afa146b9caad9":"6OYyu"}],"5OBme":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
// Source: https://www.unicode.org/cldr/charts/32/summary/gu.html
const formatRelativeLocale = {
    lastWeek: "'\u0AAA\u0ABE\u0A9B\u0AB2\u0ABE' eeee p",
    yesterday: "'\u0A97\u0A88\u0A95\u0ABE\u0AB2\u0AC7' p",
    today: "'\u0A86\u0A9C\u0AC7' p",
    tomorrow: "'\u0A86\u0AB5\u0AA4\u0AC0\u0A95\u0ABE\u0AB2\u0AC7' p",
    nextWeek: "eeee p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"1q9FY":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("d3ee1244a81af026");
// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1621 - #1630
const eraValues = {
    narrow: [
        "\u0A88\u0AB8\u0AAA\u0AC2",
        "\u0A88\u0AB8"
    ],
    abbreviated: [
        "\u0A88.\u0AB8.\u0AAA\u0AC2\u0AB0\u0ACD\u0AB5\u0AC7",
        "\u0A88.\u0AB8."
    ],
    wide: [
        "\u0A88\u0AB8\u0AB5\u0AC0\u0AB8\u0AA8 \u0AAA\u0AC2\u0AB0\u0ACD\u0AB5\u0AC7",
        "\u0A88\u0AB8\u0AB5\u0AC0\u0AB8\u0AA8"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1631 - #1654
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1\u0AB2\u0ACB \u0AA4\u0ACD\u0AB0\u0ABF\u0AAE\u0ABE\u0AB8",
        "2\u0A9C\u0ACB \u0AA4\u0ACD\u0AB0\u0ABF\u0AAE\u0ABE\u0AB8",
        "3\u0A9C\u0ACB \u0AA4\u0ACD\u0AB0\u0ABF\u0AAE\u0ABE\u0AB8",
        "4\u0AA5\u0ACB \u0AA4\u0ACD\u0AB0\u0ABF\u0AAE\u0ABE\u0AB8"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1655 - #1726
const monthValues = {
    narrow: [
        "\u0A9C\u0ABE",
        "\u0AAB\u0AC7",
        "\u0AAE\u0ABE",
        "\u0A8F",
        "\u0AAE\u0AC7",
        "\u0A9C\u0AC2",
        "\u0A9C\u0AC1",
        "\u0A93",
        "\u0AB8",
        "\u0A93",
        "\u0AA8",
        "\u0AA1\u0ABF"
    ],
    abbreviated: [
        "\u0A9C\u0ABE\u0AA8\u0ACD\u0AAF\u0AC1",
        "\u0AAB\u0AC7\u0AAC\u0ACD\u0AB0\u0AC1",
        "\u0AAE\u0ABE\u0AB0\u0ACD\u0A9A",
        "\u0A8F\u0AAA\u0ACD\u0AB0\u0ABF\u0AB2",
        "\u0AAE\u0AC7",
        "\u0A9C\u0AC2\u0AA8",
        "\u0A9C\u0AC1\u0AB2\u0ABE\u0A88",
        "\u0A91\u0A97\u0AB8\u0ACD\u0A9F",
        "\u0AB8\u0AAA\u0ACD\u0A9F\u0AC7",
        "\u0A93\u0A95\u0ACD\u0A9F\u0ACB",
        "\u0AA8\u0AB5\u0AC7",
        "\u0AA1\u0ABF\u0AB8\u0AC7"
    ],
    wide: [
        "\u0A9C\u0ABE\u0AA8\u0ACD\u0AAF\u0AC1\u0A86\u0AB0\u0AC0",
        "\u0AAB\u0AC7\u0AAC\u0ACD\u0AB0\u0AC1\u0A86\u0AB0\u0AC0",
        "\u0AAE\u0ABE\u0AB0\u0ACD\u0A9A",
        "\u0A8F\u0AAA\u0ACD\u0AB0\u0ABF\u0AB2",
        "\u0AAE\u0AC7",
        "\u0A9C\u0AC2\u0AA8",
        "\u0A9C\u0AC1\u0AB2\u0ABE\u0A87",
        "\u0A93\u0A97\u0AB8\u0ACD\u0A9F",
        "\u0AB8\u0AAA\u0ACD\u0A9F\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0",
        "\u0A93\u0A95\u0ACD\u0A9F\u0ACB\u0AAC\u0AB0",
        "\u0AA8\u0AB5\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0",
        "\u0AA1\u0ABF\u0AB8\u0AC7\u0AAE\u0ACD\u0AAC\u0AB0"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1727 - #1768
const dayValues = {
    narrow: [
        "\u0AB0",
        "\u0AB8\u0ACB",
        "\u0AAE\u0A82",
        "\u0AAC\u0AC1",
        "\u0A97\u0AC1",
        "\u0AB6\u0AC1",
        "\u0AB6"
    ],
    short: [
        "\u0AB0",
        "\u0AB8\u0ACB",
        "\u0AAE\u0A82",
        "\u0AAC\u0AC1",
        "\u0A97\u0AC1",
        "\u0AB6\u0AC1",
        "\u0AB6"
    ],
    abbreviated: [
        "\u0AB0\u0AB5\u0ABF",
        "\u0AB8\u0ACB\u0AAE",
        "\u0AAE\u0A82\u0A97\u0AB3",
        "\u0AAC\u0AC1\u0AA7",
        "\u0A97\u0AC1\u0AB0\u0AC1",
        "\u0AB6\u0AC1\u0A95\u0ACD\u0AB0",
        "\u0AB6\u0AA8\u0ABF"
    ],
    wide: [
        "\u0AB0\u0AB5\u0ABF\u0AB5\u0ABE\u0AB0" /* Sunday */ ,
        "\u0AB8\u0ACB\u0AAE\u0AB5\u0ABE\u0AB0" /* Monday */ ,
        "\u0AAE\u0A82\u0A97\u0AB3\u0AB5\u0ABE\u0AB0" /* Tuesday */ ,
        "\u0AAC\u0AC1\u0AA7\u0AB5\u0ABE\u0AB0" /* Wednesday */ ,
        "\u0A97\u0AC1\u0AB0\u0AC1\u0AB5\u0ABE\u0AB0" /* Thursday */ ,
        "\u0AB6\u0AC1\u0A95\u0ACD\u0AB0\u0AB5\u0ABE\u0AB0" /* Friday */ ,
        "\u0AB6\u0AA8\u0ABF\u0AB5\u0ABE\u0AB0" /* Saturday */ 
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/gu.html
// #1783 - #1824
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "\u0AAE.\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
        noon: "\u0AAC.",
        morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
        afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
        night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "\u200B\u0AAE\u0AA7\u0ACD\u0AAF\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
        noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
        afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
        night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "\u200B\u0AAE\u0AA7\u0ACD\u0AAF\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
        noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
        afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
        night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "\u0AAE.\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
        noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
        afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
        night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "\u0AAE\u0AA7\u0ACD\u0AAF\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
        noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
        afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
        night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "\u200B\u0AAE\u0AA7\u0ACD\u0AAF\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0ABF",
        noon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        morning: "\u0AB8\u0AB5\u0ABE\u0AB0\u0AC7",
        afternoon: "\u0AAC\u0AAA\u0ACB\u0AB0\u0AC7",
        evening: "\u0AB8\u0ABE\u0A82\u0A9C\u0AC7",
        night: "\u0AB0\u0ABE\u0AA4\u0ACD\u0AB0\u0AC7"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"d3ee1244a81af026":"fGq1u"}],"8Nltn":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("db63df2108257c46");
var _index2 = require("b6425fe4ebf7d524");
const matchOrdinalNumberPattern = /^(\d+)(લ|જ|થ|ઠ્ઠ|મ)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ઈસપૂ|ઈસ)/i,
    abbreviated: /^(ઈ\.સ\.પૂર્વે|ઈ\.સ\.)/i,
    wide: /^(ઈસવીસન\sપૂર્વે|ઈસવીસન)/i
};
const parseEraPatterns = {
    any: [
        /^ઈસપૂ/i,
        /^ઈસ/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](લો|જો|થો)? ત્રિમાસ/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    // eslint-disable-next-line no-misleading-character-class
    narrow: /^[જાફેમાએમેજૂજુઓસઓનડિ]/i,
    abbreviated: /^(જાન્યુ|ફેબ્રુ|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઈ|ઑગસ્ટ|સપ્ટે|ઓક્ટો|નવે|ડિસે)/i,
    wide: /^(જાન્યુઆરી|ફેબ્રુઆરી|માર્ચ|એપ્રિલ|મે|જૂન|જુલાઇ|ઓગસ્ટ|સપ્ટેમ્બર|ઓક્ટોબર|નવેમ્બર|ડિસેમ્બર)/i
};
const parseMonthPatterns = {
    narrow: [
        /^જા/i,
        /^ફે/i,
        /^મા/i,
        /^એ/i,
        /^મે/i,
        /^જૂ/i,
        /^જુ/i,
        /^ઑગ/i,
        /^સ/i,
        /^ઓક્ટો/i,
        /^ન/i,
        /^ડિ/i
    ],
    any: [
        /^જા/i,
        /^ફે/i,
        /^મા/i,
        /^એ/i,
        /^મે/i,
        /^જૂ/i,
        /^જુ/i,
        /^ઑગ/i,
        /^સ/i,
        /^ઓક્ટો/i,
        /^ન/i,
        /^ડિ/i
    ]
};
const matchDayPatterns = {
    narrow: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
    short: /^(ર|સો|મં|બુ|ગુ|શુ|શ)/i,
    abbreviated: /^(રવિ|સોમ|મંગળ|બુધ|ગુરુ|શુક્ર|શનિ)/i,
    wide: /^(રવિવાર|સોમવાર|મંગળવાર|બુધવાર|ગુરુવાર|શુક્રવાર|શનિવાર)/i
};
const parseDayPatterns = {
    narrow: [
        /^ર/i,
        /^સો/i,
        /^મં/i,
        /^બુ/i,
        /^ગુ/i,
        /^શુ/i,
        /^શ/i
    ],
    any: [
        /^ર/i,
        /^સો/i,
        /^મં/i,
        /^બુ/i,
        /^ગુ/i,
        /^શુ/i,
        /^શ/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|મ\.?|સ|બ|સાં|રા)/i,
    any: /^(a|p|મ\.?|સ|બ|સાં|રા)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^મ\.?/i,
        noon: /^બ/i,
        morning: /સ/i,
        afternoon: /બ/i,
        evening: /સાં/i,
        night: /રા/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"db63df2108257c46":"15lWd","b6425fe4ebf7d524":"kWqg8"}],"iIOw5":[function(require,module,exports) {
"use strict";
exports.he = void 0;
var _index = require("28c7b3848a2b3d35");
var _index2 = require("4aebdb3c747087af");
var _index3 = require("a34c35b284e03bd1");
var _index4 = require("4600ebbf9747fdcf");
var _index5 = require("4752b47055035a8c");
/**
 * @category Locales
 * @summary Hebrew locale.
 * @language Hebrew
 * @iso-639-2 heb
 * @author Nir Lahad [@nirlah](https://github.com/nirlah)
 */ const he = exports.he = {
    code: "he",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"28c7b3848a2b3d35":"hSb0B","4aebdb3c747087af":"8ZF8w","a34c35b284e03bd1":"7LH1m","4600ebbf9747fdcf":"jAsck","4752b47055035a8c":"gXCZb"}],"hSb0B":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05E9\u05E0\u05D9\u05D9\u05D4",
        two: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05E9\u05EA\u05D9 \u05E9\u05E0\u05D9\u05D5\u05EA",
        other: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05BE{{count}} \u05E9\u05E0\u05D9\u05D5\u05EA"
    },
    xSeconds: {
        one: "\u05E9\u05E0\u05D9\u05D9\u05D4",
        two: "\u05E9\u05EA\u05D9 \u05E9\u05E0\u05D9\u05D5\u05EA",
        other: "{{count}} \u05E9\u05E0\u05D9\u05D5\u05EA"
    },
    halfAMinute: "\u05D7\u05E6\u05D9 \u05D3\u05E7\u05D4",
    lessThanXMinutes: {
        one: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05D3\u05E7\u05D4",
        two: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05E9\u05EA\u05D9 \u05D3\u05E7\u05D5\u05EA",
        other: "\u05E4\u05D7\u05D5\u05EA \u05DE\u05BE{{count}} \u05D3\u05E7\u05D5\u05EA"
    },
    xMinutes: {
        one: "\u05D3\u05E7\u05D4",
        two: "\u05E9\u05EA\u05D9 \u05D3\u05E7\u05D5\u05EA",
        other: "{{count}} \u05D3\u05E7\u05D5\u05EA"
    },
    aboutXHours: {
        one: "\u05DB\u05E9\u05E2\u05D4",
        two: "\u05DB\u05E9\u05E2\u05EA\u05D9\u05D9\u05DD",
        other: "\u05DB\u05BE{{count}} \u05E9\u05E2\u05D5\u05EA"
    },
    xHours: {
        one: "\u05E9\u05E2\u05D4",
        two: "\u05E9\u05E2\u05EA\u05D9\u05D9\u05DD",
        other: "{{count}} \u05E9\u05E2\u05D5\u05EA"
    },
    xDays: {
        one: "\u05D9\u05D5\u05DD",
        two: "\u05D9\u05D5\u05DE\u05D9\u05D9\u05DD",
        other: "{{count}} \u05D9\u05DE\u05D9\u05DD"
    },
    aboutXWeeks: {
        one: "\u05DB\u05E9\u05D1\u05D5\u05E2",
        two: "\u05DB\u05E9\u05D1\u05D5\u05E2\u05D9\u05D9\u05DD",
        other: "\u05DB\u05BE{{count}} \u05E9\u05D1\u05D5\u05E2\u05D5\u05EA"
    },
    xWeeks: {
        one: "\u05E9\u05D1\u05D5\u05E2",
        two: "\u05E9\u05D1\u05D5\u05E2\u05D9\u05D9\u05DD",
        other: "{{count}} \u05E9\u05D1\u05D5\u05E2\u05D5\u05EA"
    },
    aboutXMonths: {
        one: "\u05DB\u05D7\u05D5\u05D3\u05E9",
        two: "\u05DB\u05D7\u05D5\u05D3\u05E9\u05D9\u05D9\u05DD",
        other: "\u05DB\u05BE{{count}} \u05D7\u05D5\u05D3\u05E9\u05D9\u05DD"
    },
    xMonths: {
        one: "\u05D7\u05D5\u05D3\u05E9",
        two: "\u05D7\u05D5\u05D3\u05E9\u05D9\u05D9\u05DD",
        other: "{{count}} \u05D7\u05D5\u05D3\u05E9\u05D9\u05DD"
    },
    aboutXYears: {
        one: "\u05DB\u05E9\u05E0\u05D4",
        two: "\u05DB\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD",
        other: "\u05DB\u05BE{{count}} \u05E9\u05E0\u05D9\u05DD"
    },
    xYears: {
        one: "\u05E9\u05E0\u05D4",
        two: "\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD",
        other: "{{count}} \u05E9\u05E0\u05D9\u05DD"
    },
    overXYears: {
        one: "\u05D9\u05D5\u05EA\u05E8 \u05DE\u05E9\u05E0\u05D4",
        two: "\u05D9\u05D5\u05EA\u05E8 \u05DE\u05E9\u05E0\u05EA\u05D9\u05D9\u05DD",
        other: "\u05D9\u05D5\u05EA\u05E8 \u05DE\u05BE{{count}} \u05E9\u05E0\u05D9\u05DD"
    },
    almostXYears: {
        one: "\u05DB\u05DE\u05E2\u05D8 \u05E9\u05E0\u05D4",
        two: "\u05DB\u05DE\u05E2\u05D8 \u05E9\u05E0\u05EA\u05D9\u05D9\u05DD",
        other: "\u05DB\u05DE\u05E2\u05D8 {{count}} \u05E9\u05E0\u05D9\u05DD"
    }
};
const formatDistance = (token, count, options)=>{
    // Return word instead of `in one day` or `one day ago`
    if (token === "xDays" && options?.addSuffix && count <= 2) {
        if (options.comparison && options.comparison > 0) return count === 1 ? "\u05DE\u05D7\u05E8" : "\u05DE\u05D7\u05E8\u05EA\u05D9\u05D9\u05DD";
        return count === 1 ? "\u05D0\u05EA\u05DE\u05D5\u05DC" : "\u05E9\u05DC\u05E9\u05D5\u05DD";
    }
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else if (count === 2) result = tokenValue.two;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u05D1\u05E2\u05D5\u05D3 " + result;
        else return "\u05DC\u05E4\u05E0\u05D9 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"8ZF8w":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("ff495eb25eed46db");
const dateFormats = {
    full: "EEEE, d \u05D1MMMM y",
    long: "d \u05D1MMMM y",
    medium: "d \u05D1MMM y",
    short: "d.M.y"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\u05D1\u05E9\u05E2\u05D4' {{time}}",
    long: "{{date}} '\u05D1\u05E9\u05E2\u05D4' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"ff495eb25eed46db":"6OYyu"}],"7LH1m":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee '\u05E9\u05E2\u05D1\u05E8 \u05D1\u05E9\u05E2\u05D4' p",
    yesterday: "'\u05D0\u05EA\u05DE\u05D5\u05DC \u05D1\u05E9\u05E2\u05D4' p",
    today: "'\u05D4\u05D9\u05D5\u05DD \u05D1\u05E9\u05E2\u05D4' p",
    tomorrow: "'\u05DE\u05D7\u05E8 \u05D1\u05E9\u05E2\u05D4' p",
    nextWeek: "eeee '\u05D1\u05E9\u05E2\u05D4' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"jAsck":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("b7f8238c0433e8a");
const eraValues = {
    narrow: [
        "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E1",
        "\u05DC\u05E1\u05E4\u05D9\u05E8\u05D4"
    ],
    abbreviated: [
        "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E1",
        "\u05DC\u05E1\u05E4\u05D9\u05E8\u05D4"
    ],
    wide: [
        "\u05DC\u05E4\u05E0\u05D9 \u05D4\u05E1\u05E4\u05D9\u05E8\u05D4",
        "\u05DC\u05E1\u05E4\u05D9\u05E8\u05D4"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "\u05E8\u05D1\u05E2\u05D5\u05DF 1",
        "\u05E8\u05D1\u05E2\u05D5\u05DF 2",
        "\u05E8\u05D1\u05E2\u05D5\u05DF 3",
        "\u05E8\u05D1\u05E2\u05D5\u05DF 4"
    ]
};
const monthValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12"
    ],
    abbreviated: [
        "\u05D9\u05E0\u05D5\u05F3",
        "\u05E4\u05D1\u05E8\u05F3",
        "\u05DE\u05E8\u05E5",
        "\u05D0\u05E4\u05E8\u05F3",
        "\u05DE\u05D0\u05D9",
        "\u05D9\u05D5\u05E0\u05D9",
        "\u05D9\u05D5\u05DC\u05D9",
        "\u05D0\u05D5\u05D2\u05F3",
        "\u05E1\u05E4\u05D8\u05F3",
        "\u05D0\u05D5\u05E7\u05F3",
        "\u05E0\u05D5\u05D1\u05F3",
        "\u05D3\u05E6\u05DE\u05F3"
    ],
    wide: [
        "\u05D9\u05E0\u05D5\u05D0\u05E8",
        "\u05E4\u05D1\u05E8\u05D5\u05D0\u05E8",
        "\u05DE\u05E8\u05E5",
        "\u05D0\u05E4\u05E8\u05D9\u05DC",
        "\u05DE\u05D0\u05D9",
        "\u05D9\u05D5\u05E0\u05D9",
        "\u05D9\u05D5\u05DC\u05D9",
        "\u05D0\u05D5\u05D2\u05D5\u05E1\u05D8",
        "\u05E1\u05E4\u05D8\u05DE\u05D1\u05E8",
        "\u05D0\u05D5\u05E7\u05D8\u05D5\u05D1\u05E8",
        "\u05E0\u05D5\u05D1\u05DE\u05D1\u05E8",
        "\u05D3\u05E6\u05DE\u05D1\u05E8"
    ]
};
const dayValues = {
    narrow: [
        "\u05D0\u05F3",
        "\u05D1\u05F3",
        "\u05D2\u05F3",
        "\u05D3\u05F3",
        "\u05D4\u05F3",
        "\u05D5\u05F3",
        "\u05E9\u05F3"
    ],
    short: [
        "\u05D0\u05F3",
        "\u05D1\u05F3",
        "\u05D2\u05F3",
        "\u05D3\u05F3",
        "\u05D4\u05F3",
        "\u05D5\u05F3",
        "\u05E9\u05F3"
    ],
    abbreviated: [
        "\u05D9\u05D5\u05DD \u05D0\u05F3",
        "\u05D9\u05D5\u05DD \u05D1\u05F3",
        "\u05D9\u05D5\u05DD \u05D2\u05F3",
        "\u05D9\u05D5\u05DD \u05D3\u05F3",
        "\u05D9\u05D5\u05DD \u05D4\u05F3",
        "\u05D9\u05D5\u05DD \u05D5\u05F3",
        "\u05E9\u05D1\u05EA"
    ],
    wide: [
        "\u05D9\u05D5\u05DD \u05E8\u05D0\u05E9\u05D5\u05DF",
        "\u05D9\u05D5\u05DD \u05E9\u05E0\u05D9",
        "\u05D9\u05D5\u05DD \u05E9\u05DC\u05D9\u05E9\u05D9",
        "\u05D9\u05D5\u05DD \u05E8\u05D1\u05D9\u05E2\u05D9",
        "\u05D9\u05D5\u05DD \u05D7\u05DE\u05D9\u05E9\u05D9",
        "\u05D9\u05D5\u05DD \u05E9\u05D9\u05E9\u05D9",
        "\u05D9\u05D5\u05DD \u05E9\u05D1\u05EA"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
        pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
        midnight: "\u05D7\u05E6\u05D5\u05EA",
        noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        morning: "\u05D1\u05D5\u05E7\u05E8",
        afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        evening: "\u05E2\u05E8\u05D1",
        night: "\u05DC\u05D9\u05DC\u05D4"
    },
    abbreviated: {
        am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
        pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
        midnight: "\u05D7\u05E6\u05D5\u05EA",
        noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        morning: "\u05D1\u05D5\u05E7\u05E8",
        afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        evening: "\u05E2\u05E8\u05D1",
        night: "\u05DC\u05D9\u05DC\u05D4"
    },
    wide: {
        am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
        pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
        midnight: "\u05D7\u05E6\u05D5\u05EA",
        noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        morning: "\u05D1\u05D5\u05E7\u05E8",
        afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        evening: "\u05E2\u05E8\u05D1",
        night: "\u05DC\u05D9\u05DC\u05D4"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
        pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
        midnight: "\u05D7\u05E6\u05D5\u05EA",
        noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        morning: "\u05D1\u05D1\u05D5\u05E7\u05E8",
        afternoon: "\u05D1\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        evening: "\u05D1\u05E2\u05E8\u05D1",
        night: "\u05D1\u05DC\u05D9\u05DC\u05D4"
    },
    abbreviated: {
        am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
        pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
        midnight: "\u05D7\u05E6\u05D5\u05EA",
        noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        morning: "\u05D1\u05D1\u05D5\u05E7\u05E8",
        afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        evening: "\u05D1\u05E2\u05E8\u05D1",
        night: "\u05D1\u05DC\u05D9\u05DC\u05D4"
    },
    wide: {
        am: "\u05DC\u05E4\u05E0\u05D4\u05F4\u05E6",
        pm: "\u05D0\u05D7\u05D4\u05F4\u05E6",
        midnight: "\u05D7\u05E6\u05D5\u05EA",
        noon: "\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        morning: "\u05D1\u05D1\u05D5\u05E7\u05E8",
        afternoon: "\u05D0\u05D7\u05E8 \u05D4\u05E6\u05D4\u05E8\u05D9\u05D9\u05DD",
        evening: "\u05D1\u05E2\u05E8\u05D1",
        night: "\u05D1\u05DC\u05D9\u05DC\u05D4"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    // We only show words till 10
    if (number <= 0 || number > 10) return String(number);
    const unit = String(options?.unit);
    const isFemale = [
        "year",
        "hour",
        "minute",
        "second"
    ].indexOf(unit) >= 0;
    const male = [
        "\u05E8\u05D0\u05E9\u05D5\u05DF",
        "\u05E9\u05E0\u05D9",
        "\u05E9\u05DC\u05D9\u05E9\u05D9",
        "\u05E8\u05D1\u05D9\u05E2\u05D9",
        "\u05D7\u05DE\u05D9\u05E9\u05D9",
        "\u05E9\u05D9\u05E9\u05D9",
        "\u05E9\u05D1\u05D9\u05E2\u05D9",
        "\u05E9\u05DE\u05D9\u05E0\u05D9",
        "\u05EA\u05E9\u05D9\u05E2\u05D9",
        "\u05E2\u05E9\u05D9\u05E8\u05D9"
    ];
    const female = [
        "\u05E8\u05D0\u05E9\u05D5\u05E0\u05D4",
        "\u05E9\u05E0\u05D9\u05D9\u05D4",
        "\u05E9\u05DC\u05D9\u05E9\u05D9\u05EA",
        "\u05E8\u05D1\u05D9\u05E2\u05D9\u05EA",
        "\u05D7\u05DE\u05D9\u05E9\u05D9\u05EA",
        "\u05E9\u05D9\u05E9\u05D9\u05EA",
        "\u05E9\u05D1\u05D9\u05E2\u05D9\u05EA",
        "\u05E9\u05DE\u05D9\u05E0\u05D9\u05EA",
        "\u05EA\u05E9\u05D9\u05E2\u05D9\u05EA",
        "\u05E2\u05E9\u05D9\u05E8\u05D9\u05EA"
    ];
    const index = number - 1;
    return isFemale ? female[index] : male[index];
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"b7f8238c0433e8a":"fGq1u"}],"gXCZb":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("dec72dd28cc491e7");
var _index2 = require("ce0312b2f63b0b2");
const matchOrdinalNumberPattern = /^(\d+|(ראשון|שני|שלישי|רביעי|חמישי|שישי|שביעי|שמיני|תשיעי|עשירי|ראשונה|שנייה|שלישית|רביעית|חמישית|שישית|שביעית|שמינית|תשיעית|עשירית))/i;
const parseOrdinalNumberPattern = /^(\d+|רא|שנ|של|רב|ח|שי|שב|שמ|ת|ע)/i;
const matchEraPatterns = {
    narrow: /^ל(ספירה|פנה״ס)/i,
    abbreviated: /^ל(ספירה|פנה״ס)/i,
    wide: /^ל(פני ה)?ספירה/i
};
const parseEraPatterns = {
    any: [
        /^לפ/i,
        /^לס/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^רבעון [1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^\d+/i,
    abbreviated: /^(ינו|פבר|מרץ|אפר|מאי|יוני|יולי|אוג|ספט|אוק|נוב|דצמ)׳?/i,
    wide: /^(ינואר|פברואר|מרץ|אפריל|מאי|יוני|יולי|אוגוסט|ספטמבר|אוקטובר|נובמבר|דצמבר)/i
};
const parseMonthPatterns = {
    narrow: [
        /^1$/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^7/i,
        /^8/i,
        /^9/i,
        /^10/i,
        /^11/i,
        /^12/i
    ],
    any: [
        /^ינ/i,
        /^פ/i,
        /^מר/i,
        /^אפ/i,
        /^מא/i,
        /^יונ/i,
        /^יול/i,
        /^אוג/i,
        /^ס/i,
        /^אוק/i,
        /^נ/i,
        /^ד/i
    ]
};
const matchDayPatterns = {
    narrow: /^[אבגדהוש]׳/i,
    short: /^[אבגדהוש]׳/i,
    abbreviated: /^(שבת|יום (א|ב|ג|ד|ה|ו)׳)/i,
    wide: /^יום (ראשון|שני|שלישי|רביעי|חמישי|שישי|שבת)/i
};
const parseDayPatterns = {
    abbreviated: [
        /א׳$/i,
        /ב׳$/i,
        /ג׳$/i,
        /ד׳$/i,
        /ה׳$/i,
        /ו׳$/i,
        /^ש/i
    ],
    wide: [
        /ן$/i,
        /ני$/i,
        /לישי$/i,
        /עי$/i,
        /מישי$/i,
        /שישי$/i,
        /ת$/i
    ],
    any: [
        /^א/i,
        /^ב/i,
        /^ג/i,
        /^ד/i,
        /^ה/i,
        /^ו/i,
        /^ש/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(אחר ה|ב)?(חצות|צהריים|בוקר|ערב|לילה|אחה״צ|לפנה״צ)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^לפ/i,
        pm: /^אחה/i,
        midnight: /^ח/i,
        noon: /^צ/i,
        morning: /בוקר/i,
        afternoon: /בצ|אחר/i,
        evening: /ערב/i,
        night: /לילה/i
    }
};
const ordinalName = [
    "\u05E8\u05D0",
    "\u05E9\u05E0",
    "\u05E9\u05DC",
    "\u05E8\u05D1",
    "\u05D7",
    "\u05E9\u05D9",
    "\u05E9\u05D1",
    "\u05E9\u05DE",
    "\u05EA",
    "\u05E2"
];
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>{
            const number = parseInt(value, 10);
            return isNaN(number) ? ordinalName.indexOf(value) + 1 : number;
        }
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"dec72dd28cc491e7":"15lWd","ce0312b2f63b0b2":"kWqg8"}],"lmmd8":[function(require,module,exports) {
"use strict";
exports.hi = void 0;
var _index = require("1f8816fabac20631");
var _index2 = require("81714cdc0e4fee97");
var _index3 = require("a48c4a27597ad1b1");
var _index4 = require("591968aa48274fe4");
var _index5 = require("56675534b768a3a2");
/**
 * @category Locales
 * @summary Hindi locale (India).
 * @language Hindi
 * @iso-639-2 hin
 * @author Mukesh Mandiwal [@mukeshmandiwal](https://github.com/mukeshmandiwal)
 */ const hi = exports.hi = {
    code: "hi",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"1f8816fabac20631":"7Sx6S","81714cdc0e4fee97":"my7f5","a48c4a27597ad1b1":"bw0fg","591968aa48274fe4":"jwlwa","56675534b768a3a2":"l5D4a"}],"7Sx6S":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
var _index = require("bc4738bec6e42af5");
// Source: https://www.unicode.org/cldr/charts/32/summary/hi.html
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0967 \u0938\u0947\u0915\u0902\u0921 \u0938\u0947 \u0915\u092E",
        other: "{{count}} \u0938\u0947\u0915\u0902\u0921 \u0938\u0947 \u0915\u092E"
    },
    xSeconds: {
        one: "\u0967 \u0938\u0947\u0915\u0902\u0921",
        other: "{{count}} \u0938\u0947\u0915\u0902\u0921"
    },
    halfAMinute: "\u0906\u0927\u093E \u092E\u093F\u0928\u091F",
    lessThanXMinutes: {
        one: "\u0967 \u092E\u093F\u0928\u091F \u0938\u0947 \u0915\u092E",
        other: "{{count}} \u092E\u093F\u0928\u091F \u0938\u0947 \u0915\u092E"
    },
    xMinutes: {
        one: "\u0967 \u092E\u093F\u0928\u091F",
        other: "{{count}} \u092E\u093F\u0928\u091F"
    },
    aboutXHours: {
        one: "\u0932\u0917\u092D\u0917 \u0967 \u0918\u0902\u091F\u093E",
        other: "\u0932\u0917\u092D\u0917 {{count}} \u0918\u0902\u091F\u0947"
    },
    xHours: {
        one: "\u0967 \u0918\u0902\u091F\u093E",
        other: "{{count}} \u0918\u0902\u091F\u0947"
    },
    xDays: {
        one: "\u0967 \u0926\u093F\u0928",
        other: "{{count}} \u0926\u093F\u0928"
    },
    aboutXWeeks: {
        one: "\u0932\u0917\u092D\u0917 \u0967 \u0938\u092A\u094D\u0924\u093E\u0939",
        other: "\u0932\u0917\u092D\u0917 {{count}} \u0938\u092A\u094D\u0924\u093E\u0939"
    },
    xWeeks: {
        one: "\u0967 \u0938\u092A\u094D\u0924\u093E\u0939",
        other: "{{count}} \u0938\u092A\u094D\u0924\u093E\u0939"
    },
    aboutXMonths: {
        one: "\u0932\u0917\u092D\u0917 \u0967 \u092E\u0939\u0940\u0928\u093E",
        other: "\u0932\u0917\u092D\u0917 {{count}} \u092E\u0939\u0940\u0928\u0947"
    },
    xMonths: {
        one: "\u0967 \u092E\u0939\u0940\u0928\u093E",
        other: "{{count}} \u092E\u0939\u0940\u0928\u0947"
    },
    aboutXYears: {
        one: "\u0932\u0917\u092D\u0917 \u0967 \u0935\u0930\u094D\u0937",
        other: "\u0932\u0917\u092D\u0917 {{count}} \u0935\u0930\u094D\u0937"
    },
    xYears: {
        one: "\u0967 \u0935\u0930\u094D\u0937",
        other: "{{count}} \u0935\u0930\u094D\u0937"
    },
    overXYears: {
        one: "\u0967 \u0935\u0930\u094D\u0937 \u0938\u0947 \u0905\u0927\u093F\u0915",
        other: "{{count}} \u0935\u0930\u094D\u0937 \u0938\u0947 \u0905\u0927\u093F\u0915"
    },
    almostXYears: {
        one: "\u0932\u0917\u092D\u0917 \u0967 \u0935\u0930\u094D\u0937",
        other: "\u0932\u0917\u092D\u0917 {{count}} \u0935\u0930\u094D\u0937"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", (0, _index.numberToLocale)(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u092E\u0947 ";
        else return result + " \u092A\u0939\u0932\u0947";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{"bc4738bec6e42af5":"jwlwa"}],"jwlwa":[function(require,module,exports) {
"use strict";
exports.localeToNumber = localeToNumber;
exports.localize = void 0;
exports.numberToLocale = numberToLocale;
var _index = require("9c4c71e6820ba0ee");
const numberValues = {
    locale: {
        1: "\u0967",
        2: "\u0968",
        3: "\u0969",
        4: "\u096A",
        5: "\u096B",
        6: "\u096C",
        7: "\u096D",
        8: "\u096E",
        9: "\u096F",
        0: "\u0966"
    },
    number: {
        "\u0967": "1",
        "\u0968": "2",
        "\u0969": "3",
        "\u096A": "4",
        "\u096B": "5",
        "\u096C": "6",
        "\u096D": "7",
        "\u096E": "8",
        "\u096F": "9",
        "\u0966": "0"
    }
};
// CLDR #1585 - #1592
const eraValues = {
    narrow: [
        "\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935",
        "\u0908\u0938\u094D\u0935\u0940"
    ],
    abbreviated: [
        "\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935",
        "\u0908\u0938\u094D\u0935\u0940"
    ],
    wide: [
        "\u0908\u0938\u093E-\u092A\u0942\u0930\u094D\u0935",
        "\u0908\u0938\u0935\u0940 \u0938\u0928"
    ]
};
// CLDR #1593 - #1616
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u0924\u093F1",
        "\u0924\u093F2",
        "\u0924\u093F3",
        "\u0924\u093F4"
    ],
    wide: [
        "\u092A\u0939\u0932\u0940 \u0924\u093F\u092E\u093E\u0939\u0940",
        "\u0926\u0942\u0938\u0930\u0940 \u0924\u093F\u092E\u093E\u0939\u0940",
        "\u0924\u0940\u0938\u0930\u0940 \u0924\u093F\u092E\u093E\u0939\u0940",
        "\u091A\u094C\u0925\u0940 \u0924\u093F\u092E\u093E\u0939\u0940"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
// https://www.unicode.org/cldr/charts/32/summary/hi.html
// CLDR #1617 - #1688
const monthValues = {
    narrow: [
        "\u091C",
        "\u092B\u093C",
        "\u092E\u093E",
        "\u0905",
        "\u092E\u0908",
        "\u091C\u0942",
        "\u091C\u0941",
        "\u0905\u0917",
        "\u0938\u093F",
        "\u0905\u0915\u094D\u091F\u0942",
        "\u0928",
        "\u0926\u093F"
    ],
    abbreviated: [
        "\u091C\u0928",
        "\u092B\u093C\u0930",
        "\u092E\u093E\u0930\u094D\u091A",
        "\u0905\u092A\u094D\u0930\u0948\u0932",
        "\u092E\u0908",
        "\u091C\u0942\u0928",
        "\u091C\u0941\u0932",
        "\u0905\u0917",
        "\u0938\u093F\u0924",
        "\u0905\u0915\u094D\u091F\u0942",
        "\u0928\u0935",
        "\u0926\u093F\u0938"
    ],
    wide: [
        "\u091C\u0928\u0935\u0930\u0940",
        "\u092B\u093C\u0930\u0935\u0930\u0940",
        "\u092E\u093E\u0930\u094D\u091A",
        "\u0905\u092A\u094D\u0930\u0948\u0932",
        "\u092E\u0908",
        "\u091C\u0942\u0928",
        "\u091C\u0941\u0932\u093E\u0908",
        "\u0905\u0917\u0938\u094D\u0924",
        "\u0938\u093F\u0924\u0902\u092C\u0930",
        "\u0905\u0915\u094D\u091F\u0942\u092C\u0930",
        "\u0928\u0935\u0902\u092C\u0930",
        "\u0926\u093F\u0938\u0902\u092C\u0930"
    ]
};
// CLDR #1689 - #1744
const dayValues = {
    narrow: [
        "\u0930",
        "\u0938\u094B",
        "\u092E\u0902",
        "\u092C\u0941",
        "\u0917\u0941",
        "\u0936\u0941",
        "\u0936"
    ],
    short: [
        "\u0930",
        "\u0938\u094B",
        "\u092E\u0902",
        "\u092C\u0941",
        "\u0917\u0941",
        "\u0936\u0941",
        "\u0936"
    ],
    abbreviated: [
        "\u0930\u0935\u093F",
        "\u0938\u094B\u092E",
        "\u092E\u0902\u0917\u0932",
        "\u092C\u0941\u0927",
        "\u0917\u0941\u0930\u0941",
        "\u0936\u0941\u0915\u094D\u0930",
        "\u0936\u0928\u093F"
    ],
    wide: [
        "\u0930\u0935\u093F\u0935\u093E\u0930",
        "\u0938\u094B\u092E\u0935\u093E\u0930",
        "\u092E\u0902\u0917\u0932\u0935\u093E\u0930",
        "\u092C\u0941\u0927\u0935\u093E\u0930",
        "\u0917\u0941\u0930\u0941\u0935\u093E\u0930",
        "\u0936\u0941\u0915\u094D\u0930\u0935\u093E\u0930",
        "\u0936\u0928\u093F\u0935\u093E\u0930"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
        pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
        midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
        noon: "\u0926\u094B\u092A\u0939\u0930",
        morning: "\u0938\u0941\u092C\u0939",
        afternoon: "\u0926\u094B\u092A\u0939\u0930",
        evening: "\u0936\u093E\u092E",
        night: "\u0930\u093E\u0924"
    },
    abbreviated: {
        am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
        pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
        midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
        noon: "\u0926\u094B\u092A\u0939\u0930",
        morning: "\u0938\u0941\u092C\u0939",
        afternoon: "\u0926\u094B\u092A\u0939\u0930",
        evening: "\u0936\u093E\u092E",
        night: "\u0930\u093E\u0924"
    },
    wide: {
        am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
        pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
        midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
        noon: "\u0926\u094B\u092A\u0939\u0930",
        morning: "\u0938\u0941\u092C\u0939",
        afternoon: "\u0926\u094B\u092A\u0939\u0930",
        evening: "\u0936\u093E\u092E",
        night: "\u0930\u093E\u0924"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
        pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
        midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
        noon: "\u0926\u094B\u092A\u0939\u0930",
        morning: "\u0938\u0941\u092C\u0939",
        afternoon: "\u0926\u094B\u092A\u0939\u0930",
        evening: "\u0936\u093E\u092E",
        night: "\u0930\u093E\u0924"
    },
    abbreviated: {
        am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
        pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
        midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
        noon: "\u0926\u094B\u092A\u0939\u0930",
        morning: "\u0938\u0941\u092C\u0939",
        afternoon: "\u0926\u094B\u092A\u0939\u0930",
        evening: "\u0936\u093E\u092E",
        night: "\u0930\u093E\u0924"
    },
    wide: {
        am: "\u092A\u0942\u0930\u094D\u0935\u093E\u0939\u094D\u0928",
        pm: "\u0905\u092A\u0930\u093E\u0939\u094D\u0928",
        midnight: "\u092E\u0927\u094D\u092F\u0930\u093E\u0924\u094D\u0930\u093F",
        noon: "\u0926\u094B\u092A\u0939\u0930",
        morning: "\u0938\u0941\u092C\u0939",
        afternoon: "\u0926\u094B\u092A\u0939\u0930",
        evening: "\u0936\u093E\u092E",
        night: "\u0930\u093E\u0924"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return numberToLocale(number);
};
function localeToNumber(locale) {
    const enNumber = locale.toString().replace(/[१२३४५६७८९०]/g, function(match) {
        return numberValues.number[match];
    });
    return Number(enNumber);
}
function numberToLocale(enNumber) {
    return enNumber.toString().replace(/\d/g, function(match) {
        return numberValues.locale[match];
    });
}
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"9c4c71e6820ba0ee":"fGq1u"}],"my7f5":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("1d86929af6c2c274");
const dateFormats = {
    full: "EEEE, do MMMM, y",
    long: "do MMMM, y",
    medium: "d MMM, y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u0915\u094B' {{time}}",
    long: "{{date}} '\u0915\u094B' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"1d86929af6c2c274":"6OYyu"}],"bw0fg":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u092A\u093F\u091B\u0932\u0947' eeee p",
    yesterday: "'\u0915\u0932' p",
    today: "'\u0906\u091C' p",
    tomorrow: "'\u0915\u0932' p",
    nextWeek: "eeee '\u0915\u094B' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"l5D4a":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("53ebdc80742e8493");
var _index2 = require("5c56216c55d7c558");
var _index3 = require("bfa7d486d6f0e222");
const matchOrdinalNumberPattern = /^[०१२३४५६७८९]+/i;
const parseOrdinalNumberPattern = /^[०१२३४५६७८९]+/i;
const matchEraPatterns = {
    narrow: /^(ईसा-पूर्व|ईस्वी)/i,
    abbreviated: /^(ईसा\.?\s?पूर्व\.?|ईसा\.?)/i,
    wide: /^(ईसा-पूर्व|ईसवी पूर्व|ईसवी सन|ईसवी)/i
};
const parseEraPatterns = {
    any: [
        /^b/i,
        /^(a|c)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^ति[1234]/i,
    wide: /^[1234](पहली|दूसरी|तीसरी|चौथी)? तिमाही/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    // eslint-disable-next-line no-misleading-character-class
    narrow: /^[जफ़माअप्मईजूनजुअगसिअक्तनदि]/i,
    abbreviated: /^(जन|फ़र|मार्च|अप्|मई|जून|जुल|अग|सित|अक्तू|नव|दिस)/i,
    wide: /^(जनवरी|फ़रवरी|मार्च|अप्रैल|मई|जून|जुलाई|अगस्त|सितंबर|अक्तूबर|नवंबर|दिसंबर)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ज/i,
        /^फ़/i,
        /^मा/i,
        /^अप्/i,
        /^मई/i,
        /^जू/i,
        /^जु/i,
        /^अग/i,
        /^सि/i,
        /^अक्तू/i,
        /^न/i,
        /^दि/i
    ],
    any: [
        /^जन/i,
        /^फ़/i,
        /^मा/i,
        /^अप्/i,
        /^मई/i,
        /^जू/i,
        /^जु/i,
        /^अग/i,
        /^सि/i,
        /^अक्तू/i,
        /^नव/i,
        /^दिस/i
    ]
};
const matchDayPatterns = {
    // eslint-disable-next-line no-misleading-character-class
    narrow: /^[रविसोममंगलबुधगुरुशुक्रशनि]/i,
    short: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
    abbreviated: /^(रवि|सोम|मंगल|बुध|गुरु|शुक्र|शनि)/i,
    wide: /^(रविवार|सोमवार|मंगलवार|बुधवार|गुरुवार|शुक्रवार|शनिवार)/i
};
const parseDayPatterns = {
    narrow: [
        /^रवि/i,
        /^सोम/i,
        /^मंगल/i,
        /^बुध/i,
        /^गुरु/i,
        /^शुक्र/i,
        /^शनि/i
    ],
    any: [
        /^रवि/i,
        /^सोम/i,
        /^मंगल/i,
        /^बुध/i,
        /^गुरु/i,
        /^शुक्र/i,
        /^शनि/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(पू|अ|म|द.\?|सु|दो|शा|रा)/i,
    any: /^(पूर्वाह्न|अपराह्न|म|द.\?|सु|दो|शा|रा)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^पूर्वाह्न/i,
        pm: /^अपराह्न/i,
        midnight: /^मध्य/i,
        noon: /^दो/i,
        morning: /सु/i,
        afternoon: /दो/i,
        evening: /शा/i,
        night: /रा/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: _index3.localeToNumber
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"53ebdc80742e8493":"15lWd","5c56216c55d7c558":"kWqg8","bfa7d486d6f0e222":"jwlwa"}],"d9XPL":[function(require,module,exports) {
"use strict";
exports.hr = void 0;
var _index = require("4efd2c94c4f880e9");
var _index2 = require("eead674a025af573");
var _index3 = require("9bd88e388cb134a5");
var _index4 = require("1e8b814e7ec81b02");
var _index5 = require("e68f1b7b4662ea2a");
/**
 * @category Locales
 * @summary Croatian locale.
 * @language Croatian
 * @iso-639-2 hrv
 * @author Matija Marohnić [@silvenon](https://github.com/silvenon)
 * @author Manico [@manico](https://github.com/manico)
 * @author Ivan Jeržabek [@jerzabek](https://github.com/jerzabek)
 */ const hr = exports.hr = {
    code: "hr",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"4efd2c94c4f880e9":"9lVhB","eead674a025af573":"3aDN1","9bd88e388cb134a5":"aqsOl","1e8b814e7ec81b02":"8VFJK","e68f1b7b4662ea2a":"3NB7J"}],"9lVhB":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: {
            standalone: "manje od 1 sekunde",
            withPrepositionAgo: "manje od 1 sekunde",
            withPrepositionIn: "manje od 1 sekundu"
        },
        dual: "manje od {{count}} sekunde",
        other: "manje od {{count}} sekundi"
    },
    xSeconds: {
        one: {
            standalone: "1 sekunda",
            withPrepositionAgo: "1 sekunde",
            withPrepositionIn: "1 sekundu"
        },
        dual: "{{count}} sekunde",
        other: "{{count}} sekundi"
    },
    halfAMinute: "pola minute",
    lessThanXMinutes: {
        one: {
            standalone: "manje od 1 minute",
            withPrepositionAgo: "manje od 1 minute",
            withPrepositionIn: "manje od 1 minutu"
        },
        dual: "manje od {{count}} minute",
        other: "manje od {{count}} minuta"
    },
    xMinutes: {
        one: {
            standalone: "1 minuta",
            withPrepositionAgo: "1 minute",
            withPrepositionIn: "1 minutu"
        },
        dual: "{{count}} minute",
        other: "{{count}} minuta"
    },
    aboutXHours: {
        one: {
            standalone: "oko 1 sat",
            withPrepositionAgo: "oko 1 sat",
            withPrepositionIn: "oko 1 sat"
        },
        dual: "oko {{count}} sata",
        other: "oko {{count}} sati"
    },
    xHours: {
        one: {
            standalone: "1 sat",
            withPrepositionAgo: "1 sat",
            withPrepositionIn: "1 sat"
        },
        dual: "{{count}} sata",
        other: "{{count}} sati"
    },
    xDays: {
        one: {
            standalone: "1 dan",
            withPrepositionAgo: "1 dan",
            withPrepositionIn: "1 dan"
        },
        dual: "{{count}} dana",
        other: "{{count}} dana"
    },
    aboutXWeeks: {
        one: {
            standalone: "oko 1 tjedan",
            withPrepositionAgo: "oko 1 tjedan",
            withPrepositionIn: "oko 1 tjedan"
        },
        dual: "oko {{count}} tjedna",
        other: "oko {{count}} tjedana"
    },
    xWeeks: {
        one: {
            standalone: "1 tjedan",
            withPrepositionAgo: "1 tjedan",
            withPrepositionIn: "1 tjedan"
        },
        dual: "{{count}} tjedna",
        other: "{{count}} tjedana"
    },
    aboutXMonths: {
        one: {
            standalone: "oko 1 mjesec",
            withPrepositionAgo: "oko 1 mjesec",
            withPrepositionIn: "oko 1 mjesec"
        },
        dual: "oko {{count}} mjeseca",
        other: "oko {{count}} mjeseci"
    },
    xMonths: {
        one: {
            standalone: "1 mjesec",
            withPrepositionAgo: "1 mjesec",
            withPrepositionIn: "1 mjesec"
        },
        dual: "{{count}} mjeseca",
        other: "{{count}} mjeseci"
    },
    aboutXYears: {
        one: {
            standalone: "oko 1 godinu",
            withPrepositionAgo: "oko 1 godinu",
            withPrepositionIn: "oko 1 godinu"
        },
        dual: "oko {{count}} godine",
        other: "oko {{count}} godina"
    },
    xYears: {
        one: {
            standalone: "1 godina",
            withPrepositionAgo: "1 godine",
            withPrepositionIn: "1 godinu"
        },
        dual: "{{count}} godine",
        other: "{{count}} godina"
    },
    overXYears: {
        one: {
            standalone: "preko 1 godinu",
            withPrepositionAgo: "preko 1 godinu",
            withPrepositionIn: "preko 1 godinu"
        },
        dual: "preko {{count}} godine",
        other: "preko {{count}} godina"
    },
    almostXYears: {
        one: {
            standalone: "gotovo 1 godinu",
            withPrepositionAgo: "gotovo 1 godinu",
            withPrepositionIn: "gotovo 1 godinu"
        },
        dual: "gotovo {{count}} godine",
        other: "gotovo {{count}} godina"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) {
        if (options?.addSuffix) {
            if (options.comparison && options.comparison > 0) result = tokenValue.one.withPrepositionIn;
            else result = tokenValue.one.withPrepositionAgo;
        } else result = tokenValue.one.standalone;
    } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
    String(count).substr(-2, 1) !== "1" // unless the 2nd to last digit is "1"
    ) result = tokenValue.dual.replace("{{count}}", String(count));
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "za " + result;
        else return "prije " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"3aDN1":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("a7cdcddb6a4579c8");
const dateFormats = {
    full: "EEEE, d. MMMM y.",
    long: "d. MMMM y.",
    medium: "d. MMM y.",
    short: "dd. MM. y."
};
const timeFormats = {
    full: "HH:mm:ss (zzzz)",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'u' {{time}}",
    long: "{{date}} 'u' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"a7cdcddb6a4579c8":"6OYyu"}],"aqsOl":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        switch(date.getDay()){
            case 0:
                return "'pro\u0161lu nedjelju u' p";
            case 3:
                return "'pro\u0161lu srijedu u' p";
            case 6:
                return "'pro\u0161lu subotu u' p";
            default:
                return "'pro\u0161li' EEEE 'u' p";
        }
    },
    yesterday: "'ju\u010Der u' p",
    today: "'danas u' p",
    tomorrow: "'sutra u' p",
    nextWeek: (date)=>{
        switch(date.getDay()){
            case 0:
                return "'idu\u0107u nedjelju u' p";
            case 3:
                return "'idu\u0107u srijedu u' p";
            case 6:
                return "'idu\u0107u subotu u' p";
            default:
                return "'pro\u0161li' EEEE 'u' p";
        }
    },
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"8VFJK":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("eea5e3c53e3bd393");
const eraValues = {
    narrow: [
        "pr.n.e.",
        "AD"
    ],
    abbreviated: [
        "pr. Kr.",
        "po. Kr."
    ],
    wide: [
        "Prije Krista",
        "Poslije Krista"
    ]
};
const quarterValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4."
    ],
    abbreviated: [
        "1. kv.",
        "2. kv.",
        "3. kv.",
        "4. kv."
    ],
    wide: [
        "1. kvartal",
        "2. kvartal",
        "3. kvartal",
        "4. kvartal"
    ]
};
const monthValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
    ],
    abbreviated: [
        "sij",
        "velj",
        "o\u017Eu",
        "tra",
        "svi",
        "lip",
        "srp",
        "kol",
        "ruj",
        "lis",
        "stu",
        "pro"
    ],
    wide: [
        "sije\u010Danj",
        "velja\u010Da",
        "o\u017Eujak",
        "travanj",
        "svibanj",
        "lipanj",
        "srpanj",
        "kolovoz",
        "rujan",
        "listopad",
        "studeni",
        "prosinac"
    ]
};
const formattingMonthValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
    ],
    abbreviated: [
        "sij",
        "velj",
        "o\u017Eu",
        "tra",
        "svi",
        "lip",
        "srp",
        "kol",
        "ruj",
        "lis",
        "stu",
        "pro"
    ],
    wide: [
        "sije\u010Dnja",
        "velja\u010De",
        "o\u017Eujka",
        "travnja",
        "svibnja",
        "lipnja",
        "srpnja",
        "kolovoza",
        "rujna",
        "listopada",
        "studenog",
        "prosinca"
    ]
};
const dayValues = {
    narrow: [
        "N",
        "P",
        "U",
        "S",
        "\u010C",
        "P",
        "S"
    ],
    short: [
        "ned",
        "pon",
        "uto",
        "sri",
        "\u010Det",
        "pet",
        "sub"
    ],
    abbreviated: [
        "ned",
        "pon",
        "uto",
        "sri",
        "\u010Det",
        "pet",
        "sub"
    ],
    wide: [
        "nedjelja",
        "ponedjeljak",
        "utorak",
        "srijeda",
        "\u010Detvrtak",
        "petak",
        "subota"
    ]
};
const formattingDayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "nave\u010Der",
        night: "no\u0107u"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "nave\u010Der",
        night: "no\u0107u"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutro",
        afternoon: "poslije podne",
        evening: "nave\u010Der",
        night: "no\u0107u"
    }
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "nave\u010Der",
        night: "no\u0107u"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutro",
        afternoon: "popodne",
        evening: "nave\u010Der",
        night: "no\u0107u"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutro",
        afternoon: "poslije podne",
        evening: "nave\u010Der",
        night: "no\u0107u"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"eea5e3c53e3bd393":"fGq1u"}],"3NB7J":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("d83ebd85efb2299c");
var _index2 = require("6c906a8bd79215bd");
const matchOrdinalNumberPattern = /^(\d+)\./i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(pr\.n\.e\.|AD)/i,
    abbreviated: /^(pr\.\s?Kr\.|po\.\s?Kr\.)/i,
    wide: /^(Prije Krista|prije nove ere|Poslije Krista|nova era)/i
};
const parseEraPatterns = {
    any: [
        /^pr/i,
        /^(po|nova)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]\.\s?kv\.?/i,
    wide: /^[1234]\. kvartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(10|11|12|[123456789])\./i,
    abbreviated: /^(sij|velj|(ožu|ozu)|tra|svi|lip|srp|kol|ruj|lis|stu|pro)/i,
    wide: /^((siječanj|siječnja|sijecanj|sijecnja)|(veljača|veljače|veljaca|veljace)|(ožujak|ožujka|ozujak|ozujka)|(travanj|travnja)|(svibanj|svibnja)|(lipanj|lipnja)|(srpanj|srpnja)|(kolovoz|kolovoza)|(rujan|rujna)|(listopad|listopada)|(studeni|studenog)|(prosinac|prosinca))/i
};
const parseMonthPatterns = {
    narrow: [
        /1/i,
        /2/i,
        /3/i,
        /4/i,
        /5/i,
        /6/i,
        /7/i,
        /8/i,
        /9/i,
        /10/i,
        /11/i,
        /12/i
    ],
    abbreviated: [
        /^sij/i,
        /^velj/i,
        /^(ožu|ozu)/i,
        /^tra/i,
        /^svi/i,
        /^lip/i,
        /^srp/i,
        /^kol/i,
        /^ruj/i,
        /^lis/i,
        /^stu/i,
        /^pro/i
    ],
    wide: [
        /^sij/i,
        /^velj/i,
        /^(ožu|ozu)/i,
        /^tra/i,
        /^svi/i,
        /^lip/i,
        /^srp/i,
        /^kol/i,
        /^ruj/i,
        /^lis/i,
        /^stu/i,
        /^pro/i
    ]
};
const matchDayPatterns = {
    narrow: /^[npusčc]/i,
    short: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
    abbreviated: /^(ned|pon|uto|sri|(čet|cet)|pet|sub)/i,
    wide: /^(nedjelja|ponedjeljak|utorak|srijeda|(četvrtak|cetvrtak)|petak|subota)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^w/i,
        /^t/i,
        /^f/i,
        /^s/i
    ],
    any: [
        /^su/i,
        /^m/i,
        /^tu/i,
        /^w/i,
        /^th/i,
        /^f/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(am|pm|ponoc|ponoć|(po)?podne|navecer|navečer|noću|poslije podne|ujutro)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(poslije\s|po)+podne/i,
        evening: /(navece|naveče)/i,
        night: /(nocu|noću)/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "wide"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"d83ebd85efb2299c":"15lWd","6c906a8bd79215bd":"kWqg8"}],"eW3q3":[function(require,module,exports) {
"use strict";
exports.ht = void 0;
var _index = require("c5b29d8a5655464");
var _index2 = require("8268e36fd7eeb8db");
var _index3 = require("b014ad4ca5f774ce");
var _index4 = require("1ccffd4d35123bb8");
var _index5 = require("6cb9d2b09dc30d18");
/**
 * @category Locales
 * @summary Haitian Creole locale.
 * @language Haitian Creole
 * @iso-639-2 hat
 * @author Rubens Mariuzzo [@rmariuzzo](https://github.com/rmariuzzo)
 * @author Watson Marcelain [@watsongm24](https://github.com/watsongm24)
 */ const ht = exports.ht = {
    code: "ht",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"c5b29d8a5655464":"ahNLK","8268e36fd7eeb8db":"3mo9M","b014ad4ca5f774ce":"h05s7","1ccffd4d35123bb8":"6Ri66","6cb9d2b09dc30d18":"gz3NR"}],"ahNLK":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "mwens pase yon segond",
        other: "mwens pase {{count}} segond"
    },
    xSeconds: {
        one: "1 segond",
        other: "{{count}} segond"
    },
    halfAMinute: "30 segond",
    lessThanXMinutes: {
        one: "mwens pase yon minit",
        other: "mwens pase {{count}} minit"
    },
    xMinutes: {
        one: "1 minit",
        other: "{{count}} minit"
    },
    aboutXHours: {
        one: "anviwon in\xe8",
        other: "anviwon {{count}} \xe8"
    },
    xHours: {
        one: "1 l\xe8",
        other: "{{count}} l\xe8"
    },
    xDays: {
        one: "1 jou",
        other: "{{count}} jou"
    },
    aboutXWeeks: {
        one: "anviwon 1 sem\xe8n",
        other: "anviwon {{count}} sem\xe8n"
    },
    xWeeks: {
        one: "1 sem\xe8n",
        other: "{{count}} sem\xe8n"
    },
    aboutXMonths: {
        one: "anviwon 1 mwa",
        other: "anviwon {{count}} mwa"
    },
    xMonths: {
        one: "1 mwa",
        other: "{{count}} mwa"
    },
    aboutXYears: {
        one: "anviwon 1 an",
        other: "anviwon {{count}} an"
    },
    xYears: {
        one: "1 an",
        other: "{{count}} an"
    },
    overXYears: {
        one: "plis pase 1 an",
        other: "plis pase {{count}} an"
    },
    almostXYears: {
        one: "pr\xe8ske 1 an",
        other: "pr\xe8ske {{count}} an"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "nan " + result;
        else return "sa f\xe8 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"3mo9M":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("3e7497ee05fe8c79");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'nan l\xe8' {{time}}",
    long: "{{date}} 'nan l\xe8' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"3e7497ee05fe8c79":"6OYyu"}],"h05s7":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'pase nan l\xe8' p",
    yesterday: "'y\xe8 nan l\xe8' p",
    today: "'jodi a' p",
    tomorrow: "'demen nan l\xe8' p'",
    nextWeek: "eeee 'pwochen nan l\xe8' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"6Ri66":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("fbb295a94f8e095d");
const eraValues = {
    narrow: [
        "av. J.-K",
        "ap. J.-K"
    ],
    abbreviated: [
        "av. J.-K",
        "ap. J.-K"
    ],
    wide: [
        "anvan Jezi Kris",
        "apre Jezi Kris"
    ]
};
const quarterValues = {
    narrow: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    abbreviated: [
        "1ye trim.",
        "2y\xe8m trim.",
        "3y\xe8m trim.",
        "4y\xe8m trim."
    ],
    wide: [
        "1ye trim\xe8s",
        "2y\xe8m trim\xe8s",
        "3y\xe8m trim\xe8s",
        "4y\xe8m trim\xe8s"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "O",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "janv.",
        "fevr.",
        "mas",
        "avr.",
        "me",
        "jen",
        "jiy\xe8",
        "out",
        "sept.",
        "okt.",
        "nov.",
        "des."
    ],
    wide: [
        "janvye",
        "fevrye",
        "mas",
        "avril",
        "me",
        "jen",
        "jiy\xe8",
        "out",
        "septanm",
        "okt\xf2b",
        "novanm",
        "desanm"
    ]
};
const dayValues = {
    narrow: [
        "D",
        "L",
        "M",
        "M",
        "J",
        "V",
        "S"
    ],
    short: [
        "di",
        "le",
        "ma",
        "m\xe8",
        "je",
        "va",
        "sa"
    ],
    abbreviated: [
        "dim.",
        "len.",
        "mad.",
        "m\xe8k.",
        "jed.",
        "van.",
        "sam."
    ],
    wide: [
        "dimanch",
        "lendi",
        "madi",
        "m\xe8kredi",
        "jedi",
        "vandredi",
        "samdi"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "minwit",
        noon: "midi",
        morning: "mat.",
        afternoon: "ap.m.",
        evening: "swa",
        night: "mat."
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "minwit",
        noon: "midi",
        morning: "maten",
        afternoon: "apr\xe8midi",
        evening: "swa",
        night: "maten"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "minwit",
        noon: "midi",
        morning: "nan maten",
        afternoon: "nan apr\xe8midi",
        evening: "nan asw\xe8",
        night: "nan maten"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    if (number === 0) return String(number);
    const suffix = number === 1 ? "ye" : "y\xe8m";
    return number + suffix;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"fbb295a94f8e095d":"fGq1u"}],"gz3NR":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("c60f462c72edd4aa");
var _index2 = require("3366adce9e288406");
const matchOrdinalNumberPattern = /^(\d+)(ye|yèm)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(av\.J\.K|ap\.J\.K|ap\.J\.-K)/i,
    abbreviated: /^(av\.J\.-K|av\.J-K|apr\.J\.-K|apr\.J-K|ap\.J-K)/i,
    wide: /^(avan Jezi Kris|apre Jezi Kris)/i
};
const parseEraPatterns = {
    any: [
        /^av/i,
        /^ap/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^t[1234]/i,
    wide: /^[1234](ye|yèm)? trimès/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(janv|fevr|mas|avr|me|jen|jiyè|out|sept|okt|nov|des)\.?/i,
    wide: /^(janvye|fevrye|mas|avril|me|jen|jiyè|out|septanm|oktòb|novanm|desanm)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^o/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^ma/i,
        /^av/i,
        /^me/i,
        /^je/i,
        /^ji/i,
        /^ou/i,
        /^s/i,
        /^ok/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[lmjvsd]/i,
    short: /^(di|le|ma|me|je|va|sa)/i,
    abbreviated: /^(dim|len|mad|mèk|jed|van|sam)\.?/i,
    wide: /^(dimanch|lendi|madi|mèkredi|jedi|vandredi|samdi)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^m/i,
        /^j/i,
        /^v/i,
        /^s/i
    ],
    any: [
        /^di/i,
        /^le/i,
        /^ma/i,
        /^mè/i,
        /^je/i,
        /^va/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|minwit|midi|mat\.?|ap\.?m\.?|swa)/i,
    any: /^([ap]\.?\s?m\.?|nan maten|nan aprèmidi|nan aswè)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^min/i,
        noon: /^mid/i,
        morning: /mat/i,
        afternoon: /ap/i,
        evening: /sw/i,
        night: /nwit/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"c60f462c72edd4aa":"15lWd","3366adce9e288406":"kWqg8"}],"7VdNn":[function(require,module,exports) {
"use strict";
exports.hu = void 0;
var _index = require("8e05a3ff7a00f4df");
var _index2 = require("4556a2319a0d259a");
var _index3 = require("6cc3e0bf050a96a7");
var _index4 = require("9f5af40650e20e89");
var _index5 = require("b8642fa1b1059185");
/**
 * @category Locales
 * @summary Hungarian locale.
 * @language Hungarian
 * @iso-639-2 hun
 * @author Pavlo Shpak [@pshpak](https://github.com/pshpak)
 * @author Eduardo Pardo [@eduardopsll](https://github.com/eduardopsll)
 * @author Zoltan Szepesi [@twodcube](https://github.com/twodcube)
 */ const hu = exports.hu = {
    code: "hu",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"8e05a3ff7a00f4df":"kCprX","4556a2319a0d259a":"kxVkP","6cc3e0bf050a96a7":"juxoj","9f5af40650e20e89":"9gGbV","b8642fa1b1059185":"3duCe"}],"kCprX":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const translations = {
    about: "k\xf6r\xfclbel\xfcl",
    over: "t\xf6bb mint",
    almost: "majdnem",
    lessthan: "kevesebb mint"
};
const withoutSuffixes = {
    xseconds: " m\xe1sodperc",
    halfaminute: "f\xe9l perc",
    xminutes: " perc",
    xhours: " \xf3ra",
    xdays: " nap",
    xweeks: " h\xe9t",
    xmonths: " h\xf3nap",
    xyears: " \xe9v"
};
const withSuffixes = {
    xseconds: {
        "-1": " m\xe1sodperccel ezel\u0151tt",
        1: " m\xe1sodperc m\xfalva",
        0: " m\xe1sodperce"
    },
    halfaminute: {
        "-1": "f\xe9l perccel ezel\u0151tt",
        1: "f\xe9l perc m\xfalva",
        0: "f\xe9l perce"
    },
    xminutes: {
        "-1": " perccel ezel\u0151tt",
        1: " perc m\xfalva",
        0: " perce"
    },
    xhours: {
        "-1": " \xf3r\xe1val ezel\u0151tt",
        1: " \xf3ra m\xfalva",
        0: " \xf3r\xe1ja"
    },
    xdays: {
        "-1": " nappal ezel\u0151tt",
        1: " nap m\xfalva",
        0: " napja"
    },
    xweeks: {
        "-1": " h\xe9ttel ezel\u0151tt",
        1: " h\xe9t m\xfalva",
        0: " hete"
    },
    xmonths: {
        "-1": " h\xf3nappal ezel\u0151tt",
        1: " h\xf3nap m\xfalva",
        0: " h\xf3napja"
    },
    xyears: {
        "-1": " \xe9vvel ezel\u0151tt",
        1: " \xe9v m\xfalva",
        0: " \xe9ve"
    }
};
const formatDistance = (token, count, options)=>{
    const adverb = token.match(/about|over|almost|lessthan/i);
    const unit = adverb ? token.replace(adverb[0], "") : token;
    const addSuffix = options?.addSuffix === true;
    const key = unit.toLowerCase();
    const comparison = options?.comparison || 0;
    const translated = addSuffix ? withSuffixes[key][comparison] : withoutSuffixes[key];
    let result = key === "halfaminute" ? translated : count + translated;
    if (adverb) {
        const adv = adverb[0].toLowerCase();
        result = translations[adv] + " " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"kxVkP":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("d3e2284de0839ec8");
const dateFormats = {
    full: "y. MMMM d., EEEE",
    long: "y. MMMM d.",
    medium: "y. MMM d.",
    short: "y. MM. dd."
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"d3e2284de0839ec8":"6OYyu"}],"juxoj":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const accusativeWeekdays = [
    "vas\xe1rnap",
    "h\xe9tf\u0151n",
    "kedden",
    "szerd\xe1n",
    "cs\xfct\xf6rt\xf6k\xf6n",
    "p\xe9nteken",
    "szombaton"
];
function week(isFuture) {
    return (date)=>{
        const weekday = accusativeWeekdays[date.getDay()];
        const prefix = isFuture ? "" : "'m\xfalt' ";
        return `${prefix}'${weekday}' p'-kor'`;
    };
}
const formatRelativeLocale = {
    lastWeek: week(false),
    yesterday: "'tegnap' p'-kor'",
    today: "'ma' p'-kor'",
    tomorrow: "'holnap' p'-kor'",
    nextWeek: week(true),
    other: "P"
};
const formatRelative = (token, date)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"9gGbV":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("36a99ebd5be074c7");
const eraValues = {
    narrow: [
        "ie.",
        "isz."
    ],
    abbreviated: [
        "i. e.",
        "i. sz."
    ],
    wide: [
        "Krisztus el\u0151tt",
        "id\u0151sz\xe1m\xedt\xe1sunk szerint"
    ]
};
const quarterValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4."
    ],
    abbreviated: [
        "1. n.\xe9v",
        "2. n.\xe9v",
        "3. n.\xe9v",
        "4. n.\xe9v"
    ],
    wide: [
        "1. negyed\xe9v",
        "2. negyed\xe9v",
        "3. negyed\xe9v",
        "4. negyed\xe9v"
    ]
};
const formattingQuarterValues = {
    narrow: [
        "I.",
        "II.",
        "III.",
        "IV."
    ],
    abbreviated: [
        "I. n.\xe9v",
        "II. n.\xe9v",
        "III. n.\xe9v",
        "IV. n.\xe9v"
    ],
    wide: [
        "I. negyed\xe9v",
        "II. negyed\xe9v",
        "III. negyed\xe9v",
        "IV. negyed\xe9v"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "\xc1",
        "M",
        "J",
        "J",
        "A",
        "Sz",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jan.",
        "febr.",
        "m\xe1rc.",
        "\xe1pr.",
        "m\xe1j.",
        "j\xfan.",
        "j\xfal.",
        "aug.",
        "szept.",
        "okt.",
        "nov.",
        "dec."
    ],
    wide: [
        "janu\xe1r",
        "febru\xe1r",
        "m\xe1rcius",
        "\xe1prilis",
        "m\xe1jus",
        "j\xfanius",
        "j\xfalius",
        "augusztus",
        "szeptember",
        "okt\xf3ber",
        "november",
        "december"
    ]
};
const dayValues = {
    narrow: [
        "V",
        "H",
        "K",
        "Sz",
        "Cs",
        "P",
        "Sz"
    ],
    short: [
        "V",
        "H",
        "K",
        "Sze",
        "Cs",
        "P",
        "Szo"
    ],
    abbreviated: [
        "V",
        "H",
        "K",
        "Sze",
        "Cs",
        "P",
        "Szo"
    ],
    wide: [
        "vas\xe1rnap",
        "h\xe9tf\u0151",
        "kedd",
        "szerda",
        "cs\xfct\xf6rt\xf6k",
        "p\xe9ntek",
        "szombat"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "de.",
        pm: "du.",
        midnight: "\xe9jf\xe9l",
        noon: "d\xe9l",
        morning: "reggel",
        afternoon: "du.",
        evening: "este",
        night: "\xe9jjel"
    },
    abbreviated: {
        am: "de.",
        pm: "du.",
        midnight: "\xe9jf\xe9l",
        noon: "d\xe9l",
        morning: "reggel",
        afternoon: "du.",
        evening: "este",
        night: "\xe9jjel"
    },
    wide: {
        am: "de.",
        pm: "du.",
        midnight: "\xe9jf\xe9l",
        noon: "d\xe9l",
        morning: "reggel",
        afternoon: "d\xe9lut\xe1n",
        evening: "este",
        night: "\xe9jjel"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1,
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide"
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"36a99ebd5be074c7":"fGq1u"}],"3duCe":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("8512856459cac4a");
var _index2 = require("c38a17598c54ea81");
const matchOrdinalNumberPattern = /^(\d+)\.?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ie\.|isz\.)/i,
    abbreviated: /^(i\.\s?e\.?|b?\s?c\s?e|i\.\s?sz\.?)/i,
    wide: /^(Krisztus előtt|időszámításunk előtt|időszámításunk szerint|i\. sz\.)/i
};
const parseEraPatterns = {
    narrow: [
        /ie/i,
        /isz/i
    ],
    abbreviated: [
        /^(i\.?\s?e\.?|b\s?ce)/i,
        /^(i\.?\s?sz\.?|c\s?e)/i
    ],
    any: [
        /előtt/i,
        /(szerint|i. sz.)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]\.?/i,
    abbreviated: /^[1234]?\.?\s?n\.év/i,
    wide: /^([1234]|I|II|III|IV)?\.?\s?negyedév/i
};
const parseQuarterPatterns = {
    any: [
        /1|I$/i,
        /2|II$/i,
        /3|III/i,
        /4|IV/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmaásond]|sz/i,
    abbreviated: /^(jan\.?|febr\.?|márc\.?|ápr\.?|máj\.?|jún\.?|júl\.?|aug\.?|szept\.?|okt\.?|nov\.?|dec\.?)/i,
    wide: /^(január|február|március|április|május|június|július|augusztus|szeptember|október|november|december)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a|á/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s|sz/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^már/i,
        /^áp/i,
        /^máj/i,
        /^jún/i,
        /^júl/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^([vhkpc]|sz|cs|sz)/i,
    short: /^([vhkp]|sze|cs|szo)/i,
    abbreviated: /^([vhkp]|sze|cs|szo)/i,
    wide: /^(vasárnap|hétfő|kedd|szerda|csütörtök|péntek|szombat)/i
};
const parseDayPatterns = {
    narrow: [
        /^v/i,
        /^h/i,
        /^k/i,
        /^sz/i,
        /^c/i,
        /^p/i,
        /^sz/i
    ],
    any: [
        /^v/i,
        /^h/i,
        /^k/i,
        /^sze/i,
        /^c/i,
        /^p/i,
        /^szo/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^((de|du)\.?|éjfél|délután|dél|reggel|este|éjjel)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^de\.?/i,
        pm: /^du\.?/i,
        midnight: /^éjf/i,
        noon: /^dé/i,
        morning: /reg/i,
        afternoon: /^délu\.?/i,
        evening: /es/i,
        night: /éjj/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"8512856459cac4a":"15lWd","c38a17598c54ea81":"kWqg8"}],"2UPSB":[function(require,module,exports) {
"use strict";
exports.hy = void 0;
var _index = require("2d2d358ab95cd0ca");
var _index2 = require("ab02a12a69447803");
var _index3 = require("2ebf02e9b9d960bf");
var _index4 = require("a8882761f5f4fbcb");
var _index5 = require("390ac6a4d92cd459");
/**
 * @category Locales
 * @summary Armenian locale
 * @language Armenian
 * @iso-639-2 arm
 * @author Alex Igityan [@alexigityan](https://github.com/alexigityan)
 */ const hy = exports.hy = {
    code: "hy",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"2d2d358ab95cd0ca":"1Z1q9","ab02a12a69447803":"kBhg5","2ebf02e9b9d960bf":"8gYLX","a8882761f5f4fbcb":"j2Snp","390ac6a4d92cd459":"3KLvU"}],"1Z1q9":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0561\u057E\u0565\u056C\u056B \u0584\u056B\u0579 \u0584\u0561\u0576 1 \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576",
        other: "\u0561\u057E\u0565\u056C\u056B \u0584\u056B\u0579 \u0584\u0561\u0576 {{count}} \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576"
    },
    xSeconds: {
        one: "1 \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576",
        other: "{{count}} \u057E\u0561\u0575\u0580\u056F\u0575\u0561\u0576"
    },
    halfAMinute: "\u056F\u0565\u057D \u0580\u0578\u057A\u0565",
    lessThanXMinutes: {
        one: "\u0561\u057E\u0565\u056C\u056B \u0584\u056B\u0579 \u0584\u0561\u0576 1 \u0580\u0578\u057A\u0565",
        other: "\u0561\u057E\u0565\u056C\u056B \u0584\u056B\u0579 \u0584\u0561\u0576 {{count}} \u0580\u0578\u057A\u0565"
    },
    xMinutes: {
        one: "1 \u0580\u0578\u057A\u0565",
        other: "{{count}} \u0580\u0578\u057A\u0565"
    },
    aboutXHours: {
        one: "\u0574\u0578\u057F 1 \u056A\u0561\u0574",
        other: "\u0574\u0578\u057F {{count}} \u056A\u0561\u0574"
    },
    xHours: {
        one: "1 \u056A\u0561\u0574",
        other: "{{count}} \u056A\u0561\u0574"
    },
    xDays: {
        one: "1 \u0585\u0580",
        other: "{{count}} \u0585\u0580"
    },
    aboutXWeeks: {
        one: "\u0574\u0578\u057F 1 \u0577\u0561\u0562\u0561\u0569",
        other: "\u0574\u0578\u057F {{count}} \u0577\u0561\u0562\u0561\u0569"
    },
    xWeeks: {
        one: "1 \u0577\u0561\u0562\u0561\u0569",
        other: "{{count}} \u0577\u0561\u0562\u0561\u0569"
    },
    aboutXMonths: {
        one: "\u0574\u0578\u057F 1 \u0561\u0574\u056B\u057D",
        other: "\u0574\u0578\u057F {{count}} \u0561\u0574\u056B\u057D"
    },
    xMonths: {
        one: "1 \u0561\u0574\u056B\u057D",
        other: "{{count}} \u0561\u0574\u056B\u057D"
    },
    aboutXYears: {
        one: "\u0574\u0578\u057F 1 \u057F\u0561\u0580\u056B",
        other: "\u0574\u0578\u057F {{count}} \u057F\u0561\u0580\u056B"
    },
    xYears: {
        one: "1 \u057F\u0561\u0580\u056B",
        other: "{{count}} \u057F\u0561\u0580\u056B"
    },
    overXYears: {
        one: "\u0561\u057E\u0565\u056C\u056B \u0584\u0561\u0576 1 \u057F\u0561\u0580\u056B",
        other: "\u0561\u057E\u0565\u056C\u056B \u0584\u0561\u0576 {{count}} \u057F\u0561\u0580\u056B"
    },
    almostXYears: {
        one: "\u0570\u0561\u0574\u0561\u0580\u0575\u0561 1 \u057F\u0561\u0580\u056B",
        other: "\u0570\u0561\u0574\u0561\u0580\u0575\u0561 {{count}} \u057F\u0561\u0580\u056B"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + " \u0570\u0565\u057F\u0578";
        else return result + " \u0561\u057C\u0561\u057B";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"kBhg5":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("378a6e3abb170336");
const dateFormats = {
    full: "d MMMM, y, EEEE",
    long: "d MMMM, y",
    medium: "d MMM, y",
    short: "dd.MM.yyyy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\u056A\u2024'{{time}}",
    long: "{{date}} '\u056A\u2024'{{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"378a6e3abb170336":"6OYyu"}],"8gYLX":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0576\u0561\u056D\u0578\u0580\u0564' eeee p'\u058A\u056B\u0576'",
    yesterday: "'\u0565\u0580\u0565\u056F' p'\u058A\u056B\u0576'",
    today: "'\u0561\u0575\u057D\u0585\u0580' p'\u058A\u056B\u0576'",
    tomorrow: "'\u057E\u0561\u0572\u0568' p'\u058A\u056B\u0576'",
    nextWeek: "'\u0570\u0561\u057B\u0578\u0580\u0564' eeee p'\u058A\u056B\u0576'",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"j2Snp":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("9f5467f0c9067cf8");
const eraValues = {
    narrow: [
        "\u0554",
        "\u0544"
    ],
    abbreviated: [
        "\u0554\u0531",
        "\u0544\u0539"
    ],
    wide: [
        "\u0554\u0580\u056B\u057D\u057F\u0578\u057D\u056B\u0581 \u0561\u057C\u0561\u057B",
        "\u0544\u0565\u0580 \u0569\u057E\u0561\u0580\u056F\u0578\u0582\u0569\u0575\u0561\u0576"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u05541",
        "\u05542",
        "\u05543",
        "\u05544"
    ],
    wide: [
        "1\u058A\u056B\u0576 \u0584\u0561\u057C\u0578\u0580\u0564",
        "2\u058A\u0580\u0564 \u0584\u0561\u057C\u0578\u0580\u0564",
        "3\u058A\u0580\u0564 \u0584\u0561\u057C\u0578\u0580\u0564",
        "4\u058A\u0580\u0564 \u0584\u0561\u057C\u0578\u0580\u0564"
    ]
};
const monthValues = {
    narrow: [
        "\u0540",
        "\u0553",
        "\u0544",
        "\u0531",
        "\u0544",
        "\u0540",
        "\u0540",
        "\u0555",
        "\u054D",
        "\u0540",
        "\u0546",
        "\u0534"
    ],
    abbreviated: [
        "\u0570\u0578\u0582\u0576",
        "\u0583\u0565\u057F",
        "\u0574\u0561\u0580",
        "\u0561\u057A\u0580",
        "\u0574\u0561\u0575",
        "\u0570\u0578\u0582\u0576",
        "\u0570\u0578\u0582\u056C",
        "\u0585\u0563\u057D",
        "\u057D\u0565\u057A",
        "\u0570\u0578\u056F",
        "\u0576\u0578\u0575",
        "\u0564\u0565\u056F"
    ],
    wide: [
        "\u0570\u0578\u0582\u0576\u057E\u0561\u0580",
        "\u0583\u0565\u057F\u0580\u057E\u0561\u0580",
        "\u0574\u0561\u0580\u057F",
        "\u0561\u057A\u0580\u056B\u056C",
        "\u0574\u0561\u0575\u056B\u057D",
        "\u0570\u0578\u0582\u0576\u056B\u057D",
        "\u0570\u0578\u0582\u056C\u056B\u057D",
        "\u0585\u0563\u0578\u057D\u057F\u0578\u057D",
        "\u057D\u0565\u057A\u057F\u0565\u0574\u0562\u0565\u0580",
        "\u0570\u0578\u056F\u057F\u0565\u0574\u0562\u0565\u0580",
        "\u0576\u0578\u0575\u0565\u0574\u0562\u0565\u0580",
        "\u0564\u0565\u056F\u057F\u0565\u0574\u0562\u0565\u0580"
    ]
};
const dayValues = {
    narrow: [
        "\u053F",
        "\u0535",
        "\u0535",
        "\u0549",
        "\u0540",
        "\u0548",
        "\u0547"
    ],
    short: [
        "\u056F\u0580",
        "\u0565\u0580",
        "\u0565\u0584",
        "\u0579\u0584",
        "\u0570\u0563",
        "\u0578\u0582\u0580",
        "\u0577\u0562"
    ],
    abbreviated: [
        "\u056F\u056B\u0580",
        "\u0565\u0580\u056F",
        "\u0565\u0580\u0584",
        "\u0579\u0578\u0580",
        "\u0570\u0576\u0563",
        "\u0578\u0582\u0580\u0562",
        "\u0577\u0561\u0562"
    ],
    wide: [
        "\u056F\u056B\u0580\u0561\u056F\u056B",
        "\u0565\u0580\u056F\u0578\u0582\u0577\u0561\u0562\u0569\u056B",
        "\u0565\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B",
        "\u0579\u0578\u0580\u0565\u0584\u0577\u0561\u0562\u0569\u056B",
        "\u0570\u056B\u0576\u0563\u0577\u0561\u0562\u0569\u056B",
        "\u0578\u0582\u0580\u0562\u0561\u0569",
        "\u0577\u0561\u0562\u0561\u0569"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "\u056F\u0565\u057D\u0563\u0577",
        noon: "\u056F\u0565\u057D\u0585\u0580",
        morning: "\u0561\u057C\u0561\u057E\u0578\u057F",
        afternoon: "\u0581\u0565\u0580\u0565\u056F",
        evening: "\u0565\u0580\u0565\u056F\u0578",
        night: "\u0563\u056B\u0577\u0565\u0580"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "\u056F\u0565\u057D\u0563\u056B\u0577\u0565\u0580",
        noon: "\u056F\u0565\u057D\u0585\u0580",
        morning: "\u0561\u057C\u0561\u057E\u0578\u057F",
        afternoon: "\u0581\u0565\u0580\u0565\u056F",
        evening: "\u0565\u0580\u0565\u056F\u0578",
        night: "\u0563\u056B\u0577\u0565\u0580"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "\u056F\u0565\u057D\u0563\u056B\u0577\u0565\u0580",
        noon: "\u056F\u0565\u057D\u0585\u0580",
        morning: "\u0561\u057C\u0561\u057E\u0578\u057F",
        afternoon: "\u0581\u0565\u0580\u0565\u056F",
        evening: "\u0565\u0580\u0565\u056F\u0578",
        night: "\u0563\u056B\u0577\u0565\u0580"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "\u056F\u0565\u057D\u0563\u0577",
        noon: "\u056F\u0565\u057D\u0585\u0580",
        morning: "\u0561\u057C\u0561\u057E\u0578\u057F\u0568",
        afternoon: "\u0581\u0565\u0580\u0565\u056F\u0568",
        evening: "\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576",
        night: "\u0563\u056B\u0577\u0565\u0580\u0568"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "\u056F\u0565\u057D\u0563\u056B\u0577\u0565\u0580\u056B\u0576",
        noon: "\u056F\u0565\u057D\u0585\u0580\u056B\u0576",
        morning: "\u0561\u057C\u0561\u057E\u0578\u057F\u0568",
        afternoon: "\u0581\u0565\u0580\u0565\u056F\u0568",
        evening: "\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576",
        night: "\u0563\u056B\u0577\u0565\u0580\u0568"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "\u056F\u0565\u057D\u0563\u056B\u0577\u0565\u0580\u056B\u0576",
        noon: "\u056F\u0565\u057D\u0585\u0580\u056B\u0576",
        morning: "\u0561\u057C\u0561\u057E\u0578\u057F\u0568",
        afternoon: "\u0581\u0565\u0580\u0565\u056F\u0568",
        evening: "\u0565\u0580\u0565\u056F\u0578\u0575\u0561\u0576",
        night: "\u0563\u056B\u0577\u0565\u0580\u0568"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    // If ordinal numbers depend on context, for example,
    // if they are different for different grammatical genders,
    // use `options.unit`.
    //
    // `unit` can be 'year', 'quarter', 'month', 'week', 'date', 'dayOfYear',
    // 'day', 'hour', 'minute', 'second'.
    const rem100 = number % 100;
    if (rem100 < 10) {
        if (rem100 % 10 === 1) return number + "\u058A\u056B\u0576";
    }
    return number + "\u058A\u0580\u0564";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"9f5467f0c9067cf8":"fGq1u"}],"3KLvU":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("2fb83d6c4c0ee96c");
var _index2 = require("89f677ab10dd51e2");
const matchOrdinalNumberPattern = /^(\d+)((-|֊)?(ին|րդ))?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(Ք|Մ)/i,
    abbreviated: /^(Ք\.?\s?Ա\.?|Մ\.?\s?Թ\.?\s?Ա\.?|Մ\.?\s?Թ\.?|Ք\.?\s?Հ\.?)/i,
    wide: /^(քրիստոսից առաջ|մեր թվարկությունից առաջ|մեր թվարկության|քրիստոսից հետո)/i
};
const parseEraPatterns = {
    any: [
        /^ք/i,
        /^մ/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^ք[1234]/i,
    wide: /^[1234]((-|֊)?(ին|րդ)) քառորդ/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[հփմաօսնդ]/i,
    abbreviated: /^(հուն|փետ|մար|ապր|մայ|հուն|հուլ|օգս|սեպ|հոկ|նոյ|դեկ)/i,
    wide: /^(հունվար|փետրվար|մարտ|ապրիլ|մայիս|հունիս|հուլիս|օգոստոս|սեպտեմբեր|հոկտեմբեր|նոյեմբեր|դեկտեմբեր)/i
};
const parseMonthPatterns = {
    narrow: [
        /^հ/i,
        /^փ/i,
        /^մ/i,
        /^ա/i,
        /^մ/i,
        /^հ/i,
        /^հ/i,
        /^օ/i,
        /^ս/i,
        /^հ/i,
        /^ն/i,
        /^դ/i
    ],
    any: [
        /^հու/i,
        /^փ/i,
        /^մար/i,
        /^ա/i,
        /^մայ/i,
        /^հուն/i,
        /^հուլ/i,
        /^օ/i,
        /^ս/i,
        /^հոկ/i,
        /^ն/i,
        /^դ/i
    ]
};
const matchDayPatterns = {
    narrow: /^[եչհոշկ]/i,
    short: /^(կր|եր|եք|չք|հգ|ուր|շբ)/i,
    abbreviated: /^(կիր|երկ|երք|չոր|հնգ|ուրբ|շաբ)/i,
    wide: /^(կիրակի|երկուշաբթի|երեքշաբթի|չորեքշաբթի|հինգշաբթի|ուրբաթ|շաբաթ)/i
};
const parseDayPatterns = {
    narrow: [
        /^կ/i,
        /^ե/i,
        /^ե/i,
        /^չ/i,
        /^հ/i,
        /^(ո|Ո)/,
        /^շ/i
    ],
    short: [
        /^կ/i,
        /^եր/i,
        /^եք/i,
        /^չ/i,
        /^հ/i,
        /^(ո|Ո)/,
        /^շ/i
    ],
    abbreviated: [
        /^կ/i,
        /^երկ/i,
        /^երք/i,
        /^չ/i,
        /^հ/i,
        /^(ո|Ո)/,
        /^շ/i
    ],
    wide: [
        /^կ/i,
        /^երկ/i,
        /^երե/i,
        /^չ/i,
        /^հ/i,
        /^(ո|Ո)/,
        /^շ/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^([ap]|կեսգշ|կեսօր|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i,
    any: /^([ap]\.?\s?m\.?|կեսգիշեր(ին)?|կեսօր(ին)?|(առավոտը?|ցերեկը?|երեկո(յան)?|գիշերը?))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /կեսգիշեր/i,
        noon: /կեսօր/i,
        morning: /առավոտ/i,
        afternoon: /ցերեկ/i,
        evening: /երեկո/i,
        night: /գիշեր/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"2fb83d6c4c0ee96c":"15lWd","89f677ab10dd51e2":"kWqg8"}],"3va1W":[function(require,module,exports) {
"use strict";
exports.id = void 0;
var _index = require("fca6bef03ab2ba12");
var _index2 = require("cf7868bde3fabfc");
var _index3 = require("7fb36855da208422");
var _index4 = require("89ec9fbb0680eb95");
var _index5 = require("4b886c7f51350c1b");
/**
 * @category Locales
 * @summary Indonesian locale.
 * @language Indonesian
 * @iso-639-2 ind
 * @author Rahmat Budiharso [@rbudiharso](https://github.com/rbudiharso)
 * @author Benget Nata [@bentinata](https://github.com/bentinata)
 * @author Budi Irawan [@deerawan](https://github.com/deerawan)
 * @author Try Ajitiono [@imballinst](https://github.com/imballinst)
 */ const id = exports.id = {
    code: "id",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"fca6bef03ab2ba12":"lXvU3","cf7868bde3fabfc":"YtRBe","7fb36855da208422":"avhNP","89ec9fbb0680eb95":"hUi5t","4b886c7f51350c1b":"ez0a9"}],"lXvU3":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "kurang dari 1 detik",
        other: "kurang dari {{count}} detik"
    },
    xSeconds: {
        one: "1 detik",
        other: "{{count}} detik"
    },
    halfAMinute: "setengah menit",
    lessThanXMinutes: {
        one: "kurang dari 1 menit",
        other: "kurang dari {{count}} menit"
    },
    xMinutes: {
        one: "1 menit",
        other: "{{count}} menit"
    },
    aboutXHours: {
        one: "sekitar 1 jam",
        other: "sekitar {{count}} jam"
    },
    xHours: {
        one: "1 jam",
        other: "{{count}} jam"
    },
    xDays: {
        one: "1 hari",
        other: "{{count}} hari"
    },
    aboutXWeeks: {
        one: "sekitar 1 minggu",
        other: "sekitar {{count}} minggu"
    },
    xWeeks: {
        one: "1 minggu",
        other: "{{count}} minggu"
    },
    aboutXMonths: {
        one: "sekitar 1 bulan",
        other: "sekitar {{count}} bulan"
    },
    xMonths: {
        one: "1 bulan",
        other: "{{count}} bulan"
    },
    aboutXYears: {
        one: "sekitar 1 tahun",
        other: "sekitar {{count}} tahun"
    },
    xYears: {
        one: "1 tahun",
        other: "{{count}} tahun"
    },
    overXYears: {
        one: "lebih dari 1 tahun",
        other: "lebih dari {{count}} tahun"
    },
    almostXYears: {
        one: "hampir 1 tahun",
        other: "hampir {{count}} tahun"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "dalam waktu " + result;
        else return result + " yang lalu";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"YtRBe":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("3518d19b593bba5b");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "d/M/yyyy"
};
const timeFormats = {
    full: "HH.mm.ss",
    long: "HH.mm.ss",
    medium: "HH.mm",
    short: "HH.mm"
};
const dateTimeFormats = {
    full: "{{date}} 'pukul' {{time}}",
    long: "{{date}} 'pukul' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"3518d19b593bba5b":"6OYyu"}],"avhNP":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'lalu pukul' p",
    yesterday: "'Kemarin pukul' p",
    today: "'Hari ini pukul' p",
    tomorrow: "'Besok pukul' p",
    nextWeek: "eeee 'pukul' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"hUi5t":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("59371f0ceadbbae7");
// All data for localization are taken from this page
// https://www.unicode.org/cldr/charts/32/summary/id.html
const eraValues = {
    narrow: [
        "SM",
        "M"
    ],
    abbreviated: [
        "SM",
        "M"
    ],
    wide: [
        "Sebelum Masehi",
        "Masehi"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "Kuartal ke-1",
        "Kuartal ke-2",
        "Kuartal ke-3",
        "Kuartal ke-4"
    ]
};
// Note: in Indonesian, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Jan",
        "Feb",
        "Mar",
        "Apr",
        "Mei",
        "Jun",
        "Jul",
        "Agt",
        "Sep",
        "Okt",
        "Nov",
        "Des"
    ],
    wide: [
        "Januari",
        "Februari",
        "Maret",
        "April",
        "Mei",
        "Juni",
        "Juli",
        "Agustus",
        "September",
        "Oktober",
        "November",
        "Desember"
    ]
};
const dayValues = {
    narrow: [
        "M",
        "S",
        "S",
        "R",
        "K",
        "J",
        "S"
    ],
    short: [
        "Min",
        "Sen",
        "Sel",
        "Rab",
        "Kam",
        "Jum",
        "Sab"
    ],
    abbreviated: [
        "Min",
        "Sen",
        "Sel",
        "Rab",
        "Kam",
        "Jum",
        "Sab"
    ],
    wide: [
        "Minggu",
        "Senin",
        "Selasa",
        "Rabu",
        "Kamis",
        "Jumat",
        "Sabtu"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "siang",
        evening: "sore",
        night: "malam"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    // Can't use "pertama", "kedua" because can't be parsed
    return "ke-" + number;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"59371f0ceadbbae7":"fGq1u"}],"ez0a9":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("771bd583bf81765e");
var _index2 = require("968c0046be5540bc");
const matchOrdinalNumberPattern = /^ke-(\d+)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(sm|m)/i,
    abbreviated: /^(s\.?\s?m\.?|s\.?\s?e\.?\s?u\.?|m\.?|e\.?\s?u\.?)/i,
    wide: /^(sebelum masehi|sebelum era umum|masehi|era umum)/i
};
const parseEraPatterns = {
    any: [
        /^s/i,
        /^(m|e)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^K-?\s[1234]/i,
    wide: /^Kuartal ke-?\s?[1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|mei|jun|jul|agt|sep|okt|nov|des)/i,
    wide: /^(januari|februari|maret|april|mei|juni|juli|agustus|september|oktober|november|desember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^ma/i,
        /^ap/i,
        /^me/i,
        /^jun/i,
        /^jul/i,
        /^ag/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[srkjm]/i,
    short: /^(min|sen|sel|rab|kam|jum|sab)/i,
    abbreviated: /^(min|sen|sel|rab|kam|jum|sab)/i,
    wide: /^(minggu|senin|selasa|rabu|kamis|jumat|sabtu)/i
};
const parseDayPatterns = {
    narrow: [
        /^m/i,
        /^s/i,
        /^s/i,
        /^r/i,
        /^k/i,
        /^j/i,
        /^s/i
    ],
    any: [
        /^m/i,
        /^sen/i,
        /^sel/i,
        /^r/i,
        /^k/i,
        /^j/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|tengah m|tengah h|(di(\swaktu)?) (pagi|siang|sore|malam))/i,
    any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|(di(\swaktu)?) (pagi|siang|sore|malam))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^pm/i,
        midnight: /^tengah m/i,
        noon: /^tengah h/i,
        morning: /pagi/i,
        afternoon: /siang/i,
        evening: /sore/i,
        night: /malam/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"771bd583bf81765e":"15lWd","968c0046be5540bc":"kWqg8"}],"c0WY2":[function(require,module,exports) {
"use strict";
exports.is = void 0;
var _index = require("7d0742ffa0e83783");
var _index2 = require("dcee50c22f06f6b2");
var _index3 = require("9ac2f42a0e75a28");
var _index4 = require("b698c96e860a1c3f");
var _index5 = require("6578b198276cbe");
/**
 * @category Locales
 * @summary Icelandic locale.
 * @language Icelandic
 * @iso-639-2 isl
 * @author Derek Blank [@derekblank](https://github.com/derekblank)
 * @author Arnór Ýmir [@lamayg](https://github.com/lamayg)
 */ const is = exports.is = {
    code: "is",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"7d0742ffa0e83783":"7pFdZ","dcee50c22f06f6b2":"lYEbq","9ac2f42a0e75a28":"lOfcz","b698c96e860a1c3f":"jVvbg","6578b198276cbe":"dfy6q"}],"7pFdZ":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "minna en 1 sek\xfanda",
        other: "minna en {{count}} sek\xfandur"
    },
    xSeconds: {
        one: "1 sek\xfanda",
        other: "{{count}} sek\xfandur"
    },
    halfAMinute: "h\xe1lf m\xedn\xfata",
    lessThanXMinutes: {
        one: "minna en 1 m\xedn\xfata",
        other: "minna en {{count}} m\xedn\xfatur"
    },
    xMinutes: {
        one: "1 m\xedn\xfata",
        other: "{{count}} m\xedn\xfatur"
    },
    aboutXHours: {
        one: "u.\xfe.b. 1 klukkustund",
        other: "u.\xfe.b. {{count}} klukkustundir"
    },
    xHours: {
        one: "1 klukkustund",
        other: "{{count}} klukkustundir"
    },
    xDays: {
        one: "1 dagur",
        other: "{{count}} dagar"
    },
    aboutXWeeks: {
        one: "um viku",
        other: "um {{count}} vikur"
    },
    xWeeks: {
        one: "1 viku",
        other: "{{count}} vikur"
    },
    aboutXMonths: {
        one: "u.\xfe.b. 1 m\xe1nu\xf0ur",
        other: "u.\xfe.b. {{count}} m\xe1nu\xf0ir"
    },
    xMonths: {
        one: "1 m\xe1nu\xf0ur",
        other: "{{count}} m\xe1nu\xf0ir"
    },
    aboutXYears: {
        one: "u.\xfe.b. 1 \xe1r",
        other: "u.\xfe.b. {{count}} \xe1r"
    },
    xYears: {
        one: "1 \xe1r",
        other: "{{count}} \xe1r"
    },
    overXYears: {
        one: "meira en 1 \xe1r",
        other: "meira en {{count}} \xe1r"
    },
    almostXYears: {
        one: "n\xe6stum 1 \xe1r",
        other: "n\xe6stum {{count}} \xe1r"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\xed " + result;
        else return result + " s\xed\xf0an";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"lYEbq":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("2355a47cd477671f");
const dateFormats = {
    full: "EEEE, do MMMM y",
    long: "do MMMM y",
    medium: "do MMM y",
    short: "d.MM.y"
};
const timeFormats = {
    full: "'kl'. HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'kl.' {{time}}",
    long: "{{date}} 'kl.' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"2355a47cd477671f":"6OYyu"}],"lOfcz":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'s\xed\xf0asta' dddd 'kl.' p",
    yesterday: "'\xed g\xe6r kl.' p",
    today: "'\xed dag kl.' p",
    tomorrow: "'\xe1 morgun kl.' p",
    nextWeek: "dddd 'kl.' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"jVvbg":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("1c4e3264da4c6b4f");
const eraValues = {
    narrow: [
        "f.Kr.",
        "e.Kr."
    ],
    abbreviated: [
        "f.Kr.",
        "e.Kr."
    ],
    wide: [
        "fyrir Krist",
        "eftir Krist"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1F",
        "2F",
        "3F",
        "4F"
    ],
    wide: [
        "1. fj\xf3r\xf0ungur",
        "2. fj\xf3r\xf0ungur",
        "3. fj\xf3r\xf0ungur",
        "4. fj\xf3r\xf0ungur"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "\xc1",
        "S",
        "\xd3",
        "N",
        "D"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mars",
        "apr\xedl",
        "ma\xed",
        "j\xfan\xed",
        "j\xfal\xed",
        "\xe1g\xfast",
        "sept.",
        "okt.",
        "n\xf3v.",
        "des."
    ],
    wide: [
        "jan\xfaar",
        "febr\xfaar",
        "mars",
        "apr\xedl",
        "ma\xed",
        "j\xfan\xed",
        "j\xfal\xed",
        "\xe1g\xfast",
        "september",
        "okt\xf3ber",
        "n\xf3vember",
        "desember"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "\xde",
        "M",
        "F",
        "F",
        "L"
    ],
    short: [
        "Su",
        "M\xe1",
        "\xder",
        "Mi",
        "Fi",
        "F\xf6",
        "La"
    ],
    abbreviated: [
        "sun.",
        "m\xe1n.",
        "\xferi.",
        "mi\xf0.",
        "fim.",
        "f\xf6s.",
        "lau."
    ],
    wide: [
        "sunnudagur",
        "m\xe1nudagur",
        "\xferi\xf0judagur",
        "mi\xf0vikudagur",
        "fimmtudagur",
        "f\xf6studagur",
        "laugardagur"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "f",
        pm: "e",
        midnight: "mi\xf0n\xe6tti",
        noon: "h\xe1degi",
        morning: "morgunn",
        afternoon: "s\xed\xf0degi",
        evening: "kv\xf6ld",
        night: "n\xf3tt"
    },
    abbreviated: {
        am: "f.h.",
        pm: "e.h.",
        midnight: "mi\xf0n\xe6tti",
        noon: "h\xe1degi",
        morning: "morgunn",
        afternoon: "s\xed\xf0degi",
        evening: "kv\xf6ld",
        night: "n\xf3tt"
    },
    wide: {
        am: "fyrir h\xe1degi",
        pm: "eftir h\xe1degi",
        midnight: "mi\xf0n\xe6tti",
        noon: "h\xe1degi",
        morning: "morgunn",
        afternoon: "s\xed\xf0degi",
        evening: "kv\xf6ld",
        night: "n\xf3tt"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "f",
        pm: "e",
        midnight: "\xe1 mi\xf0n\xe6tti",
        noon: "\xe1 h\xe1degi",
        morning: "a\xf0 morgni",
        afternoon: "s\xed\xf0degis",
        evening: "um kv\xf6ld",
        night: "um n\xf3tt"
    },
    abbreviated: {
        am: "f.h.",
        pm: "e.h.",
        midnight: "\xe1 mi\xf0n\xe6tti",
        noon: "\xe1 h\xe1degi",
        morning: "a\xf0 morgni",
        afternoon: "s\xed\xf0degis",
        evening: "um kv\xf6ld",
        night: "um n\xf3tt"
    },
    wide: {
        am: "fyrir h\xe1degi",
        pm: "eftir h\xe1degi",
        midnight: "\xe1 mi\xf0n\xe6tti",
        noon: "\xe1 h\xe1degi",
        morning: "a\xf0 morgni",
        afternoon: "s\xed\xf0degis",
        evening: "um kv\xf6ld",
        night: "um n\xf3tt"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"1c4e3264da4c6b4f":"fGq1u"}],"dfy6q":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("b869c361ff9d2b64");
var _index2 = require("46a981616f6aeb10");
const matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern = /\d+(\.)?/i;
const matchEraPatterns = {
    narrow: /^(f\.Kr\.|e\.Kr\.)/i,
    abbreviated: /^(f\.Kr\.|e\.Kr\.)/i,
    wide: /^(fyrir Krist|eftir Krist)/i
};
const parseEraPatterns = {
    any: [
        /^(f\.Kr\.)/i,
        /^(e\.Kr\.)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]\.?/i,
    abbreviated: /^q[1234]\.?/i,
    wide: /^[1234]\.? fjórðungur/i
};
const parseQuarterPatterns = {
    any: [
        /1\.?/i,
        /2\.?/i,
        /3\.?/i,
        /4\.?/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmásónd]/i,
    abbreviated: /^(jan\.|feb\.|mars\.|apríl\.|maí|júní|júlí|águst|sep\.|oct\.|nov\.|dec\.)/i,
    wide: /^(januar|febrúar|mars|apríl|maí|júní|júlí|águst|september|október|nóvember|desember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^á/i,
        /^s/i,
        /^ó/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maí/i,
        /^jún/i,
        /^júl/i,
        /^áu/i,
        /^s/i,
        /^ó/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smtwf]/i,
    short: /^(su|má|þr|mi|fi|fö|la)/i,
    abbreviated: /^(sun|mán|þri|mið|fim|fös|lau)\.?/i,
    wide: /^(sunnudagur|mánudagur|þriðjudagur|miðvikudagur|fimmtudagur|föstudagur|laugardagur)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^þ/i,
        /^m/i,
        /^f/i,
        /^f/i,
        /^l/i
    ],
    any: [
        /^su/i,
        /^má/i,
        /^þr/i,
        /^mi/i,
        /^fi/i,
        /^fö/i,
        /^la/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(f|e|síðdegis|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i,
    any: /^(fyrir hádegi|eftir hádegi|[ef]\.?h\.?|síðdegis|morgunn|(á|að|um) (morgni|kvöld|nótt|miðnætti))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^f/i,
        pm: /^e/i,
        midnight: /^mi/i,
        noon: /^há/i,
        morning: /morgunn/i,
        afternoon: /síðdegi/i,
        evening: /kvöld/i,
        night: /nótt/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"b869c361ff9d2b64":"15lWd","46a981616f6aeb10":"kWqg8"}],"2MwJI":[function(require,module,exports) {
"use strict";
exports.it = void 0;
var _index = require("46e0364cf5d3bbf8");
var _index2 = require("c323154f5f888296");
var _index3 = require("2fe8c62c573bb643");
var _index4 = require("ed1f60638c813f1d");
var _index5 = require("ef363cac5ce015e4");
/**
 * @category Locales
 * @summary Italian locale.
 * @language Italian
 * @iso-639-2 ita
 * @author Alberto Restifo [@albertorestifo](https://github.com/albertorestifo)
 * @author Giovanni Polimeni [@giofilo](https://github.com/giofilo)
 * @author Vincenzo Carrese [@vin-car](https://github.com/vin-car)
 */ const it = exports.it = {
    code: "it",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"46e0364cf5d3bbf8":"6YH4x","c323154f5f888296":"5S4Hw","2fe8c62c573bb643":"fkiBO","ed1f60638c813f1d":"7koK6","ef363cac5ce015e4":"kXn1a"}],"6YH4x":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "meno di un secondo",
        other: "meno di {{count}} secondi"
    },
    xSeconds: {
        one: "un secondo",
        other: "{{count}} secondi"
    },
    halfAMinute: "alcuni secondi",
    lessThanXMinutes: {
        one: "meno di un minuto",
        other: "meno di {{count}} minuti"
    },
    xMinutes: {
        one: "un minuto",
        other: "{{count}} minuti"
    },
    aboutXHours: {
        one: "circa un'ora",
        other: "circa {{count}} ore"
    },
    xHours: {
        one: "un'ora",
        other: "{{count}} ore"
    },
    xDays: {
        one: "un giorno",
        other: "{{count}} giorni"
    },
    aboutXWeeks: {
        one: "circa una settimana",
        other: "circa {{count}} settimane"
    },
    xWeeks: {
        one: "una settimana",
        other: "{{count}} settimane"
    },
    aboutXMonths: {
        one: "circa un mese",
        other: "circa {{count}} mesi"
    },
    xMonths: {
        one: "un mese",
        other: "{{count}} mesi"
    },
    aboutXYears: {
        one: "circa un anno",
        other: "circa {{count}} anni"
    },
    xYears: {
        one: "un anno",
        other: "{{count}} anni"
    },
    overXYears: {
        one: "pi\xf9 di un anno",
        other: "pi\xf9 di {{count}} anni"
    },
    almostXYears: {
        one: "quasi un anno",
        other: "quasi {{count}} anni"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "tra " + result;
        else return result + " fa";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"5S4Hw":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("3d25b08222c4028b");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"3d25b08222c4028b":"6OYyu"}],"fkiBO":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("ab8102c5cdd573e7");
const weekdays = [
    "domenica",
    "luned\xec",
    "marted\xec",
    "mercoled\xec",
    "gioved\xec",
    "venerd\xec",
    "sabato"
];
function lastWeek(day) {
    switch(day){
        case 0:
            return "'domenica scorsa alle' p";
        default:
            return "'" + weekdays[day] + " scorso alle' p";
    }
}
function thisWeek(day) {
    return "'" + weekdays[day] + " alle' p";
}
function nextWeek(day) {
    switch(day){
        case 0:
            return "'domenica prossima alle' p";
        default:
            return "'" + weekdays[day] + " prossimo alle' p";
    }
}
const formatRelativeLocale = {
    lastWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return lastWeek(day);
    },
    yesterday: "'ieri alle' p",
    today: "'oggi alle' p",
    tomorrow: "'domani alle' p",
    nextWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return nextWeek(day);
    },
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"ab8102c5cdd573e7":"16SmB"}],"7koK6":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("915537e75b619eb6");
const eraValues = {
    narrow: [
        "aC",
        "dC"
    ],
    abbreviated: [
        "a.C.",
        "d.C."
    ],
    wide: [
        "avanti Cristo",
        "dopo Cristo"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    wide: [
        "1\xba trimestre",
        "2\xba trimestre",
        "3\xba trimestre",
        "4\xba trimestre"
    ]
};
const monthValues = {
    narrow: [
        "G",
        "F",
        "M",
        "A",
        "M",
        "G",
        "L",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "gen",
        "feb",
        "mar",
        "apr",
        "mag",
        "giu",
        "lug",
        "ago",
        "set",
        "ott",
        "nov",
        "dic"
    ],
    wide: [
        "gennaio",
        "febbraio",
        "marzo",
        "aprile",
        "maggio",
        "giugno",
        "luglio",
        "agosto",
        "settembre",
        "ottobre",
        "novembre",
        "dicembre"
    ]
};
const dayValues = {
    narrow: [
        "D",
        "L",
        "M",
        "M",
        "G",
        "V",
        "S"
    ],
    short: [
        "dom",
        "lun",
        "mar",
        "mer",
        "gio",
        "ven",
        "sab"
    ],
    abbreviated: [
        "dom",
        "lun",
        "mar",
        "mer",
        "gio",
        "ven",
        "sab"
    ],
    wide: [
        "domenica",
        "luned\xec",
        "marted\xec",
        "mercoled\xec",
        "gioved\xec",
        "venerd\xec",
        "sabato"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "m.",
        pm: "p.",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "mattina",
        afternoon: "pomeriggio",
        evening: "sera",
        night: "notte"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "m.",
        pm: "p.",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "mezzanotte",
        noon: "mezzogiorno",
        morning: "di mattina",
        afternoon: "del pomeriggio",
        evening: "di sera",
        night: "di notte"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return String(number);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"915537e75b619eb6":"fGq1u"}],"kXn1a":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("83878e57d1375100");
var _index2 = require("a0caf3d007b507d9");
const matchOrdinalNumberPattern = /^(\d+)(º)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(aC|dC)/i,
    abbreviated: /^(a\.?\s?C\.?|a\.?\s?e\.?\s?v\.?|d\.?\s?C\.?|e\.?\s?v\.?)/i,
    wide: /^(avanti Cristo|avanti Era Volgare|dopo Cristo|Era Volgare)/i
};
const parseEraPatterns = {
    any: [
        /^a/i,
        /^(d|e)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^t[1234]/i,
    wide: /^[1234](º)? trimestre/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[gfmalsond]/i,
    abbreviated: /^(gen|feb|mar|apr|mag|giu|lug|ago|set|ott|nov|dic)/i,
    wide: /^(gennaio|febbraio|marzo|aprile|maggio|giugno|luglio|agosto|settembre|ottobre|novembre|dicembre)/i
};
const parseMonthPatterns = {
    narrow: [
        /^g/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^g/i,
        /^l/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ge/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mag/i,
        /^gi/i,
        /^l/i,
        /^ag/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[dlmgvs]/i,
    short: /^(do|lu|ma|me|gi|ve|sa)/i,
    abbreviated: /^(dom|lun|mar|mer|gio|ven|sab)/i,
    wide: /^(domenica|luned[i|ì]|marted[i|ì]|mercoled[i|ì]|gioved[i|ì]|venerd[i|ì]|sabato)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^m/i,
        /^g/i,
        /^v/i,
        /^s/i
    ],
    any: [
        /^d/i,
        /^l/i,
        /^ma/i,
        /^me/i,
        /^g/i,
        /^v/i,
        /^s/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|m\.|p|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i,
    any: /^([ap]\.?\s?m\.?|mezzanotte|mezzogiorno|(di|del) (mattina|pomeriggio|sera|notte))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mezza/i,
        noon: /^mezzo/i,
        morning: /mattina/i,
        afternoon: /pomeriggio/i,
        evening: /sera/i,
        night: /notte/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"83878e57d1375100":"15lWd","a0caf3d007b507d9":"kWqg8"}],"25RmW":[function(require,module,exports) {
"use strict";
exports.itCH = void 0;
var _index = require("df917bf441a518c6");
var _index2 = require("eec2e9ae3b6face9");
var _index3 = require("f02660fa1bcb9684");
var _index4 = require("7e6822e3d2a55318");
var _index5 = require("4e2cf5c05f9c171f");
/**
 * @category Locales
 * @summary Italian locale (Switzerland).
 * @language Italian
 * @iso-639-2 ita
 * @author Mike Peyer [@maic66](https://github.com/maic66)
 */ const itCH = exports.itCH = {
    code: "it-CH",
    formatDistance: _index.formatDistance,
    formatLong: _index5.formatLong,
    formatRelative: _index2.formatRelative,
    localize: _index3.localize,
    match: _index4.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"df917bf441a518c6":"6YH4x","eec2e9ae3b6face9":"fkiBO","f02660fa1bcb9684":"7koK6","7e6822e3d2a55318":"kXn1a","4e2cf5c05f9c171f":"7eeiz"}],"7eeiz":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("1c6d0c18b2c40dcf");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"1c6d0c18b2c40dcf":"6OYyu"}],"ctX96":[function(require,module,exports) {
"use strict";
exports.ja = void 0;
var _index = require("67b5711607d3b295");
var _index2 = require("fe8b72928c1fb9dd");
var _index3 = require("fac7048875e72379");
var _index4 = require("87b9f6c88c877147");
var _index5 = require("7f0104676a2315ee");
/**
 * @category Locales
 * @summary Japanese locale.
 * @language Japanese
 * @iso-639-2 jpn
 * @author Thomas Eilmsteiner [@DeMuu](https://github.com/DeMuu)
 * @author Yamagishi Kazutoshi [@ykzts](https://github.com/ykzts)
 * @author Luca Ban [@mesqueeb](https://github.com/mesqueeb)
 * @author Terrence Lam [@skyuplam](https://github.com/skyuplam)
 * @author Taiki IKeda [@so99ynoodles](https://github.com/so99ynoodles)
 */ const ja = exports.ja = {
    code: "ja",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"67b5711607d3b295":"dHuxa","fe8b72928c1fb9dd":"hRb9L","fac7048875e72379":"5zTsi","87b9f6c88c877147":"JHfdY","7f0104676a2315ee":"dqyW5"}],"dHuxa":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "1\u79D2\u672A\u6E80",
        other: "{{count}}\u79D2\u672A\u6E80",
        oneWithSuffix: "\u7D041\u79D2",
        otherWithSuffix: "\u7D04{{count}}\u79D2"
    },
    xSeconds: {
        one: "1\u79D2",
        other: "{{count}}\u79D2"
    },
    halfAMinute: "30\u79D2",
    lessThanXMinutes: {
        one: "1\u5206\u672A\u6E80",
        other: "{{count}}\u5206\u672A\u6E80",
        oneWithSuffix: "\u7D041\u5206",
        otherWithSuffix: "\u7D04{{count}}\u5206"
    },
    xMinutes: {
        one: "1\u5206",
        other: "{{count}}\u5206"
    },
    aboutXHours: {
        one: "\u7D041\u6642\u9593",
        other: "\u7D04{{count}}\u6642\u9593"
    },
    xHours: {
        one: "1\u6642\u9593",
        other: "{{count}}\u6642\u9593"
    },
    xDays: {
        one: "1\u65E5",
        other: "{{count}}\u65E5"
    },
    aboutXWeeks: {
        one: "\u7D041\u9031\u9593",
        other: "\u7D04{{count}}\u9031\u9593"
    },
    xWeeks: {
        one: "1\u9031\u9593",
        other: "{{count}}\u9031\u9593"
    },
    aboutXMonths: {
        one: "\u7D041\u304B\u6708",
        other: "\u7D04{{count}}\u304B\u6708"
    },
    xMonths: {
        one: "1\u304B\u6708",
        other: "{{count}}\u304B\u6708"
    },
    aboutXYears: {
        one: "\u7D041\u5E74",
        other: "\u7D04{{count}}\u5E74"
    },
    xYears: {
        one: "1\u5E74",
        other: "{{count}}\u5E74"
    },
    overXYears: {
        one: "1\u5E74\u4EE5\u4E0A",
        other: "{{count}}\u5E74\u4EE5\u4E0A"
    },
    almostXYears: {
        one: "1\u5E74\u8FD1\u304F",
        other: "{{count}}\u5E74\u8FD1\u304F"
    }
};
const formatDistance = (token, count, options)=>{
    options = options || {};
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) {
        if (options.addSuffix && tokenValue.oneWithSuffix) result = tokenValue.oneWithSuffix;
        else result = tokenValue.one;
    } else if (options.addSuffix && tokenValue.otherWithSuffix) result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u5F8C";
        else return result + "\u524D";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"hRb9L":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("b06ee2356457e9");
const dateFormats = {
    full: "y\u5E74M\u6708d\u65E5EEEE",
    long: "y\u5E74M\u6708d\u65E5",
    medium: "y/MM/dd",
    short: "y/MM/dd"
};
const timeFormats = {
    full: "H\u6642mm\u5206ss\u79D2 zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"b06ee2356457e9":"6OYyu"}],"5zTsi":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "\u5148\u9031\u306Eeeee\u306Ep",
    yesterday: "\u6628\u65E5\u306Ep",
    today: "\u4ECA\u65E5\u306Ep",
    tomorrow: "\u660E\u65E5\u306Ep",
    nextWeek: "\u7FCC\u9031\u306Eeeee\u306Ep",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>{
    return formatRelativeLocale[token];
};
exports.formatRelative = formatRelative;

},{}],"JHfdY":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("744aa4af7bf2a84a");
const eraValues = {
    narrow: [
        "BC",
        "AC"
    ],
    abbreviated: [
        "\u7D00\u5143\u524D",
        "\u897F\u66A6"
    ],
    wide: [
        "\u7D00\u5143\u524D",
        "\u897F\u66A6"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "\u7B2C1\u56DB\u534A\u671F",
        "\u7B2C2\u56DB\u534A\u671F",
        "\u7B2C3\u56DB\u534A\u671F",
        "\u7B2C4\u56DB\u534A\u671F"
    ]
};
const monthValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12"
    ],
    abbreviated: [
        "1\u6708",
        "2\u6708",
        "3\u6708",
        "4\u6708",
        "5\u6708",
        "6\u6708",
        "7\u6708",
        "8\u6708",
        "9\u6708",
        "10\u6708",
        "11\u6708",
        "12\u6708"
    ],
    wide: [
        "1\u6708",
        "2\u6708",
        "3\u6708",
        "4\u6708",
        "5\u6708",
        "6\u6708",
        "7\u6708",
        "8\u6708",
        "9\u6708",
        "10\u6708",
        "11\u6708",
        "12\u6708"
    ]
};
const dayValues = {
    narrow: [
        "\u65E5",
        "\u6708",
        "\u706B",
        "\u6C34",
        "\u6728",
        "\u91D1",
        "\u571F"
    ],
    short: [
        "\u65E5",
        "\u6708",
        "\u706B",
        "\u6C34",
        "\u6728",
        "\u91D1",
        "\u571F"
    ],
    abbreviated: [
        "\u65E5",
        "\u6708",
        "\u706B",
        "\u6C34",
        "\u6728",
        "\u91D1",
        "\u571F"
    ],
    wide: [
        "\u65E5\u66DC\u65E5",
        "\u6708\u66DC\u65E5",
        "\u706B\u66DC\u65E5",
        "\u6C34\u66DC\u65E5",
        "\u6728\u66DC\u65E5",
        "\u91D1\u66DC\u65E5",
        "\u571F\u66DC\u65E5"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u5348\u524D",
        pm: "\u5348\u5F8C",
        midnight: "\u6DF1\u591C",
        noon: "\u6B63\u5348",
        morning: "\u671D",
        afternoon: "\u5348\u5F8C",
        evening: "\u591C",
        night: "\u6DF1\u591C"
    },
    abbreviated: {
        am: "\u5348\u524D",
        pm: "\u5348\u5F8C",
        midnight: "\u6DF1\u591C",
        noon: "\u6B63\u5348",
        morning: "\u671D",
        afternoon: "\u5348\u5F8C",
        evening: "\u591C",
        night: "\u6DF1\u591C"
    },
    wide: {
        am: "\u5348\u524D",
        pm: "\u5348\u5F8C",
        midnight: "\u6DF1\u591C",
        noon: "\u6B63\u5348",
        morning: "\u671D",
        afternoon: "\u5348\u5F8C",
        evening: "\u591C",
        night: "\u6DF1\u591C"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u5348\u524D",
        pm: "\u5348\u5F8C",
        midnight: "\u6DF1\u591C",
        noon: "\u6B63\u5348",
        morning: "\u671D",
        afternoon: "\u5348\u5F8C",
        evening: "\u591C",
        night: "\u6DF1\u591C"
    },
    abbreviated: {
        am: "\u5348\u524D",
        pm: "\u5348\u5F8C",
        midnight: "\u6DF1\u591C",
        noon: "\u6B63\u5348",
        morning: "\u671D",
        afternoon: "\u5348\u5F8C",
        evening: "\u591C",
        night: "\u6DF1\u591C"
    },
    wide: {
        am: "\u5348\u524D",
        pm: "\u5348\u5F8C",
        midnight: "\u6DF1\u591C",
        noon: "\u6B63\u5348",
        morning: "\u671D",
        afternoon: "\u5348\u5F8C",
        evening: "\u591C",
        night: "\u6DF1\u591C"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = String(options?.unit);
    switch(unit){
        case "year":
            return `${number}\u{5E74}`;
        case "quarter":
            return `\u{7B2C}${number}\u{56DB}\u{534A}\u{671F}`;
        case "month":
            return `${number}\u{6708}`;
        case "week":
            return `\u{7B2C}${number}\u{9031}`;
        case "date":
            return `${number}\u{65E5}`;
        case "hour":
            return `${number}\u{6642}`;
        case "minute":
            return `${number}\u{5206}`;
        case "second":
            return `${number}\u{79D2}`;
        default:
            return `${number}`;
    }
};
const localize = exports.localize = {
    ordinalNumber: ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>Number(quarter) - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"744aa4af7bf2a84a":"fGq1u"}],"dqyW5":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("39cb7b3c8baa315d");
var _index2 = require("cdded3e524c4b9df");
const matchOrdinalNumberPattern = /^第?\d+(年|四半期|月|週|日|時|分|秒)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(B\.?C\.?|A\.?D\.?)/i,
    abbreviated: /^(紀元[前後]|西暦)/i,
    wide: /^(紀元[前後]|西暦)/i
};
const parseEraPatterns = {
    narrow: [
        /^B/i,
        /^A/i
    ],
    any: [
        /^(紀元前)/i,
        /^(西暦|紀元後)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^Q[1234]/i,
    wide: /^第[1234一二三四１２３４]四半期/i
};
const parseQuarterPatterns = {
    any: [
        /(1|一|１)/i,
        /(2|二|２)/i,
        /(3|三|３)/i,
        /(4|四|４)/i
    ]
};
const matchMonthPatterns = {
    narrow: /^([123456789]|1[012])/,
    abbreviated: /^([123456789]|1[012])月/i,
    wide: /^([123456789]|1[012])月/i
};
const parseMonthPatterns = {
    any: [
        /^1\D/,
        /^2/,
        /^3/,
        /^4/,
        /^5/,
        /^6/,
        /^7/,
        /^8/,
        /^9/,
        /^10/,
        /^11/,
        /^12/
    ]
};
const matchDayPatterns = {
    narrow: /^[日月火水木金土]/,
    short: /^[日月火水木金土]/,
    abbreviated: /^[日月火水木金土]/,
    wide: /^[日月火水木金土]曜日/
};
const parseDayPatterns = {
    any: [
        /^日/,
        /^月/,
        /^火/,
        /^水/,
        /^木/,
        /^金/,
        /^土/
    ]
};
const matchDayPeriodPatterns = {
    any: /^(AM|PM|午前|午後|正午|深夜|真夜中|夜|朝)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^(A|午前)/i,
        pm: /^(P|午後)/i,
        midnight: /^深夜|真夜中/i,
        noon: /^正午/i,
        morning: /^朝/i,
        afternoon: /^午後/i,
        evening: /^夜/i,
        night: /^深夜/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
            return parseInt(value, 10);
        }
    }),
    era: (0, _index2.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index2.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index2.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index2.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"39cb7b3c8baa315d":"kWqg8","cdded3e524c4b9df":"15lWd"}],"3CklB":[function(require,module,exports) {
"use strict";
exports.jaHira = void 0;
var _index = require("da95e35d0e16b338");
var _index2 = require("5c83ce92f71af60e");
var _index3 = require("94a58daa3a7f5243");
var _index4 = require("f126b0b259b71df");
var _index5 = require("cf5b8e5c3252b4e");
/**
 * @category Locales
 * @summary Japanese (Hiragana) locale.
 * @language Japanese (Hiragana)
 * @iso-639-2 jpn
 * @author Eri Hiramatsu [@Eritutteo](https://github.com/Eritutteo)
 */ const jaHira = exports.jaHira = {
    code: "ja-Hira",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"da95e35d0e16b338":"1bVyv","5c83ce92f71af60e":"hh6eD","94a58daa3a7f5243":"3FV0s","f126b0b259b71df":"eGBw6","cf5b8e5c3252b4e":"bo3Na"}],"1bVyv":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "1\u3073\u3087\u3046\u307F\u307E\u3093",
        other: "{{count}}\u3073\u3087\u3046\u307F\u307E\u3093",
        oneWithSuffix: "\u3084\u304F1\u3073\u3087\u3046",
        otherWithSuffix: "\u3084\u304F{{count}}\u3073\u3087\u3046"
    },
    xSeconds: {
        one: "1\u3073\u3087\u3046",
        other: "{{count}}\u3073\u3087\u3046"
    },
    halfAMinute: "30\u3073\u3087\u3046",
    lessThanXMinutes: {
        one: "1\u3077\u3093\u307F\u307E\u3093",
        other: "{{count}}\u3075\u3093\u307F\u307E\u3093",
        oneWithSuffix: "\u3084\u304F1\u3077\u3093",
        otherWithSuffix: "\u3084\u304F{{count}}\u3075\u3093"
    },
    xMinutes: {
        one: "1\u3077\u3093",
        other: "{{count}}\u3075\u3093"
    },
    aboutXHours: {
        one: "\u3084\u304F1\u3058\u304B\u3093",
        other: "\u3084\u304F{{count}}\u3058\u304B\u3093"
    },
    xHours: {
        one: "1\u3058\u304B\u3093",
        other: "{{count}}\u3058\u304B\u3093"
    },
    xDays: {
        one: "1\u306B\u3061",
        other: "{{count}}\u306B\u3061"
    },
    aboutXWeeks: {
        one: "\u3084\u304F1\u3057\u3085\u3046\u304B\u3093",
        other: "\u3084\u304F{{count}}\u3057\u3085\u3046\u304B\u3093"
    },
    xWeeks: {
        one: "1\u3057\u3085\u3046\u304B\u3093",
        other: "{{count}}\u3057\u3085\u3046\u304B\u3093"
    },
    aboutXMonths: {
        one: "\u3084\u304F1\u304B\u3052\u3064",
        other: "\u3084\u304F{{count}}\u304B\u3052\u3064"
    },
    xMonths: {
        one: "1\u304B\u3052\u3064",
        other: "{{count}}\u304B\u3052\u3064"
    },
    aboutXYears: {
        one: "\u3084\u304F1\u306D\u3093",
        other: "\u3084\u304F{{count}}\u306D\u3093"
    },
    xYears: {
        one: "1\u306D\u3093",
        other: "{{count}}\u306D\u3093"
    },
    overXYears: {
        one: "1\u306D\u3093\u3044\u3058\u3087\u3046",
        other: "{{count}}\u306D\u3093\u3044\u3058\u3087\u3046"
    },
    almostXYears: {
        one: "1\u306D\u3093\u3061\u304B\u304F",
        other: "{{count}}\u306D\u3093\u3061\u304B\u304F"
    }
};
const formatDistance = (token, count, options)=>{
    options = options || {};
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) {
        if (options.addSuffix && tokenValue.oneWithSuffix) result = tokenValue.oneWithSuffix;
        else result = tokenValue.one;
    } else if (options.addSuffix && tokenValue.otherWithSuffix) result = tokenValue.otherWithSuffix.replace("{{count}}", String(count));
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u3042\u3068";
        else return result + "\u307E\u3048";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"hh6eD":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("3fd0c8d98258152b");
const dateFormats = {
    full: "y\u306D\u3093M\u304C\u3064d\u306B\u3061EEEE",
    long: "y\u306D\u3093M\u304C\u3064d\u306B\u3061",
    medium: "y/MM/dd",
    short: "y/MM/dd"
};
const timeFormats = {
    full: "H\u3058mm\u3075\u3093ss\u3073\u3087\u3046 zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"3fd0c8d98258152b":"6OYyu"}],"3FV0s":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "\u305B\u3093\u3057\u3085\u3046\u306Eeeee\u306Ep",
    yesterday: "\u304D\u306E\u3046\u306Ep",
    today: "\u304D\u3087\u3046\u306Ep",
    tomorrow: "\u3042\u3057\u305F\u306Ep",
    nextWeek: "\u3088\u304F\u3057\u3085\u3046\u306Eeeee\u306Ep",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>{
    return formatRelativeLocale[token];
};
exports.formatRelative = formatRelative;

},{}],"eGBw6":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("e9529eddddd7203b");
const eraValues = {
    narrow: [
        "BC",
        "AC"
    ],
    abbreviated: [
        "\u304D\u3052\u3093\u305C\u3093",
        "\u305B\u3044\u308C\u304D"
    ],
    wide: [
        "\u304D\u3052\u3093\u305C\u3093",
        "\u305B\u3044\u308C\u304D"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "\u3060\u30441\u3057\u306F\u3093\u304D",
        "\u3060\u30442\u3057\u306F\u3093\u304D",
        "\u3060\u30443\u3057\u306F\u3093\u304D",
        "\u3060\u30444\u3057\u306F\u3093\u304D"
    ]
};
const monthValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12"
    ],
    abbreviated: [
        "1\u304C\u3064",
        "2\u304C\u3064",
        "3\u304C\u3064",
        "4\u304C\u3064",
        "5\u304C\u3064",
        "6\u304C\u3064",
        "7\u304C\u3064",
        "8\u304C\u3064",
        "9\u304C\u3064",
        "10\u304C\u3064",
        "11\u304C\u3064",
        "12\u304C\u3064"
    ],
    wide: [
        "1\u304C\u3064",
        "2\u304C\u3064",
        "3\u304C\u3064",
        "4\u304C\u3064",
        "5\u304C\u3064",
        "6\u304C\u3064",
        "7\u304C\u3064",
        "8\u304C\u3064",
        "9\u304C\u3064",
        "10\u304C\u3064",
        "11\u304C\u3064",
        "12\u304C\u3064"
    ]
};
const dayValues = {
    narrow: [
        "\u306B\u3061",
        "\u3052\u3064",
        "\u304B",
        "\u3059\u3044",
        "\u3082\u304F",
        "\u304D\u3093",
        "\u3069"
    ],
    short: [
        "\u306B\u3061",
        "\u3052\u3064",
        "\u304B",
        "\u3059\u3044",
        "\u3082\u304F",
        "\u304D\u3093",
        "\u3069"
    ],
    abbreviated: [
        "\u306B\u3061",
        "\u3052\u3064",
        "\u304B",
        "\u3059\u3044",
        "\u3082\u304F",
        "\u304D\u3093",
        "\u3069"
    ],
    wide: [
        "\u306B\u3061\u3088\u3046\u3073",
        "\u3052\u3064\u3088\u3046\u3073",
        "\u304B\u3088\u3046\u3073",
        "\u3059\u3044\u3088\u3046\u3073",
        "\u3082\u304F\u3088\u3046\u3073",
        "\u304D\u3093\u3088\u3046\u3073",
        "\u3069\u3088\u3046\u3073"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u3054\u305C\u3093",
        pm: "\u3054\u3054",
        midnight: "\u3057\u3093\u3084",
        noon: "\u3057\u3087\u3046\u3054",
        morning: "\u3042\u3055",
        afternoon: "\u3054\u3054",
        evening: "\u3088\u308B",
        night: "\u3057\u3093\u3084"
    },
    abbreviated: {
        am: "\u3054\u305C\u3093",
        pm: "\u3054\u3054",
        midnight: "\u3057\u3093\u3084",
        noon: "\u3057\u3087\u3046\u3054",
        morning: "\u3042\u3055",
        afternoon: "\u3054\u3054",
        evening: "\u3088\u308B",
        night: "\u3057\u3093\u3084"
    },
    wide: {
        am: "\u3054\u305C\u3093",
        pm: "\u3054\u3054",
        midnight: "\u3057\u3093\u3084",
        noon: "\u3057\u3087\u3046\u3054",
        morning: "\u3042\u3055",
        afternoon: "\u3054\u3054",
        evening: "\u3088\u308B",
        night: "\u3057\u3093\u3084"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u3054\u305C\u3093",
        pm: "\u3054\u3054",
        midnight: "\u3057\u3093\u3084",
        noon: "\u3057\u3087\u3046\u3054",
        morning: "\u3042\u3055",
        afternoon: "\u3054\u3054",
        evening: "\u3088\u308B",
        night: "\u3057\u3093\u3084"
    },
    abbreviated: {
        am: "\u3054\u305C\u3093",
        pm: "\u3054\u3054",
        midnight: "\u3057\u3093\u3084",
        noon: "\u3057\u3087\u3046\u3054",
        morning: "\u3042\u3055",
        afternoon: "\u3054\u3054",
        evening: "\u3088\u308B",
        night: "\u3057\u3093\u3084"
    },
    wide: {
        am: "\u3054\u305C\u3093",
        pm: "\u3054\u3054",
        midnight: "\u3057\u3093\u3084",
        noon: "\u3057\u3087\u3046\u3054",
        morning: "\u3042\u3055",
        afternoon: "\u3054\u3054",
        evening: "\u3088\u308B",
        night: "\u3057\u3093\u3084"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = String(options?.unit);
    switch(unit){
        case "year":
            return `${number}\u{306D}\u{3093}`;
        case "quarter":
            return `\u{3060}\u{3044}${number}\u{3057}\u{306F}\u{3093}\u{304D}`;
        case "month":
            return `${number}\u{304C}\u{3064}`;
        case "week":
            return `\u{3060}\u{3044}${number}\u{3057}\u{3085}\u{3046}`;
        case "date":
            return `${number}\u{306B}\u{3061}`;
        case "hour":
            return `${number}\u{3058}`;
        case "minute":
            return `${number}\u{3075}\u{3093}`;
        case "second":
            return `${number}\u{3073}\u{3087}\u{3046}`;
        default:
            return `${number}`;
    }
};
const localize = exports.localize = {
    ordinalNumber: ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>Number(quarter) - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"e9529eddddd7203b":"fGq1u"}],"bo3Na":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("7f4ada90b83b84cd");
var _index2 = require("eafb714a6d5f071a");
const matchOrdinalNumberPattern = /^だ?い?\d+(ねん|しはんき|がつ|しゅう|にち|じ|ふん|びょう)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(B\.?C\.?|A\.?D\.?)/i,
    abbreviated: /^(きげん[前後]|せいれき)/i,
    wide: /^(きげん[前後]|せいれき)/i
};
const parseEraPatterns = {
    narrow: [
        /^B/i,
        /^A/i
    ],
    any: [
        /^(きげんぜん)/i,
        /^(せいれき|きげんご)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^Q[1234]/i,
    wide: /^だい[1234一二三四１２３４]しはんき/i
};
const parseQuarterPatterns = {
    any: [
        /(1|一|１)/i,
        /(2|二|２)/i,
        /(3|三|３)/i,
        /(4|四|４)/i
    ]
};
const matchMonthPatterns = {
    narrow: /^([123456789]|1[012])/,
    abbreviated: /^([123456789]|1[012])がつ/i,
    wide: /^([123456789]|1[012])がつ/i
};
const parseMonthPatterns = {
    any: [
        /^1\D/,
        /^2/,
        /^3/,
        /^4/,
        /^5/,
        /^6/,
        /^7/,
        /^8/,
        /^9/,
        /^10/,
        /^11/,
        /^12/
    ]
};
const matchDayPatterns = {
    narrow: /^(にち|げつ|か|すい|もく|きん|ど)/,
    short: /^(にち|げつ|か|すい|もく|きん|ど)/,
    abbreviated: /^(にち|げつ|か|すい|もく|きん|ど)/,
    wide: /^(にち|げつ|か|すい|もく|きん|ど)ようび/
};
const parseDayPatterns = {
    any: [
        /^にち/,
        /^げつ/,
        /^か/,
        /^すい/,
        /^もく/,
        /^きん/,
        /^ど/
    ]
};
const matchDayPeriodPatterns = {
    any: /^(AM|PM|ごぜん|ごご|しょうご|しんや|まよなか|よる|あさ)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^(A|ごぜん)/i,
        pm: /^(P|ごご)/i,
        midnight: /^しんや|まよなか/i,
        noon: /^しょうご/i,
        morning: /^あさ/i,
        afternoon: /^ごご/i,
        evening: /^よる/i,
        night: /^しんや/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
            return parseInt(value, 10);
        }
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"7f4ada90b83b84cd":"15lWd","eafb714a6d5f071a":"kWqg8"}],"5Jxv0":[function(require,module,exports) {
"use strict";
exports.ka = void 0;
var _index = require("bf03676023f283d2");
var _index2 = require("5494a9fcf866d975");
var _index3 = require("caa5e1a06455cb06");
var _index4 = require("1bf658bbe8a471ab");
var _index5 = require("b473233ce8bf904b");
/**
 * @category Locales
 * @summary Georgian locale.
 * @language Georgian
 * @iso-639-2 geo
 * @author Lado Lomidze [@Landish](https://github.com/Landish)
 * @author Nick Shvelidze [@shvelo](https://github.com/shvelo)
 */ const ka = exports.ka = {
    code: "ka",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"bf03676023f283d2":"ggW0B","5494a9fcf866d975":"5sv62","caa5e1a06455cb06":"7QSbU","1bf658bbe8a471ab":"3MdpW","b473233ce8bf904b":"agPJ2"}],"ggW0B":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        past: "{{count}} \u10EC\u10D0\u10DB\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10D8 \u10EE\u10DC\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10EC\u10D0\u10DB\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10D8",
        future: "{{count}} \u10EC\u10D0\u10DB\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10E8\u10D8"
    },
    xSeconds: {
        past: "{{count}} \u10EC\u10D0\u10DB\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10EC\u10D0\u10DB\u10D8",
        future: "{{count}} \u10EC\u10D0\u10DB\u10E8\u10D8"
    },
    halfAMinute: {
        past: "\u10DC\u10D0\u10EE\u10D4\u10D5\u10D0\u10E0\u10D8 \u10EC\u10E3\u10D7\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "\u10DC\u10D0\u10EE\u10D4\u10D5\u10D0\u10E0\u10D8 \u10EC\u10E3\u10D7\u10D8",
        future: "\u10DC\u10D0\u10EE\u10D4\u10D5\u10D0\u10E0\u10D8 \u10EC\u10E3\u10D7\u10E8\u10D8"
    },
    lessThanXMinutes: {
        past: "{{count}} \u10EC\u10E3\u10D7\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10D8 \u10EE\u10DC\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10EC\u10E3\u10D7\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10D8",
        future: "{{count}} \u10EC\u10E3\u10D7\u10D6\u10D4 \u10DC\u10D0\u10D9\u10DA\u10D4\u10D1\u10E8\u10D8"
    },
    xMinutes: {
        past: "{{count}} \u10EC\u10E3\u10D7\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10EC\u10E3\u10D7\u10D8",
        future: "{{count}} \u10EC\u10E3\u10D7\u10E8\u10D8"
    },
    aboutXHours: {
        past: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10E1\u10D0\u10D0\u10D7\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10E1\u10D0\u10D0\u10D7\u10D8",
        future: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10E1\u10D0\u10D0\u10D7\u10E8\u10D8"
    },
    xHours: {
        past: "{{count}} \u10E1\u10D0\u10D0\u10D7\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10E1\u10D0\u10D0\u10D7\u10D8",
        future: "{{count}} \u10E1\u10D0\u10D0\u10D7\u10E8\u10D8"
    },
    xDays: {
        past: "{{count}} \u10D3\u10E6\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10D3\u10E6\u10D4",
        future: "{{count}} \u10D3\u10E6\u10D4\u10E8\u10D8"
    },
    aboutXWeeks: {
        past: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D9\u10D5\u10D8\u10E0\u10D0\u10E1 \u10EC\u10D8\u10DC",
        present: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D9\u10D5\u10D8\u10E0\u10D0",
        future: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D9\u10D5\u10D8\u10E0\u10D0\u10E8\u10D8"
    },
    xWeeks: {
        past: "{{count}} \u10D9\u10D5\u10D8\u10E0\u10D0\u10E1 \u10D9\u10D5\u10D8\u10E0\u10D0",
        present: "{{count}} \u10D9\u10D5\u10D8\u10E0\u10D0",
        future: "{{count}} \u10D9\u10D5\u10D8\u10E0\u10D0\u10E8\u10D8"
    },
    aboutXMonths: {
        past: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D7\u10D5\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D7\u10D5\u10D4",
        future: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10D7\u10D5\u10D4\u10E8\u10D8"
    },
    xMonths: {
        past: "{{count}} \u10D7\u10D5\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10D7\u10D5\u10D4",
        future: "{{count}} \u10D7\u10D5\u10D4\u10E8\u10D8"
    },
    aboutXYears: {
        past: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10EC\u10DA\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10EC\u10D4\u10DA\u10D8",
        future: "\u10D3\u10D0\u10D0\u10EE\u10DA\u10DD\u10D4\u10D1\u10D8\u10D7 {{count}} \u10EC\u10D4\u10DA\u10E8\u10D8"
    },
    xYears: {
        past: "{{count}} \u10EC\u10DA\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10EC\u10D4\u10DA\u10D8",
        future: "{{count}} \u10EC\u10D4\u10DA\u10E8\u10D8"
    },
    overXYears: {
        past: "{{count}} \u10EC\u10D4\u10DA\u10D6\u10D4 \u10DB\u10D4\u10E2\u10D8 \u10EE\u10DC\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "{{count}} \u10EC\u10D4\u10DA\u10D6\u10D4 \u10DB\u10D4\u10E2\u10D8",
        future: "{{count}} \u10EC\u10D4\u10DA\u10D6\u10D4 \u10DB\u10D4\u10E2\u10D8 \u10EE\u10DC\u10D8\u10E1 \u10E8\u10D4\u10DB\u10D3\u10D4\u10D2"
    },
    almostXYears: {
        past: "\u10D7\u10D8\u10D7\u10E5\u10DB\u10D8\u10E1 {{count}} \u10EC\u10DA\u10D8\u10E1 \u10EC\u10D8\u10DC",
        present: "\u10D7\u10D8\u10D7\u10E5\u10DB\u10D8\u10E1 {{count}} \u10EC\u10D4\u10DA\u10D8",
        future: "\u10D7\u10D8\u10D7\u10E5\u10DB\u10D8\u10E1 {{count}} \u10EC\u10D4\u10DA\u10E8\u10D8"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (options?.addSuffix && options.comparison && options.comparison > 0) result = tokenValue.future.replace("{{count}}", String(count));
    else if (options?.addSuffix) result = tokenValue.past.replace("{{count}}", String(count));
    else result = tokenValue.present.replace("{{count}}", String(count));
    return result;
};
exports.formatDistance = formatDistance;

},{}],"5sv62":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("19b914da15761aa5");
const dateFormats = {
    full: "EEEE, do MMMM, y",
    long: "do, MMMM, y",
    medium: "d, MMM, y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}'-\u10D6\u10D4'",
    long: "{{date}} {{time}}'-\u10D6\u10D4'",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"19b914da15761aa5":"6OYyu"}],"7QSbU":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u10EC\u10D8\u10DC\u10D0' eeee p'-\u10D6\u10D4'",
    yesterday: "'\u10D2\u10E3\u10E8\u10D8\u10DC' p'-\u10D6\u10D4'",
    today: "'\u10D3\u10E6\u10D4\u10E1' p'-\u10D6\u10D4'",
    tomorrow: "'\u10EE\u10D5\u10D0\u10DA' p'-\u10D6\u10D4'",
    nextWeek: "'\u10E8\u10D4\u10DB\u10D3\u10D4\u10D2\u10D8' eeee p'-\u10D6\u10D4'",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"3MdpW":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("18e120c89293a9d1");
const eraValues = {
    narrow: [
        "\u10E9.\u10EC-\u10DB\u10D3\u10D4",
        "\u10E9.\u10EC"
    ],
    abbreviated: [
        "\u10E9\u10D5.\u10EC-\u10DB\u10D3\u10D4",
        "\u10E9\u10D5.\u10EC"
    ],
    wide: [
        "\u10E9\u10D5\u10D4\u10DC\u10E1 \u10EC\u10D4\u10DA\u10D7\u10D0\u10E6\u10E0\u10D8\u10EA\u10EE\u10D5\u10D0\u10DB\u10D3\u10D4",
        "\u10E9\u10D5\u10D4\u10DC\u10D8 \u10EC\u10D4\u10DA\u10D7\u10D0\u10E6\u10E0\u10D8\u10EA\u10EE\u10D5\u10D8\u10D7"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u10DA\u10D8 \u10D9\u10D5",
        "2-\u10D4 \u10D9\u10D5",
        "3-\u10D4 \u10D9\u10D5",
        "4-\u10D4 \u10D9\u10D5"
    ],
    wide: [
        "1-\u10DA\u10D8 \u10D9\u10D5\u10D0\u10E0\u10E2\u10D0\u10DA\u10D8",
        "2-\u10D4 \u10D9\u10D5\u10D0\u10E0\u10E2\u10D0\u10DA\u10D8",
        "3-\u10D4 \u10D9\u10D5\u10D0\u10E0\u10E2\u10D0\u10DA\u10D8",
        "4-\u10D4 \u10D9\u10D5\u10D0\u10E0\u10E2\u10D0\u10DA\u10D8"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "\u10D8\u10D0",
        "\u10D7\u10D4",
        "\u10DB\u10D0",
        "\u10D0\u10DE",
        "\u10DB\u10E1",
        "\u10D5\u10DC",
        "\u10D5\u10DA",
        "\u10D0\u10D2",
        "\u10E1\u10D4",
        "\u10DD\u10E5",
        "\u10DC\u10DD",
        "\u10D3\u10D4"
    ],
    abbreviated: [
        "\u10D8\u10D0\u10DC",
        "\u10D7\u10D4\u10D1",
        "\u10DB\u10D0\u10E0",
        "\u10D0\u10DE\u10E0",
        "\u10DB\u10D0\u10D8",
        "\u10D8\u10D5\u10DC",
        "\u10D8\u10D5\u10DA",
        "\u10D0\u10D2\u10D5",
        "\u10E1\u10D4\u10E5",
        "\u10DD\u10E5\u10E2",
        "\u10DC\u10DD\u10D4",
        "\u10D3\u10D4\u10D9"
    ],
    wide: [
        "\u10D8\u10D0\u10DC\u10D5\u10D0\u10E0\u10D8",
        "\u10D7\u10D4\u10D1\u10D4\u10E0\u10D5\u10D0\u10DA\u10D8",
        "\u10DB\u10D0\u10E0\u10E2\u10D8",
        "\u10D0\u10DE\u10E0\u10D8\u10DA\u10D8",
        "\u10DB\u10D0\u10D8\u10E1\u10D8",
        "\u10D8\u10D5\u10DC\u10D8\u10E1\u10D8",
        "\u10D8\u10D5\u10DA\u10D8\u10E1\u10D8",
        "\u10D0\u10D2\u10D5\u10D8\u10E1\u10E2\u10DD",
        "\u10E1\u10D4\u10E5\u10E2\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8",
        "\u10DD\u10E5\u10E2\u10DD\u10DB\u10D1\u10D4\u10E0\u10D8",
        "\u10DC\u10DD\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8",
        "\u10D3\u10D4\u10D9\u10D4\u10DB\u10D1\u10D4\u10E0\u10D8"
    ]
};
const dayValues = {
    narrow: [
        "\u10D9\u10D5",
        "\u10DD\u10E0",
        "\u10E1\u10D0",
        "\u10DD\u10D7",
        "\u10EE\u10E3",
        "\u10DE\u10D0",
        "\u10E8\u10D0"
    ],
    short: [
        "\u10D9\u10D5\u10D8",
        "\u10DD\u10E0\u10E8",
        "\u10E1\u10D0\u10DB",
        "\u10DD\u10D7\u10EE",
        "\u10EE\u10E3\u10D7",
        "\u10DE\u10D0\u10E0",
        "\u10E8\u10D0\u10D1"
    ],
    abbreviated: [
        "\u10D9\u10D5\u10D8",
        "\u10DD\u10E0\u10E8",
        "\u10E1\u10D0\u10DB",
        "\u10DD\u10D7\u10EE",
        "\u10EE\u10E3\u10D7",
        "\u10DE\u10D0\u10E0",
        "\u10E8\u10D0\u10D1"
    ],
    wide: [
        "\u10D9\u10D5\u10D8\u10E0\u10D0",
        "\u10DD\u10E0\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8",
        "\u10E1\u10D0\u10DB\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8",
        "\u10DD\u10D7\u10EE\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8",
        "\u10EE\u10E3\u10D7\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8",
        "\u10DE\u10D0\u10E0\u10D0\u10E1\u10D9\u10D4\u10D5\u10D8",
        "\u10E8\u10D0\u10D1\u10D0\u10D7\u10D8"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D4",
        noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4",
        morning: "\u10D3\u10D8\u10DA\u10D0",
        afternoon: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
        evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
        night: "\u10E6\u10D0\u10DB\u10D4"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D4",
        noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4",
        morning: "\u10D3\u10D8\u10DA\u10D0",
        afternoon: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
        evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
        night: "\u10E6\u10D0\u10DB\u10D4"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D4",
        noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4",
        morning: "\u10D3\u10D8\u10DA\u10D0",
        afternoon: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
        evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD",
        night: "\u10E6\u10D0\u10DB\u10D4"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D8\u10D7",
        noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D8\u10E1\u10D0\u10E1",
        morning: "\u10D3\u10D8\u10DA\u10D8\u10D7",
        afternoon: "\u10DC\u10D0\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4\u10D5\u10E1",
        evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD\u10E1",
        night: "\u10E6\u10D0\u10DB\u10D8\u10D7"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D8\u10D7",
        noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D8\u10E1\u10D0\u10E1",
        morning: "\u10D3\u10D8\u10DA\u10D8\u10D7",
        afternoon: "\u10DC\u10D0\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4\u10D5\u10E1",
        evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD\u10E1",
        night: "\u10E6\u10D0\u10DB\u10D8\u10D7"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "\u10E8\u10E3\u10D0\u10E6\u10D0\u10DB\u10D8\u10D7",
        noon: "\u10E8\u10E3\u10D0\u10D3\u10E6\u10D8\u10E1\u10D0\u10E1",
        morning: "\u10D3\u10D8\u10DA\u10D8\u10D7",
        afternoon: "\u10DC\u10D0\u10E8\u10E3\u10D0\u10D3\u10E6\u10D4\u10D5\u10E1",
        evening: "\u10E1\u10D0\u10E6\u10D0\u10DB\u10DD\u10E1",
        night: "\u10E6\u10D0\u10DB\u10D8\u10D7"
    }
};
const ordinalNumber = (dirtyNumber)=>{
    const number = Number(dirtyNumber);
    if (number === 1) return number + "-\u10DA\u10D8";
    return number + "-\u10D4";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"18e120c89293a9d1":"fGq1u"}],"agPJ2":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("bcfb2725c3f7906d");
var _index2 = require("5e98544e0ff052d2");
const matchOrdinalNumberPattern = /^(\d+)(-ლი|-ე)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ჩვ?\.წ)/i,
    abbreviated: /^(ჩვ?\.წ)/i,
    wide: /^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე|ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i
};
const parseEraPatterns = {
    any: [
        /^(ჩვენს წელთაღრიცხვამდე|ქრისტეშობამდე)/i,
        /^(ჩვენი წელთაღრიცხვით|ქრისტეშობიდან)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]-(ლი|ე)? კვ/i,
    wide: /^[1234]-(ლი|ე)? კვარტალი/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    any: /^(ია|თე|მა|აპ|მს|ვნ|ვლ|აგ|სე|ოქ|ნო|დე)/i
};
const parseMonthPatterns = {
    any: [
        /^ია/i,
        /^თ/i,
        /^მარ/i,
        /^აპ/i,
        /^მაი/i,
        /^ი?ვნ/i,
        /^ი?ვლ/i,
        /^აგ/i,
        /^ს/i,
        /^ო/i,
        /^ნ/i,
        /^დ/i
    ]
};
const matchDayPatterns = {
    narrow: /^(კვ|ორ|სა|ოთ|ხუ|პა|შა)/i,
    short: /^(კვი|ორშ|სამ|ოთხ|ხუთ|პარ|შაბ)/i,
    wide: /^(კვირა|ორშაბათი|სამშაბათი|ოთხშაბათი|ხუთშაბათი|პარასკევი|შაბათი)/i
};
const parseDayPatterns = {
    any: [
        /^კვ/i,
        /^ორ/i,
        /^სა/i,
        /^ოთ/i,
        /^ხუ/i,
        /^პა/i,
        /^შა/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^([ap]\.?\s?m\.?|შუაღ|დილ)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^შუაღ/i,
        noon: /^შუადღ/i,
        morning: /^დილ/i,
        afternoon: /ნაშუადღევს/i,
        evening: /საღამო/i,
        night: /ღამ/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"bcfb2725c3f7906d":"15lWd","5e98544e0ff052d2":"kWqg8"}],"4CdGo":[function(require,module,exports) {
"use strict";
exports.kk = void 0;
var _index = require("8608e72de8c3ec0b");
var _index2 = require("bd08ab62f76d6db1");
var _index3 = require("8d61ccbc03a8b3cd");
var _index4 = require("26bd9c54f5ddb795");
var _index5 = require("463b6a171595554");
/**
 * @category Locales
 * @summary Kazakh locale.
 * @language Kazakh
 * @iso-639-2 kaz
 * @author Nikita Bayev [@drugoi](https://github.com/drugoi)
 */ const kk = exports.kk = {
    code: "kk",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"8608e72de8c3ec0b":"3KkWi","bd08ab62f76d6db1":"9BWmP","8d61ccbc03a8b3cd":"dSPjN","26bd9c54f5ddb795":"jrkoo","463b6a171595554":"kUeuz"}],"3KkWi":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        regular: {
            one: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u0430\u0437",
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u0430\u0437",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u0430\u0437",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u0430\u0437"
        },
        future: {
            one: "\u0431\u0456\u0440 \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    },
    xSeconds: {
        regular: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        past: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0431\u04B1\u0440\u044B\u043D",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0431\u04B1\u0440\u044B\u043D",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0431\u04B1\u0440\u044B\u043D"
        },
        future: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    },
    halfAMinute: (options)=>{
        if (options?.addSuffix) {
            if (options.comparison && options.comparison > 0) return "\u0436\u0430\u0440\u0442\u044B \u043C\u0438\u043D\u0443\u0442 \u0456\u0448\u0456\u043D\u0434\u0435";
            else return "\u0436\u0430\u0440\u0442\u044B \u043C\u0438\u043D\u0443\u0442 \u0431\u04B1\u0440\u044B\u043D";
        }
        return "\u0436\u0430\u0440\u0442\u044B \u043C\u0438\u043D\u0443\u0442";
    },
    lessThanXMinutes: {
        regular: {
            one: "1 \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u0430\u0437",
            singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u0430\u0437",
            singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u0430\u0437",
            pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u0430\u0437"
        },
        future: {
            one: "\u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u043C ",
            singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u043C",
            singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u043C",
            pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u043C"
        }
    },
    xMinutes: {
        regular: {
            singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442",
            singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442",
            pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442"
        },
        past: {
            singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u0431\u04B1\u0440\u044B\u043D",
            singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u0431\u04B1\u0440\u044B\u043D",
            pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u0431\u04B1\u0440\u044B\u043D"
        },
        future: {
            singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    },
    aboutXHours: {
        regular: {
            singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442",
            singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442",
            pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442"
        },
        future: {
            singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0441\u0430\u0493\u0430\u0442\u0442\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    },
    xHours: {
        regular: {
            singularNominative: "{{count}} \u0441\u0430\u0493\u0430\u0442",
            singularGenitive: "{{count}} \u0441\u0430\u0493\u0430\u0442",
            pluralGenitive: "{{count}} \u0441\u0430\u0493\u0430\u0442"
        }
    },
    xDays: {
        regular: {
            singularNominative: "{{count}} \u043A\u04AF\u043D",
            singularGenitive: "{{count}} \u043A\u04AF\u043D",
            pluralGenitive: "{{count}} \u043A\u04AF\u043D"
        },
        future: {
            singularNominative: "{{count}} \u043A\u04AF\u043D\u043D\u0435\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "{{count}} \u043A\u04AF\u043D\u043D\u0435\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "{{count}} \u043A\u04AF\u043D\u043D\u0435\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    },
    aboutXWeeks: {
        type: "weeks",
        one: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D 1 \u0430\u043F\u0442\u0430",
        other: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u043F\u0442\u0430"
    },
    xWeeks: {
        type: "weeks",
        one: "1 \u0430\u043F\u0442\u0430",
        other: "{{count}} \u0430\u043F\u0442\u0430"
    },
    aboutXMonths: {
        regular: {
            singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439",
            singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439",
            pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439"
        },
        future: {
            singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0430\u0439\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    },
    xMonths: {
        regular: {
            singularNominative: "{{count}} \u0430\u0439",
            singularGenitive: "{{count}} \u0430\u0439",
            pluralGenitive: "{{count}} \u0430\u0439"
        }
    },
    aboutXYears: {
        regular: {
            singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B",
            singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B",
            pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B"
        },
        future: {
            singularNominative: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "\u0448\u0430\u043C\u0430\u043C\u0435\u043D {{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    },
    xYears: {
        regular: {
            singularNominative: "{{count}} \u0436\u044B\u043B",
            singularGenitive: "{{count}} \u0436\u044B\u043B",
            pluralGenitive: "{{count}} \u0436\u044B\u043B"
        },
        future: {
            singularNominative: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    },
    overXYears: {
        regular: {
            singularNominative: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C",
            singularGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C",
            pluralGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C"
        },
        future: {
            singularNominative: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C",
            singularGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C",
            pluralGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u0430\u0441\u0442\u0430\u043C"
        }
    },
    almostXYears: {
        regular: {
            singularNominative: "{{count}} \u0436\u044B\u043B\u0493\u0430 \u0436\u0430\u049B\u044B\u043D",
            singularGenitive: "{{count}} \u0436\u044B\u043B\u0493\u0430 \u0436\u0430\u049B\u044B\u043D",
            pluralGenitive: "{{count}} \u0436\u044B\u043B\u0493\u0430 \u0436\u0430\u049B\u044B\u043D"
        },
        future: {
            singularNominative: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            singularGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D",
            pluralGenitive: "{{count}} \u0436\u044B\u043B\u0434\u0430\u043D \u043A\u0435\u0439\u0456\u043D"
        }
    }
};
function declension(scheme, count) {
    // scheme for count=1 exists
    if (scheme.one && count === 1) return scheme.one;
    const rem10 = count % 10;
    const rem100 = count % 100;
    // 1, 21, 31, ...
    if (rem10 === 1 && rem100 !== 11) return scheme.singularNominative.replace("{{count}}", String(count));
    else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) return scheme.singularGenitive.replace("{{count}}", String(count));
    else return scheme.pluralGenitive.replace("{{count}}", String(count));
}
const formatDistance = (token, count, options)=>{
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "function") return tokenValue(options);
    if (tokenValue.type === "weeks") return count === 1 ? tokenValue.one : tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) {
            if (tokenValue.future) return declension(tokenValue.future, count);
            else return declension(tokenValue.regular, count) + " \u043A\u0435\u0439\u0456\u043D";
        } else {
            if (tokenValue.past) return declension(tokenValue.past, count);
            else return declension(tokenValue.regular, count) + " \u0431\u04B1\u0440\u044B\u043D";
        }
    } else return declension(tokenValue.regular, count);
};
exports.formatDistance = formatDistance;

},{}],"9BWmP":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("bfd481c5805feb04");
const dateFormats = {
    full: "EEEE, do MMMM y '\u0436.'",
    long: "do MMMM y '\u0436.'",
    medium: "d MMM y '\u0436.'",
    short: "dd.MM.yyyy"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    any: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"bfd481c5805feb04":"6OYyu"}],"dSPjN":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("279f86dda6a42ea9");
const accusativeWeekdays = [
    "\u0436\u0435\u043A\u0441\u0435\u043D\u0431\u0456\u0434\u0435",
    "\u0434\u04AF\u0439\u0441\u0435\u043D\u0431\u0456\u0434\u0435",
    "\u0441\u0435\u0439\u0441\u0435\u043D\u0431\u0456\u0434\u0435",
    "\u0441\u04D9\u0440\u0441\u0435\u043D\u0431\u0456\u0434\u0435",
    "\u0431\u0435\u0439\u0441\u0435\u043D\u0431\u0456\u0434\u0435",
    "\u0436\u04B1\u043C\u0430\u0434\u0430",
    "\u0441\u0435\u043D\u0431\u0456\u0434\u0435"
];
function lastWeek(day) {
    const weekday = accusativeWeekdays[day];
    return "'\u04E9\u0442\u043A\u0435\u043D " + weekday + " \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'";
}
function thisWeek(day) {
    const weekday = accusativeWeekdays[day];
    return "'" + weekday + " \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'";
}
function nextWeek(day) {
    const weekday = accusativeWeekdays[day];
    return "'\u043A\u0435\u043B\u0435\u0441\u0456 " + weekday + " \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'";
}
const formatRelativeLocale = {
    lastWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return lastWeek(day);
    },
    yesterday: "'\u043A\u0435\u0448\u0435 \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'",
    today: "'\u0431\u04AF\u0433\u0456\u043D \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'",
    tomorrow: "'\u0435\u0440\u0442\u0435\u04A3 \u0441\u0430\u0493\u0430\u0442' p'-\u0434\u0435'",
    nextWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return nextWeek(day);
    },
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"279f86dda6a42ea9":"16SmB"}],"jrkoo":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("385acf5616627e88");
const eraValues = {
    narrow: [
        "\u0431.\u0437.\u0434.",
        "\u0431.\u0437."
    ],
    abbreviated: [
        "\u0431.\u0437.\u0434.",
        "\u0431.\u0437."
    ],
    wide: [
        "\u0431\u0456\u0437\u0434\u0456\u04A3 \u0437\u0430\u043C\u0430\u043D\u044B\u043C\u044B\u0437\u0493\u0430 \u0434\u0435\u0439\u0456\u043D",
        "\u0431\u0456\u0437\u0434\u0456\u04A3 \u0437\u0430\u043C\u0430\u043D\u044B\u043C\u044B\u0437"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u0448\u0456 \u0442\u043E\u049B.",
        "2-\u0448\u0456 \u0442\u043E\u049B.",
        "3-\u0448\u0456 \u0442\u043E\u049B.",
        "4-\u0448\u0456 \u0442\u043E\u049B."
    ],
    wide: [
        "1-\u0448\u0456 \u0442\u043E\u049B\u0441\u0430\u043D",
        "2-\u0448\u0456 \u0442\u043E\u049B\u0441\u0430\u043D",
        "3-\u0448\u0456 \u0442\u043E\u049B\u0441\u0430\u043D",
        "4-\u0448\u0456 \u0442\u043E\u049B\u0441\u0430\u043D"
    ]
};
const monthValues = {
    narrow: [
        "\u049A",
        "\u0410",
        "\u041D",
        "\u0421",
        "\u041C",
        "\u041C",
        "\u0428",
        "\u0422",
        "\u049A",
        "\u049A",
        "\u049A",
        "\u0416"
    ],
    abbreviated: [
        "\u049B\u0430\u04A3",
        "\u0430\u049B\u043F",
        "\u043D\u0430\u0443",
        "\u0441\u04D9\u0443",
        "\u043C\u0430\u043C",
        "\u043C\u0430\u0443",
        "\u0448\u0456\u043B",
        "\u0442\u0430\u043C",
        "\u049B\u044B\u0440",
        "\u049B\u0430\u0437",
        "\u049B\u0430\u0440",
        "\u0436\u0435\u043B"
    ],
    wide: [
        "\u049B\u0430\u04A3\u0442\u0430\u0440",
        "\u0430\u049B\u043F\u0430\u043D",
        "\u043D\u0430\u0443\u0440\u044B\u0437",
        "\u0441\u04D9\u0443\u0456\u0440",
        "\u043C\u0430\u043C\u044B\u0440",
        "\u043C\u0430\u0443\u0441\u044B\u043C",
        "\u0448\u0456\u043B\u0434\u0435",
        "\u0442\u0430\u043C\u044B\u0437",
        "\u049B\u044B\u0440\u043A\u04AF\u0439\u0435\u043A",
        "\u049B\u0430\u0437\u0430\u043D",
        "\u049B\u0430\u0440\u0430\u0448\u0430",
        "\u0436\u0435\u043B\u0442\u043E\u049B\u0441\u0430\u043D"
    ]
};
const formattingMonthValues = {
    narrow: [
        "\u049A",
        "\u0410",
        "\u041D",
        "\u0421",
        "\u041C",
        "\u041C",
        "\u0428",
        "\u0422",
        "\u049A",
        "\u049A",
        "\u049A",
        "\u0416"
    ],
    abbreviated: [
        "\u049B\u0430\u04A3",
        "\u0430\u049B\u043F",
        "\u043D\u0430\u0443",
        "\u0441\u04D9\u0443",
        "\u043C\u0430\u043C",
        "\u043C\u0430\u0443",
        "\u0448\u0456\u043B",
        "\u0442\u0430\u043C",
        "\u049B\u044B\u0440",
        "\u049B\u0430\u0437",
        "\u049B\u0430\u0440",
        "\u0436\u0435\u043B"
    ],
    wide: [
        "\u049B\u0430\u04A3\u0442\u0430\u0440",
        "\u0430\u049B\u043F\u0430\u043D",
        "\u043D\u0430\u0443\u0440\u044B\u0437",
        "\u0441\u04D9\u0443\u0456\u0440",
        "\u043C\u0430\u043C\u044B\u0440",
        "\u043C\u0430\u0443\u0441\u044B\u043C",
        "\u0448\u0456\u043B\u0434\u0435",
        "\u0442\u0430\u043C\u044B\u0437",
        "\u049B\u044B\u0440\u043A\u04AF\u0439\u0435\u043A",
        "\u049B\u0430\u0437\u0430\u043D",
        "\u049B\u0430\u0440\u0430\u0448\u0430",
        "\u0436\u0435\u043B\u0442\u043E\u049B\u0441\u0430\u043D"
    ]
};
const dayValues = {
    narrow: [
        "\u0416",
        "\u0414",
        "\u0421",
        "\u0421",
        "\u0411",
        "\u0416",
        "\u0421"
    ],
    short: [
        "\u0436\u0441",
        "\u0434\u0441",
        "\u0441\u0441",
        "\u0441\u0440",
        "\u0431\u0441",
        "\u0436\u043C",
        "\u0441\u0431"
    ],
    abbreviated: [
        "\u0436\u0441",
        "\u0434\u0441",
        "\u0441\u0441",
        "\u0441\u0440",
        "\u0431\u0441",
        "\u0436\u043C",
        "\u0441\u0431"
    ],
    wide: [
        "\u0436\u0435\u043A\u0441\u0435\u043D\u0431\u0456",
        "\u0434\u04AF\u0439\u0441\u0435\u043D\u0431\u0456",
        "\u0441\u0435\u0439\u0441\u0435\u043D\u0431\u0456",
        "\u0441\u04D9\u0440\u0441\u0435\u043D\u0431\u0456",
        "\u0431\u0435\u0439\u0441\u0435\u043D\u0431\u0456",
        "\u0436\u04B1\u043C\u0430",
        "\u0441\u0435\u043D\u0431\u0456"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0422\u0414",
        pm: "\u0422\u041A",
        midnight: "\u0442\u04AF\u043D \u043E\u0440\u0442\u0430\u0441\u044B",
        noon: "\u0442\u04AF\u0441",
        morning: "\u0442\u0430\u04A3",
        afternoon: "\u043A\u04AF\u043D\u0434\u0456\u0437",
        evening: "\u043A\u0435\u0448",
        night: "\u0442\u04AF\u043D"
    },
    wide: {
        am: "\u0422\u0414",
        pm: "\u0422\u041A",
        midnight: "\u0442\u04AF\u043D \u043E\u0440\u0442\u0430\u0441\u044B",
        noon: "\u0442\u04AF\u0441",
        morning: "\u0442\u0430\u04A3",
        afternoon: "\u043A\u04AF\u043D\u0434\u0456\u0437",
        evening: "\u043A\u0435\u0448",
        night: "\u0442\u04AF\u043D"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0422\u0414",
        pm: "\u0422\u041A",
        midnight: "\u0442\u04AF\u043D \u043E\u0440\u0442\u0430\u0441\u044B\u043D\u0434\u0430",
        noon: "\u0442\u04AF\u0441",
        morning: "\u0442\u0430\u04A3",
        afternoon: "\u043A\u04AF\u043D",
        evening: "\u043A\u0435\u0448",
        night: "\u0442\u04AF\u043D"
    },
    wide: {
        am: "\u0422\u0414",
        pm: "\u0422\u041A",
        midnight: "\u0442\u04AF\u043D \u043E\u0440\u0442\u0430\u0441\u044B\u043D\u0434\u0430",
        noon: "\u0442\u04AF\u0441\u0442\u0435",
        morning: "\u0442\u0430\u04A3\u0435\u0440\u0442\u0435\u04A3",
        afternoon: "\u043A\u04AF\u043D\u0434\u0456\u0437",
        evening: "\u043A\u0435\u0448\u0442\u0435",
        night: "\u0442\u04AF\u043D\u0434\u0435"
    }
};
const suffixes = {
    0: "-\u0448\u0456",
    1: "-\u0448\u0456",
    2: "-\u0448\u0456",
    3: "-\u0448\u0456",
    4: "-\u0448\u0456",
    5: "-\u0448\u0456",
    6: "-\u0448\u044B",
    7: "-\u0448\u0456",
    8: "-\u0448\u0456",
    9: "-\u0448\u044B",
    10: "-\u0448\u044B",
    20: "-\u0448\u044B",
    30: "-\u0448\u044B",
    40: "-\u0448\u044B",
    50: "-\u0448\u0456",
    60: "-\u0448\u044B",
    70: "-\u0448\u0456",
    80: "-\u0448\u0456",
    90: "-\u0448\u044B",
    100: "-\u0448\u0456"
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    const mod10 = number % 10;
    const b = number >= 100 ? 100 : null;
    const suffix = suffixes[number] || suffixes[mod10] || b && suffixes[b] || "";
    return number + suffix;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"385acf5616627e88":"fGq1u"}],"kUeuz":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("397de4519eca6637");
var _index2 = require("ebe797fbc5127e93");
const matchOrdinalNumberPattern = /^(\d+)(-?(ші|шы))?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^((б )?з\.?\s?д\.?)/i,
    abbreviated: /^((б )?з\.?\s?д\.?)/i,
    wide: /^(біздің заманымызға дейін|біздің заманымыз|біздің заманымыздан)/i
};
const parseEraPatterns = {
    any: [
        /^б/i,
        /^з/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234](-?ші)? тоқ.?/i,
    wide: /^[1234](-?ші)? тоқсан/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(қ|а|н|с|м|мау|ш|т|қыр|қаз|қар|ж)/i,
    abbreviated: /^(қаң|ақп|нау|сәу|мам|мау|шіл|там|қыр|қаз|қар|жел)/i,
    wide: /^(қаңтар|ақпан|наурыз|сәуір|мамыр|маусым|шілде|тамыз|қыркүйек|қазан|қараша|желтоқсан)/i
};
const parseMonthPatterns = {
    narrow: [
        /^қ/i,
        /^а/i,
        /^н/i,
        /^с/i,
        /^м/i,
        /^м/i,
        /^ш/i,
        /^т/i,
        /^қ/i,
        /^қ/i,
        /^қ/i,
        /^ж/i
    ],
    abbreviated: [
        /^қаң/i,
        /^ақп/i,
        /^нау/i,
        /^сәу/i,
        /^мам/i,
        /^мау/i,
        /^шіл/i,
        /^там/i,
        /^қыр/i,
        /^қаз/i,
        /^қар/i,
        /^жел/i
    ],
    any: [
        /^қ/i,
        /^а/i,
        /^н/i,
        /^с/i,
        /^м/i,
        /^м/i,
        /^ш/i,
        /^т/i,
        /^қ/i,
        /^қ/i,
        /^қ/i,
        /^ж/i
    ]
};
const matchDayPatterns = {
    narrow: /^(ж|д|с|с|б|ж|с)/i,
    short: /^(жс|дс|сс|ср|бс|жм|сб)/i,
    wide: /^(жексенбі|дүйсенбі|сейсенбі|сәрсенбі|бейсенбі|жұма|сенбі)/i
};
const parseDayPatterns = {
    narrow: [
        /^ж/i,
        /^д/i,
        /^с/i,
        /^с/i,
        /^б/i,
        /^ж/i,
        /^с/i
    ],
    short: [
        /^жс/i,
        /^дс/i,
        /^сс/i,
        /^ср/i,
        /^бс/i,
        /^жм/i,
        /^сб/i
    ],
    any: [
        /^ж[ек]/i,
        /^д[үй]/i,
        /^сe[й]/i,
        /^сә[р]/i,
        /^б[ей]/i,
        /^ж[ұм]/i,
        /^се[н]/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
    wide: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i,
    any: /^Т\.?\s?[ДК]\.?|түн ортасында|((түсте|таңертең|таңда|таңертең|таңмен|таң|күндіз|күн|кеште|кеш|түнде|түн)\.?)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ТД/i,
        pm: /^ТК/i,
        midnight: /^түн орта/i,
        noon: /^күндіз/i,
        morning: /таң/i,
        afternoon: /түс/i,
        evening: /кеш/i,
        night: /түн/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"397de4519eca6637":"15lWd","ebe797fbc5127e93":"kWqg8"}],"b19vn":[function(require,module,exports) {
"use strict";
exports.km = void 0;
var _index = require("165ae5592db2d4f1");
var _index2 = require("125060355252e80d");
var _index3 = require("2fd438bbe4341c40");
var _index4 = require("5f761cca8a581e03");
var _index5 = require("daa24022fb95e693");
/**
 * @category Locales
 * @summary Khmer locale (Cambodian).
 * @language Khmer
 * @iso-639-2 khm
 * @author Seanghay Yath [@seanghay](https://github.com/seanghay)
 */ const km = exports.km = {
    code: "km",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"165ae5592db2d4f1":"hbnKK","125060355252e80d":"6ad6R","2fd438bbe4341c40":"asKaO","5f761cca8a581e03":"gsZTL","daa24022fb95e693":"jJQMX"}],"hbnKK":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: "\u178F\u17B7\u1785\u1787\u17B6\u1784 {{count}} \u179C\u17B7\u1793\u17B6\u1791\u17B8",
    xSeconds: "{{count}} \u179C\u17B7\u1793\u17B6\u1791\u17B8",
    halfAMinute: "\u1780\u1793\u17D2\u179B\u17C7\u1793\u17B6\u1791\u17B8",
    lessThanXMinutes: "\u178F\u17B7\u1785\u1787\u17B6\u1784 {{count}} \u1793\u17B6\u1791\u17B8",
    xMinutes: "{{count}} \u1793\u17B6\u1791\u17B8",
    aboutXHours: "\u1794\u17D2\u179A\u17A0\u17C2\u179B {{count}} \u1798\u17C9\u17C4\u1784",
    xHours: "{{count}} \u1798\u17C9\u17C4\u1784",
    xDays: "{{count}} \u1790\u17D2\u1784\u17C3",
    aboutXWeeks: "\u1794\u17D2\u179A\u17A0\u17C2\u179B {{count}} \u179F\u1794\u17D2\u178F\u17B6\u17A0\u17CD",
    xWeeks: "{{count}} \u179F\u1794\u17D2\u178F\u17B6\u17A0\u17CD",
    aboutXMonths: "\u1794\u17D2\u179A\u17A0\u17C2\u179B {{count}} \u1781\u17C2",
    xMonths: "{{count}} \u1781\u17C2",
    aboutXYears: "\u1794\u17D2\u179A\u17A0\u17C2\u179B {{count}} \u1786\u17D2\u1793\u17B6\u17C6",
    xYears: "{{count}} \u1786\u17D2\u1793\u17B6\u17C6",
    overXYears: "\u1787\u17B6\u1784 {{count}} \u1786\u17D2\u1793\u17B6\u17C6",
    almostXYears: "\u1787\u17B7\u178F {{count}} \u1786\u17D2\u1793\u17B6\u17C6"
};
const formatDistance = (token, count, options)=>{
    const tokenValue = formatDistanceLocale[token];
    let result = tokenValue;
    if (typeof count === "number") result = result.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u1780\u17D2\u1793\u17BB\u1784\u179A\u1799\u17C8\u1796\u17C1\u179B " + result;
        else return result + "\u1798\u17BB\u1793";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"6ad6R":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("a3c830a12c160b3");
const dateFormats = {
    full: "EEEE do MMMM y",
    long: "do MMMM y",
    medium: "d MMM y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a",
    long: "h:mm:ss a",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u1798\u17C9\u17C4\u1784' {{time}}",
    long: "{{date}} '\u1798\u17C9\u17C4\u1784' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"a3c830a12c160b3":"6OYyu"}],"asKaO":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u1790\u17D2\u1784\u17C3'eeee'\u179F\u200B\u1794\u17D2\u178F\u17B6\u200B\u17A0\u17CD\u200B\u1798\u17BB\u1793\u1798\u17C9\u17C4\u1784' p",
    yesterday: "'\u1798\u17D2\u179F\u17B7\u179B\u1798\u17B7\u1789\u1793\u17C5\u1798\u17C9\u17C4\u1784' p",
    today: "'\u1790\u17D2\u1784\u17C3\u1793\u17C1\u17C7\u1798\u17C9\u17C4\u1784' p",
    tomorrow: "'\u1790\u17D2\u1784\u17C3\u179F\u17D2\u17A2\u17C2\u1780\u1798\u17C9\u17C4\u1784' p",
    nextWeek: "'\u1790\u17D2\u1784\u17C3'eeee'\u179F\u200B\u1794\u17D2\u178F\u17B6\u200B\u17A0\u17CD\u200B\u1780\u17D2\u179A\u17C4\u1799\u1798\u17C9\u17C4\u1784' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"gsZTL":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("1ff88a64c9bef60a");
const eraValues = {
    narrow: [
        "\u1798.\u1782\u179F",
        "\u1782\u179F"
    ],
    abbreviated: [
        "\u1798\u17BB\u1793\u1782.\u179F",
        "\u1782.\u179F"
    ],
    wide: [
        "\u1798\u17BB\u1793\u1782\u17D2\u179A\u17B7\u179F\u17D2\u178F\u179F\u1780\u179A\u17B6\u1787",
        "\u1793\u17C3\u1782\u17D2\u179A\u17B7\u179F\u17D2\u178F\u179F\u1780\u179A\u17B6\u1787"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "\u178F\u17D2\u179A\u17B8\u1798\u17B6\u179F\u1791\u17B8 1",
        "\u178F\u17D2\u179A\u17B8\u1798\u17B6\u179F\u1791\u17B8 2",
        "\u178F\u17D2\u179A\u17B8\u1798\u17B6\u179F\u1791\u17B8 3",
        "\u178F\u17D2\u179A\u17B8\u1798\u17B6\u179F\u1791\u17B8 4"
    ]
};
const monthValues = {
    narrow: [
        "\u1798.\u1780",
        "\u1780.\u1798",
        "\u1798\u17B7",
        "\u1798.\u179F",
        "\u17A7.\u179F",
        "\u1798.\u1790",
        "\u1780.\u178A",
        "\u179F\u17B8",
        "\u1780\u1789",
        "\u178F\u17BB",
        "\u179C\u17B7",
        "\u1792"
    ],
    abbreviated: [
        "\u1798\u1780\u179A\u17B6",
        "\u1780\u17BB\u1798\u17D2\u1797\u17C8",
        "\u1798\u17B8\u1793\u17B6",
        "\u1798\u17C1\u179F\u17B6",
        "\u17A7\u179F\u1797\u17B6",
        "\u1798\u17B7\u1790\u17BB\u1793\u17B6",
        "\u1780\u1780\u17D2\u1780\u178A\u17B6",
        "\u179F\u17B8\u17A0\u17B6",
        "\u1780\u1789\u17D2\u1789\u17B6",
        "\u178F\u17BB\u179B\u17B6",
        "\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6",
        "\u1792\u17D2\u1793\u17BC"
    ],
    wide: [
        "\u1798\u1780\u179A\u17B6",
        "\u1780\u17BB\u1798\u17D2\u1797\u17C8",
        "\u1798\u17B8\u1793\u17B6",
        "\u1798\u17C1\u179F\u17B6",
        "\u17A7\u179F\u1797\u17B6",
        "\u1798\u17B7\u1790\u17BB\u1793\u17B6",
        "\u1780\u1780\u17D2\u1780\u178A\u17B6",
        "\u179F\u17B8\u17A0\u17B6",
        "\u1780\u1789\u17D2\u1789\u17B6",
        "\u178F\u17BB\u179B\u17B6",
        "\u179C\u17B7\u1785\u17D2\u1786\u17B7\u1780\u17B6",
        "\u1792\u17D2\u1793\u17BC"
    ]
};
const dayValues = {
    narrow: [
        "\u17A2\u17B6",
        "\u1785",
        "\u17A2",
        "\u1796",
        "\u1796\u17D2\u179A",
        "\u179F\u17BB",
        "\u179F"
    ],
    short: [
        "\u17A2\u17B6",
        "\u1785",
        "\u17A2",
        "\u1796",
        "\u1796\u17D2\u179A",
        "\u179F\u17BB",
        "\u179F"
    ],
    abbreviated: [
        "\u17A2\u17B6",
        "\u1785",
        "\u17A2",
        "\u1796",
        "\u1796\u17D2\u179A",
        "\u179F\u17BB",
        "\u179F"
    ],
    wide: [
        "\u17A2\u17B6\u1791\u17B7\u178F\u17D2\u1799",
        "\u1785\u1793\u17D2\u1791",
        "\u17A2\u1784\u17D2\u1782\u17B6\u179A",
        "\u1796\u17BB\u1792",
        "\u1796\u17D2\u179A\u17A0\u179F\u17D2\u1794\u178F\u17B7\u17CD",
        "\u179F\u17BB\u1780\u17D2\u179A",
        "\u179F\u17C5\u179A\u17CD"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u1796\u17D2\u179A\u17B9\u1780",
        pm: "\u179B\u17D2\u1784\u17B6\u1785",
        midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
        noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
        morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
        afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
        evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
        night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
    },
    abbreviated: {
        am: "\u1796\u17D2\u179A\u17B9\u1780",
        pm: "\u179B\u17D2\u1784\u17B6\u1785",
        midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
        noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
        morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
        afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
        evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
        night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
    },
    wide: {
        am: "\u1796\u17D2\u179A\u17B9\u1780",
        pm: "\u179B\u17D2\u1784\u17B6\u1785",
        midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
        noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
        morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
        afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
        evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
        night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u1796\u17D2\u179A\u17B9\u1780",
        pm: "\u179B\u17D2\u1784\u17B6\u1785",
        midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
        noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
        morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
        afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
        evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
        night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
    },
    abbreviated: {
        am: "\u1796\u17D2\u179A\u17B9\u1780",
        pm: "\u179B\u17D2\u1784\u17B6\u1785",
        midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
        noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
        morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
        afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
        evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
        night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
    },
    wide: {
        am: "\u1796\u17D2\u179A\u17B9\u1780",
        pm: "\u179B\u17D2\u1784\u17B6\u1785",
        midnight: "\u200B\u1796\u17C1\u179B\u1780\u178E\u17D2\u178A\u17B6\u179B\u17A2\u1792\u17D2\u179A\u17B6\u178F\u17D2\u179A",
        noon: "\u1796\u17C1\u179B\u1790\u17D2\u1784\u17C3\u178F\u17D2\u179A\u1784\u17CB",
        morning: "\u1796\u17C1\u179B\u1796\u17D2\u179A\u17B9\u1780",
        afternoon: "\u1796\u17C1\u179B\u179A\u179F\u17C0\u179B",
        evening: "\u1796\u17C1\u179B\u179B\u17D2\u1784\u17B6\u1785",
        night: "\u1796\u17C1\u179B\u1799\u1794\u17CB"
    }
};
const ordinalNumber = (dirtyNumber, _)=>{
    const number = Number(dirtyNumber);
    return number.toString();
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"1ff88a64c9bef60a":"fGq1u"}],"jJQMX":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("c144896d8d777bde");
var _index2 = require("84a1d18953a306ea");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ម\.)?គស/i,
    abbreviated: /^(មុន)?គ\.ស/i,
    wide: /^(មុន|នៃ)គ្រិស្តសករាជ/i
};
const parseEraPatterns = {
    any: [
        /^(ម|មុន)គ\.?ស/i,
        /^(នៃ)?គ\.?ស/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^(ត្រីមាស)(ទី)?\s?[1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(ម\.ក|ក\.ម|មិ|ម\.ស|ឧ\.ស|ម\.ថ|ក\.ដ|សី|កញ|តុ|វិ|ធ)/i,
    abbreviated: /^(មករា|កុម្ភៈ|មីនា|មេសា|ឧសភា|មិថុនា|កក្កដា|សីហា|កញ្ញា|តុលា|វិច្ឆិកា|ធ្នូ)/i,
    wide: /^(មករា|កុម្ភៈ|មីនា|មេសា|ឧសភា|មិថុនា|កក្កដា|សីហា|កញ្ញា|តុលា|វិច្ឆិកា|ធ្នូ)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ម\.ក/i,
        /^ក\.ម/i,
        /^មិ/i,
        /^ម\.ស/i,
        /^ឧ\.ស/i,
        /^ម\.ថ/i,
        /^ក\.ដ/i,
        /^សី/i,
        /^កញ/i,
        /^តុ/i,
        /^វិ/i,
        /^ធ/i
    ],
    any: [
        /^មក/i,
        /^កុ/i,
        /^មីន/i,
        /^មេ/i,
        /^ឧស/i,
        /^មិថ/i,
        /^កក/i,
        /^សី/i,
        /^កញ/i,
        /^តុ/i,
        /^វិច/i,
        /^ធ/i
    ]
};
const matchDayPatterns = {
    narrow: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
    short: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
    abbreviated: /^(អា|ច|អ|ព|ព្រ|សុ|ស)/i,
    wide: /^(អាទិត្យ|ចន្ទ|អង្គារ|ពុធ|ព្រហស្បតិ៍|សុក្រ|សៅរ៍)/i
};
const parseDayPatterns = {
    narrow: [
        /^អា/i,
        /^ច/i,
        /^អ/i,
        /^ព/i,
        /^ព្រ/i,
        /^សុ/i,
        /^ស/i
    ],
    any: [
        /^អា/i,
        /^ច/i,
        /^អ/i,
        /^ព/i,
        /^ព្រ/i,
        /^សុ/i,
        /^សៅ/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ព្រឹក|ល្ងាច|ពេលព្រឹក|ពេលថ្ងៃត្រង់|ពេលល្ងាច|ពេលរសៀល|ពេលយប់|ពេលកណ្ដាលអធ្រាត្រ)/i,
    any: /^(ព្រឹក|ល្ងាច|ពេលព្រឹក|ពេលថ្ងៃត្រង់|ពេលល្ងាច|ពេលរសៀល|ពេលយប់|ពេលកណ្ដាលអធ្រាត្រ)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ព្រឹក/i,
        pm: /^ល្ងាច/i,
        midnight: /^ពេលកណ្ដាលអធ្រាត្រ/i,
        noon: /^ពេលថ្ងៃត្រង់/i,
        morning: /ពេលព្រឹក/i,
        afternoon: /ពេលរសៀល/i,
        evening: /ពេលល្ងាច/i,
        night: /ពេលយប់/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
            return parseInt(value, 10);
        }
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"c144896d8d777bde":"15lWd","84a1d18953a306ea":"kWqg8"}],"5g8ks":[function(require,module,exports) {
"use strict";
exports.kn = void 0;
var _index = require("e1cc79577358583e");
var _index2 = require("b37d0e55d295a55");
var _index3 = require("2f17d26837cea27b");
var _index4 = require("d35f3be8725013bf");
var _index5 = require("d9690e04400ec916");
/**
 * @category Locales
 * @summary Kannada locale (India).
 * @language Kannada
 * @iso-639-2 kan
 * @author Manjunatha Gouli [@developergouli](https://github.com/developergouli)
 */ const kn = exports.kn = {
    code: "kn",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"e1cc79577358583e":"gwpqP","b37d0e55d295a55":"2Ljjb","2f17d26837cea27b":"9zFD1","d35f3be8725013bf":"82IQ7","d9690e04400ec916":"4WohE"}],"gwpqP":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
// note: no implementation for weeks
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: {
            default: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
            future: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
            past: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6"
        },
        other: {
            default: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
            future: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
            past: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6"
        }
    },
    xSeconds: {
        one: {
            default: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD",
            future: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0CA8\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "1 \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CC1\u0C97\u0CB3\u0CC1",
            future: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD\u200C\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "{{count}} \u0CB8\u0CC6\u0C95\u0CC6\u0C82\u0CA1\u0CCD \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    halfAMinute: {
        other: {
            default: "\u0C85\u0CB0\u0CCD\u0CA7 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7",
            future: "\u0C85\u0CB0\u0CCD\u0CA7 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0C85\u0CB0\u0CCD\u0CA7 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    lessThanXMinutes: {
        one: {
            default: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
            future: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
            past: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6"
        },
        other: {
            default: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
            future: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6",
            past: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C95\u0CCD\u0C95\u0CBF\u0C82\u0CA4 \u0C95\u0CA1\u0CBF\u0CAE\u0CC6"
        }
    },
    xMinutes: {
        one: {
            default: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7",
            future: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "1 \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C97\u0CB3\u0CC1",
            future: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "{{count}} \u0CA8\u0CBF\u0CAE\u0CBF\u0CB7\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    aboutXHours: {
        one: {
            default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0C97\u0C82\u0C9F\u0CC6",
            future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0C97\u0C82\u0C9F\u0CC6\u0CAF\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0C97\u0C82\u0C9F\u0CC6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3\u0CC1",
            future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    xHours: {
        one: {
            default: "1 \u0C97\u0C82\u0C9F\u0CC6",
            future: "1 \u0C97\u0C82\u0C9F\u0CC6\u0CAF\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "1 \u0C97\u0C82\u0C9F\u0CC6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "{{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3\u0CC1",
            future: "{{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "{{count}} \u0C97\u0C82\u0C9F\u0CC6\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    xDays: {
        one: {
            default: "1 \u0CA6\u0CBF\u0CA8",
            future: "1 \u0CA6\u0CBF\u0CA8\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "1 \u0CA6\u0CBF\u0CA8\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "{{count}} \u0CA6\u0CBF\u0CA8\u0C97\u0CB3\u0CC1",
            future: "{{count}} \u0CA6\u0CBF\u0CA8\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "{{count}} \u0CA6\u0CBF\u0CA8\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    // TODO
    // aboutXWeeks: {},
    // TODO
    // xWeeks: {},
    aboutXMonths: {
        one: {
            default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1",
            future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1",
            future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    xMonths: {
        one: {
            default: "1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1",
            future: "1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "1 \u0CA4\u0CBF\u0C82\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "{{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1",
            future: "{{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "{{count}} \u0CA4\u0CBF\u0C82\u0C97\u0CB3\u0CC1\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    aboutXYears: {
        one: {
            default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CB5\u0CB0\u0CCD\u0CB7",
            future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CC1",
            future: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0CB8\u0CC1\u0CAE\u0CBE\u0CB0\u0CC1 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    xYears: {
        one: {
            default: "1 \u0CB5\u0CB0\u0CCD\u0CB7",
            future: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        },
        other: {
            default: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CC1",
            future: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CB9\u0CBF\u0C82\u0CA6\u0CC6"
        }
    },
    overXYears: {
        one: {
            default: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CAE\u0CC7\u0CB2\u0CC6",
            future: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CAE\u0CC7\u0CB2\u0CC6",
            past: "1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6 \u0CAE\u0CC7\u0CB2\u0CC6"
        },
        other: {
            default: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CAE\u0CC7\u0CB2\u0CC6",
            future: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CAE\u0CC7\u0CB2\u0CC6",
            past: "{{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3 \u0CAE\u0CC7\u0CB2\u0CC6"
        }
    },
    almostXYears: {
        one: {
            default: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
            future: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 1 \u0CB5\u0CB0\u0CCD\u0CB7\u0CA6\u0CB2\u0CCD\u0CB2\u0CBF"
        },
        other: {
            default: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            future: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF",
            past: "\u0CAC\u0CB9\u0CC1\u0CA4\u0CC7\u0C95 {{count}} \u0CB5\u0CB0\u0CCD\u0CB7\u0C97\u0CB3\u0CB2\u0CCD\u0CB2\u0CBF"
        }
    }
};
function getResultByTense(parentToken, options) {
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return parentToken.future;
        else return parentToken.past;
    }
    return parentToken.default;
}
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (tokenValue.one && count === 1) result = getResultByTense(tokenValue.one, options);
    else result = getResultByTense(tokenValue.other, options);
    return result.replace("{{count}}", String(count));
};
exports.formatDistance = formatDistance;

},{}],"2Ljjb":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("f898c76459615f8e");
// Reference: https://www.unicode.org/cldr/charts/32/summary/kn.html
const dateFormats = {
    full: "EEEE, MMMM d, y",
    long: "MMMM d, y",
    medium: "MMM d, y",
    short: "d/M/yy"
};
const timeFormats = {
    full: "hh:mm:ss a zzzz",
    long: "hh:mm:ss a z",
    medium: "hh:mm:ss a",
    short: "hh:mm a"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"f898c76459615f8e":"6OYyu"}],"9zFD1":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0C95\u0CB3\u0CC6\u0CA6' eeee p '\u0C95\u0CCD\u0C95\u0CC6'",
    yesterday: "'\u0CA8\u0CBF\u0CA8\u0CCD\u0CA8\u0CC6' p '\u0C95\u0CCD\u0C95\u0CC6'",
    today: "'\u0C87\u0C82\u0CA6\u0CC1' p '\u0C95\u0CCD\u0C95\u0CC6'",
    tomorrow: "'\u0CA8\u0CBE\u0CB3\u0CC6' p '\u0C95\u0CCD\u0C95\u0CC6'",
    nextWeek: "eeee p '\u0C95\u0CCD\u0C95\u0CC6'",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"82IQ7":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("45cda28590d94644");
// Reference: https://www.unicode.org/cldr/charts/32/summary/kn.html
const eraValues = {
    narrow: [
        "\u0C95\u0CCD\u0CB0\u0CBF.\u0CAA\u0CC2",
        "\u0C95\u0CCD\u0CB0\u0CBF.\u0CB6"
    ],
    abbreviated: [
        "\u0C95\u0CCD\u0CB0\u0CBF.\u0CAA\u0CC2",
        "\u0C95\u0CCD\u0CB0\u0CBF.\u0CB6"
    ],
    wide: [
        "\u0C95\u0CCD\u0CB0\u0CBF\u0CB8\u0CCD\u0CA4 \u0CAA\u0CC2\u0CB0\u0CCD\u0CB5",
        "\u0C95\u0CCD\u0CB0\u0CBF\u0CB8\u0CCD\u0CA4 \u0CB6\u0C95"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u0CA4\u0CCD\u0CB0\u0CC8 1",
        "\u0CA4\u0CCD\u0CB0\u0CC8 2",
        "\u0CA4\u0CCD\u0CB0\u0CC8 3",
        "\u0CA4\u0CCD\u0CB0\u0CC8 4"
    ],
    wide: [
        "1\u0CA8\u0CC7 \u0CA4\u0CCD\u0CB0\u0CC8\u0CAE\u0CBE\u0CB8\u0CBF\u0C95",
        "2\u0CA8\u0CC7 \u0CA4\u0CCD\u0CB0\u0CC8\u0CAE\u0CBE\u0CB8\u0CBF\u0C95",
        "3\u0CA8\u0CC7 \u0CA4\u0CCD\u0CB0\u0CC8\u0CAE\u0CBE\u0CB8\u0CBF\u0C95",
        "4\u0CA8\u0CC7 \u0CA4\u0CCD\u0CB0\u0CC8\u0CAE\u0CBE\u0CB8\u0CBF\u0C95"
    ]
};
// CLDR #1646 - #1717
const monthValues = {
    narrow: [
        "\u0C9C",
        "\u0CAB\u0CC6",
        "\u0CAE\u0CBE",
        "\u0C8F",
        "\u0CAE\u0CC7",
        "\u0C9C\u0CC2",
        "\u0C9C\u0CC1",
        "\u0C86",
        "\u0CB8\u0CC6",
        "\u0C85",
        "\u0CA8",
        "\u0CA1\u0CBF"
    ],
    abbreviated: [
        "\u0C9C\u0CA8",
        "\u0CAB\u0CC6\u0CAC\u0CCD\u0CB0",
        "\u0CAE\u0CBE\u0CB0\u0CCD\u0C9A\u0CCD",
        "\u0C8F\u0CAA\u0CCD\u0CB0\u0CBF",
        "\u0CAE\u0CC7",
        "\u0C9C\u0CC2\u0CA8\u0CCD",
        "\u0C9C\u0CC1\u0CB2\u0CC8",
        "\u0C86\u0C97",
        "\u0CB8\u0CC6\u0CAA\u0CCD\u0C9F\u0CC6\u0C82",
        "\u0C85\u0C95\u0CCD\u0C9F\u0CCB",
        "\u0CA8\u0CB5\u0CC6\u0C82",
        "\u0CA1\u0CBF\u0CB8\u0CC6\u0C82"
    ],
    wide: [
        "\u0C9C\u0CA8\u0CB5\u0CB0\u0CBF",
        "\u0CAB\u0CC6\u0CAC\u0CCD\u0CB0\u0CB5\u0CB0\u0CBF",
        "\u0CAE\u0CBE\u0CB0\u0CCD\u0C9A\u0CCD",
        "\u0C8F\u0CAA\u0CCD\u0CB0\u0CBF\u0CB2\u0CCD",
        "\u0CAE\u0CC7",
        "\u0C9C\u0CC2\u0CA8\u0CCD",
        "\u0C9C\u0CC1\u0CB2\u0CC8",
        "\u0C86\u0C97\u0CB8\u0CCD\u0C9F\u0CCD",
        "\u0CB8\u0CC6\u0CAA\u0CCD\u0C9F\u0CC6\u0C82\u0CAC\u0CB0\u0CCD",
        "\u0C85\u0C95\u0CCD\u0C9F\u0CCB\u0CAC\u0CB0\u0CCD",
        "\u0CA8\u0CB5\u0CC6\u0C82\u0CAC\u0CB0\u0CCD",
        "\u0CA1\u0CBF\u0CB8\u0CC6\u0C82\u0CAC\u0CB0\u0CCD"
    ]
};
// CLDR #1718 - #1773
const dayValues = {
    narrow: [
        "\u0CAD\u0CBE",
        "\u0CB8\u0CCB",
        "\u0CAE\u0C82",
        "\u0CAC\u0CC1",
        "\u0C97\u0CC1",
        "\u0CB6\u0CC1",
        "\u0CB6"
    ],
    short: [
        "\u0CAD\u0CBE\u0CA8\u0CC1",
        "\u0CB8\u0CCB\u0CAE",
        "\u0CAE\u0C82\u0C97\u0CB3",
        "\u0CAC\u0CC1\u0CA7",
        "\u0C97\u0CC1\u0CB0\u0CC1",
        "\u0CB6\u0CC1\u0C95\u0CCD\u0CB0",
        "\u0CB6\u0CA8\u0CBF"
    ],
    abbreviated: [
        "\u0CAD\u0CBE\u0CA8\u0CC1",
        "\u0CB8\u0CCB\u0CAE",
        "\u0CAE\u0C82\u0C97\u0CB3",
        "\u0CAC\u0CC1\u0CA7",
        "\u0C97\u0CC1\u0CB0\u0CC1",
        "\u0CB6\u0CC1\u0C95\u0CCD\u0CB0",
        "\u0CB6\u0CA8\u0CBF"
    ],
    wide: [
        "\u0CAD\u0CBE\u0CA8\u0CC1\u0CB5\u0CBE\u0CB0",
        "\u0CB8\u0CCB\u0CAE\u0CB5\u0CBE\u0CB0",
        "\u0CAE\u0C82\u0C97\u0CB3\u0CB5\u0CBE\u0CB0",
        "\u0CAC\u0CC1\u0CA7\u0CB5\u0CBE\u0CB0",
        "\u0C97\u0CC1\u0CB0\u0CC1\u0CB5\u0CBE\u0CB0",
        "\u0CB6\u0CC1\u0C95\u0CCD\u0CB0\u0CB5\u0CBE\u0CB0",
        "\u0CB6\u0CA8\u0CBF\u0CB5\u0CBE\u0CB0"
    ]
};
// CLDR #1774 - #1815
const dayPeriodValues = {
    narrow: {
        am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
        pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
        midnight: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
        noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CB9\u0CCD\u0CA8",
        morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
        afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CB9\u0CCD\u0CA8",
        evening: "\u0CB8\u0C82\u0C9C\u0CC6",
        night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
    },
    abbreviated: {
        am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
        pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
        midnight: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
        noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
        afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        evening: "\u0CB8\u0C82\u0C9C\u0CC6",
        night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
    },
    wide: {
        am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
        pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
        midnight: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
        noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
        afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        evening: "\u0CB8\u0C82\u0C9C\u0CC6",
        night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0CAA\u0CC2",
        pm: "\u0C85",
        midnight: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
        noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
        afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        evening: "\u0CB8\u0C82\u0C9C\u0CC6",
        night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
    },
    abbreviated: {
        am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
        pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
        midnight: "\u0CAE\u0CA7\u0CCD\u0CAF \u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
        noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
        afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        evening: "\u0CB8\u0C82\u0C9C\u0CC6",
        night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
    },
    wide: {
        am: "\u0CAA\u0CC2\u0CB0\u0CCD\u0CB5\u0CBE\u0CB9\u0CCD\u0CA8",
        pm: "\u0C85\u0CAA\u0CB0\u0CBE\u0CB9\u0CCD\u0CA8",
        midnight: "\u0CAE\u0CA7\u0CCD\u0CAF \u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF",
        noon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        morning: "\u0CAC\u0CC6\u0CB3\u0C97\u0CCD\u0C97\u0CC6",
        afternoon: "\u0CAE\u0CA7\u0CCD\u0CAF\u0CBE\u0CA8\u0CCD\u0CB9",
        evening: "\u0CB8\u0C82\u0C9C\u0CC6",
        night: "\u0CB0\u0CBE\u0CA4\u0CCD\u0CB0\u0CBF"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "\u0CA8\u0CC7";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"45cda28590d94644":"fGq1u"}],"4WohE":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("f182691b29d7cc0c");
var _index2 = require("17550117e92360b6");
const matchOrdinalNumberPattern = /^(\d+)(ನೇ|ನೆ)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ಕ್ರಿ.ಪೂ|ಕ್ರಿ.ಶ)/i,
    abbreviated: /^(ಕ್ರಿ\.?\s?ಪೂ\.?|ಕ್ರಿ\.?\s?ಶ\.?|ಪ್ರ\.?\s?ಶ\.?)/i,
    wide: /^(ಕ್ರಿಸ್ತ ಪೂರ್ವ|ಕ್ರಿಸ್ತ ಶಕ|ಪ್ರಸಕ್ತ ಶಕ)/i
};
const parseEraPatterns = {
    any: [
        /^ಪೂ/i,
        /^(ಶ|ಪ್ರ)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^ತ್ರೈ[1234]|ತ್ರೈ [1234]| [1234]ತ್ರೈ/i,
    wide: /^[1234](ನೇ)? ತ್ರೈಮಾಸಿಕ/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(ಜೂ|ಜು|ಜ|ಫೆ|ಮಾ|ಏ|ಮೇ|ಆ|ಸೆ|ಅ|ನ|ಡಿ)/i,
    abbreviated: /^(ಜನ|ಫೆಬ್ರ|ಮಾರ್ಚ್|ಏಪ್ರಿ|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗ|ಸೆಪ್ಟೆಂ|ಅಕ್ಟೋ|ನವೆಂ|ಡಿಸೆಂ)/i,
    wide: /^(ಜನವರಿ|ಫೆಬ್ರವರಿ|ಮಾರ್ಚ್|ಏಪ್ರಿಲ್|ಮೇ|ಜೂನ್|ಜುಲೈ|ಆಗಸ್ಟ್|ಸೆಪ್ಟೆಂಬರ್|ಅಕ್ಟೋಬರ್|ನವೆಂಬರ್|ಡಿಸೆಂಬರ್)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ಜ$/i,
        /^ಫೆ/i,
        /^ಮಾ/i,
        /^ಏ/i,
        /^ಮೇ/i,
        /^ಜೂ/i,
        /^ಜು$/i,
        /^ಆ/i,
        /^ಸೆ/i,
        /^ಅ/i,
        /^ನ/i,
        /^ಡಿ/i
    ],
    any: [
        /^ಜನ/i,
        /^ಫೆ/i,
        /^ಮಾ/i,
        /^ಏ/i,
        /^ಮೇ/i,
        /^ಜೂನ್/i,
        /^ಜುಲೈ/i,
        /^ಆ/i,
        /^ಸೆ/i,
        /^ಅ/i,
        /^ನ/i,
        /^ಡಿ/i
    ]
};
const matchDayPatterns = {
    narrow: /^(ಭಾ|ಸೋ|ಮ|ಬು|ಗು|ಶು|ಶ)/i,
    short: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
    abbreviated: /^(ಭಾನು|ಸೋಮ|ಮಂಗಳ|ಬುಧ|ಗುರು|ಶುಕ್ರ|ಶನಿ)/i,
    wide: /^(ಭಾನುವಾರ|ಸೋಮವಾರ|ಮಂಗಳವಾರ|ಬುಧವಾರ|ಗುರುವಾರ|ಶುಕ್ರವಾರ|ಶನಿವಾರ)/i
};
const parseDayPatterns = {
    narrow: [
        /^ಭಾ/i,
        /^ಸೋ/i,
        /^ಮ/i,
        /^ಬು/i,
        /^ಗು/i,
        /^ಶು/i,
        /^ಶ/i
    ],
    any: [
        /^ಭಾ/i,
        /^ಸೋ/i,
        /^ಮ/i,
        /^ಬು/i,
        /^ಗು/i,
        /^ಶು/i,
        /^ಶ/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ಪೂ|ಅ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i,
    any: /^(ಪೂರ್ವಾಹ್ನ|ಅಪರಾಹ್ನ|ಮಧ್ಯರಾತ್ರಿ|ಮಧ್ಯಾನ್ಹ|ಬೆಳಗ್ಗೆ|ಸಂಜೆ|ರಾತ್ರಿ)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ಪೂ/i,
        pm: /^ಅ/i,
        midnight: /ಮಧ್ಯರಾತ್ರಿ/i,
        noon: /ಮಧ್ಯಾನ್ಹ/i,
        morning: /ಬೆಳಗ್ಗೆ/i,
        afternoon: /ಮಧ್ಯಾನ್ಹ/i,
        evening: /ಸಂಜೆ/i,
        night: /ರಾತ್ರಿ/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"f182691b29d7cc0c":"15lWd","17550117e92360b6":"kWqg8"}],"i5dFT":[function(require,module,exports) {
"use strict";
exports.ko = void 0;
var _index = require("3daa49eadee92f41");
var _index2 = require("81822157538d097f");
var _index3 = require("d97d8099762aea64");
var _index4 = require("b274603bcead08cb");
var _index5 = require("8c4e010cf4ad120d");
/**
 * @category Locales
 * @summary Korean locale.
 * @language Korean
 * @iso-639-2 kor
 * @author Hong Chulju [@angdev](https://github.com/angdev)
 * @author Lee Seoyoen [@iamssen](https://github.com/iamssen)
 * @author Taiki IKeda [@so99ynoodles](https://github.com/so99ynoodles)
 */ const ko = exports.ko = {
    code: "ko",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"3daa49eadee92f41":"hZLDD","81822157538d097f":"b6X6o","d97d8099762aea64":"sW71F","b274603bcead08cb":"73fJe","8c4e010cf4ad120d":"5ah7h"}],"hZLDD":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "1\uCD08 \uBBF8\uB9CC",
        other: "{{count}}\uCD08 \uBBF8\uB9CC"
    },
    xSeconds: {
        one: "1\uCD08",
        other: "{{count}}\uCD08"
    },
    halfAMinute: "30\uCD08",
    lessThanXMinutes: {
        one: "1\uBD84 \uBBF8\uB9CC",
        other: "{{count}}\uBD84 \uBBF8\uB9CC"
    },
    xMinutes: {
        one: "1\uBD84",
        other: "{{count}}\uBD84"
    },
    aboutXHours: {
        one: "\uC57D 1\uC2DC\uAC04",
        other: "\uC57D {{count}}\uC2DC\uAC04"
    },
    xHours: {
        one: "1\uC2DC\uAC04",
        other: "{{count}}\uC2DC\uAC04"
    },
    xDays: {
        one: "1\uC77C",
        other: "{{count}}\uC77C"
    },
    aboutXWeeks: {
        one: "\uC57D 1\uC8FC",
        other: "\uC57D {{count}}\uC8FC"
    },
    xWeeks: {
        one: "1\uC8FC",
        other: "{{count}}\uC8FC"
    },
    aboutXMonths: {
        one: "\uC57D 1\uAC1C\uC6D4",
        other: "\uC57D {{count}}\uAC1C\uC6D4"
    },
    xMonths: {
        one: "1\uAC1C\uC6D4",
        other: "{{count}}\uAC1C\uC6D4"
    },
    aboutXYears: {
        one: "\uC57D 1\uB144",
        other: "\uC57D {{count}}\uB144"
    },
    xYears: {
        one: "1\uB144",
        other: "{{count}}\uB144"
    },
    overXYears: {
        one: "1\uB144 \uC774\uC0C1",
        other: "{{count}}\uB144 \uC774\uC0C1"
    },
    almostXYears: {
        one: "\uAC70\uC758 1\uB144",
        other: "\uAC70\uC758 {{count}}\uB144"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + " \uD6C4";
        else return result + " \uC804";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"b6X6o":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("37a81bd8b638422e");
const dateFormats = {
    full: "y\uB144 M\uC6D4 d\uC77C EEEE",
    long: "y\uB144 M\uC6D4 d\uC77C",
    medium: "y.MM.dd",
    short: "y.MM.dd"
};
const timeFormats = {
    full: "a H\uC2DC mm\uBD84 ss\uCD08 zzzz",
    long: "a H:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"37a81bd8b638422e":"6OYyu"}],"sW71F":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\uC9C0\uB09C' eeee p",
    yesterday: "'\uC5B4\uC81C' p",
    today: "'\uC624\uB298' p",
    tomorrow: "'\uB0B4\uC77C' p",
    nextWeek: "'\uB2E4\uC74C' eeee p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"73fJe":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("d986b31474c9f280");
const eraValues = {
    narrow: [
        "BC",
        "AD"
    ],
    abbreviated: [
        "BC",
        "AD"
    ],
    wide: [
        "\uAE30\uC6D0\uC804",
        "\uC11C\uAE30"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1\uBD84\uAE30",
        "2\uBD84\uAE30",
        "3\uBD84\uAE30",
        "4\uBD84\uAE30"
    ]
};
const monthValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12"
    ],
    abbreviated: [
        "1\uC6D4",
        "2\uC6D4",
        "3\uC6D4",
        "4\uC6D4",
        "5\uC6D4",
        "6\uC6D4",
        "7\uC6D4",
        "8\uC6D4",
        "9\uC6D4",
        "10\uC6D4",
        "11\uC6D4",
        "12\uC6D4"
    ],
    wide: [
        "1\uC6D4",
        "2\uC6D4",
        "3\uC6D4",
        "4\uC6D4",
        "5\uC6D4",
        "6\uC6D4",
        "7\uC6D4",
        "8\uC6D4",
        "9\uC6D4",
        "10\uC6D4",
        "11\uC6D4",
        "12\uC6D4"
    ]
};
const dayValues = {
    narrow: [
        "\uC77C",
        "\uC6D4",
        "\uD654",
        "\uC218",
        "\uBAA9",
        "\uAE08",
        "\uD1A0"
    ],
    short: [
        "\uC77C",
        "\uC6D4",
        "\uD654",
        "\uC218",
        "\uBAA9",
        "\uAE08",
        "\uD1A0"
    ],
    abbreviated: [
        "\uC77C",
        "\uC6D4",
        "\uD654",
        "\uC218",
        "\uBAA9",
        "\uAE08",
        "\uD1A0"
    ],
    wide: [
        "\uC77C\uC694\uC77C",
        "\uC6D4\uC694\uC77C",
        "\uD654\uC694\uC77C",
        "\uC218\uC694\uC77C",
        "\uBAA9\uC694\uC77C",
        "\uAE08\uC694\uC77C",
        "\uD1A0\uC694\uC77C"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\uC624\uC804",
        pm: "\uC624\uD6C4",
        midnight: "\uC790\uC815",
        noon: "\uC815\uC624",
        morning: "\uC544\uCE68",
        afternoon: "\uC624\uD6C4",
        evening: "\uC800\uB141",
        night: "\uBC24"
    },
    abbreviated: {
        am: "\uC624\uC804",
        pm: "\uC624\uD6C4",
        midnight: "\uC790\uC815",
        noon: "\uC815\uC624",
        morning: "\uC544\uCE68",
        afternoon: "\uC624\uD6C4",
        evening: "\uC800\uB141",
        night: "\uBC24"
    },
    wide: {
        am: "\uC624\uC804",
        pm: "\uC624\uD6C4",
        midnight: "\uC790\uC815",
        noon: "\uC815\uC624",
        morning: "\uC544\uCE68",
        afternoon: "\uC624\uD6C4",
        evening: "\uC800\uB141",
        night: "\uBC24"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\uC624\uC804",
        pm: "\uC624\uD6C4",
        midnight: "\uC790\uC815",
        noon: "\uC815\uC624",
        morning: "\uC544\uCE68",
        afternoon: "\uC624\uD6C4",
        evening: "\uC800\uB141",
        night: "\uBC24"
    },
    abbreviated: {
        am: "\uC624\uC804",
        pm: "\uC624\uD6C4",
        midnight: "\uC790\uC815",
        noon: "\uC815\uC624",
        morning: "\uC544\uCE68",
        afternoon: "\uC624\uD6C4",
        evening: "\uC800\uB141",
        night: "\uBC24"
    },
    wide: {
        am: "\uC624\uC804",
        pm: "\uC624\uD6C4",
        midnight: "\uC790\uC815",
        noon: "\uC815\uC624",
        morning: "\uC544\uCE68",
        afternoon: "\uC624\uD6C4",
        evening: "\uC800\uB141",
        night: "\uBC24"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = String(options?.unit);
    switch(unit){
        case "minute":
        case "second":
            return String(number);
        case "date":
            return number + "\uC77C";
        default:
            return number + "\uBC88\uC9F8";
    }
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"d986b31474c9f280":"fGq1u"}],"5ah7h":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("db070bc85ca4aeaf");
var _index2 = require("ebfc1523d39ca7cf");
const matchOrdinalNumberPattern = /^(\d+)(일|번째)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(기원전|서기)/i
};
const parseEraPatterns = {
    any: [
        /^(bc|기원전)/i,
        /^(ad|서기)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234]사?분기/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(1[012]|[123456789])/,
    abbreviated: /^(1[012]|[123456789])월/i,
    wide: /^(1[012]|[123456789])월/i
};
const parseMonthPatterns = {
    any: [
        /^1월?$/,
        /^2/,
        /^3/,
        /^4/,
        /^5/,
        /^6/,
        /^7/,
        /^8/,
        /^9/,
        /^10/,
        /^11/,
        /^12/
    ]
};
const matchDayPatterns = {
    narrow: /^[일월화수목금토]/,
    short: /^[일월화수목금토]/,
    abbreviated: /^[일월화수목금토]/,
    wide: /^[일월화수목금토]요일/
};
const parseDayPatterns = {
    any: [
        /^일/,
        /^월/,
        /^화/,
        /^수/,
        /^목/,
        /^금/,
        /^토/
    ]
};
const matchDayPeriodPatterns = {
    any: /^(am|pm|오전|오후|자정|정오|아침|저녁|밤)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^(am|오전)/i,
        pm: /^(pm|오후)/i,
        midnight: /^자정/i,
        noon: /^정오/i,
        morning: /^아침/i,
        afternoon: /^오후/i,
        evening: /^저녁/i,
        night: /^밤/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"db070bc85ca4aeaf":"15lWd","ebfc1523d39ca7cf":"kWqg8"}],"2b4o3":[function(require,module,exports) {
"use strict";
exports.lb = void 0;
var _index = require("b7017de2cfb5b77b");
var _index2 = require("af724d2cde6ca1dc");
var _index3 = require("277102aea69eb1ff");
var _index4 = require("1a63f03be1ea38fe");
var _index5 = require("68b1e21e79485d59");
/**
 * @category Locales
 * @summary Luxembourgish locale.
 * @language Luxembourgish
 * @iso-639-2 ltz
 * @author Daniel Waxweiler [@dwaxweiler](https://github.com/dwaxweiler)
 */ const lb = exports.lb = {
    code: "lb",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"b7017de2cfb5b77b":"efySb","af724d2cde6ca1dc":"dgHXX","277102aea69eb1ff":"gMapo","1a63f03be1ea38fe":"dHIzG","68b1e21e79485d59":"hNaZd"}],"efySb":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        standalone: {
            one: "manner w\xe9i eng Sekonn",
            other: "manner w\xe9i {{count}} Sekonnen"
        },
        withPreposition: {
            one: "manner w\xe9i enger Sekonn",
            other: "manner w\xe9i {{count}} Sekonnen"
        }
    },
    xSeconds: {
        standalone: {
            one: "eng Sekonn",
            other: "{{count}} Sekonnen"
        },
        withPreposition: {
            one: "enger Sekonn",
            other: "{{count}} Sekonnen"
        }
    },
    halfAMinute: {
        standalone: "eng hallef Minutt",
        withPreposition: "enger hallwer Minutt"
    },
    lessThanXMinutes: {
        standalone: {
            one: "manner w\xe9i eng Minutt",
            other: "manner w\xe9i {{count}} Minutten"
        },
        withPreposition: {
            one: "manner w\xe9i enger Minutt",
            other: "manner w\xe9i {{count}} Minutten"
        }
    },
    xMinutes: {
        standalone: {
            one: "eng Minutt",
            other: "{{count}} Minutten"
        },
        withPreposition: {
            one: "enger Minutt",
            other: "{{count}} Minutten"
        }
    },
    aboutXHours: {
        standalone: {
            one: "ongef\xe9ier eng Stonn",
            other: "ongef\xe9ier {{count}} Stonnen"
        },
        withPreposition: {
            one: "ongef\xe9ier enger Stonn",
            other: "ongef\xe9ier {{count}} Stonnen"
        }
    },
    xHours: {
        standalone: {
            one: "eng Stonn",
            other: "{{count}} Stonnen"
        },
        withPreposition: {
            one: "enger Stonn",
            other: "{{count}} Stonnen"
        }
    },
    xDays: {
        standalone: {
            one: "een Dag",
            other: "{{count}} Deeg"
        },
        withPreposition: {
            one: "engem Dag",
            other: "{{count}} Deeg"
        }
    },
    aboutXWeeks: {
        standalone: {
            one: "ongef\xe9ier eng Woch",
            other: "ongef\xe9ier {{count}} Wochen"
        },
        withPreposition: {
            one: "ongef\xe9ier enger Woche",
            other: "ongef\xe9ier {{count}} Wochen"
        }
    },
    xWeeks: {
        standalone: {
            one: "eng Woch",
            other: "{{count}} Wochen"
        },
        withPreposition: {
            one: "enger Woch",
            other: "{{count}} Wochen"
        }
    },
    aboutXMonths: {
        standalone: {
            one: "ongef\xe9ier ee Mount",
            other: "ongef\xe9ier {{count}} M\xe9int"
        },
        withPreposition: {
            one: "ongef\xe9ier engem Mount",
            other: "ongef\xe9ier {{count}} M\xe9int"
        }
    },
    xMonths: {
        standalone: {
            one: "ee Mount",
            other: "{{count}} M\xe9int"
        },
        withPreposition: {
            one: "engem Mount",
            other: "{{count}} M\xe9int"
        }
    },
    aboutXYears: {
        standalone: {
            one: "ongef\xe9ier ee Joer",
            other: "ongef\xe9ier {{count}} Joer"
        },
        withPreposition: {
            one: "ongef\xe9ier engem Joer",
            other: "ongef\xe9ier {{count}} Joer"
        }
    },
    xYears: {
        standalone: {
            one: "ee Joer",
            other: "{{count}} Joer"
        },
        withPreposition: {
            one: "engem Joer",
            other: "{{count}} Joer"
        }
    },
    overXYears: {
        standalone: {
            one: "m\xe9i w\xe9i ee Joer",
            other: "m\xe9i w\xe9i {{count}} Joer"
        },
        withPreposition: {
            one: "m\xe9i w\xe9i engem Joer",
            other: "m\xe9i w\xe9i {{count}} Joer"
        }
    },
    almostXYears: {
        standalone: {
            one: "bal ee Joer",
            other: "bal {{count}} Joer"
        },
        withPreposition: {
            one: "bal engem Joer",
            other: "bal {{count}} Joer"
        }
    }
};
const EXCEPTION_CONSONANTS = [
    "d",
    "h",
    "n",
    "t",
    "z"
];
const VOWELS = [
    "a,",
    "e",
    "i",
    "o",
    "u"
];
const DIGITS_SPOKEN_N_NEEDED = [
    0,
    1,
    2,
    3,
    8,
    9
];
const FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED = [
    40,
    50,
    60,
    70
];
// Eifeler Regel
function isFinalNNeeded(nextWords) {
    const firstLetter = nextWords.charAt(0).toLowerCase();
    if (VOWELS.indexOf(firstLetter) != -1 || EXCEPTION_CONSONANTS.indexOf(firstLetter) != -1) return true;
    // Numbers would need to converted into words for checking.
    // Therefore, I have listed the digits that require a preceeding n with a few exceptions.
    const firstWord = nextWords.split(" ")[0];
    const number = parseInt(firstWord);
    if (!isNaN(number) && DIGITS_SPOKEN_N_NEEDED.indexOf(number % 10) != -1 && FIRST_TWO_DIGITS_SPOKEN_NO_N_NEEDED.indexOf(parseInt(firstWord.substring(0, 2))) == -1) return true;
    // Omit other checks as they are not expected here.
    return false;
}
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    const usageGroup = options?.addSuffix ? tokenValue.withPreposition : tokenValue.standalone;
    if (typeof usageGroup === "string") result = usageGroup;
    else if (count === 1) result = usageGroup.one;
    else result = usageGroup.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "a" + (isFinalNNeeded(result) ? "n" : "") + " " + result;
        else return "viru" + (isFinalNNeeded(result) ? "n" : "") + " " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"dgHXX":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("f5970f6e3d327420");
// DIN 5008: https://de.wikipedia.org/wiki/Datumsformat#DIN_5008
const dateFormats = {
    full: "EEEE, do MMMM y",
    long: "do MMMM y",
    medium: "do MMM y",
    short: "dd.MM.yy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'um' {{time}}",
    long: "{{date}} 'um' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"f5970f6e3d327420":"6OYyu"}],"gMapo":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        const day = date.getDay();
        let result = "'l\xe4schte";
        if (day === 2 || day === 4) // Eifeler Regel: Add an n before the consonant d; Here "Dënschdeg" "and Donneschde".
        result += "n";
        result += "' eeee 'um' p";
        return result;
    },
    yesterday: "'g\xebschter um' p",
    today: "'haut um' p",
    tomorrow: "'moien um' p",
    nextWeek: "eeee 'um' p",
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"dHIzG":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("eba329b07a2c1cb4");
const eraValues = {
    narrow: [
        "v.Chr.",
        "n.Chr."
    ],
    abbreviated: [
        "v.Chr.",
        "n.Chr."
    ],
    wide: [
        "viru Christus",
        "no Christus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1. Quartal",
        "2. Quartal",
        "3. Quartal",
        "4. Quartal"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Jan",
        "Feb",
        "M\xe4e",
        "Abr",
        "Mee",
        "Jun",
        "Jul",
        "Aug",
        "Sep",
        "Okt",
        "Nov",
        "Dez"
    ],
    wide: [
        "Januar",
        "Februar",
        "M\xe4erz",
        "Abr\xebll",
        "Mee",
        "Juni",
        "Juli",
        "August",
        "September",
        "Oktober",
        "November",
        "Dezember"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "D",
        "M",
        "D",
        "F",
        "S"
    ],
    short: [
        "So",
        "M\xe9",
        "D\xeb",
        "M\xeb",
        "Do",
        "Fr",
        "Sa"
    ],
    abbreviated: [
        "So.",
        "M\xe9.",
        "D\xeb.",
        "M\xeb.",
        "Do.",
        "Fr.",
        "Sa."
    ],
    wide: [
        "Sonndeg",
        "M\xe9indeg",
        "D\xebnschdeg",
        "M\xebttwoch",
        "Donneschdeg",
        "Freideg",
        "Samschdeg"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "mo.",
        pm: "nom\xeb.",
        midnight: "M\xebtternuecht",
        noon: "M\xebtteg",
        morning: "Moien",
        afternoon: "Nom\xebtteg",
        evening: "Owend",
        night: "Nuecht"
    },
    abbreviated: {
        am: "moies",
        pm: "nom\xebttes",
        midnight: "M\xebtternuecht",
        noon: "M\xebtteg",
        morning: "Moien",
        afternoon: "Nom\xebtteg",
        evening: "Owend",
        night: "Nuecht"
    },
    wide: {
        am: "moies",
        pm: "nom\xebttes",
        midnight: "M\xebtternuecht",
        noon: "M\xebtteg",
        morning: "Moien",
        afternoon: "Nom\xebtteg",
        evening: "Owend",
        night: "Nuecht"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "mo.",
        pm: "nom.",
        midnight: "M\xebtternuecht",
        noon: "m\xebttes",
        morning: "moies",
        afternoon: "nom\xebttes",
        evening: "owes",
        night: "nuets"
    },
    abbreviated: {
        am: "moies",
        pm: "nom\xebttes",
        midnight: "M\xebtternuecht",
        noon: "m\xebttes",
        morning: "moies",
        afternoon: "nom\xebttes",
        evening: "owes",
        night: "nuets"
    },
    wide: {
        am: "moies",
        pm: "nom\xebttes",
        midnight: "M\xebtternuecht",
        noon: "m\xebttes",
        morning: "moies",
        afternoon: "nom\xebttes",
        evening: "owes",
        night: "nuets"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"eba329b07a2c1cb4":"fGq1u"}],"hNaZd":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("3f88152482a4daf5");
var _index2 = require("78026159b30f77e1");
const matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
    abbreviated: /^(v\.? ?Chr\.?|n\.? ?Chr\.?)/i,
    wide: /^(viru Christus|virun eiser Zäitrechnung|no Christus|eiser Zäitrechnung)/i
};
const parseEraPatterns = {
    any: [
        /^v/i,
        /^n/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](\.)? Quartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mäe|abr|mee|jun|jul|aug|sep|okt|nov|dez)/i,
    wide: /^(januar|februar|mäerz|abrëll|mee|juni|juli|august|september|oktober|november|dezember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mä/i,
        /^ab/i,
        /^me/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smdf]/i,
    short: /^(so|mé|dë|më|do|fr|sa)/i,
    abbreviated: /^(son?|méi?|dën?|mët?|don?|fre?|sam?)\.?/i,
    wide: /^(sonndeg|méindeg|dënschdeg|mëttwoch|donneschdeg|freideg|samschdeg)/i
};
const parseDayPatterns = {
    any: [
        /^so/i,
        /^mé/i,
        /^dë/i,
        /^më/i,
        /^do/i,
        /^f/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(mo\.?|nomë\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
    abbreviated: /^(moi\.?|nomët\.?|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i,
    wide: /^(moies|nomëttes|Mëtternuecht|mëttes|moies|nomëttes|owes|nuets)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^m/i,
        pm: /^n/i,
        midnight: /^Mëtter/i,
        noon: /^mëttes/i,
        morning: /moies/i,
        afternoon: /nomëttes/i,
        evening: /owes/i,
        night: /nuets/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"3f88152482a4daf5":"15lWd","78026159b30f77e1":"kWqg8"}],"9EUCz":[function(require,module,exports) {
"use strict";
exports.lt = void 0;
var _index = require("1321c6b2c64b41ac");
var _index2 = require("dccf0c2324ef98ff");
var _index3 = require("4e209fbf5a4be567");
var _index4 = require("b0389e288fec9278");
var _index5 = require("e70344b5185befdf");
/**
 * @category Locales
 * @summary Lithuanian locale.
 * @language Lithuanian
 * @iso-639-2 lit
 * @author Pavlo Shpak [@pshpak](https://github.com/pshpak)
 * @author Eduardo Pardo [@eduardopsll](https://github.com/eduardopsll)
 */ const lt = exports.lt = {
    code: "lt",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"1321c6b2c64b41ac":"c2lKv","dccf0c2324ef98ff":"lzTCz","4e209fbf5a4be567":"bEjgS","b0389e288fec9278":"4dNLk","e70344b5185befdf":"6TC2f"}],"c2lKv":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const translations = {
    xseconds_other: "sekund\u0117_sekund\u017Ei\u0173_sekundes",
    xminutes_one: "minut\u0117_minut\u0117s_minut\u0119",
    xminutes_other: "minut\u0117s_minu\u010Di\u0173_minutes",
    xhours_one: "valanda_valandos_valand\u0105",
    xhours_other: "valandos_valand\u0173_valandas",
    xdays_one: "diena_dienos_dien\u0105",
    xdays_other: "dienos_dien\u0173_dienas",
    xweeks_one: "savait\u0117_savait\u0117s_savait\u0119",
    xweeks_other: "savait\u0117s_savai\u010Di\u0173_savaites",
    xmonths_one: "m\u0117nuo_m\u0117nesio_m\u0117nes\u012F",
    xmonths_other: "m\u0117nesiai_m\u0117nesi\u0173_m\u0117nesius",
    xyears_one: "metai_met\u0173_metus",
    xyears_other: "metai_met\u0173_metus",
    about: "apie",
    over: "daugiau nei",
    almost: "beveik",
    lessthan: "ma\u017Eiau nei"
};
const translateSeconds = (_number, addSuffix, _key, isFuture)=>{
    if (!addSuffix) return "kelios sekund\u0117s";
    else return isFuture ? "keli\u0173 sekund\u017Ei\u0173" : "kelias sekundes";
};
const translateSingular = (_number, addSuffix, key, isFuture)=>{
    return !addSuffix ? forms(key)[0] : isFuture ? forms(key)[1] : forms(key)[2];
};
const translate = (number, addSuffix, key, isFuture)=>{
    const result = number + " ";
    if (number === 1) return result + translateSingular(number, addSuffix, key, isFuture);
    else if (!addSuffix) return result + (special(number) ? forms(key)[1] : forms(key)[0]);
    else {
        if (isFuture) return result + forms(key)[1];
        else return result + (special(number) ? forms(key)[1] : forms(key)[2]);
    }
};
function special(number) {
    return number % 10 === 0 || number > 10 && number < 20;
}
function forms(key) {
    return translations[key].split("_");
}
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: translateSeconds,
        other: translate
    },
    xSeconds: {
        one: translateSeconds,
        other: translate
    },
    halfAMinute: "pus\u0117 minut\u0117s",
    lessThanXMinutes: {
        one: translateSingular,
        other: translate
    },
    xMinutes: {
        one: translateSingular,
        other: translate
    },
    aboutXHours: {
        one: translateSingular,
        other: translate
    },
    xHours: {
        one: translateSingular,
        other: translate
    },
    xDays: {
        one: translateSingular,
        other: translate
    },
    aboutXWeeks: {
        one: translateSingular,
        other: translate
    },
    xWeeks: {
        one: translateSingular,
        other: translate
    },
    aboutXMonths: {
        one: translateSingular,
        other: translate
    },
    xMonths: {
        one: translateSingular,
        other: translate
    },
    aboutXYears: {
        one: translateSingular,
        other: translate
    },
    xYears: {
        one: translateSingular,
        other: translate
    },
    overXYears: {
        one: translateSingular,
        other: translate
    },
    almostXYears: {
        one: translateSingular,
        other: translate
    }
};
const formatDistance = (token, count, options)=>{
    const adverb = token.match(/about|over|almost|lessthan/i);
    const unit = adverb ? token.replace(adverb[0], "") : token;
    const isFuture = options?.comparison !== undefined && options.comparison > 0;
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one(count, options?.addSuffix === true, unit.toLowerCase() + "_one", isFuture);
    else result = tokenValue.other(count, options?.addSuffix === true, unit.toLowerCase() + "_other", isFuture);
    if (adverb) {
        const key = adverb[0].toLowerCase();
        result = translations[key] + " " + result;
    }
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "po " + result;
        else return "prie\u0161 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"lzTCz":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("c3b0957fe3bf3662");
const dateFormats = {
    full: "y 'm'. MMMM d 'd'., EEEE",
    long: "y 'm'. MMMM d 'd'.",
    medium: "y-MM-dd",
    short: "y-MM-dd"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"c3b0957fe3bf3662":"6OYyu"}],"bEjgS":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'Pra\u0117jus\u012F' eeee p",
    yesterday: "'Vakar' p",
    today: "'\u0160iandien' p",
    tomorrow: "'Rytoj' p",
    nextWeek: "eeee p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"4dNLk":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("fc6b7a13dfb23461");
const eraValues = {
    narrow: [
        "pr. Kr.",
        "po Kr."
    ],
    abbreviated: [
        "pr. Kr.",
        "po Kr."
    ],
    wide: [
        "prie\u0161 Krist\u0173",
        "po Kristaus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "I ketv.",
        "II ketv.",
        "III ketv.",
        "IV ketv."
    ],
    wide: [
        "I ketvirtis",
        "II ketvirtis",
        "III ketvirtis",
        "IV ketvirtis"
    ]
};
const formattingQuarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "I k.",
        "II k.",
        "III k.",
        "IV k."
    ],
    wide: [
        "I ketvirtis",
        "II ketvirtis",
        "III ketvirtis",
        "IV ketvirtis"
    ]
};
const monthValues = {
    narrow: [
        "S",
        "V",
        "K",
        "B",
        "G",
        "B",
        "L",
        "R",
        "R",
        "S",
        "L",
        "G"
    ],
    abbreviated: [
        "saus.",
        "vas.",
        "kov.",
        "bal.",
        "geg.",
        "bir\u017E.",
        "liep.",
        "rugp.",
        "rugs.",
        "spal.",
        "lapkr.",
        "gruod."
    ],
    wide: [
        "sausis",
        "vasaris",
        "kovas",
        "balandis",
        "gegu\u017E\u0117",
        "bir\u017Eelis",
        "liepa",
        "rugpj\u016Btis",
        "rugs\u0117jis",
        "spalis",
        "lapkritis",
        "gruodis"
    ]
};
const formattingMonthValues = {
    narrow: [
        "S",
        "V",
        "K",
        "B",
        "G",
        "B",
        "L",
        "R",
        "R",
        "S",
        "L",
        "G"
    ],
    abbreviated: [
        "saus.",
        "vas.",
        "kov.",
        "bal.",
        "geg.",
        "bir\u017E.",
        "liep.",
        "rugp.",
        "rugs.",
        "spal.",
        "lapkr.",
        "gruod."
    ],
    wide: [
        "sausio",
        "vasario",
        "kovo",
        "baland\u017Eio",
        "gegu\u017E\u0117s",
        "bir\u017Eelio",
        "liepos",
        "rugpj\u016B\u010Dio",
        "rugs\u0117jo",
        "spalio",
        "lapkri\u010Dio",
        "gruod\u017Eio"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "P",
        "A",
        "T",
        "K",
        "P",
        "\u0160"
    ],
    short: [
        "Sk",
        "Pr",
        "An",
        "Tr",
        "Kt",
        "Pn",
        "\u0160t"
    ],
    abbreviated: [
        "sk",
        "pr",
        "an",
        "tr",
        "kt",
        "pn",
        "\u0161t"
    ],
    wide: [
        "sekmadienis",
        "pirmadienis",
        "antradienis",
        "tre\u010Diadienis",
        "ketvirtadienis",
        "penktadienis",
        "\u0161e\u0161tadienis"
    ]
};
const formattingDayValues = {
    narrow: [
        "S",
        "P",
        "A",
        "T",
        "K",
        "P",
        "\u0160"
    ],
    short: [
        "Sk",
        "Pr",
        "An",
        "Tr",
        "Kt",
        "Pn",
        "\u0160t"
    ],
    abbreviated: [
        "sk",
        "pr",
        "an",
        "tr",
        "kt",
        "pn",
        "\u0161t"
    ],
    wide: [
        "sekmadien\u012F",
        "pirmadien\u012F",
        "antradien\u012F",
        "tre\u010Diadien\u012F",
        "ketvirtadien\u012F",
        "penktadien\u012F",
        "\u0161e\u0161tadien\u012F"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "pr. p.",
        pm: "pop.",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
    },
    abbreviated: {
        am: "prie\u0161piet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
    },
    wide: {
        am: "prie\u0161piet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "vidurdienis",
        morning: "rytas",
        afternoon: "diena",
        evening: "vakaras",
        night: "naktis"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "pr. p.",
        pm: "pop.",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popiet\u0117",
        evening: "vakaras",
        night: "naktis"
    },
    abbreviated: {
        am: "prie\u0161piet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popiet\u0117",
        evening: "vakaras",
        night: "naktis"
    },
    wide: {
        am: "prie\u0161piet",
        pm: "popiet",
        midnight: "vidurnaktis",
        noon: "perpiet",
        morning: "rytas",
        afternoon: "popiet\u0117",
        evening: "vakaras",
        night: "naktis"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "-oji";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"fc6b7a13dfb23461":"fGq1u"}],"6TC2f":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("638e55339d504367");
var _index2 = require("3ed28c9c386f9cc7");
const matchOrdinalNumberPattern = /^(\d+)(-oji)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^p(r|o)\.?\s?(kr\.?|me)/i,
    abbreviated: /^(pr\.\s?(kr\.|m\.\s?e\.)|po\s?kr\.|mūsų eroje)/i,
    wide: /^(prieš Kristų|prieš mūsų erą|po Kristaus|mūsų eroje)/i
};
const parseEraPatterns = {
    wide: [
        /prieš/i,
        /(po|mūsų)/i
    ],
    any: [
        /^pr/i,
        /^(po|m)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^([1234])/i,
    abbreviated: /^(I|II|III|IV)\s?ketv?\.?/i,
    wide: /^(I|II|III|IV)\s?ketvirtis/i
};
const parseQuarterPatterns = {
    narrow: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ],
    any: [
        /I$/i,
        /II$/i,
        /III/i,
        /IV/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[svkbglr]/i,
    abbreviated: /^(saus\.|vas\.|kov\.|bal\.|geg\.|birž\.|liep\.|rugp\.|rugs\.|spal\.|lapkr\.|gruod\.)/i,
    wide: /^(sausi(s|o)|vasari(s|o)|kov(a|o)s|balandž?i(s|o)|gegužės?|birželi(s|o)|liep(a|os)|rugpjū(t|č)i(s|o)|rugsėj(is|o)|spali(s|o)|lapkri(t|č)i(s|o)|gruodž?i(s|o))/i
};
const parseMonthPatterns = {
    narrow: [
        /^s/i,
        /^v/i,
        /^k/i,
        /^b/i,
        /^g/i,
        /^b/i,
        /^l/i,
        /^r/i,
        /^r/i,
        /^s/i,
        /^l/i,
        /^g/i
    ],
    any: [
        /^saus/i,
        /^vas/i,
        /^kov/i,
        /^bal/i,
        /^geg/i,
        /^birž/i,
        /^liep/i,
        /^rugp/i,
        /^rugs/i,
        /^spal/i,
        /^lapkr/i,
        /^gruod/i
    ]
};
const matchDayPatterns = {
    narrow: /^[spatkš]/i,
    short: /^(sk|pr|an|tr|kt|pn|št)/i,
    abbreviated: /^(sk|pr|an|tr|kt|pn|št)/i,
    wide: /^(sekmadien(is|į)|pirmadien(is|į)|antradien(is|į)|trečiadien(is|į)|ketvirtadien(is|į)|penktadien(is|į)|šeštadien(is|į))/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^p/i,
        /^a/i,
        /^t/i,
        /^k/i,
        /^p/i,
        /^š/i
    ],
    wide: [
        /^se/i,
        /^pi/i,
        /^an/i,
        /^tr/i,
        /^ke/i,
        /^pe/i,
        /^še/i
    ],
    any: [
        /^sk/i,
        /^pr/i,
        /^an/i,
        /^tr/i,
        /^kt/i,
        /^pn/i,
        /^št/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(pr.\s?p.|pop.|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i,
    any: /^(priešpiet|popiet$|vidurnaktis|(vidurdienis|perpiet)|rytas|(diena|popietė)|vakaras|naktis)/i
};
const parseDayPeriodPatterns = {
    narrow: {
        am: /^pr/i,
        pm: /^pop./i,
        midnight: /^vidurnaktis/i,
        noon: /^(vidurdienis|perp)/i,
        morning: /rytas/i,
        afternoon: /(die|popietė)/i,
        evening: /vakaras/i,
        night: /naktis/i
    },
    any: {
        am: /^pr/i,
        pm: /^popiet$/i,
        midnight: /^vidurnaktis/i,
        noon: /^(vidurdienis|perp)/i,
        morning: /rytas/i,
        afternoon: /(die|popietė)/i,
        evening: /vakaras/i,
        night: /naktis/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"638e55339d504367":"15lWd","3ed28c9c386f9cc7":"kWqg8"}],"hwiEe":[function(require,module,exports) {
"use strict";
exports.lv = void 0;
var _index = require("b35f7fccebff0275");
var _index2 = require("782f94ce050a0b53");
var _index3 = require("3c04d05acc5ea4e6");
var _index4 = require("2bb44c4d52b59b46");
var _index5 = require("ded3b9b9ffea2e9c");
/**
 * @category Locales
 * @summary Latvian locale (Latvia).
 * @language Latvian
 * @iso-639-2 lav
 * @author Rūdolfs Puķītis [@prudolfs](https://github.com/prudolfs)
 */ const lv = exports.lv = {
    code: "lv",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"b35f7fccebff0275":"41VDJ","782f94ce050a0b53":"iD1G9","3c04d05acc5ea4e6":"8cjfV","2bb44c4d52b59b46":"9PGqj","ded3b9b9ffea2e9c":"b9bBX"}],"41VDJ":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function buildLocalizeTokenFn(schema) {
    return (count, options)=>{
        if (count === 1) {
            if (options?.addSuffix) return schema.one[0].replace("{{time}}", schema.one[2]);
            else return schema.one[0].replace("{{time}}", schema.one[1]);
        } else {
            const rem = count % 10 === 1 && count % 100 !== 11;
            if (options?.addSuffix) return schema.other[0].replace("{{time}}", rem ? schema.other[3] : schema.other[4]).replace("{{count}}", String(count));
            else return schema.other[0].replace("{{time}}", rem ? schema.other[1] : schema.other[2]).replace("{{count}}", String(count));
        }
    };
}
const formatDistanceLocale = {
    lessThanXSeconds: buildLocalizeTokenFn({
        one: [
            "maz\u0101k par {{time}}",
            "sekundi",
            "sekundi"
        ],
        other: [
            "maz\u0101k nek\u0101 {{count}} {{time}}",
            "sekunde",
            "sekundes",
            "sekundes",
            "sekund\u0113m"
        ]
    }),
    xSeconds: buildLocalizeTokenFn({
        one: [
            "1 {{time}}",
            "sekunde",
            "sekundes"
        ],
        other: [
            "{{count}} {{time}}",
            "sekunde",
            "sekundes",
            "sekundes",
            "sekund\u0113m"
        ]
    }),
    halfAMinute: (_count, options)=>{
        if (options?.addSuffix) return "pusmin\u016Btes";
        else return "pusmin\u016Bte";
    },
    lessThanXMinutes: buildLocalizeTokenFn({
        one: [
            "maz\u0101k par {{time}}",
            "min\u016Bti",
            "min\u016Bti"
        ],
        other: [
            "maz\u0101k nek\u0101 {{count}} {{time}}",
            "min\u016Bte",
            "min\u016Btes",
            "min\u016Btes",
            "min\u016Bt\u0113m"
        ]
    }),
    xMinutes: buildLocalizeTokenFn({
        one: [
            "1 {{time}}",
            "min\u016Bte",
            "min\u016Btes"
        ],
        other: [
            "{{count}} {{time}}",
            "min\u016Bte",
            "min\u016Btes",
            "min\u016Btes",
            "min\u016Bt\u0113m"
        ]
    }),
    aboutXHours: buildLocalizeTokenFn({
        one: [
            "apm\u0113ram 1 {{time}}",
            "stunda",
            "stundas"
        ],
        other: [
            "apm\u0113ram {{count}} {{time}}",
            "stunda",
            "stundas",
            "stundas",
            "stund\u0101m"
        ]
    }),
    xHours: buildLocalizeTokenFn({
        one: [
            "1 {{time}}",
            "stunda",
            "stundas"
        ],
        other: [
            "{{count}} {{time}}",
            "stunda",
            "stundas",
            "stundas",
            "stund\u0101m"
        ]
    }),
    xDays: buildLocalizeTokenFn({
        one: [
            "1 {{time}}",
            "diena",
            "dienas"
        ],
        other: [
            "{{count}} {{time}}",
            "diena",
            "dienas",
            "dienas",
            "dien\u0101m"
        ]
    }),
    aboutXWeeks: buildLocalizeTokenFn({
        one: [
            "apm\u0113ram 1 {{time}}",
            "ned\u0113\u013Ca",
            "ned\u0113\u013Cas"
        ],
        other: [
            "apm\u0113ram {{count}} {{time}}",
            "ned\u0113\u013Ca",
            "ned\u0113\u013Cu",
            "ned\u0113\u013Cas",
            "ned\u0113\u013C\u0101m"
        ]
    }),
    xWeeks: buildLocalizeTokenFn({
        one: [
            "1 {{time}}",
            "ned\u0113\u013Ca",
            "ned\u0113\u013Cas"
        ],
        other: [
            "{{count}} {{time}}",
            "ned\u0113\u013Ca",
            "ned\u0113\u013Cu",
            "ned\u0113\u013Cas",
            "ned\u0113\u013C\u0101m"
        ]
    }),
    aboutXMonths: buildLocalizeTokenFn({
        one: [
            "apm\u0113ram 1 {{time}}",
            "m\u0113nesis",
            "m\u0113ne\u0161a"
        ],
        other: [
            "apm\u0113ram {{count}} {{time}}",
            "m\u0113nesis",
            "m\u0113ne\u0161i",
            "m\u0113ne\u0161a",
            "m\u0113ne\u0161iem"
        ]
    }),
    xMonths: buildLocalizeTokenFn({
        one: [
            "1 {{time}}",
            "m\u0113nesis",
            "m\u0113ne\u0161a"
        ],
        other: [
            "{{count}} {{time}}",
            "m\u0113nesis",
            "m\u0113ne\u0161i",
            "m\u0113ne\u0161a",
            "m\u0113ne\u0161iem"
        ]
    }),
    aboutXYears: buildLocalizeTokenFn({
        one: [
            "apm\u0113ram 1 {{time}}",
            "gads",
            "gada"
        ],
        other: [
            "apm\u0113ram {{count}} {{time}}",
            "gads",
            "gadi",
            "gada",
            "gadiem"
        ]
    }),
    xYears: buildLocalizeTokenFn({
        one: [
            "1 {{time}}",
            "gads",
            "gada"
        ],
        other: [
            "{{count}} {{time}}",
            "gads",
            "gadi",
            "gada",
            "gadiem"
        ]
    }),
    overXYears: buildLocalizeTokenFn({
        one: [
            "ilg\u0101k par 1 {{time}}",
            "gadu",
            "gadu"
        ],
        other: [
            "vair\u0101k nek\u0101 {{count}} {{time}}",
            "gads",
            "gadi",
            "gada",
            "gadiem"
        ]
    }),
    almostXYears: buildLocalizeTokenFn({
        one: [
            "gandr\u012Bz 1 {{time}}",
            "gads",
            "gada"
        ],
        other: [
            "vair\u0101k nek\u0101 {{count}} {{time}}",
            "gads",
            "gadi",
            "gada",
            "gadiem"
        ]
    })
};
const formatDistance = (token, count, options)=>{
    const result = formatDistanceLocale[token](count, options);
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "p\u0113c " + result;
        else return "pirms " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"iD1G9":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("80d3a5f85a76f64e");
const dateFormats = {
    full: "EEEE, y. 'gada' d. MMMM",
    long: "y. 'gada' d. MMMM",
    medium: "dd.MM.y.",
    short: "dd.MM.y."
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'plkst.' {{time}}",
    long: "{{date}} 'plkst.' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"80d3a5f85a76f64e":"6OYyu"}],"8cjfV":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("4b9729141d40f935");
const weekdays = [
    "sv\u0113tdien\u0101",
    "pirmdien\u0101",
    "otrdien\u0101",
    "tre\u0161dien\u0101",
    "ceturtdien\u0101",
    "piektdien\u0101",
    "sestdien\u0101"
];
const formatRelativeLocale = {
    lastWeek: (date, baseDate, options)=>{
        if ((0, _index.isSameWeek)(date, baseDate, options)) return "eeee 'plkst.' p";
        const weekday = weekdays[date.getDay()];
        return "'Pag\u0101ju\u0161\u0101 " + weekday + " plkst.' p";
    },
    yesterday: "'Vakar plkst.' p",
    today: "'\u0160odien plkst.' p",
    tomorrow: "'R\u012Bt plkst.' p",
    nextWeek: (date, baseDate, options)=>{
        if ((0, _index.isSameWeek)(date, baseDate, options)) return "eeee 'plkst.' p";
        const weekday = weekdays[date.getDay()];
        return "'N\u0101kamaj\u0101 " + weekday + " plkst.' p";
    },
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"4b9729141d40f935":"16SmB"}],"9PGqj":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("9e0dcc3ce731c913");
const eraValues = {
    narrow: [
        "p.m.\u0113",
        "m.\u0113"
    ],
    abbreviated: [
        "p. m. \u0113.",
        "m. \u0113."
    ],
    wide: [
        "pirms m\u016Bsu \u0113ras",
        "m\u016Bsu \u0113r\u0101"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1. cet.",
        "2. cet.",
        "3. cet.",
        "4. cet."
    ],
    wide: [
        "pirmais ceturksnis",
        "otrais ceturksnis",
        "tre\u0161ais ceturksnis",
        "ceturtais ceturksnis"
    ]
};
const formattingQuarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1. cet.",
        "2. cet.",
        "3. cet.",
        "4. cet."
    ],
    wide: [
        "pirmaj\u0101 ceturksn\u012B",
        "otraj\u0101 ceturksn\u012B",
        "tre\u0161aj\u0101 ceturksn\u012B",
        "ceturtaj\u0101 ceturksn\u012B"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "janv.",
        "febr.",
        "marts",
        "apr.",
        "maijs",
        "j\u016Bn.",
        "j\u016Bl.",
        "aug.",
        "sept.",
        "okt.",
        "nov.",
        "dec."
    ],
    wide: [
        "janv\u0101ris",
        "febru\u0101ris",
        "marts",
        "apr\u012Blis",
        "maijs",
        "j\u016Bnijs",
        "j\u016Blijs",
        "augusts",
        "septembris",
        "oktobris",
        "novembris",
        "decembris"
    ]
};
const formattingMonthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "janv.",
        "febr.",
        "mart\u0101",
        "apr.",
        "maijs",
        "j\u016Bn.",
        "j\u016Bl.",
        "aug.",
        "sept.",
        "okt.",
        "nov.",
        "dec."
    ],
    wide: [
        "janv\u0101r\u012B",
        "febru\u0101r\u012B",
        "mart\u0101",
        "apr\u012Bl\u012B",
        "maij\u0101",
        "j\u016Bnij\u0101",
        "j\u016Blij\u0101",
        "august\u0101",
        "septembr\u012B",
        "oktobr\u012B",
        "novembr\u012B",
        "decembr\u012B"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "P",
        "O",
        "T",
        "C",
        "P",
        "S"
    ],
    short: [
        "Sv",
        "P",
        "O",
        "T",
        "C",
        "Pk",
        "S"
    ],
    abbreviated: [
        "sv\u0113td.",
        "pirmd.",
        "otrd.",
        "tre\u0161d.",
        "ceturtd.",
        "piektd.",
        "sestd."
    ],
    wide: [
        "sv\u0113tdiena",
        "pirmdiena",
        "otrdiena",
        "tre\u0161diena",
        "ceturtdiena",
        "piektdiena",
        "sestdiena"
    ]
};
const formattingDayValues = {
    narrow: [
        "S",
        "P",
        "O",
        "T",
        "C",
        "P",
        "S"
    ],
    short: [
        "Sv",
        "P",
        "O",
        "T",
        "C",
        "Pk",
        "S"
    ],
    abbreviated: [
        "sv\u0113td.",
        "pirmd.",
        "otrd.",
        "tre\u0161d.",
        "ceturtd.",
        "piektd.",
        "sestd."
    ],
    wide: [
        "sv\u0113tdien\u0101",
        "pirmdien\u0101",
        "otrdien\u0101",
        "tre\u0161dien\u0101",
        "ceturtdien\u0101",
        "piektdien\u0101",
        "sestdien\u0101"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "r\u012Bts",
        afternoon: "diena",
        evening: "vakars",
        night: "nakts"
    },
    abbreviated: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "r\u012Bts",
        afternoon: "p\u0113cpusd.",
        evening: "vakars",
        night: "nakts"
    },
    wide: {
        am: "am",
        pm: "pm",
        midnight: "pusnakts",
        noon: "pusdienlaiks",
        morning: "r\u012Bts",
        afternoon: "p\u0113cpusdiena",
        evening: "vakars",
        night: "nakts"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "r\u012Bt\u0101",
        afternoon: "dien\u0101",
        evening: "vakar\u0101",
        night: "nakt\u012B"
    },
    abbreviated: {
        am: "am",
        pm: "pm",
        midnight: "pusn.",
        noon: "pusd.",
        morning: "r\u012Bt\u0101",
        afternoon: "p\u0113cpusd.",
        evening: "vakar\u0101",
        night: "nakt\u012B"
    },
    wide: {
        am: "am",
        pm: "pm",
        midnight: "pusnakt\u012B",
        noon: "pusdienlaik\u0101",
        morning: "r\u012Bt\u0101",
        afternoon: "p\u0113cpusdien\u0101",
        evening: "vakar\u0101",
        night: "nakt\u012B"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"9e0dcc3ce731c913":"fGq1u"}],"b9bBX":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("d4f098be5a951006");
var _index2 = require("d0bf6eeee95a00ac");
const matchOrdinalNumberPattern = /^(\d+)\./i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(p\.m\.ē|m\.ē)/i,
    abbreviated: /^(p\. m\. ē\.|m\. ē\.)/i,
    wide: /^(pirms mūsu ēras|mūsu ērā)/i
};
const parseEraPatterns = {
    any: [
        /^p/i,
        /^m/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234](\. cet\.)/i,
    wide: /^(pirma(is|jā)|otra(is|jā)|treša(is|jā)|ceturta(is|jā)) ceturksn(is|ī)/i
};
const parseQuarterPatterns = {
    narrow: [
        /^1/i,
        /^2/i,
        /^3/i,
        /^4/i
    ],
    abbreviated: [
        /^1/i,
        /^2/i,
        /^3/i,
        /^4/i
    ],
    wide: [
        /^p/i,
        /^o/i,
        /^t/i,
        /^c/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(janv\.|febr\.|marts|apr\.|maijs|jūn\.|jūl\.|aug\.|sept\.|okt\.|nov\.|dec\.)/i,
    wide: /^(janvār(is|ī)|februār(is|ī)|mart[sā]|aprīl(is|ī)|maij[sā]|jūnij[sā]|jūlij[sā]|august[sā]|septembr(is|ī)|oktobr(is|ī)|novembr(is|ī)|decembr(is|ī))/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mai/i,
        /^jūn/i,
        /^jūl/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[spotc]/i,
    short: /^(sv|pi|o|t|c|pk|s)/i,
    abbreviated: /^(svētd\.|pirmd\.|otrd.\|trešd\.|ceturtd\.|piektd\.|sestd\.)/i,
    wide: /^(svētdien(a|ā)|pirmdien(a|ā)|otrdien(a|ā)|trešdien(a|ā)|ceturtdien(a|ā)|piektdien(a|ā)|sestdien(a|ā))/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^p/i,
        /^o/i,
        /^t/i,
        /^c/i,
        /^p/i,
        /^s/i
    ],
    any: [
        /^sv/i,
        /^pi/i,
        /^o/i,
        /^t/i,
        /^c/i,
        /^p/i,
        /^se/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|dien(a|ā)|vakar(s|ā)|nakt(s|ī))/,
    abbreviated: /^(am|pm|pusn\.|pusd\.|rīt(s|ā)|pēcpusd\.|vakar(s|ā)|nakt(s|ī))/,
    wide: /^(am|pm|pusnakt(s|ī)|pusdienlaik(s|ā)|rīt(s|ā)|pēcpusdien(a|ā)|vakar(s|ā)|nakt(s|ī))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^pusn/i,
        noon: /^pusd/i,
        morning: /^r/i,
        afternoon: /^(d|pēc)/i,
        evening: /^v/i,
        night: /^n/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "wide",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"d4f098be5a951006":"15lWd","d0bf6eeee95a00ac":"kWqg8"}],"kr3Er":[function(require,module,exports) {
"use strict";
exports.mk = void 0;
var _index = require("8925ab54526707d2");
var _index2 = require("34d321b1a7ff5ac8");
var _index3 = require("e2556e9268d2d7e5");
var _index4 = require("db6ec8f067d677fb");
var _index5 = require("f670d2f3facec28a");
/**
 * @category Locales
 * @summary Macedonian locale.
 * @language Macedonian
 * @iso-639-2 mkd
 * @author Petar Vlahu [@vlahupetar](https://github.com/vlahupetar)
 * @author Altrim Beqiri [@altrim](https://github.com/altrim)
 */ const mk = exports.mk = {
    code: "mk",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"8925ab54526707d2":"2VgDA","34d321b1a7ff5ac8":"9Y3K3","e2556e9268d2d7e5":"hYZpH","db6ec8f067d677fb":"69Scg","f670d2f3facec28a":"g6M7z"}],"2VgDA":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u043F\u043E\u043C\u0430\u043B\u043A\u0443 \u043E\u0434 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
        other: "\u043F\u043E\u043C\u0430\u043B\u043A\u0443 \u043E\u0434 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
    },
    xSeconds: {
        one: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
        other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
    },
    halfAMinute: "\u043F\u043E\u043B\u043E\u0432\u0438\u043D\u0430 \u043C\u0438\u043D\u0443\u0442\u0430",
    lessThanXMinutes: {
        one: "\u043F\u043E\u043C\u0430\u043B\u043A\u0443 \u043E\u0434 \u043C\u0438\u043D\u0443\u0442\u0430",
        other: "\u043F\u043E\u043C\u0430\u043B\u043A\u0443 \u043E\u0434 {{count}} \u043C\u0438\u043D\u0443\u0442\u0438"
    },
    xMinutes: {
        one: "1 \u043C\u0438\u043D\u0443\u0442\u0430",
        other: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0438"
    },
    aboutXHours: {
        one: "\u043E\u043A\u043E\u043B\u0443 1 \u0447\u0430\u0441",
        other: "\u043E\u043A\u043E\u043B\u0443 {{count}} \u0447\u0430\u0441\u0430"
    },
    xHours: {
        one: "1 \u0447\u0430\u0441",
        other: "{{count}} \u0447\u0430\u0441\u0430"
    },
    xDays: {
        one: "1 \u0434\u0435\u043D",
        other: "{{count}} \u0434\u0435\u043D\u0430"
    },
    aboutXWeeks: {
        one: "\u043E\u043A\u043E\u043B\u0443 1 \u043D\u0435\u0434\u0435\u043B\u0430",
        other: "\u043E\u043A\u043E\u043B\u0443 {{count}} \u043C\u0435\u0441\u0435\u0446\u0438"
    },
    xWeeks: {
        one: "1 \u043D\u0435\u0434\u0435\u043B\u0430",
        other: "{{count}} \u043D\u0435\u0434\u0435\u043B\u0438"
    },
    aboutXMonths: {
        one: "\u043E\u043A\u043E\u043B\u0443 1 \u043C\u0435\u0441\u0435\u0446",
        other: "\u043E\u043A\u043E\u043B\u0443 {{count}} \u043D\u0435\u0434\u0435\u043B\u0438"
    },
    xMonths: {
        one: "1 \u043C\u0435\u0441\u0435\u0446",
        other: "{{count}} \u043C\u0435\u0441\u0435\u0446\u0438"
    },
    aboutXYears: {
        one: "\u043E\u043A\u043E\u043B\u0443 1 \u0433\u043E\u0434\u0438\u043D\u0430",
        other: "\u043E\u043A\u043E\u043B\u0443 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
    },
    xYears: {
        one: "1 \u0433\u043E\u0434\u0438\u043D\u0430",
        other: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
    },
    overXYears: {
        one: "\u043F\u043E\u0432\u0435\u045C\u0435 \u043E\u0434 1 \u0433\u043E\u0434\u0438\u043D\u0430",
        other: "\u043F\u043E\u0432\u0435\u045C\u0435 \u043E\u0434 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
    },
    almostXYears: {
        one: "\u0431\u0435\u0437\u043C\u0430\u043B\u043A\u0443 1 \u0433\u043E\u0434\u0438\u043D\u0430",
        other: "\u0431\u0435\u0437\u043C\u0430\u043B\u043A\u0443 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0437\u0430 " + result;
        else return "\u043F\u0440\u0435\u0434 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"9Y3K3":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("603d9b6dbe760383");
const dateFormats = {
    full: "EEEE, dd MMMM yyyy",
    long: "dd MMMM yyyy",
    medium: "dd MMM yyyy",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    any: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"603d9b6dbe760383":"6OYyu"}],"hYZpH":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("cf9efde69c0d4dd3");
const weekdays = [
    "\u043D\u0435\u0434\u0435\u043B\u0430",
    "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A",
    "\u0432\u0442\u043E\u0440\u043D\u0438\u043A",
    "\u0441\u0440\u0435\u0434\u0430",
    "\u0447\u0435\u0442\u0432\u0440\u0442\u043E\u043A",
    "\u043F\u0435\u0442\u043E\u043A",
    "\u0441\u0430\u0431\u043E\u0442\u0430"
];
function lastWeek(day) {
    const weekday = weekdays[day];
    switch(day){
        case 0:
        case 3:
        case 6:
            return "'\u043C\u0438\u043D\u0430\u0442\u0430\u0442\u0430 " + weekday + " \u0432\u043E' p";
        case 1:
        case 2:
        case 4:
        case 5:
            return "'\u043C\u0438\u043D\u0430\u0442\u0438\u043E\u0442 " + weekday + " \u0432\u043E' p";
    }
}
function thisWeek(day) {
    const weekday = weekdays[day];
    switch(day){
        case 0:
        case 3:
        case 6:
            return "'\u043E\u0432\u0430 " + weekday + " \u0432o' p";
        case 1:
        case 2:
        case 4:
        case 5:
            return "'\u043E\u0432\u043E\u0458 " + weekday + " \u0432o' p";
    }
}
function nextWeek(day) {
    const weekday = weekdays[day];
    switch(day){
        case 0:
        case 3:
        case 6:
            return "'\u0441\u043B\u0435\u0434\u043D\u0430\u0442\u0430 " + weekday + " \u0432o' p";
        case 1:
        case 2:
        case 4:
        case 5:
            return "'\u0441\u043B\u0435\u0434\u043D\u0438\u043E\u0442 " + weekday + " \u0432o' p";
    }
}
const formatRelativeLocale = {
    lastWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return lastWeek(day);
    },
    yesterday: "'\u0432\u0447\u0435\u0440\u0430 \u0432\u043E' p",
    today: "'\u0434\u0435\u043D\u0435\u0441 \u0432\u043E' p",
    tomorrow: "'\u0443\u0442\u0440\u0435 \u0432\u043E' p",
    nextWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return nextWeek(day);
    },
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"cf9efde69c0d4dd3":"16SmB"}],"69Scg":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("eae0ab42005010d3");
const eraValues = {
    narrow: [
        "\u043F\u0440.\u043D.\u0435.",
        "\u043D.\u0435."
    ],
    abbreviated: [
        "\u043F\u0440\u0435\u0434 \u043D. \u0435.",
        "\u043D. \u0435."
    ],
    wide: [
        "\u043F\u0440\u0435\u0434 \u043D\u0430\u0448\u0430\u0442\u0430 \u0435\u0440\u0430",
        "\u043D\u0430\u0448\u0430\u0442\u0430 \u0435\u0440\u0430"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u0432\u0438 \u043A\u0432.",
        "2-\u0440\u0438 \u043A\u0432.",
        "3-\u0442\u0438 \u043A\u0432.",
        "4-\u0442\u0438 \u043A\u0432."
    ],
    wide: [
        "1-\u0432\u0438 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "2-\u0440\u0438 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "3-\u0442\u0438 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "4-\u0442\u0438 \u043A\u0432\u0430\u0440\u0442\u0430\u043B"
    ]
};
const monthValues = {
    abbreviated: [
        "\u0458\u0430\u043D",
        "\u0444\u0435\u0432",
        "\u043C\u0430\u0440",
        "\u0430\u043F\u0440",
        "\u043C\u0430\u0458",
        "\u0458\u0443\u043D",
        "\u0458\u0443\u043B",
        "\u0430\u0432\u0433",
        "\u0441\u0435\u043F\u0442",
        "\u043E\u043A\u0442",
        "\u043D\u043E\u0435\u043C",
        "\u0434\u0435\u043A"
    ],
    wide: [
        "\u0458\u0430\u043D\u0443\u0430\u0440\u0438",
        "\u0444\u0435\u0432\u0440\u0443\u0430\u0440\u0438",
        "\u043C\u0430\u0440\u0442",
        "\u0430\u043F\u0440\u0438\u043B",
        "\u043C\u0430\u0458",
        "\u0458\u0443\u043D\u0438",
        "\u0458\u0443\u043B\u0438",
        "\u0430\u0432\u0433\u0443\u0441\u0442",
        "\u0441\u0435\u043F\u0442\u0435\u043C\u0432\u0440\u0438",
        "\u043E\u043A\u0442\u043E\u043C\u0432\u0440\u0438",
        "\u043D\u043E\u0435\u043C\u0432\u0440\u0438",
        "\u0434\u0435\u043A\u0435\u043C\u0432\u0440\u0438"
    ]
};
const dayValues = {
    narrow: [
        "\u041D",
        "\u041F",
        "\u0412",
        "\u0421",
        "\u0427",
        "\u041F",
        "\u0421"
    ],
    short: [
        "\u043D\u0435",
        "\u043F\u043E",
        "\u0432\u0442",
        "\u0441\u0440",
        "\u0447\u0435",
        "\u043F\u0435",
        "\u0441\u0430"
    ],
    abbreviated: [
        "\u043D\u0435\u0434",
        "\u043F\u043E\u043D",
        "\u0432\u0442\u043E",
        "\u0441\u0440\u0435",
        "\u0447\u0435\u0442",
        "\u043F\u0435\u0442",
        "\u0441\u0430\u0431"
    ],
    wide: [
        "\u043D\u0435\u0434\u0435\u043B\u0430",
        "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u043D\u0438\u043A",
        "\u0432\u0442\u043E\u0440\u043D\u0438\u043A",
        "\u0441\u0440\u0435\u0434\u0430",
        "\u0447\u0435\u0442\u0432\u0440\u0442\u043E\u043A",
        "\u043F\u0435\u0442\u043E\u043A",
        "\u0441\u0430\u0431\u043E\u0442\u0430"
    ]
};
const dayPeriodValues = {
    wide: {
        am: "\u043F\u0440\u0435\u0442\u043F\u043B\u0430\u0434\u043D\u0435",
        pm: "\u043F\u043E\u043F\u043B\u0430\u0434\u043D\u0435",
        midnight: "\u043F\u043E\u043B\u043D\u043E\u045C",
        noon: "\u043D\u0430\u043F\u043B\u0430\u0434\u043D\u0435",
        morning: "\u043D\u0430\u0443\u0442\u0440\u043E",
        afternoon: "\u043F\u043E\u043F\u043B\u0430\u0434\u043D\u0435",
        evening: "\u043D\u0430\u0432\u0435\u0447\u0435\u0440",
        night: "\u043D\u043E\u045C\u0435"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    const rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) switch(rem100 % 10){
        case 1:
            return number + "-\u0432\u0438";
        case 2:
            return number + "-\u0440\u0438";
        case 7:
        case 8:
            return number + "-\u043C\u0438";
    }
    return number + "-\u0442\u0438";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"eae0ab42005010d3":"fGq1u"}],"g6M7z":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("25a45c1a32506af9");
var _index2 = require("dcc8bf36e83b9fb8");
const matchOrdinalNumberPattern = /^(\d+)(-?[врмт][и])?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^((пр)?н\.?\s?е\.?)/i,
    abbreviated: /^((пр)?н\.?\s?е\.?)/i,
    wide: /^(пред нашата ера|нашата ера)/i
};
const parseEraPatterns = {
    any: [
        /^п/i,
        /^н/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234](-?[врт]?и?)? кв.?/i,
    wide: /^[1234](-?[врт]?и?)? квартал/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchDayPatterns = {
    narrow: /^[нпвсч]/i,
    short: /^(не|по|вт|ср|че|пе|са)/i,
    abbreviated: /^(нед|пон|вто|сре|чет|пет|саб)/i,
    wide: /^(недела|понеделник|вторник|среда|четврток|петок|сабота)/i
};
const parseDayPatterns = {
    narrow: [
        /^н/i,
        /^п/i,
        /^в/i,
        /^с/i,
        /^ч/i,
        /^п/i,
        /^с/i
    ],
    any: [
        /^н[ед]/i,
        /^п[он]/i,
        /^вт/i,
        /^ср/i,
        /^ч[ет]/i,
        /^п[ет]/i,
        /^с[аб]/i
    ]
};
const matchMonthPatterns = {
    abbreviated: /^(јан|фев|мар|апр|мај|јун|јул|авг|сеп|окт|ноем|дек)/i,
    wide: /^(јануари|февруари|март|април|мај|јуни|јули|август|септември|октомври|ноември|декември)/i
};
const parseMonthPatterns = {
    any: [
        /^ја/i,
        /^Ф/i,
        /^мар/i,
        /^ап/i,
        /^мај/i,
        /^јун/i,
        /^јул/i,
        /^ав/i,
        /^се/i,
        /^окт/i,
        /^но/i,
        /^де/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(претп|попл|полноќ|утро|пладне|вечер|ноќ)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /претпладне/i,
        pm: /попладне/i,
        midnight: /полноќ/i,
        noon: /напладне/i,
        morning: /наутро/i,
        afternoon: /попладне/i,
        evening: /навечер/i,
        night: /ноќе/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"25a45c1a32506af9":"15lWd","dcc8bf36e83b9fb8":"kWqg8"}],"5Kl8C":[function(require,module,exports) {
"use strict";
exports.mn = void 0;
var _index = require("5c9ee4ac3b273234");
var _index2 = require("129883288f9a473");
var _index3 = require("3982c073c0aba943");
var _index4 = require("6a03e19055a5109a");
var _index5 = require("71e7f79399d2f11b");
/**
 * @category Locales
 * @summary Mongolian locale.
 * @language Mongolian
 * @iso-639-2 mon
 * @author Bilguun Ochirbat [@bilguun0203](https://github.com/bilguun0203)
 */ const mn = exports.mn = {
    code: "mn",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"5c9ee4ac3b273234":"biaxl","129883288f9a473":"2v0c7","3982c073c0aba943":"66muH","6a03e19055a5109a":"lzZaC","71e7f79399d2f11b":"a4SiN"}],"biaxl":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0441\u0435\u043A\u0443\u043D\u0434 \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439",
        other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439"
    },
    xSeconds: {
        one: "1 \u0441\u0435\u043A\u0443\u043D\u0434",
        other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
    },
    halfAMinute: "\u0445\u0430\u0433\u0430\u0441 \u043C\u0438\u043D\u0443\u0442",
    lessThanXMinutes: {
        one: "\u043C\u0438\u043D\u0443\u0442 \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439",
        other: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439"
    },
    xMinutes: {
        one: "1 \u043C\u0438\u043D\u0443\u0442",
        other: "{{count}} \u043C\u0438\u043D\u0443\u0442"
    },
    aboutXHours: {
        one: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 1 \u0446\u0430\u0433",
        other: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 {{count}} \u0446\u0430\u0433"
    },
    xHours: {
        one: "1 \u0446\u0430\u0433",
        other: "{{count}} \u0446\u0430\u0433"
    },
    xDays: {
        one: "1 \u04E9\u0434\u04E9\u0440",
        other: "{{count}} \u04E9\u0434\u04E9\u0440"
    },
    aboutXWeeks: {
        one: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 1 \u0434\u043E\u043B\u043E\u043E \u0445\u043E\u043D\u043E\u0433",
        other: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 {{count}} \u0434\u043E\u043B\u043E\u043E \u0445\u043E\u043D\u043E\u0433"
    },
    xWeeks: {
        one: "1 \u0434\u043E\u043B\u043E\u043E \u0445\u043E\u043D\u043E\u0433",
        other: "{{count}} \u0434\u043E\u043B\u043E\u043E \u0445\u043E\u043D\u043E\u0433"
    },
    aboutXMonths: {
        one: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 1 \u0441\u0430\u0440",
        other: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 {{count}} \u0441\u0430\u0440"
    },
    xMonths: {
        one: "1 \u0441\u0430\u0440",
        other: "{{count}} \u0441\u0430\u0440"
    },
    aboutXYears: {
        one: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 1 \u0436\u0438\u043B",
        other: "\u043E\u0439\u0440\u043E\u043B\u0446\u043E\u043E\u0433\u043E\u043E\u0440 {{count}} \u0436\u0438\u043B"
    },
    xYears: {
        one: "1 \u0436\u0438\u043B",
        other: "{{count}} \u0436\u0438\u043B"
    },
    overXYears: {
        one: "1 \u0436\u0438\u043B \u0433\u0430\u0440\u0430\u043D",
        other: "{{count}} \u0436\u0438\u043B \u0433\u0430\u0440\u0430\u043D"
    },
    almostXYears: {
        one: "\u0431\u0430\u0440\u0430\u0433 1 \u0436\u0438\u043B",
        other: "\u0431\u0430\u0440\u0430\u0433 {{count}} \u0436\u0438\u043B"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        /**
     * Append genitive case
     */ const words = result.split(" ");
        const lastword = words.pop();
        result = words.join(" ");
        switch(lastword){
            case "\u0441\u0435\u043A\u0443\u043D\u0434":
                result += " \u0441\u0435\u043A\u0443\u043D\u0434\u0438\u0439\u043D";
                break;
            case "\u043C\u0438\u043D\u0443\u0442":
                result += " \u043C\u0438\u043D\u0443\u0442\u044B\u043D";
                break;
            case "\u0446\u0430\u0433":
                result += " \u0446\u0430\u0433\u0438\u0439\u043D";
                break;
            case "\u04E9\u0434\u04E9\u0440":
                result += " \u04E9\u0434\u0440\u0438\u0439\u043D";
                break;
            case "\u0441\u0430\u0440":
                result += " \u0441\u0430\u0440\u044B\u043D";
                break;
            case "\u0436\u0438\u043B":
                result += " \u0436\u0438\u043B\u0438\u0439\u043D";
                break;
            case "\u0445\u043E\u043D\u043E\u0433":
                result += " \u0445\u043E\u043D\u043E\u0433\u0438\u0439\u043D";
                break;
            case "\u0433\u0430\u0440\u0430\u043D":
                result += " \u0433\u0430\u0440\u0430\u043D\u044B";
                break;
            case "\u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439":
                result += " \u0445\u04AF\u0440\u044D\u0445\u0433\u04AF\u0439 \u0445\u0443\u0433\u0430\u0446\u0430\u0430\u043D\u044B";
                break;
            default:
                result += lastword + "-\u043D";
        }
        if (options.comparison && options.comparison > 0) return result + " \u0434\u0430\u0440\u0430\u0430";
        else return result + " \u04E9\u043C\u043D\u04E9";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"2v0c7":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("ec7a0499e1c81309");
const dateFormats = {
    full: "y '\u043E\u043D\u044B' MMMM'\u044B\u043D' d, EEEE '\u0433\u0430\u0440\u0430\u0433'",
    long: "y '\u043E\u043D\u044B' MMMM'\u044B\u043D' d",
    medium: "y '\u043E\u043D\u044B' MMM'\u044B\u043D' d",
    short: "y.MM.dd"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"ec7a0499e1c81309":"6OYyu"}],"66muH":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u04E9\u043D\u0433\u04E9\u0440\u0441\u04E9\u043D' eeee '\u0433\u0430\u0440\u0430\u0433\u0438\u0439\u043D' p '\u0446\u0430\u0433\u0442'",
    yesterday: "'\u04E9\u0447\u0438\u0433\u0434\u04E9\u0440' p '\u0446\u0430\u0433\u0442'",
    today: "'\u04E9\u043D\u04E9\u04E9\u0434\u04E9\u0440' p '\u0446\u0430\u0433\u0442'",
    tomorrow: "'\u043C\u0430\u0440\u0433\u0430\u0430\u0448' p '\u0446\u0430\u0433\u0442'",
    nextWeek: "'\u0438\u0440\u044D\u0445' eeee '\u0433\u0430\u0440\u0430\u0433\u0438\u0439\u043D' p '\u0446\u0430\u0433\u0442'",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"lzZaC":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("b8e434fe5be68406");
const eraValues = {
    narrow: [
        "\u041D\u0422\u04E8",
        "\u041D\u0422"
    ],
    abbreviated: [
        "\u041D\u0422\u04E8",
        "\u041D\u0422"
    ],
    wide: [
        "\u043D\u0438\u0439\u0442\u0438\u0439\u043D \u0442\u043E\u043E\u043B\u043B\u044B\u043D \u04E9\u043C\u043D\u04E9\u0445",
        "\u043D\u0438\u0439\u0442\u0438\u0439\u043D \u0442\u043E\u043E\u043B\u043B\u044B\u043D"
    ]
};
const quarterValues = {
    narrow: [
        "I",
        "II",
        "III",
        "IV"
    ],
    abbreviated: [
        "I \u0443\u043B\u0438\u0440\u0430\u043B",
        "II \u0443\u043B\u0438\u0440\u0430\u043B",
        "III \u0443\u043B\u0438\u0440\u0430\u043B",
        "IV \u0443\u043B\u0438\u0440\u0430\u043B"
    ],
    wide: [
        "1-\u0440 \u0443\u043B\u0438\u0440\u0430\u043B",
        "2-\u0440 \u0443\u043B\u0438\u0440\u0430\u043B",
        "3-\u0440 \u0443\u043B\u0438\u0440\u0430\u043B",
        "4-\u0440 \u0443\u043B\u0438\u0440\u0430\u043B"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII"
    ],
    abbreviated: [
        "1-\u0440 \u0441\u0430\u0440",
        "2-\u0440 \u0441\u0430\u0440",
        "3-\u0440 \u0441\u0430\u0440",
        "4-\u0440 \u0441\u0430\u0440",
        "5-\u0440 \u0441\u0430\u0440",
        "6-\u0440 \u0441\u0430\u0440",
        "7-\u0440 \u0441\u0430\u0440",
        "8-\u0440 \u0441\u0430\u0440",
        "9-\u0440 \u0441\u0430\u0440",
        "10-\u0440 \u0441\u0430\u0440",
        "11-\u0440 \u0441\u0430\u0440",
        "12-\u0440 \u0441\u0430\u0440"
    ],
    wide: [
        "\u041D\u044D\u0433\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440",
        "\u0425\u043E\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0413\u0443\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0414\u04E9\u0440\u04E9\u0432\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440",
        "\u0422\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0417\u0443\u0440\u0433\u0430\u0430\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0414\u043E\u043B\u043E\u043E\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u041D\u0430\u0439\u043C\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0415\u0441\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440",
        "\u0410\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0410\u0440\u0432\u0430\u043D\u043D\u044D\u0433\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440",
        "\u0410\u0440\u0432\u0430\u043D \u0445\u043E\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440"
    ]
};
const formattingMonthValues = {
    narrow: [
        "I",
        "II",
        "III",
        "IV",
        "V",
        "VI",
        "VII",
        "VIII",
        "IX",
        "X",
        "XI",
        "XII"
    ],
    abbreviated: [
        "1-\u0440 \u0441\u0430\u0440",
        "2-\u0440 \u0441\u0430\u0440",
        "3-\u0440 \u0441\u0430\u0440",
        "4-\u0440 \u0441\u0430\u0440",
        "5-\u0440 \u0441\u0430\u0440",
        "6-\u0440 \u0441\u0430\u0440",
        "7-\u0440 \u0441\u0430\u0440",
        "8-\u0440 \u0441\u0430\u0440",
        "9-\u0440 \u0441\u0430\u0440",
        "10-\u0440 \u0441\u0430\u0440",
        "11-\u0440 \u0441\u0430\u0440",
        "12-\u0440 \u0441\u0430\u0440"
    ],
    wide: [
        "\u043D\u044D\u0433\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440",
        "\u0445\u043E\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0433\u0443\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0434\u04E9\u0440\u04E9\u0432\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440",
        "\u0442\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0437\u0443\u0440\u0433\u0430\u0430\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0434\u043E\u043B\u043E\u043E\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u043D\u0430\u0439\u043C\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0435\u0441\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440",
        "\u0430\u0440\u0430\u0432\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440",
        "\u0430\u0440\u0432\u0430\u043D\u043D\u044D\u0433\u0434\u04AF\u0433\u044D\u044D\u0440 \u0441\u0430\u0440",
        "\u0430\u0440\u0432\u0430\u043D \u0445\u043E\u0451\u0440\u0434\u0443\u0433\u0430\u0430\u0440 \u0441\u0430\u0440"
    ]
};
const dayValues = {
    narrow: [
        "\u041D",
        "\u0414",
        "\u041C",
        "\u041B",
        "\u041F",
        "\u0411",
        "\u0411"
    ],
    short: [
        "\u041D\u044F",
        "\u0414\u0430",
        "\u041C\u044F",
        "\u041B\u0445",
        "\u041F\u04AF",
        "\u0411\u0430",
        "\u0411\u044F"
    ],
    abbreviated: [
        "\u041D\u044F\u043C",
        "\u0414\u0430\u0432",
        "\u041C\u044F\u0433",
        "\u041B\u0445\u0430",
        "\u041F\u04AF\u0440",
        "\u0411\u0430\u0430",
        "\u0411\u044F\u043C"
    ],
    wide: [
        "\u041D\u044F\u043C",
        "\u0414\u0430\u0432\u0430\u0430",
        "\u041C\u044F\u0433\u043C\u0430\u0440",
        "\u041B\u0445\u0430\u0433\u0432\u0430",
        "\u041F\u04AF\u0440\u044D\u0432",
        "\u0411\u0430\u0430\u0441\u0430\u043D",
        "\u0411\u044F\u043C\u0431\u0430"
    ]
};
const formattingDayValues = {
    narrow: [
        "\u041D",
        "\u0414",
        "\u041C",
        "\u041B",
        "\u041F",
        "\u0411",
        "\u0411"
    ],
    short: [
        "\u041D\u044F",
        "\u0414\u0430",
        "\u041C\u044F",
        "\u041B\u0445",
        "\u041F\u04AF",
        "\u0411\u0430",
        "\u0411\u044F"
    ],
    abbreviated: [
        "\u041D\u044F\u043C",
        "\u0414\u0430\u0432",
        "\u041C\u044F\u0433",
        "\u041B\u0445\u0430",
        "\u041F\u04AF\u0440",
        "\u0411\u0430\u0430",
        "\u0411\u044F\u043C"
    ],
    wide: [
        "\u043D\u044F\u043C",
        "\u0434\u0430\u0432\u0430\u0430",
        "\u043C\u044F\u0433\u043C\u0430\u0440",
        "\u043B\u0445\u0430\u0433\u0432\u0430",
        "\u043F\u04AF\u0440\u044D\u0432",
        "\u0431\u0430\u0430\u0441\u0430\u043D",
        "\u0431\u044F\u043C\u0431\u0430"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u04AF.\u04E9.",
        pm: "\u04AF.\u0445.",
        midnight: "\u0448\u04E9\u043D\u04E9 \u0434\u0443\u043D\u0434",
        noon: "\u04AF\u0434 \u0434\u0443\u043D\u0434",
        morning: "\u04E9\u0433\u043B\u04E9\u04E9",
        afternoon: "\u04E9\u0434\u04E9\u0440",
        evening: "\u043E\u0440\u043E\u0439",
        night: "\u0448\u04E9\u043D\u04E9"
    },
    abbreviated: {
        am: "\u04AF.\u04E9.",
        pm: "\u04AF.\u0445.",
        midnight: "\u0448\u04E9\u043D\u04E9 \u0434\u0443\u043D\u0434",
        noon: "\u04AF\u0434 \u0434\u0443\u043D\u0434",
        morning: "\u04E9\u0433\u043B\u04E9\u04E9",
        afternoon: "\u04E9\u0434\u04E9\u0440",
        evening: "\u043E\u0440\u043E\u0439",
        night: "\u0448\u04E9\u043D\u04E9"
    },
    wide: {
        am: "\u04AF.\u04E9.",
        pm: "\u04AF.\u0445.",
        midnight: "\u0448\u04E9\u043D\u04E9 \u0434\u0443\u043D\u0434",
        noon: "\u04AF\u0434 \u0434\u0443\u043D\u0434",
        morning: "\u04E9\u0433\u043B\u04E9\u04E9",
        afternoon: "\u04E9\u0434\u04E9\u0440",
        evening: "\u043E\u0440\u043E\u0439",
        night: "\u0448\u04E9\u043D\u04E9"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: formattingDayValues,
        defaultFormattingWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"b8e434fe5be68406":"fGq1u"}],"a4SiN":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("4426e3ae6b35198e");
var _index2 = require("f2b6d828b1316c0d");
const matchOrdinalNumberPattern = /\d+/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(нтө|нт)/i,
    abbreviated: /^(нтө|нт)/i,
    wide: /^(нийтийн тооллын өмнө|нийтийн тооллын)/i
};
const parseEraPatterns = {
    any: [
        /^(нтө|нийтийн тооллын өмнө)/i,
        /^(нт|нийтийн тооллын)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^(iv|iii|ii|i)/i,
    abbreviated: /^(iv|iii|ii|i) улирал/i,
    wide: /^[1-4]-р улирал/i
};
const parseQuarterPatterns = {
    any: [
        /^(i(\s|$)|1)/i,
        /^(ii(\s|$)|2)/i,
        /^(iii(\s|$)|3)/i,
        /^(iv(\s|$)|4)/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(xii|xi|x|ix|viii|vii|vi|v|iv|iii|ii|i)/i,
    abbreviated: /^(1-р сар|2-р сар|3-р сар|4-р сар|5-р сар|6-р сар|7-р сар|8-р сар|9-р сар|10-р сар|11-р сар|12-р сар)/i,
    wide: /^(нэгдүгээр сар|хоёрдугаар сар|гуравдугаар сар|дөрөвдүгээр сар|тавдугаар сар|зургаадугаар сар|долоодугаар сар|наймдугаар сар|есдүгээр сар|аравдугаар сар|арван нэгдүгээр сар|арван хоёрдугаар сар)/i
};
const parseMonthPatterns = {
    narrow: [
        /^i$/i,
        /^ii$/i,
        /^iii$/i,
        /^iv$/i,
        /^v$/i,
        /^vi$/i,
        /^vii$/i,
        /^viii$/i,
        /^ix$/i,
        /^x$/i,
        /^xi$/i,
        /^xii$/i
    ],
    any: [
        /^(1|нэгдүгээр)/i,
        /^(2|хоёрдугаар)/i,
        /^(3|гуравдугаар)/i,
        /^(4|дөрөвдүгээр)/i,
        /^(5|тавдугаар)/i,
        /^(6|зургаадугаар)/i,
        /^(7|долоодугаар)/i,
        /^(8|наймдугаар)/i,
        /^(9|есдүгээр)/i,
        /^(10|аравдугаар)/i,
        /^(11|арван нэгдүгээр)/i,
        /^(12|арван хоёрдугаар)/i
    ]
};
const matchDayPatterns = {
    narrow: /^[ндмлпбб]/i,
    short: /^(ня|да|мя|лх|пү|ба|бя)/i,
    abbreviated: /^(ням|дав|мяг|лха|пүр|баа|бям)/i,
    wide: /^(ням|даваа|мягмар|лхагва|пүрэв|баасан|бямба)/i
};
const parseDayPatterns = {
    narrow: [
        /^н/i,
        /^д/i,
        /^м/i,
        /^л/i,
        /^п/i,
        /^б/i,
        /^б/i
    ],
    any: [
        /^ня/i,
        /^да/i,
        /^мя/i,
        /^лх/i,
        /^пү/i,
        /^ба/i,
        /^бя/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ү\.ө\.|ү\.х\.|шөнө дунд|үд дунд|өглөө|өдөр|орой|шөнө)/i,
    any: /^(ү\.ө\.|ү\.х\.|шөнө дунд|үд дунд|өглөө|өдөр|орой|шөнө)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ү\.ө\./i,
        pm: /^ү\.х\./i,
        midnight: /^шөнө дунд/i,
        noon: /^үд дунд/i,
        morning: /өглөө/i,
        afternoon: /өдөр/i,
        evening: /орой/i,
        night: /шөнө/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"4426e3ae6b35198e":"15lWd","f2b6d828b1316c0d":"kWqg8"}],"a337R":[function(require,module,exports) {
"use strict";
exports.ms = void 0;
var _index = require("3ffb6e71c6afd9d4");
var _index2 = require("9091c94c1d889d77");
var _index3 = require("908a7b901dc7b65e");
var _index4 = require("7bca4737b5b94340");
var _index5 = require("71b6a82964c0e33f");
/**
 * @category Locales
 * @summary Malay locale.
 * @language Malay
 * @iso-639-2 msa
 * @author Ruban Selvarajah [@Zyten](https://github.com/Zyten)
 */ const ms = exports.ms = {
    code: "ms",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"3ffb6e71c6afd9d4":"7lwtT","9091c94c1d889d77":"JsYKP","908a7b901dc7b65e":"0XCRb","7bca4737b5b94340":"bRxRx","71b6a82964c0e33f":"1ABYf"}],"7lwtT":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "kurang dari 1 saat",
        other: "kurang dari {{count}} saat"
    },
    xSeconds: {
        one: "1 saat",
        other: "{{count}} saat"
    },
    halfAMinute: "setengah minit",
    lessThanXMinutes: {
        one: "kurang dari 1 minit",
        other: "kurang dari {{count}} minit"
    },
    xMinutes: {
        one: "1 minit",
        other: "{{count}} minit"
    },
    aboutXHours: {
        one: "sekitar 1 jam",
        other: "sekitar {{count}} jam"
    },
    xHours: {
        one: "1 jam",
        other: "{{count}} jam"
    },
    xDays: {
        one: "1 hari",
        other: "{{count}} hari"
    },
    aboutXWeeks: {
        one: "sekitar 1 minggu",
        other: "sekitar {{count}} minggu"
    },
    xWeeks: {
        one: "1 minggu",
        other: "{{count}} minggu"
    },
    aboutXMonths: {
        one: "sekitar 1 bulan",
        other: "sekitar {{count}} bulan"
    },
    xMonths: {
        one: "1 bulan",
        other: "{{count}} bulan"
    },
    aboutXYears: {
        one: "sekitar 1 tahun",
        other: "sekitar {{count}} tahun"
    },
    xYears: {
        one: "1 tahun",
        other: "{{count}} tahun"
    },
    overXYears: {
        one: "lebih dari 1 tahun",
        other: "lebih dari {{count}} tahun"
    },
    almostXYears: {
        one: "hampir 1 tahun",
        other: "hampir {{count}} tahun"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "dalam masa " + result;
        else return result + " yang lalu";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"JsYKP":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("9471e1cbb0ed7edd");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "d/M/yyyy"
};
const timeFormats = {
    full: "HH.mm.ss",
    long: "HH.mm.ss",
    medium: "HH.mm",
    short: "HH.mm"
};
const dateTimeFormats = {
    full: "{{date}} 'pukul' {{time}}",
    long: "{{date}} 'pukul' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"9471e1cbb0ed7edd":"6OYyu"}],"0XCRb":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'lepas pada jam' p",
    yesterday: "'Semalam pada jam' p",
    today: "'Hari ini pada jam' p",
    tomorrow: "'Esok pada jam' p",
    nextWeek: "eeee 'pada jam' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"bRxRx":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("661992ea99e17871");
// Most data for localization are taken from this page
// https://www.unicode.org/cldr/charts/32/summary/ms.html
const eraValues = {
    narrow: [
        "SM",
        "M"
    ],
    abbreviated: [
        "SM",
        "M"
    ],
    wide: [
        "Sebelum Masihi",
        "Masihi"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "S1",
        "S2",
        "S3",
        "S4"
    ],
    wide: [
        "Suku pertama",
        "Suku kedua",
        "Suku ketiga",
        "Suku keempat"
    ]
};
// Note: in Malay, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "O",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Jan",
        "Feb",
        "Mac",
        "Apr",
        "Mei",
        "Jun",
        "Jul",
        "Ogo",
        "Sep",
        "Okt",
        "Nov",
        "Dis"
    ],
    wide: [
        "Januari",
        "Februari",
        "Mac",
        "April",
        "Mei",
        "Jun",
        "Julai",
        "Ogos",
        "September",
        "Oktober",
        "November",
        "Disember"
    ]
};
const dayValues = {
    narrow: [
        "A",
        "I",
        "S",
        "R",
        "K",
        "J",
        "S"
    ],
    short: [
        "Ahd",
        "Isn",
        "Sel",
        "Rab",
        "Kha",
        "Jum",
        "Sab"
    ],
    abbreviated: [
        "Ahd",
        "Isn",
        "Sel",
        "Rab",
        "Kha",
        "Jum",
        "Sab"
    ],
    wide: [
        "Ahad",
        "Isnin",
        "Selasa",
        "Rabu",
        "Khamis",
        "Jumaat",
        "Sabtu"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "tgh malam",
        noon: "tgh hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "tengah malam",
        noon: "tengah hari",
        morning: "pagi",
        afternoon: "tengah hari",
        evening: "petang",
        night: "malam"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    // Can't use "pertama", "kedua" because can't be parsed
    return "ke-" + Number(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"661992ea99e17871":"fGq1u"}],"1ABYf":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("bad877e93c1ac415");
var _index2 = require("c02f779ac56d1d4f");
const matchOrdinalNumberPattern = /^ke-(\d+)?/i;
const parseOrdinalNumberPattern = /petama|\d+/i;
const matchEraPatterns = {
    narrow: /^(sm|m)/i,
    abbreviated: /^(s\.?\s?m\.?|m\.?)/i,
    wide: /^(sebelum masihi|masihi)/i
};
const parseEraPatterns = {
    any: [
        /^s/i,
        /^(m)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^S[1234]/i,
    wide: /Suku (pertama|kedua|ketiga|keempat)/i
};
const parseQuarterPatterns = {
    any: [
        /pertama|1/i,
        /kedua|2/i,
        /ketiga|3/i,
        /keempat|4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mac|apr|mei|jun|jul|ogo|sep|okt|nov|dis)/i,
    wide: /^(januari|februari|mac|april|mei|jun|julai|ogos|september|oktober|november|disember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^o/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^ma/i,
        /^ap/i,
        /^me/i,
        /^jun/i,
        /^jul/i,
        /^og/i,
        /^s/i,
        /^ok/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[aisrkj]/i,
    short: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
    abbreviated: /^(ahd|isn|sel|rab|kha|jum|sab)/i,
    wide: /^(ahad|isnin|selasa|rabu|khamis|jumaat|sabtu)/i
};
const parseDayPatterns = {
    narrow: [
        /^a/i,
        /^i/i,
        /^s/i,
        /^r/i,
        /^k/i,
        /^j/i,
        /^s/i
    ],
    any: [
        /^a/i,
        /^i/i,
        /^se/i,
        /^r/i,
        /^k/i,
        /^j/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(am|pm|tengah malam|tengah hari|pagi|petang|malam)/i,
    any: /^([ap]\.?\s?m\.?|tengah malam|tengah hari|pagi|petang|malam)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^pm/i,
        midnight: /^tengah m/i,
        noon: /^tengah h/i,
        morning: /pa/i,
        afternoon: /tengah h/i,
        evening: /pe/i,
        night: /m/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"bad877e93c1ac415":"15lWd","c02f779ac56d1d4f":"kWqg8"}],"3kfy1":[function(require,module,exports) {
"use strict";
exports.mt = void 0;
var _index = require("b3744b660f8272ff");
var _index2 = require("f4d74e27555d3131");
var _index3 = require("a70128ca88f8145d");
var _index4 = require("81242450bfe1520");
var _index5 = require("4993e47d78ddc25b");
/**
 * @category Locales
 * @summary Maltese locale.
 * @language Maltese
 * @iso-639-2 mlt
 * @author Andras Matzon [@amatzon](@link https://github.com/amatzon)
 * @author Bryan Borg [@bryanMt](@link https://github.com/bryanMt)
 */ const mt = exports.mt = {
    code: "mt",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"b3744b660f8272ff":"a5HUg","f4d74e27555d3131":"3VINq","a70128ca88f8145d":"cDEXb","81242450bfe1520":"e3Zoe","4993e47d78ddc25b":"9kvpA"}],"a5HUg":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "inqas minn sekonda",
        other: "inqas minn {{count}} sekondi"
    },
    xSeconds: {
        one: "sekonda",
        other: "{{count}} sekondi"
    },
    halfAMinute: "nofs minuta",
    lessThanXMinutes: {
        one: "inqas minn minuta",
        other: "inqas minn {{count}} minuti"
    },
    xMinutes: {
        one: "minuta",
        other: "{{count}} minuti"
    },
    aboutXHours: {
        one: "madwar sieg\u0127a",
        other: "madwar {{count}} sieg\u0127at"
    },
    xHours: {
        one: "sieg\u0127a",
        other: "{{count}} sieg\u0127at"
    },
    xDays: {
        one: "\u0121urnata",
        other: "{{count}} \u0121ranet"
    },
    aboutXWeeks: {
        one: "madwar \u0121img\u0127a",
        other: "madwar {{count}} \u0121img\u0127at"
    },
    xWeeks: {
        one: "\u0121img\u0127a",
        other: "{{count}} \u0121img\u0127at"
    },
    aboutXMonths: {
        one: "madwar xahar",
        other: "madwar {{count}} xhur"
    },
    xMonths: {
        one: "xahar",
        other: "{{count}} xhur"
    },
    aboutXYears: {
        one: "madwar sena",
        two: "madwar sentejn",
        other: "madwar {{count}} snin"
    },
    xYears: {
        one: "sena",
        two: "sentejn",
        other: "{{count}} snin"
    },
    overXYears: {
        one: "aktar minn sena",
        two: "aktar minn sentejn",
        other: "aktar minn {{count}} snin"
    },
    almostXYears: {
        one: "kwa\u017Ci sena",
        two: "kwa\u017Ci sentejn",
        other: "kwa\u017Ci {{count}} snin"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else if (count === 2 && tokenValue.two) result = tokenValue.two;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "f'" + result;
        else return result + " ilu";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"3VINq":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("208ac18d1f468e9a");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"208ac18d1f468e9a":"6OYyu"}],"cDEXb":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'li g\u0127adda' 'fil-'p",
    yesterday: "'Il-biera\u0127 fil-'p",
    today: "'Illum fil-'p",
    tomorrow: "'G\u0127ada fil-'p",
    nextWeek: "eeee 'fil-'p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"e3Zoe":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("38cde0395ea5be06");
const eraValues = {
    narrow: [
        "Q",
        "W"
    ],
    abbreviated: [
        "QK",
        "WK"
    ],
    wide: [
        "qabel Kristu",
        "wara Kristu"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "1. kwart",
        "2. kwart",
        "3. kwart",
        "4. kwart"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "\u0120",
        "L",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Jan",
        "Fra",
        "Mar",
        "Apr",
        "Mej",
        "\u0120un",
        "Lul",
        "Aww",
        "Set",
        "Ott",
        "Nov",
        "Di\u010B"
    ],
    wide: [
        "Jannar",
        "Frar",
        "Marzu",
        "April",
        "Mejju",
        "\u0120unju",
        "Lulju",
        "Awwissu",
        "Settembru",
        "Ottubru",
        "Novembru",
        "Di\u010Bembru"
    ]
};
const dayValues = {
    narrow: [
        "\u0126",
        "T",
        "T",
        "E",
        "\u0126",
        "\u0120",
        "S"
    ],
    short: [
        "\u0126a",
        "Tn",
        "Tl",
        "Er",
        "\u0126a",
        "\u0120i",
        "Si"
    ],
    abbreviated: [
        "\u0126ad",
        "Tne",
        "Tli",
        "Erb",
        "\u0126am",
        "\u0120im",
        "Sib"
    ],
    wide: [
        "Il-\u0126add",
        "It-Tnejn",
        "It-Tlieta",
        "L-Erbg\u0127a",
        "Il-\u0126amis",
        "Il-\u0120img\u0127a",
        "Is-Sibt"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "nofsillejl",
        noon: "nofsinhar",
        morning: "g\u0127odwa",
        afternoon: "wara nofsinhar",
        evening: "filg\u0127axija",
        night: "lejl"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "nofsillejl",
        noon: "nofsinhar",
        morning: "g\u0127odwa",
        afternoon: "wara nofsinhar",
        evening: "filg\u0127axija",
        night: "lejl"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "nofsillejl",
        noon: "nofsinhar",
        morning: "g\u0127odwa",
        afternoon: "wara nofsinhar",
        evening: "filg\u0127axija",
        night: "lejl"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: "filg\u0127odu",
        afternoon: "wara nofsinhar",
        evening: "filg\u0127axija",
        night: "billejl"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: "filg\u0127odu",
        afternoon: "wara nofsinhar",
        evening: "filg\u0127axija",
        night: "billejl"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "f'nofsillejl",
        noon: "f'nofsinhar",
        morning: "filg\u0127odu",
        afternoon: "wara nofsinhar",
        evening: "filg\u0127axija",
        night: "billejl"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "\xba";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"38cde0395ea5be06":"fGq1u"}],"9kvpA":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("771af50d977b3564");
var _index2 = require("ee2354233262fd80");
const matchOrdinalNumberPattern = /^(\d+)(º)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(q|w)/i,
    abbreviated: /^(q\.?\s?k\.?|b\.?\s?c\.?\s?e\.?|w\.?\s?k\.?)/i,
    wide: /^(qabel kristu|before common era|wara kristu|common era)/i
};
const parseEraPatterns = {
    any: [
        /^(q|b)/i,
        /^(w|c)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^k[1234]/i,
    wide: /^[1234](\.)? kwart/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmaglsond]/i,
    abbreviated: /^(jan|fra|mar|apr|mej|ġun|lul|aww|set|ott|nov|diċ)/i,
    wide: /^(jannar|frar|marzu|april|mejju|ġunju|lulju|awwissu|settembru|ottubru|novembru|diċembru)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^ġ/i,
        /^l/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mej/i,
        /^ġ/i,
        /^l/i,
        /^aw/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[ħteġs]/i,
    short: /^(ħa|tn|tl|er|ħa|ġi|si)/i,
    abbreviated: /^(ħad|tne|tli|erb|ħam|ġim|sib)/i,
    wide: /^(il-ħadd|it-tnejn|it-tlieta|l-erbgħa|il-ħamis|il-ġimgħa|is-sibt)/i
};
const parseDayPatterns = {
    narrow: [
        /^ħ/i,
        /^t/i,
        /^t/i,
        /^e/i,
        /^ħ/i,
        /^ġ/i,
        /^s/i
    ],
    any: [
        /^(il-)?ħad/i,
        /^(it-)?tn/i,
        /^(it-)?tl/i,
        /^(l-)?er/i,
        /^(il-)?ham/i,
        /^(il-)?ġi/i,
        /^(is-)?si/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i,
    any: /^([ap]\.?\s?m\.?|f'nofsillejl|f'nofsinhar|(ta') (għodwa|wara nofsinhar|filgħaxija|lejl))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^f'nofsillejl/i,
        noon: /^f'nofsinhar/i,
        morning: /għodwa/i,
        afternoon: /wara(\s.*)nofsinhar/i,
        evening: /filgħaxija/i,
        night: /lejl/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"771af50d977b3564":"15lWd","ee2354233262fd80":"kWqg8"}],"fKqsG":[function(require,module,exports) {
"use strict";
exports.nb = void 0;
var _index = require("3fa4ac983fa60ad4");
var _index2 = require("e3acecff779fbd50");
var _index3 = require("c90db4fe5dc63269");
var _index4 = require("439bbed65c1e3524");
var _index5 = require("84a37725a1e66ce0");
/**
 * @category Locales
 * @summary Norwegian Bokmål locale.
 * @language Norwegian Bokmål
 * @iso-639-2 nob
 * @author Hans-Kristian Koren [@Hanse](https://github.com/Hanse)
 * @author Mikolaj Grzyb [@mikolajgrzyb](https://github.com/mikolajgrzyb)
 * @author Dag Stuan [@dagstuan](https://github.com/dagstuan)
 */ const nb = exports.nb = {
    code: "nb",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"3fa4ac983fa60ad4":"9o3Um","e3acecff779fbd50":"5jZiw","c90db4fe5dc63269":"4jNY8","439bbed65c1e3524":"4LTOj","84a37725a1e66ce0":"17hFH"}],"9o3Um":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "mindre enn ett sekund",
        other: "mindre enn {{count}} sekunder"
    },
    xSeconds: {
        one: "ett sekund",
        other: "{{count}} sekunder"
    },
    halfAMinute: "et halvt minutt",
    lessThanXMinutes: {
        one: "mindre enn ett minutt",
        other: "mindre enn {{count}} minutter"
    },
    xMinutes: {
        one: "ett minutt",
        other: "{{count}} minutter"
    },
    aboutXHours: {
        one: "omtrent en time",
        other: "omtrent {{count}} timer"
    },
    xHours: {
        one: "en time",
        other: "{{count}} timer"
    },
    xDays: {
        one: "en dag",
        other: "{{count}} dager"
    },
    aboutXWeeks: {
        one: "omtrent en uke",
        other: "omtrent {{count}} uker"
    },
    xWeeks: {
        one: "en uke",
        other: "{{count}} uker"
    },
    aboutXMonths: {
        one: "omtrent en m\xe5ned",
        other: "omtrent {{count}} m\xe5neder"
    },
    xMonths: {
        one: "en m\xe5ned",
        other: "{{count}} m\xe5neder"
    },
    aboutXYears: {
        one: "omtrent ett \xe5r",
        other: "omtrent {{count}} \xe5r"
    },
    xYears: {
        one: "ett \xe5r",
        other: "{{count}} \xe5r"
    },
    overXYears: {
        one: "over ett \xe5r",
        other: "over {{count}} \xe5r"
    },
    almostXYears: {
        one: "nesten ett \xe5r",
        other: "nesten {{count}} \xe5r"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "om " + result;
        else return result + " siden";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"5jZiw":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("9809b32a289821e6");
const dateFormats = {
    full: "EEEE d. MMMM y",
    long: "d. MMMM y",
    medium: "d. MMM y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "'kl'. HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'kl.' {{time}}",
    long: "{{date}} 'kl.' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"9809b32a289821e6":"6OYyu"}],"4jNY8":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'forrige' eeee 'kl.' p",
    yesterday: "'i g\xe5r kl.' p",
    today: "'i dag kl.' p",
    tomorrow: "'i morgen kl.' p",
    nextWeek: "EEEE 'kl.' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"4LTOj":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("506aeecaacf7051");
const eraValues = {
    narrow: [
        "f.Kr.",
        "e.Kr."
    ],
    abbreviated: [
        "f.Kr.",
        "e.Kr."
    ],
    wide: [
        "f\xf8r Kristus",
        "etter Kristus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1. kvartal",
        "2. kvartal",
        "3. kvartal",
        "4. kvartal"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mars",
        "apr.",
        "mai",
        "juni",
        "juli",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "des."
    ],
    wide: [
        "januar",
        "februar",
        "mars",
        "april",
        "mai",
        "juni",
        "juli",
        "august",
        "september",
        "oktober",
        "november",
        "desember"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "T",
        "O",
        "T",
        "F",
        "L"
    ],
    short: [
        "s\xf8",
        "ma",
        "ti",
        "on",
        "to",
        "fr",
        "l\xf8"
    ],
    abbreviated: [
        "s\xf8n",
        "man",
        "tir",
        "ons",
        "tor",
        "fre",
        "l\xf8r"
    ],
    wide: [
        "s\xf8ndag",
        "mandag",
        "tirsdag",
        "onsdag",
        "torsdag",
        "fredag",
        "l\xf8rdag"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morg.",
        afternoon: "p\xe5 etterm.",
        evening: "p\xe5 kvelden",
        night: "p\xe5 natten"
    },
    abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morg.",
        afternoon: "p\xe5 etterm.",
        evening: "p\xe5 kvelden",
        night: "p\xe5 natten"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morgenen",
        afternoon: "p\xe5 ettermiddagen",
        evening: "p\xe5 kvelden",
        night: "p\xe5 natten"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"506aeecaacf7051":"fGq1u"}],"17hFH":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("59bd442fb6ffc81");
var _index2 = require("20565aab2d45e459");
const matchOrdinalNumberPattern = /^(\d+)\.?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
    abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
    wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
const parseEraPatterns = {
    any: [
        /^f/i,
        /^e/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](\.)? kvartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
    wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smtofl]/i,
    short: /^(sø|ma|ti|on|to|fr|lø)/i,
    abbreviated: /^(søn|man|tir|ons|tor|fre|lør)/i,
    wide: /^(søndag|mandag|tirsdag|onsdag|torsdag|fredag|lørdag)/i
};
const parseDayPatterns = {
    any: [
        /^s/i,
        /^m/i,
        /^ti/i,
        /^o/i,
        /^to/i,
        /^f/i,
        /^l/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten)|[ap])/i,
    any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgenen|ettermiddagen|kvelden|natten))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgen/i,
        afternoon: /ettermiddag/i,
        evening: /kveld/i,
        night: /natt/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"59bd442fb6ffc81":"15lWd","20565aab2d45e459":"kWqg8"}],"7i3p4":[function(require,module,exports) {
"use strict";
exports.nl = void 0;
var _index = require("2a42bce5ba6065e");
var _index2 = require("3d97e3df8141ac97");
var _index3 = require("a823cc33c08f8680");
var _index4 = require("671370ede37da9d1");
var _index5 = require("e7f8eb312a45d8c9");
/**
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder](https://github.com/jtangelder)
 * @author Ruben Stolk [@rubenstolk](https://github.com/rubenstolk)
 * @author Lode Vanhove [@bitcrumb](https://github.com/bitcrumb)
 * @author Edo Rivai [@edorivai](https://github.com/edorivai)
 * @author Niels Keurentjes [@curry684](https://github.com/curry684)
 * @author Stefan Vermaas [@stefanvermaas](https://github.com/stefanvermaas)
 */ const nl = exports.nl = {
    code: "nl",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"2a42bce5ba6065e":"1aJTn","3d97e3df8141ac97":"e0s72","a823cc33c08f8680":"31qhS","671370ede37da9d1":"5ECUj","e7f8eb312a45d8c9":"jXyoD"}],"1aJTn":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "minder dan een seconde",
        other: "minder dan {{count}} seconden"
    },
    xSeconds: {
        one: "1 seconde",
        other: "{{count}} seconden"
    },
    halfAMinute: "een halve minuut",
    lessThanXMinutes: {
        one: "minder dan een minuut",
        other: "minder dan {{count}} minuten"
    },
    xMinutes: {
        one: "een minuut",
        other: "{{count}} minuten"
    },
    aboutXHours: {
        one: "ongeveer 1 uur",
        other: "ongeveer {{count}} uur"
    },
    xHours: {
        one: "1 uur",
        other: "{{count}} uur"
    },
    xDays: {
        one: "1 dag",
        other: "{{count}} dagen"
    },
    aboutXWeeks: {
        one: "ongeveer 1 week",
        other: "ongeveer {{count}} weken"
    },
    xWeeks: {
        one: "1 week",
        other: "{{count}} weken"
    },
    aboutXMonths: {
        one: "ongeveer 1 maand",
        other: "ongeveer {{count}} maanden"
    },
    xMonths: {
        one: "1 maand",
        other: "{{count}} maanden"
    },
    aboutXYears: {
        one: "ongeveer 1 jaar",
        other: "ongeveer {{count}} jaar"
    },
    xYears: {
        one: "1 jaar",
        other: "{{count}} jaar"
    },
    overXYears: {
        one: "meer dan 1 jaar",
        other: "meer dan {{count}} jaar"
    },
    almostXYears: {
        one: "bijna 1 jaar",
        other: "bijna {{count}} jaar"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "over " + result;
        else return result + " geleden";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"e0s72":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("f2123ab8db1c36e1");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd-MM-y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'om' {{time}}",
    long: "{{date}} 'om' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"f2123ab8db1c36e1":"6OYyu"}],"31qhS":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'afgelopen' eeee 'om' p",
    yesterday: "'gisteren om' p",
    today: "'vandaag om' p",
    tomorrow: "'morgen om' p",
    nextWeek: "eeee 'om' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"5ECUj":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("dd8e215e126a37d0");
const eraValues = {
    narrow: [
        "v.C.",
        "n.C."
    ],
    abbreviated: [
        "v.Chr.",
        "n.Chr."
    ],
    wide: [
        "voor Christus",
        "na Christus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "1e kwartaal",
        "2e kwartaal",
        "3e kwartaal",
        "4e kwartaal"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mrt.",
        "apr.",
        "mei",
        "jun.",
        "jul.",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
    ],
    wide: [
        "januari",
        "februari",
        "maart",
        "april",
        "mei",
        "juni",
        "juli",
        "augustus",
        "september",
        "oktober",
        "november",
        "december"
    ]
};
const dayValues = {
    narrow: [
        "Z",
        "M",
        "D",
        "W",
        "D",
        "V",
        "Z"
    ],
    short: [
        "zo",
        "ma",
        "di",
        "wo",
        "do",
        "vr",
        "za"
    ],
    abbreviated: [
        "zon",
        "maa",
        "din",
        "woe",
        "don",
        "vri",
        "zat"
    ],
    wide: [
        "zondag",
        "maandag",
        "dinsdag",
        "woensdag",
        "donderdag",
        "vrijdag",
        "zaterdag"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middaguur",
        morning: "'s ochtends",
        afternoon: "'s middags",
        evening: "'s avonds",
        night: "'s nachts"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "e";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"dd8e215e126a37d0":"fGq1u"}],"jXyoD":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("99b126c5ef1997c2");
var _index2 = require("81316497b5f5c6a3");
const matchOrdinalNumberPattern = /^(\d+)e?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^([vn]\.? ?C\.?)/,
    abbreviated: /^([vn]\. ?Chr\.?)/,
    wide: /^((voor|na) Christus)/
};
const parseEraPatterns = {
    any: [
        /^v/,
        /^n/
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^K[1234]/i,
    wide: /^[1234]e kwartaal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
    wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^jan/i,
        /^feb/i,
        /^m(r|a)/i,
        /^apr/i,
        /^mei/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^sep/i,
        /^okt/i,
        /^nov/i,
        /^dec/i
    ]
};
const matchDayPatterns = {
    narrow: /^[zmdwv]/i,
    short: /^(zo|ma|di|wo|do|vr|za)/i,
    abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
    wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
const parseDayPatterns = {
    narrow: [
        /^z/i,
        /^m/i,
        /^d/i,
        /^w/i,
        /^d/i,
        /^v/i,
        /^z/i
    ],
    any: [
        /^zo/i,
        /^ma/i,
        /^di/i,
        /^wo/i,
        /^do/i,
        /^vr/i,
        /^za/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^het middaguur/i,
        morning: /ochtend/i,
        afternoon: /middag/i,
        evening: /avond/i,
        night: /nacht/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"99b126c5ef1997c2":"15lWd","81316497b5f5c6a3":"kWqg8"}],"cJzCz":[function(require,module,exports) {
"use strict";
exports.nlBE = void 0;
var _index = require("df965b8e8b30390a");
var _index2 = require("4d6d9e6dde87334e");
var _index3 = require("718b64ae6fcf668a");
var _index4 = require("55806b2aad16a14b");
var _index5 = require("d2ec05242b35645e");
/**
 * @category Locales
 * @summary Dutch locale.
 * @language Dutch
 * @iso-639-2 nld
 * @author Jorik Tangelder [@jtangelder](https://github.com/jtangelder)
 * @author Ruben Stolk [@rubenstolk](https://github.com/rubenstolk)
 * @author Lode Vanhove [@bitcrumb](https://github.com/bitcrumb)
 * @author Alex Hoeing [@dcbn](https://github.com/dcbn)
 */ const nlBE = exports.nlBE = {
    code: "nl-BE",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"df965b8e8b30390a":"5ee2g","4d6d9e6dde87334e":"5BIff","718b64ae6fcf668a":"4QCIF","55806b2aad16a14b":"2OkK0","d2ec05242b35645e":"7zFmG"}],"5ee2g":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "minder dan een seconde",
        other: "minder dan {{count}} seconden"
    },
    xSeconds: {
        one: "1 seconde",
        other: "{{count}} seconden"
    },
    halfAMinute: "een halve minuut",
    lessThanXMinutes: {
        one: "minder dan een minuut",
        other: "minder dan {{count}} minuten"
    },
    xMinutes: {
        one: "een minuut",
        other: "{{count}} minuten"
    },
    aboutXHours: {
        one: "ongeveer 1 uur",
        other: "ongeveer {{count}} uur"
    },
    xHours: {
        one: "1 uur",
        other: "{{count}} uur"
    },
    xDays: {
        one: "1 dag",
        other: "{{count}} dagen"
    },
    aboutXWeeks: {
        one: "ongeveer 1 week",
        other: "ongeveer {{count}} weken"
    },
    xWeeks: {
        one: "1 week",
        other: "{{count}} weken"
    },
    aboutXMonths: {
        one: "ongeveer 1 maand",
        other: "ongeveer {{count}} maanden"
    },
    xMonths: {
        one: "1 maand",
        other: "{{count}} maanden"
    },
    aboutXYears: {
        one: "ongeveer 1 jaar",
        other: "ongeveer {{count}} jaar"
    },
    xYears: {
        one: "1 jaar",
        other: "{{count}} jaar"
    },
    overXYears: {
        one: "meer dan 1 jaar",
        other: "meer dan {{count}} jaar"
    },
    almostXYears: {
        one: "bijna 1 jaar",
        other: "bijna {{count}} jaar"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "over " + result;
        else return result + " geleden";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"5BIff":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("6abc30f027fbd52d");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'om' {{time}}",
    long: "{{date}} 'om' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"6abc30f027fbd52d":"6OYyu"}],"4QCIF":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'vorige' eeee 'om' p",
    yesterday: "'gisteren om' p",
    today: "'vandaag om' p",
    tomorrow: "'morgen om' p",
    nextWeek: "eeee 'om' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"2OkK0":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("77eebdbc6892f941");
const eraValues = {
    narrow: [
        "v.C.",
        "n.C."
    ],
    abbreviated: [
        "v.Chr.",
        "n.Chr."
    ],
    wide: [
        "voor Christus",
        "na Christus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "K1",
        "K2",
        "K3",
        "K4"
    ],
    wide: [
        "1e kwartaal",
        "2e kwartaal",
        "3e kwartaal",
        "4e kwartaal"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mrt.",
        "apr.",
        "mei",
        "jun.",
        "jul.",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
    ],
    wide: [
        "januari",
        "februari",
        "maart",
        "april",
        "mei",
        "juni",
        "juli",
        "augustus",
        "september",
        "oktober",
        "november",
        "december"
    ]
};
const dayValues = {
    narrow: [
        "Z",
        "M",
        "D",
        "W",
        "D",
        "V",
        "Z"
    ],
    short: [
        "zo",
        "ma",
        "di",
        "wo",
        "do",
        "vr",
        "za"
    ],
    abbreviated: [
        "zon",
        "maa",
        "din",
        "woe",
        "don",
        "vri",
        "zat"
    ],
    wide: [
        "zondag",
        "maandag",
        "dinsdag",
        "woensdag",
        "donderdag",
        "vrijdag",
        "zaterdag"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middag",
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middag",
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "middernacht",
        noon: "het middag",
        morning: "'s ochtends",
        afternoon: "'s namiddags",
        evening: "'s avonds",
        night: "'s nachts"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "e";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"77eebdbc6892f941":"fGq1u"}],"7zFmG":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("54183ab1e3c9ee73");
var _index2 = require("7b8ca0fe4624c5cb");
const matchOrdinalNumberPattern = /^(\d+)e?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^([vn]\.? ?C\.?)/,
    abbreviated: /^([vn]\. ?Chr\.?)/,
    wide: /^((voor|na) Christus)/
};
const parseEraPatterns = {
    any: [
        /^v/,
        /^n/
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^K[1234]/i,
    wide: /^[1234]e kwartaal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan.|feb.|mrt.|apr.|mei|jun.|jul.|aug.|sep.|okt.|nov.|dec.)/i,
    wide: /^(januari|februari|maart|april|mei|juni|juli|augustus|september|oktober|november|december)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^jan/i,
        /^feb/i,
        /^m(r|a)/i,
        /^apr/i,
        /^mei/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^sep/i,
        /^okt/i,
        /^nov/i,
        /^dec/i
    ]
};
const matchDayPatterns = {
    narrow: /^[zmdwv]/i,
    short: /^(zo|ma|di|wo|do|vr|za)/i,
    abbreviated: /^(zon|maa|din|woe|don|vri|zat)/i,
    wide: /^(zondag|maandag|dinsdag|woensdag|donderdag|vrijdag|zaterdag)/i
};
const parseDayPatterns = {
    narrow: [
        /^z/i,
        /^m/i,
        /^d/i,
        /^w/i,
        /^d/i,
        /^v/i,
        /^z/i
    ],
    any: [
        /^zo/i,
        /^ma/i,
        /^di/i,
        /^wo/i,
        /^do/i,
        /^vr/i,
        /^za/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(am|pm|middernacht|het middaguur|'s (ochtends|middags|avonds|nachts))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /^middernacht/i,
        noon: /^het middaguur/i,
        morning: /ochtend/i,
        afternoon: /middag/i,
        evening: /avond/i,
        night: /nacht/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"54183ab1e3c9ee73":"15lWd","7b8ca0fe4624c5cb":"kWqg8"}],"c7cdH":[function(require,module,exports) {
"use strict";
exports.nn = void 0;
var _index = require("22a16d84e07261b7");
var _index2 = require("7f169088fa2a5594");
var _index3 = require("c180de26f3d2035b");
var _index4 = require("392c5e54f4302bb2");
var _index5 = require("221d043b679f578f");
/**
 * @category Locales
 * @summary Norwegian Nynorsk locale.
 * @language Norwegian Nynorsk
 * @iso-639-2 nno
 * @author Mats Byrkjeland [@draperunner](https://github.com/draperunner)
 */ const nn = exports.nn = {
    code: "nn",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"22a16d84e07261b7":"fgwvm","7f169088fa2a5594":"kDpmU","c180de26f3d2035b":"lq74U","392c5e54f4302bb2":"32gTz","221d043b679f578f":"gF7Mq"}],"fgwvm":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "mindre enn eitt sekund",
        other: "mindre enn {{count}} sekund"
    },
    xSeconds: {
        one: "eitt sekund",
        other: "{{count}} sekund"
    },
    halfAMinute: "eit halvt minutt",
    lessThanXMinutes: {
        one: "mindre enn eitt minutt",
        other: "mindre enn {{count}} minutt"
    },
    xMinutes: {
        one: "eitt minutt",
        other: "{{count}} minutt"
    },
    aboutXHours: {
        one: "omtrent ein time",
        other: "omtrent {{count}} timar"
    },
    xHours: {
        one: "ein time",
        other: "{{count}} timar"
    },
    xDays: {
        one: "ein dag",
        other: "{{count}} dagar"
    },
    aboutXWeeks: {
        one: "omtrent ei veke",
        other: "omtrent {{count}} veker"
    },
    xWeeks: {
        one: "ei veke",
        other: "{{count}} veker"
    },
    aboutXMonths: {
        one: "omtrent ein m\xe5nad",
        other: "omtrent {{count}} m\xe5nader"
    },
    xMonths: {
        one: "ein m\xe5nad",
        other: "{{count}} m\xe5nader"
    },
    aboutXYears: {
        one: "omtrent eitt \xe5r",
        other: "omtrent {{count}} \xe5r"
    },
    xYears: {
        one: "eitt \xe5r",
        other: "{{count}} \xe5r"
    },
    overXYears: {
        one: "over eitt \xe5r",
        other: "over {{count}} \xe5r"
    },
    almostXYears: {
        one: "nesten eitt \xe5r",
        other: "nesten {{count}} \xe5r"
    }
};
const wordMapping = [
    "null",
    "ein",
    "to",
    "tre",
    "fire",
    "fem",
    "seks",
    "sju",
    "\xe5tte",
    "ni",
    "ti",
    "elleve",
    "tolv"
];
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count < 13 ? wordMapping[count] : String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "om " + result;
        else return result + " sidan";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"kDpmU":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("e889c5b6c7334f04");
const dateFormats = {
    full: "EEEE d. MMMM y",
    long: "d. MMMM y",
    medium: "d. MMM y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "'kl'. HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'kl.' {{time}}",
    long: "{{date}} 'kl.' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"e889c5b6c7334f04":"6OYyu"}],"lq74U":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'f\xf8rre' eeee 'kl.' p",
    yesterday: "'i g\xe5r kl.' p",
    today: "'i dag kl.' p",
    tomorrow: "'i morgon kl.' p",
    nextWeek: "EEEE 'kl.' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"32gTz":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("88ad91efb63ec5fd");
const eraValues = {
    narrow: [
        "f.Kr.",
        "e.Kr."
    ],
    abbreviated: [
        "f.Kr.",
        "e.Kr."
    ],
    wide: [
        "f\xf8r Kristus",
        "etter Kristus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1. kvartal",
        "2. kvartal",
        "3. kvartal",
        "4. kvartal"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mars",
        "apr.",
        "mai",
        "juni",
        "juli",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "des."
    ],
    wide: [
        "januar",
        "februar",
        "mars",
        "april",
        "mai",
        "juni",
        "juli",
        "august",
        "september",
        "oktober",
        "november",
        "desember"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "T",
        "O",
        "T",
        "F",
        "L"
    ],
    short: [
        "su",
        "m\xe5",
        "ty",
        "on",
        "to",
        "fr",
        "lau"
    ],
    abbreviated: [
        "sun",
        "m\xe5n",
        "tys",
        "ons",
        "tor",
        "fre",
        "laur"
    ],
    wide: [
        "sundag",
        "m\xe5ndag",
        "tysdag",
        "onsdag",
        "torsdag",
        "fredag",
        "laurdag"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morg.",
        afternoon: "p\xe5 etterm.",
        evening: "p\xe5 kvelden",
        night: "p\xe5 natta"
    },
    abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morg.",
        afternoon: "p\xe5 etterm.",
        evening: "p\xe5 kvelden",
        night: "p\xe5 natta"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morgonen",
        afternoon: "p\xe5 ettermiddagen",
        evening: "p\xe5 kvelden",
        night: "p\xe5 natta"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"88ad91efb63ec5fd":"fGq1u"}],"gF7Mq":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("5af52c781e7b1e5b");
var _index2 = require("ff67d3e8303f2693");
const matchOrdinalNumberPattern = /^(\d+)\.?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
    abbreviated: /^(f\.? ?Kr\.?|fvt\.?|e\.? ?Kr\.?|evt\.?)/i,
    wide: /^(før Kristus|før vår tid|etter Kristus|vår tid)/i
};
const parseEraPatterns = {
    any: [
        /^f/i,
        /^e/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](\.)? kvartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mars?|apr|mai|juni?|juli?|aug|sep|okt|nov|des)\.?/i,
    wide: /^(januar|februar|mars|april|mai|juni|juli|august|september|oktober|november|desember)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^aug/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smtofl]/i,
    short: /^(su|må|ty|on|to|fr|la)/i,
    abbreviated: /^(sun|mån|tys|ons|tor|fre|laur)/i,
    wide: /^(sundag|måndag|tysdag|onsdag|torsdag|fredag|laurdag)/i
};
const parseDayPatterns = {
    any: [
        /^s/i,
        /^m/i,
        /^ty/i,
        /^o/i,
        /^to/i,
        /^f/i,
        /^l/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta)|[ap])/i,
    any: /^([ap]\.?\s?m\.?|midnatt|middag|(på) (morgonen|ettermiddagen|kvelden|natta))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgon/i,
        afternoon: /ettermiddag/i,
        evening: /kveld/i,
        night: /natt/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"5af52c781e7b1e5b":"15lWd","ff67d3e8303f2693":"kWqg8"}],"6NyPU":[function(require,module,exports) {
"use strict";
exports.oc = void 0;
var _index = require("cb489e865eb3c65f");
var _index2 = require("27844864c056d0d9");
var _index3 = require("70db2cf7009c4480");
var _index4 = require("196ca27c80917246");
var _index5 = require("4337dca6ccde7c84");
/**
 * @category Locales
 * @summary Occitan locale.
 * @language Occitan
 * @iso-639-2 oci
 * @author Quentin PAGÈS
 */ const oc = exports.oc = {
    code: "oc",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"cb489e865eb3c65f":"44WIG","27844864c056d0d9":"eXaxQ","70db2cf7009c4480":"5xcb7","196ca27c80917246":"63DaZ","4337dca6ccde7c84":"iPTRe"}],"44WIG":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "mens d\u2019una segonda",
        other: "mens de {{count}} segondas"
    },
    xSeconds: {
        one: "1 segonda",
        other: "{{count}} segondas"
    },
    halfAMinute: "30 segondas",
    lessThanXMinutes: {
        one: "mens d\u2019una minuta",
        other: "mens de {{count}} minutas"
    },
    xMinutes: {
        one: "1 minuta",
        other: "{{count}} minutas"
    },
    aboutXHours: {
        one: "environ 1 ora",
        other: "environ {{count}} oras"
    },
    xHours: {
        one: "1 ora",
        other: "{{count}} oras"
    },
    xDays: {
        one: "1 jorn",
        other: "{{count}} jorns"
    },
    aboutXWeeks: {
        one: "environ 1 setmana",
        other: "environ {{count}} setmanas"
    },
    xWeeks: {
        one: "1 setmana",
        other: "{{count}} setmanas"
    },
    aboutXMonths: {
        one: "environ 1 mes",
        other: "environ {{count}} meses"
    },
    xMonths: {
        one: "1 mes",
        other: "{{count}} meses"
    },
    aboutXYears: {
        one: "environ 1 an",
        other: "environ {{count}} ans"
    },
    xYears: {
        one: "1 an",
        other: "{{count}} ans"
    },
    overXYears: {
        one: "mai d\u2019un an",
        other: "mai de {{count}} ans"
    },
    almostXYears: {
        one: "gaireben un an",
        other: "gaireben {{count}} ans"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "d\u2019aqu\xed " + result;
        else return "fa " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"eXaxQ":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("6e6f29dda021d1f4");
const dateFormats = {
    full: "EEEE d 'de' MMMM y",
    long: "d 'de' MMMM y",
    medium: "d MMM y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'a' {{time}}",
    long: "{{date}} 'a' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"6e6f29dda021d1f4":"6OYyu"}],"5xcb7":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'passat a' p",
    yesterday: "'i\xe8r a' p",
    today: "'u\xe8i a' p",
    tomorrow: "'deman a' p",
    nextWeek: "eeee 'a' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"63DaZ":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("e50e54ce95ef262");
const eraValues = {
    narrow: [
        "ab. J.C.",
        "apr. J.C."
    ],
    abbreviated: [
        "ab. J.C.",
        "apr. J.C."
    ],
    wide: [
        "abans J\xe8sus-Crist",
        "apr\xe8s J\xe8sus-Crist"
    ]
};
const quarterValues = {
    narrow: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    abbreviated: [
        "1\xe8r trim.",
        "2nd trim.",
        "3en trim.",
        "4en trim."
    ],
    wide: [
        "1\xe8r trim\xe8stre",
        "2nd trim\xe8stre",
        "3en trim\xe8stre",
        "4en trim\xe8stre"
    ]
};
const monthValues = {
    narrow: [
        "GN",
        "FB",
        "M\xc7",
        "AB",
        "MA",
        "JN",
        "JL",
        "AG",
        "ST",
        "OC",
        "NV",
        "DC"
    ],
    abbreviated: [
        "gen.",
        "febr.",
        "mar\xe7",
        "abr.",
        "mai",
        "junh",
        "jul.",
        "ag.",
        "set.",
        "oct.",
        "nov.",
        "dec."
    ],
    wide: [
        "geni\xe8r",
        "febri\xe8r",
        "mar\xe7",
        "abril",
        "mai",
        "junh",
        "julhet",
        "agost",
        "setembre",
        "oct\xf2bre",
        "novembre",
        "decembre"
    ]
};
const dayValues = {
    narrow: [
        "dg.",
        "dl.",
        "dm.",
        "dc.",
        "dj.",
        "dv.",
        "ds."
    ],
    short: [
        "dg.",
        "dl.",
        "dm.",
        "dc.",
        "dj.",
        "dv.",
        "ds."
    ],
    abbreviated: [
        "dg.",
        "dl.",
        "dm.",
        "dc.",
        "dj.",
        "dv.",
        "ds."
    ],
    wide: [
        "dimenge",
        "diluns",
        "dimars",
        "dim\xe8cres",
        "dij\xf2us",
        "divendres",
        "dissabte"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "mi\xe8janu\xe8ch",
        noon: "mi\xe8gjorn",
        morning: "matin",
        afternoon: "apr\xe8p-mi\xe8gjorn",
        evening: "v\xe8spre",
        night: "nu\xe8ch"
    },
    abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "mi\xe8janu\xe8ch",
        noon: "mi\xe8gjorn",
        morning: "matin",
        afternoon: "apr\xe8p-mi\xe8gjorn",
        evening: "v\xe8spre",
        night: "nu\xe8ch"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "mi\xe8janu\xe8ch",
        noon: "mi\xe8gjorn",
        morning: "matin",
        afternoon: "apr\xe8p-mi\xe8gjorn",
        evening: "v\xe8spre",
        night: "nu\xe8ch"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "mi\xe8janu\xe8ch",
        noon: "mi\xe8gjorn",
        morning: "del matin",
        afternoon: "de l\u2019apr\xe8p-mi\xe8gjorn",
        evening: "del ser",
        night: "de la nu\xe8ch"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "mi\xe8janu\xe8ch",
        noon: "mi\xe8gjorn",
        morning: "del matin",
        afternoon: "de l\u2019apr\xe8p-mi\xe8gjorn",
        evening: "del ser",
        night: "de la nu\xe8ch"
    },
    wide: {
        am: "ante meridiem",
        pm: "post meridiem",
        midnight: "mi\xe8janu\xe8ch",
        noon: "mi\xe8gjorn",
        morning: "del matin",
        afternoon: "de l\u2019apr\xe8p-mi\xe8gjorn",
        evening: "del ser",
        night: "de la nu\xe8ch"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = options?.unit;
    let ordinal;
    switch(number){
        case 1:
            ordinal = "\xe8r";
            break;
        case 2:
            ordinal = "nd";
            break;
        default:
            ordinal = "en";
    }
    // feminine for year, week, hour, minute, second
    if (unit === "year" || unit === "week" || unit === "hour" || unit === "minute" || unit === "second") ordinal += "a";
    return number + ordinal;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"e50e54ce95ef262":"fGq1u"}],"iPTRe":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("65797d5023f0c40f");
var _index2 = require("e120128909f22c3f");
const matchOrdinalNumberPattern = /^(\d+)(èr|nd|en)?[a]?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ab\.J\.C|apr\.J\.C|apr\.J\.-C)/i,
    abbreviated: /^(ab\.J\.-C|ab\.J-C|apr\.J\.-C|apr\.J-C|ap\.J-C)/i,
    wide: /^(abans Jèsus-Crist|après Jèsus-Crist)/i
};
const parseEraPatterns = {
    any: [
        /^ab/i,
        /^ap/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^T[1234]/i,
    abbreviated: /^[1234](èr|nd|en)? trim\.?/i,
    wide: /^[1234](èr|nd|en)? trimèstre/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(GN|FB|MÇ|AB|MA|JN|JL|AG|ST|OC|NV|DC)/i,
    abbreviated: /^(gen|febr|març|abr|mai|junh|jul|ag|set|oct|nov|dec)\.?/i,
    wide: /^(genièr|febrièr|març|abril|mai|junh|julhet|agost|setembre|octòbre|novembre|decembre)/i
};
const parseMonthPatterns = {
    any: [
        /^g/i,
        /^f/i,
        /^ma[r?]|MÇ/i,
        /^ab/i,
        /^ma[i?]/i,
        /^ju[n?]|JN/i,
        /^ju[l?]|JL/i,
        /^ag/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^d[glmcjvs]\.?/i,
    short: /^d[glmcjvs]\.?/i,
    abbreviated: /^d[glmcjvs]\.?/i,
    wide: /^(dimenge|diluns|dimars|dimècres|dijòus|divendres|dissabte)/i
};
const parseDayPatterns = {
    narrow: [
        /^dg/i,
        /^dl/i,
        /^dm/i,
        /^dc/i,
        /^dj/i,
        /^dv/i,
        /^ds/i
    ],
    short: [
        /^dg/i,
        /^dl/i,
        /^dm/i,
        /^dc/i,
        /^dj/i,
        /^dv/i,
        /^ds/i
    ],
    abbreviated: [
        /^dg/i,
        /^dl/i,
        /^dm/i,
        /^dc/i,
        /^dj/i,
        /^dv/i,
        /^ds/i
    ],
    any: [
        /^dg|dime/i,
        /^dl|dil/i,
        /^dm|dima/i,
        /^dc|dimè/i,
        /^dj|dij/i,
        /^dv|div/i,
        /^ds|dis/i
    ]
};
const matchDayPeriodPatterns = {
    any: /(^(a\.?m|p\.?m))|(ante meridiem|post meridiem)|((del |de la |de l’)(matin|aprèp-miègjorn|vèspre|ser|nuèch))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /(^a)|ante meridiem/i,
        pm: /(^p)|post meridiem/i,
        midnight: /^mièj/i,
        noon: /^mièg/i,
        morning: /matin/i,
        afternoon: /aprèp-miègjorn/i,
        evening: /vèspre|ser/i,
        night: /nuèch/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"65797d5023f0c40f":"15lWd","e120128909f22c3f":"kWqg8"}],"arPoe":[function(require,module,exports) {
"use strict";
exports.pl = void 0;
var _index = require("ed51832a2c20bf3e");
var _index2 = require("31e9e84eb9421764");
var _index3 = require("8f840030a8ab168b");
var _index4 = require("2968421f6394086e");
var _index5 = require("fa91f479a3fe6faf");
/**
 * @category Locales
 * @summary Polish locale.
 * @language Polish
 * @iso-639-2 pol
 * @author Mateusz Derks [@ertrzyiks](https://github.com/ertrzyiks)
 * @author Just RAG [@justrag](https://github.com/justrag)
 * @author Mikolaj Grzyb [@mikolajgrzyb](https://github.com/mikolajgrzyb)
 * @author Mateusz Tokarski [@mutisz](https://github.com/mutisz)
 */ const pl = exports.pl = {
    code: "pl",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"ed51832a2c20bf3e":"iVphp","31e9e84eb9421764":"fnO6o","8f840030a8ab168b":"8QB94","2968421f6394086e":"4UhjF","fa91f479a3fe6faf":"1265P"}],"iVphp":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: {
            regular: "mniej ni\u017C sekunda",
            past: "mniej ni\u017C sekund\u0119",
            future: "mniej ni\u017C sekund\u0119"
        },
        twoFour: "mniej ni\u017C {{count}} sekundy",
        other: "mniej ni\u017C {{count}} sekund"
    },
    xSeconds: {
        one: {
            regular: "sekunda",
            past: "sekund\u0119",
            future: "sekund\u0119"
        },
        twoFour: "{{count}} sekundy",
        other: "{{count}} sekund"
    },
    halfAMinute: {
        one: "p\xf3\u0142 minuty",
        twoFour: "p\xf3\u0142 minuty",
        other: "p\xf3\u0142 minuty"
    },
    lessThanXMinutes: {
        one: {
            regular: "mniej ni\u017C minuta",
            past: "mniej ni\u017C minut\u0119",
            future: "mniej ni\u017C minut\u0119"
        },
        twoFour: "mniej ni\u017C {{count}} minuty",
        other: "mniej ni\u017C {{count}} minut"
    },
    xMinutes: {
        one: {
            regular: "minuta",
            past: "minut\u0119",
            future: "minut\u0119"
        },
        twoFour: "{{count}} minuty",
        other: "{{count}} minut"
    },
    aboutXHours: {
        one: {
            regular: "oko\u0142o godziny",
            past: "oko\u0142o godziny",
            future: "oko\u0142o godzin\u0119"
        },
        twoFour: "oko\u0142o {{count}} godziny",
        other: "oko\u0142o {{count}} godzin"
    },
    xHours: {
        one: {
            regular: "godzina",
            past: "godzin\u0119",
            future: "godzin\u0119"
        },
        twoFour: "{{count}} godziny",
        other: "{{count}} godzin"
    },
    xDays: {
        one: {
            regular: "dzie\u0144",
            past: "dzie\u0144",
            future: "1 dzie\u0144"
        },
        twoFour: "{{count}} dni",
        other: "{{count}} dni"
    },
    aboutXWeeks: {
        one: "oko\u0142o tygodnia",
        twoFour: "oko\u0142o {{count}} tygodni",
        other: "oko\u0142o {{count}} tygodni"
    },
    xWeeks: {
        one: "tydzie\u0144",
        twoFour: "{{count}} tygodnie",
        other: "{{count}} tygodni"
    },
    aboutXMonths: {
        one: "oko\u0142o miesi\u0105c",
        twoFour: "oko\u0142o {{count}} miesi\u0105ce",
        other: "oko\u0142o {{count}} miesi\u0119cy"
    },
    xMonths: {
        one: "miesi\u0105c",
        twoFour: "{{count}} miesi\u0105ce",
        other: "{{count}} miesi\u0119cy"
    },
    aboutXYears: {
        one: "oko\u0142o rok",
        twoFour: "oko\u0142o {{count}} lata",
        other: "oko\u0142o {{count}} lat"
    },
    xYears: {
        one: "rok",
        twoFour: "{{count}} lata",
        other: "{{count}} lat"
    },
    overXYears: {
        one: "ponad rok",
        twoFour: "ponad {{count}} lata",
        other: "ponad {{count}} lat"
    },
    almostXYears: {
        one: "prawie rok",
        twoFour: "prawie {{count}} lata",
        other: "prawie {{count}} lat"
    }
};
function declensionGroup(scheme, count) {
    if (count === 1) return scheme.one;
    const rem100 = count % 100;
    // ends with 11-20
    if (rem100 <= 20 && rem100 > 10) return scheme.other;
    const rem10 = rem100 % 10;
    // ends with 2, 3, 4
    if (rem10 >= 2 && rem10 <= 4) return scheme.twoFour;
    return scheme.other;
}
function declension(scheme, count, time) {
    const group = declensionGroup(scheme, count);
    const finalText = typeof group === "string" ? group : group[time];
    return finalText.replace("{{count}}", String(count));
}
const formatDistance = (token, count, options)=>{
    const scheme = formatDistanceLocale[token];
    if (!options?.addSuffix) return declension(scheme, count, "regular");
    if (options.comparison && options.comparison > 0) return "za " + declension(scheme, count, "future");
    else return declension(scheme, count, "past") + " temu";
};
exports.formatDistance = formatDistance;

},{}],"fnO6o":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("4c12afb1fce5be0d");
const dateFormats = {
    full: "EEEE, do MMMM y",
    long: "do MMMM y",
    medium: "do MMM y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"4c12afb1fce5be0d":"6OYyu"}],"8QB94":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("d86552af0b656535");
const adjectivesLastWeek = {
    masculine: "ostatni",
    feminine: "ostatnia"
};
const adjectivesThisWeek = {
    masculine: "ten",
    feminine: "ta"
};
const adjectivesNextWeek = {
    masculine: "nast\u0119pny",
    feminine: "nast\u0119pna"
};
const dayGrammaticalGender = {
    0: "feminine",
    1: "masculine",
    2: "masculine",
    3: "feminine",
    4: "masculine",
    5: "masculine",
    6: "feminine"
};
function dayAndTimeWithAdjective(token, date, baseDate, options) {
    let adjectives;
    if ((0, _index.isSameWeek)(date, baseDate, options)) adjectives = adjectivesThisWeek;
    else if (token === "lastWeek") adjectives = adjectivesLastWeek;
    else if (token === "nextWeek") adjectives = adjectivesNextWeek;
    else throw new Error(`Cannot determine adjectives for token ${token}`);
    const day = date.getDay();
    const grammaticalGender = dayGrammaticalGender[day];
    const adjective = adjectives[grammaticalGender];
    return `'${adjective}' eeee 'o' p`;
}
const formatRelativeLocale = {
    lastWeek: dayAndTimeWithAdjective,
    yesterday: "'wczoraj o' p",
    today: "'dzisiaj o' p",
    tomorrow: "'jutro o' p",
    nextWeek: dayAndTimeWithAdjective,
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(token, date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"d86552af0b656535":"16SmB"}],"4UhjF":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("904c9b0340fd8d15");
const eraValues = {
    narrow: [
        "p.n.e.",
        "n.e."
    ],
    abbreviated: [
        "p.n.e.",
        "n.e."
    ],
    wide: [
        "przed nasz\u0105 er\u0105",
        "naszej ery"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "I kw.",
        "II kw.",
        "III kw.",
        "IV kw."
    ],
    wide: [
        "I kwarta\u0142",
        "II kwarta\u0142",
        "III kwarta\u0142",
        "IV kwarta\u0142"
    ]
};
const monthValues = {
    narrow: [
        "S",
        "L",
        "M",
        "K",
        "M",
        "C",
        "L",
        "S",
        "W",
        "P",
        "L",
        "G"
    ],
    abbreviated: [
        "sty",
        "lut",
        "mar",
        "kwi",
        "maj",
        "cze",
        "lip",
        "sie",
        "wrz",
        "pa\u017A",
        "lis",
        "gru"
    ],
    wide: [
        "stycze\u0144",
        "luty",
        "marzec",
        "kwiecie\u0144",
        "maj",
        "czerwiec",
        "lipiec",
        "sierpie\u0144",
        "wrzesie\u0144",
        "pa\u017Adziernik",
        "listopad",
        "grudzie\u0144"
    ]
};
const monthFormattingValues = {
    narrow: [
        "s",
        "l",
        "m",
        "k",
        "m",
        "c",
        "l",
        "s",
        "w",
        "p",
        "l",
        "g"
    ],
    abbreviated: [
        "sty",
        "lut",
        "mar",
        "kwi",
        "maj",
        "cze",
        "lip",
        "sie",
        "wrz",
        "pa\u017A",
        "lis",
        "gru"
    ],
    wide: [
        "stycznia",
        "lutego",
        "marca",
        "kwietnia",
        "maja",
        "czerwca",
        "lipca",
        "sierpnia",
        "wrze\u015Bnia",
        "pa\u017Adziernika",
        "listopada",
        "grudnia"
    ]
};
const dayValues = {
    narrow: [
        "N",
        "P",
        "W",
        "\u015A",
        "C",
        "P",
        "S"
    ],
    short: [
        "nie",
        "pon",
        "wto",
        "\u015Bro",
        "czw",
        "pi\u0105",
        "sob"
    ],
    abbreviated: [
        "niedz.",
        "pon.",
        "wt.",
        "\u015Br.",
        "czw.",
        "pt.",
        "sob."
    ],
    wide: [
        "niedziela",
        "poniedzia\u0142ek",
        "wtorek",
        "\u015Broda",
        "czwartek",
        "pi\u0105tek",
        "sobota"
    ]
};
const dayFormattingValues = {
    narrow: [
        "n",
        "p",
        "w",
        "\u015B",
        "c",
        "p",
        "s"
    ],
    short: [
        "nie",
        "pon",
        "wto",
        "\u015Bro",
        "czw",
        "pi\u0105",
        "sob"
    ],
    abbreviated: [
        "niedz.",
        "pon.",
        "wt.",
        "\u015Br.",
        "czw.",
        "pt.",
        "sob."
    ],
    wide: [
        "niedziela",
        "poniedzia\u0142ek",
        "wtorek",
        "\u015Broda",
        "czwartek",
        "pi\u0105tek",
        "sobota"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "p\xf3\u0142n.",
        noon: "po\u0142",
        morning: "rano",
        afternoon: "popo\u0142.",
        evening: "wiecz.",
        night: "noc"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "p\xf3\u0142noc",
        noon: "po\u0142udnie",
        morning: "rano",
        afternoon: "popo\u0142udnie",
        evening: "wiecz\xf3r",
        night: "noc"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "p\xf3\u0142noc",
        noon: "po\u0142udnie",
        morning: "rano",
        afternoon: "popo\u0142udnie",
        evening: "wiecz\xf3r",
        night: "noc"
    }
};
const dayPeriodFormattingValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "o p\xf3\u0142n.",
        noon: "w po\u0142.",
        morning: "rano",
        afternoon: "po po\u0142.",
        evening: "wiecz.",
        night: "w nocy"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "o p\xf3\u0142nocy",
        noon: "w po\u0142udnie",
        morning: "rano",
        afternoon: "po po\u0142udniu",
        evening: "wieczorem",
        night: "w nocy"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "o p\xf3\u0142nocy",
        noon: "w po\u0142udnie",
        morning: "rano",
        afternoon: "po po\u0142udniu",
        evening: "wieczorem",
        night: "w nocy"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: monthFormattingValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide",
        formattingValues: dayFormattingValues,
        defaultFormattingWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: dayPeriodFormattingValues,
        defaultFormattingWidth: "wide"
    })
};

},{"904c9b0340fd8d15":"fGq1u"}],"1265P":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("3aa02e4565bfe69c");
var _index2 = require("a5478d71c8e0f2da");
const matchOrdinalNumberPattern = /^(\d+)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
    abbreviated: /^(p\.?\s*n\.?\s*e\.?\s*|n\.?\s*e\.?\s*)/i,
    wide: /^(przed\s*nasz(ą|a)\s*er(ą|a)|naszej\s*ery)/i
};
const parseEraPatterns = {
    any: [
        /^p/i,
        /^n/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^(I|II|III|IV)\s*kw\.?/i,
    wide: /^(I|II|III|IV)\s*kwarta(ł|l)/i
};
const parseQuarterPatterns = {
    narrow: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ],
    any: [
        /^I kw/i,
        /^II kw/i,
        /^III kw/i,
        /^IV kw/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[slmkcwpg]/i,
    abbreviated: /^(sty|lut|mar|kwi|maj|cze|lip|sie|wrz|pa(ź|z)|lis|gru)/i,
    wide: /^(stycznia|stycze(ń|n)|lutego|luty|marca|marzec|kwietnia|kwiecie(ń|n)|maja|maj|czerwca|czerwiec|lipca|lipiec|sierpnia|sierpie(ń|n)|wrze(ś|s)nia|wrzesie(ń|n)|pa(ź|z)dziernika|pa(ź|z)dziernik|listopada|listopad|grudnia|grudzie(ń|n))/i
};
const parseMonthPatterns = {
    narrow: [
        /^s/i,
        /^l/i,
        /^m/i,
        /^k/i,
        /^m/i,
        /^c/i,
        /^l/i,
        /^s/i,
        /^w/i,
        /^p/i,
        /^l/i,
        /^g/i
    ],
    any: [
        /^st/i,
        /^lu/i,
        /^mar/i,
        /^k/i,
        /^maj/i,
        /^c/i,
        /^lip/i,
        /^si/i,
        /^w/i,
        /^p/i,
        /^lis/i,
        /^g/i
    ]
};
const matchDayPatterns = {
    narrow: /^[npwścs]/i,
    short: /^(nie|pon|wto|(ś|s)ro|czw|pi(ą|a)|sob)/i,
    abbreviated: /^(niedz|pon|wt|(ś|s)r|czw|pt|sob)\.?/i,
    wide: /^(niedziela|poniedzia(ł|l)ek|wtorek|(ś|s)roda|czwartek|pi(ą|a)tek|sobota)/i
};
const parseDayPatterns = {
    narrow: [
        /^n/i,
        /^p/i,
        /^w/i,
        /^ś/i,
        /^c/i,
        /^p/i,
        /^s/i
    ],
    abbreviated: [
        /^n/i,
        /^po/i,
        /^w/i,
        /^(ś|s)r/i,
        /^c/i,
        /^pt/i,
        /^so/i
    ],
    any: [
        /^n/i,
        /^po/i,
        /^w/i,
        /^(ś|s)r/i,
        /^c/i,
        /^pi/i,
        /^so/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(^a$|^p$|pó(ł|l)n\.?|o\s*pó(ł|l)n\.?|po(ł|l)\.?|w\s*po(ł|l)\.?|po\s*po(ł|l)\.?|rano|wiecz\.?|noc|w\s*nocy)/i,
    any: /^(am|pm|pó(ł|l)noc|o\s*pó(ł|l)nocy|po(ł|l)udnie|w\s*po(ł|l)udnie|popo(ł|l)udnie|po\s*po(ł|l)udniu|rano|wieczór|wieczorem|noc|w\s*nocy)/i
};
const parseDayPeriodPatterns = {
    narrow: {
        am: /^a$/i,
        pm: /^p$/i,
        midnight: /pó(ł|l)n/i,
        noon: /po(ł|l)/i,
        morning: /rano/i,
        afternoon: /po\s*po(ł|l)/i,
        evening: /wiecz/i,
        night: /noc/i
    },
    any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /pó(ł|l)n/i,
        noon: /po(ł|l)/i,
        morning: /rano/i,
        afternoon: /po\s*po(ł|l)/i,
        evening: /wiecz/i,
        night: /noc/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"3aa02e4565bfe69c":"15lWd","a5478d71c8e0f2da":"kWqg8"}],"fr0qT":[function(require,module,exports) {
"use strict";
exports.pt = void 0;
var _index = require("5d5dae8e623fec02");
var _index2 = require("acd3dc21fa19cc37");
var _index3 = require("2267c96e0b09f462");
var _index4 = require("7c44898dd10f552e");
var _index5 = require("3d78fad401b13177");
/**
 * @category Locales
 * @summary Portuguese locale.
 * @language Portuguese
 * @iso-639-2 por
 * @author Dário Freire [@dfreire](https://github.com/dfreire)
 * @author Adrián de la Rosa [@adrm](https://github.com/adrm)
 */ const pt = exports.pt = {
    code: "pt",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"5d5dae8e623fec02":"iMSs1","acd3dc21fa19cc37":"2BtWT","2267c96e0b09f462":"jUdYj","7c44898dd10f552e":"9xDsO","3d78fad401b13177":"1mrI1"}],"iMSs1":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "menos de um segundo",
        other: "menos de {{count}} segundos"
    },
    xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
    },
    halfAMinute: "meio minuto",
    lessThanXMinutes: {
        one: "menos de um minuto",
        other: "menos de {{count}} minutos"
    },
    xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
    },
    aboutXHours: {
        one: "aproximadamente 1 hora",
        other: "aproximadamente {{count}} horas"
    },
    xHours: {
        one: "1 hora",
        other: "{{count}} horas"
    },
    xDays: {
        one: "1 dia",
        other: "{{count}} dias"
    },
    aboutXWeeks: {
        one: "aproximadamente 1 semana",
        other: "aproximadamente {{count}} semanas"
    },
    xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
    },
    aboutXMonths: {
        one: "aproximadamente 1 m\xeas",
        other: "aproximadamente {{count}} meses"
    },
    xMonths: {
        one: "1 m\xeas",
        other: "{{count}} meses"
    },
    aboutXYears: {
        one: "aproximadamente 1 ano",
        other: "aproximadamente {{count}} anos"
    },
    xYears: {
        one: "1 ano",
        other: "{{count}} anos"
    },
    overXYears: {
        one: "mais de 1 ano",
        other: "mais de {{count}} anos"
    },
    almostXYears: {
        one: "quase 1 ano",
        other: "quase {{count}} anos"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "daqui a " + result;
        else return "h\xe1 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"2BtWT":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("8ff68616df107c56");
const dateFormats = {
    full: "EEEE, d 'de' MMMM 'de' y",
    long: "d 'de' MMMM 'de' y",
    medium: "d 'de' MMM 'de' y",
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\xe0s' {{time}}",
    long: "{{date}} '\xe0s' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"8ff68616df107c56":"6OYyu"}],"jUdYj":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        const weekday = date.getDay();
        const last = weekday === 0 || weekday === 6 ? "\xfaltimo" : "\xfaltima";
        return "'" + last + "' eeee '\xe0s' p";
    },
    yesterday: "'ontem \xe0s' p",
    today: "'hoje \xe0s' p",
    tomorrow: "'amanh\xe3 \xe0s' p",
    nextWeek: "eeee '\xe0s' p",
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"9xDsO":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("30cd3bfa58c4f388");
const eraValues = {
    narrow: [
        "aC",
        "dC"
    ],
    abbreviated: [
        "a.C.",
        "d.C."
    ],
    wide: [
        "antes de Cristo",
        "depois de Cristo"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    wide: [
        "1\xba trimestre",
        "2\xba trimestre",
        "3\xba trimestre",
        "4\xba trimestre"
    ]
};
const monthValues = {
    narrow: [
        "j",
        "f",
        "m",
        "a",
        "m",
        "j",
        "j",
        "a",
        "s",
        "o",
        "n",
        "d"
    ],
    abbreviated: [
        "jan",
        "fev",
        "mar",
        "abr",
        "mai",
        "jun",
        "jul",
        "ago",
        "set",
        "out",
        "nov",
        "dez"
    ],
    wide: [
        "janeiro",
        "fevereiro",
        "mar\xe7o",
        "abril",
        "maio",
        "junho",
        "julho",
        "agosto",
        "setembro",
        "outubro",
        "novembro",
        "dezembro"
    ]
};
const dayValues = {
    narrow: [
        "d",
        "s",
        "t",
        "q",
        "q",
        "s",
        "s"
    ],
    short: [
        "dom",
        "seg",
        "ter",
        "qua",
        "qui",
        "sex",
        "s\xe1b"
    ],
    abbreviated: [
        "dom",
        "seg",
        "ter",
        "qua",
        "qui",
        "sex",
        "s\xe1b"
    ],
    wide: [
        "domingo",
        "segunda-feira",
        "ter\xe7a-feira",
        "quarta-feira",
        "quinta-feira",
        "sexta-feira",
        "s\xe1bado"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh\xe3",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh\xe3",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh\xe3",
        afternoon: "tarde",
        evening: "noite",
        night: "madrugada"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh\xe3",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh\xe3",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh\xe3",
        afternoon: "da tarde",
        evening: "da noite",
        night: "da madrugada"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "\xba";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"30cd3bfa58c4f388":"fGq1u"}],"1mrI1":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("f7768ed3ee709279");
var _index2 = require("a7e493de816b2161");
const matchOrdinalNumberPattern = /^(\d+)(º|ª)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ac|dc|a|d)/i,
    abbreviated: /^(a\.?\s?c\.?|a\.?\s?e\.?\s?c\.?|d\.?\s?c\.?|e\.?\s?c\.?)/i,
    wide: /^(antes de cristo|antes da era comum|depois de cristo|era comum)/i
};
const parseEraPatterns = {
    any: [
        /^ac/i,
        /^dc/i
    ],
    wide: [
        /^(antes de cristo|antes da era comum)/i,
        /^(depois de cristo|era comum)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^T[1234]/i,
    wide: /^[1234](º|ª)? trimestre/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
    wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ab/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^ag/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[dstq]/i,
    short: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
    abbreviated: /^(dom|seg|ter|qua|qui|sex|s[áa]b)/i,
    wide: /^(domingo|segunda-?\s?feira|terça-?\s?feira|quarta-?\s?feira|quinta-?\s?feira|sexta-?\s?feira|s[áa]bado)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^s/i,
        /^t/i,
        /^q/i,
        /^q/i,
        /^s/i,
        /^s/i
    ],
    any: [
        /^d/i,
        /^seg/i,
        /^t/i,
        /^qua/i,
        /^qui/i,
        /^sex/i,
        /^s[áa]/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i,
    any: /^([ap]\.?\s?m\.?|meia-?\s?noite|meio-?\s?dia|(da) (manh[ãa]|tarde|noite|madrugada))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^meia/i,
        noon: /^meio/i,
        morning: /manh[ãa]/i,
        afternoon: /tarde/i,
        evening: /noite/i,
        night: /madrugada/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"f7768ed3ee709279":"15lWd","a7e493de816b2161":"kWqg8"}],"enmUF":[function(require,module,exports) {
"use strict";
exports.ptBR = void 0;
var _index = require("4c18cbd428dcfc97");
var _index2 = require("ac27d9fd6cf76b2d");
var _index3 = require("ee61494e12b4a00f");
var _index4 = require("f292cb5766a9f6ae");
var _index5 = require("64155ab2ca86ae72");
/**
 * @category Locales
 * @summary Portuguese locale (Brazil).
 * @language Portuguese
 * @iso-639-2 por
 * @author Lucas Duailibe [@duailibe](https://github.com/duailibe)
 * @author Yago Carballo [@yagocarballo](https://github.com/YagoCarballo)
 */ const ptBR = exports.ptBR = {
    code: "pt-BR",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"4c18cbd428dcfc97":"f41G1","ac27d9fd6cf76b2d":"aQ4L2","ee61494e12b4a00f":"c0sLu","f292cb5766a9f6ae":"hXPP9","64155ab2ca86ae72":"jiARc"}],"f41G1":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "menos de um segundo",
        other: "menos de {{count}} segundos"
    },
    xSeconds: {
        one: "1 segundo",
        other: "{{count}} segundos"
    },
    halfAMinute: "meio minuto",
    lessThanXMinutes: {
        one: "menos de um minuto",
        other: "menos de {{count}} minutos"
    },
    xMinutes: {
        one: "1 minuto",
        other: "{{count}} minutos"
    },
    aboutXHours: {
        one: "cerca de 1 hora",
        other: "cerca de {{count}} horas"
    },
    xHours: {
        one: "1 hora",
        other: "{{count}} horas"
    },
    xDays: {
        one: "1 dia",
        other: "{{count}} dias"
    },
    aboutXWeeks: {
        one: "cerca de 1 semana",
        other: "cerca de {{count}} semanas"
    },
    xWeeks: {
        one: "1 semana",
        other: "{{count}} semanas"
    },
    aboutXMonths: {
        one: "cerca de 1 m\xeas",
        other: "cerca de {{count}} meses"
    },
    xMonths: {
        one: "1 m\xeas",
        other: "{{count}} meses"
    },
    aboutXYears: {
        one: "cerca de 1 ano",
        other: "cerca de {{count}} anos"
    },
    xYears: {
        one: "1 ano",
        other: "{{count}} anos"
    },
    overXYears: {
        one: "mais de 1 ano",
        other: "mais de {{count}} anos"
    },
    almostXYears: {
        one: "quase 1 ano",
        other: "quase {{count}} anos"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "em " + result;
        else return "h\xe1 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"aQ4L2":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("28517352679781ba");
const dateFormats = {
    full: "EEEE, d 'de' MMMM 'de' y",
    long: "d 'de' MMMM 'de' y",
    medium: "d MMM y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\xe0s' {{time}}",
    long: "{{date}} '\xe0s' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"28517352679781ba":"6OYyu"}],"c0sLu":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        const weekday = date.getDay();
        const last = weekday === 0 || weekday === 6 ? "\xfaltimo" : "\xfaltima";
        return "'" + last + "' eeee '\xe0s' p";
    },
    yesterday: "'ontem \xe0s' p",
    today: "'hoje \xe0s' p",
    tomorrow: "'amanh\xe3 \xe0s' p",
    nextWeek: "eeee '\xe0s' p",
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"hXPP9":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("4b463f7b98ba3d60");
const eraValues = {
    narrow: [
        "AC",
        "DC"
    ],
    abbreviated: [
        "AC",
        "DC"
    ],
    wide: [
        "antes de cristo",
        "depois de cristo"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    wide: [
        "1\xba trimestre",
        "2\xba trimestre",
        "3\xba trimestre",
        "4\xba trimestre"
    ]
};
const monthValues = {
    narrow: [
        "j",
        "f",
        "m",
        "a",
        "m",
        "j",
        "j",
        "a",
        "s",
        "o",
        "n",
        "d"
    ],
    abbreviated: [
        "jan",
        "fev",
        "mar",
        "abr",
        "mai",
        "jun",
        "jul",
        "ago",
        "set",
        "out",
        "nov",
        "dez"
    ],
    wide: [
        "janeiro",
        "fevereiro",
        "mar\xe7o",
        "abril",
        "maio",
        "junho",
        "julho",
        "agosto",
        "setembro",
        "outubro",
        "novembro",
        "dezembro"
    ]
};
const dayValues = {
    narrow: [
        "D",
        "S",
        "T",
        "Q",
        "Q",
        "S",
        "S"
    ],
    short: [
        "dom",
        "seg",
        "ter",
        "qua",
        "qui",
        "sex",
        "sab"
    ],
    abbreviated: [
        "domingo",
        "segunda",
        "ter\xe7a",
        "quarta",
        "quinta",
        "sexta",
        "s\xe1bado"
    ],
    wide: [
        "domingo",
        "segunda-feira",
        "ter\xe7a-feira",
        "quarta-feira",
        "quinta-feira",
        "sexta-feira",
        "s\xe1bado"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "manh\xe3",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh\xe3",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "manh\xe3",
        afternoon: "tarde",
        evening: "tarde",
        night: "noite"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "md",
        morning: "da manh\xe3",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh\xe3",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "meia-noite",
        noon: "meio-dia",
        morning: "da manh\xe3",
        afternoon: "da tarde",
        evening: "da tarde",
        night: "da noite"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    if (options?.unit === "week") return number + "\xaa";
    return number + "\xba";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"4b463f7b98ba3d60":"fGq1u"}],"jiARc":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("5f9d31b6d77197a0");
var _index2 = require("214dc577d43846da");
const matchOrdinalNumberPattern = /^(\d+)[ºªo]?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ac|dc|a|d)/i,
    abbreviated: /^(a\.?\s?c\.?|d\.?\s?c\.?)/i,
    wide: /^(antes de cristo|depois de cristo)/i
};
const parseEraPatterns = {
    any: [
        /^ac/i,
        /^dc/i
    ],
    wide: [
        /^antes de cristo/i,
        /^depois de cristo/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^T[1234]/i,
    wide: /^[1234](º)? trimestre/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmajsond]/i,
    abbreviated: /^(jan|fev|mar|abr|mai|jun|jul|ago|set|out|nov|dez)/i,
    wide: /^(janeiro|fevereiro|março|abril|maio|junho|julho|agosto|setembro|outubro|novembro|dezembro)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^fev/i,
        /^mar/i,
        /^abr/i,
        /^mai/i,
        /^jun/i,
        /^jul/i,
        /^ago/i,
        /^set/i,
        /^out/i,
        /^nov/i,
        /^dez/i
    ]
};
const matchDayPatterns = {
    narrow: /^(dom|[23456]ª?|s[aá]b)/i,
    short: /^(dom|[23456]ª?|s[aá]b)/i,
    abbreviated: /^(dom|seg|ter|qua|qui|sex|s[aá]b)/i,
    wide: /^(domingo|(segunda|ter[cç]a|quarta|quinta|sexta)([- ]feira)?|s[aá]bado)/i
};
const parseDayPatterns = {
    short: [
        /^d/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^s[aá]/i
    ],
    narrow: [
        /^d/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^s[aá]/i
    ],
    any: [
        /^d/i,
        /^seg/i,
        /^t/i,
        /^qua/i,
        /^qui/i,
        /^sex/i,
        /^s[aá]b/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mn|md|(da) (manhã|tarde|noite))/i,
    any: /^([ap]\.?\s?m\.?|meia[-\s]noite|meio[-\s]dia|(da) (manhã|tarde|noite))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn|^meia[-\s]noite/i,
        noon: /^md|^meio[-\s]dia/i,
        morning: /manhã/i,
        afternoon: /tarde/i,
        evening: /tarde/i,
        night: /noite/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"5f9d31b6d77197a0":"15lWd","214dc577d43846da":"kWqg8"}],"9uBVs":[function(require,module,exports) {
"use strict";
exports.ro = void 0;
var _index = require("97afd15445faba22");
var _index2 = require("5e94a358202559be");
var _index3 = require("c1d5547ce7468e26");
var _index4 = require("cebca9611f977ac2");
var _index5 = require("4800cafa60da987c");
/**
 * @category Locales
 * @summary Romanian locale.
 * @language Romanian
 * @iso-639-2 ron
 * @author Sergiu Munteanu [@jsergiu](https://github.com/jsergiu)
 * @author Adrian Ocneanu [@aocneanu](https://github.com/aocneanu)
 * @author Mihai Ocneanu [@gandesc](https://github.com/gandesc)
 */ const ro = exports.ro = {
    code: "ro",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"97afd15445faba22":"6RQFb","5e94a358202559be":"cpuyE","c1d5547ce7468e26":"iR9Yr","cebca9611f977ac2":"b7QXK","4800cafa60da987c":"20fKi"}],"6RQFb":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "mai pu\u021Bin de o secund\u0103",
        other: "mai pu\u021Bin de {{count}} secunde"
    },
    xSeconds: {
        one: "1 secund\u0103",
        other: "{{count}} secunde"
    },
    halfAMinute: "jum\u0103tate de minut",
    lessThanXMinutes: {
        one: "mai pu\u021Bin de un minut",
        other: "mai pu\u021Bin de {{count}} minute"
    },
    xMinutes: {
        one: "1 minut",
        other: "{{count}} minute"
    },
    aboutXHours: {
        one: "circa 1 or\u0103",
        other: "circa {{count}} ore"
    },
    xHours: {
        one: "1 or\u0103",
        other: "{{count}} ore"
    },
    xDays: {
        one: "1 zi",
        other: "{{count}} zile"
    },
    aboutXWeeks: {
        one: "circa o s\u0103pt\u0103m\xe2n\u0103",
        other: "circa {{count}} s\u0103pt\u0103m\xe2ni"
    },
    xWeeks: {
        one: "1 s\u0103pt\u0103m\xe2n\u0103",
        other: "{{count}} s\u0103pt\u0103m\xe2ni"
    },
    aboutXMonths: {
        one: "circa 1 lun\u0103",
        other: "circa {{count}} luni"
    },
    xMonths: {
        one: "1 lun\u0103",
        other: "{{count}} luni"
    },
    aboutXYears: {
        one: "circa 1 an",
        other: "circa {{count}} ani"
    },
    xYears: {
        one: "1 an",
        other: "{{count}} ani"
    },
    overXYears: {
        one: "peste 1 an",
        other: "peste {{count}} ani"
    },
    almostXYears: {
        one: "aproape 1 an",
        other: "aproape {{count}} ani"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\xeen " + result;
        else return result + " \xeen urm\u0103";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"cpuyE":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("2fe108aaceebcb48");
const dateFormats = {
    full: "EEEE, d MMMM yyyy",
    long: "d MMMM yyyy",
    medium: "d MMM yyyy",
    short: "dd.MM.yyyy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'la' {{time}}",
    long: "{{date}} 'la' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"2fe108aaceebcb48":"6OYyu"}],"iR9Yr":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'trecut\u0103 la' p",
    yesterday: "'ieri la' p",
    today: "'ast\u0103zi la' p",
    tomorrow: "'m\xe2ine la' p",
    nextWeek: "eeee 'viitoare la' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"b7QXK":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("c21094a846b15f69");
const eraValues = {
    narrow: [
        "\xce",
        "D"
    ],
    abbreviated: [
        "\xce.d.C.",
        "D.C."
    ],
    wide: [
        "\xcenainte de Cristos",
        "Dup\u0103 Cristos"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "T1",
        "T2",
        "T3",
        "T4"
    ],
    wide: [
        "primul trimestru",
        "al doilea trimestru",
        "al treilea trimestru",
        "al patrulea trimestru"
    ]
};
const monthValues = {
    narrow: [
        "I",
        "F",
        "M",
        "A",
        "M",
        "I",
        "I",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "ian",
        "feb",
        "mar",
        "apr",
        "mai",
        "iun",
        "iul",
        "aug",
        "sep",
        "oct",
        "noi",
        "dec"
    ],
    wide: [
        "ianuarie",
        "februarie",
        "martie",
        "aprilie",
        "mai",
        "iunie",
        "iulie",
        "august",
        "septembrie",
        "octombrie",
        "noiembrie",
        "decembrie"
    ]
};
const dayValues = {
    narrow: [
        "d",
        "l",
        "m",
        "m",
        "j",
        "v",
        "s"
    ],
    short: [
        "du",
        "lu",
        "ma",
        "mi",
        "jo",
        "vi",
        "s\xe2"
    ],
    abbreviated: [
        "dum",
        "lun",
        "mar",
        "mie",
        "joi",
        "vin",
        "s\xe2m"
    ],
    wide: [
        "duminic\u0103",
        "luni",
        "mar\u021Bi",
        "miercuri",
        "joi",
        "vineri",
        "s\xe2mb\u0103t\u0103"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "ami",
        morning: "dim",
        afternoon: "da",
        evening: "s",
        night: "n"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "miezul nop\u021Bii",
        noon: "amiaz\u0103",
        morning: "diminea\u021B\u0103",
        afternoon: "dup\u0103-amiaz\u0103",
        evening: "sear\u0103",
        night: "noapte"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "miezul nop\u021Bii",
        noon: "amiaz\u0103",
        morning: "diminea\u021B\u0103",
        afternoon: "dup\u0103-amiaz\u0103",
        evening: "sear\u0103",
        night: "noapte"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "mn",
        noon: "amiaz\u0103",
        morning: "diminea\u021B\u0103",
        afternoon: "dup\u0103-amiaz\u0103",
        evening: "sear\u0103",
        night: "noapte"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "miezul nop\u021Bii",
        noon: "amiaz\u0103",
        morning: "diminea\u021B\u0103",
        afternoon: "dup\u0103-amiaz\u0103",
        evening: "sear\u0103",
        night: "noapte"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "miezul nop\u021Bii",
        noon: "amiaz\u0103",
        morning: "diminea\u021B\u0103",
        afternoon: "dup\u0103-amiaz\u0103",
        evening: "sear\u0103",
        night: "noapte"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"c21094a846b15f69":"fGq1u"}],"20fKi":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("701207646226781d");
var _index2 = require("b18647443c59e166");
const matchOrdinalNumberPattern = /^(\d+)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(Î|D)/i,
    abbreviated: /^(Î\.?\s?d\.?\s?C\.?|Î\.?\s?e\.?\s?n\.?|D\.?\s?C\.?|e\.?\s?n\.?)/i,
    wide: /^(Înainte de Cristos|Înaintea erei noastre|După Cristos|Era noastră)/i
};
const parseEraPatterns = {
    any: [
        /^ÎC/i,
        /^DC/i
    ],
    wide: [
        /^(Înainte de Cristos|Înaintea erei noastre)/i,
        /^(După Cristos|Era noastră)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^T[1234]/i,
    wide: /^trimestrul [1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[ifmaasond]/i,
    abbreviated: /^(ian|feb|mar|apr|mai|iun|iul|aug|sep|oct|noi|dec)/i,
    wide: /^(ianuarie|februarie|martie|aprilie|mai|iunie|iulie|august|septembrie|octombrie|noiembrie|decembrie)/i
};
const parseMonthPatterns = {
    narrow: [
        /^i/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^i/i,
        /^i/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ia/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^mai/i,
        /^iun/i,
        /^iul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[dlmjvs]/i,
    short: /^(d|l|ma|mi|j|v|s)/i,
    abbreviated: /^(dum|lun|mar|mie|jo|vi|sâ)/i,
    wide: /^(duminica|luni|marţi|miercuri|joi|vineri|sâmbătă)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^l/i,
        /^m/i,
        /^m/i,
        /^j/i,
        /^v/i,
        /^s/i
    ],
    any: [
        /^d/i,
        /^l/i,
        /^ma/i,
        /^mi/i,
        /^j/i,
        /^v/i,
        /^s/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|mn|a|(dimineaţa|după-amiaza|seara|noaptea))/i,
    any: /^([ap]\.?\s?m\.?|miezul nopții|amiaza|(dimineaţa|după-amiaza|seara|noaptea))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^mn/i,
        noon: /amiaza/i,
        morning: /dimineaţa/i,
        afternoon: /după-amiaza/i,
        evening: /seara/i,
        night: /noaptea/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"701207646226781d":"15lWd","b18647443c59e166":"kWqg8"}],"dmWLJ":[function(require,module,exports) {
"use strict";
exports.ru = void 0;
var _index = require("3a11a93b6151c576");
var _index2 = require("e7bdcba0e67fbad5");
var _index3 = require("f3b3ff971ae5f20e");
var _index4 = require("932d628e053d5886");
var _index5 = require("e6b56577466945b8");
/**
 * @category Locales
 * @summary Russian locale.
 * @language Russian
 * @iso-639-2 rus
 * @author Sasha Koss [@kossnocorp](https://github.com/kossnocorp)
 * @author Lesha Koss [@leshakoss](https://github.com/leshakoss)
 */ const ru = exports.ru = {
    code: "ru",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"3a11a93b6151c576":"bvy4y","e7bdcba0e67fbad5":"g4HbR","f3b3ff971ae5f20e":"fz4CO","932d628e053d5886":"khvIn","e6b56577466945b8":"ihBFU"}],"bvy4y":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function declension(scheme, count) {
    // scheme for count=1 exists
    if (scheme.one !== undefined && count === 1) return scheme.one;
    const rem10 = count % 10;
    const rem100 = count % 100;
    // 1, 21, 31, ...
    if (rem10 === 1 && rem100 !== 11) return scheme.singularNominative.replace("{{count}}", String(count));
    else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) return scheme.singularGenitive.replace("{{count}}", String(count));
    else return scheme.pluralGenitive.replace("{{count}}", String(count));
}
function buildLocalizeTokenFn(scheme) {
    return (count, options)=>{
        if (options?.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                if (scheme.future) return declension(scheme.future, count);
                else return "\u0447\u0435\u0440\u0435\u0437 " + declension(scheme.regular, count);
            } else {
                if (scheme.past) return declension(scheme.past, count);
                else return declension(scheme.regular, count) + " \u043D\u0430\u0437\u0430\u0434";
            }
        } else return declension(scheme.regular, count);
    };
}
const formatDistanceLocale = {
    lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
            one: "\u043C\u0435\u043D\u044C\u0448\u0435 \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            singularNominative: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            singularGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434",
            pluralGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        future: {
            one: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularNominative: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        }
    }),
    xSeconds: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        past: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443 \u043D\u0430\u0437\u0430\u0434",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B \u043D\u0430\u0437\u0430\u0434",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u043D\u0430\u0437\u0430\u0434"
        },
        future: {
            singularNominative: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u044B",
            pluralGenitive: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        }
    }),
    halfAMinute: (_count, options)=>{
        if (options?.addSuffix) {
            if (options.comparison && options.comparison > 0) return "\u0447\u0435\u0440\u0435\u0437 \u043F\u043E\u043B\u043C\u0438\u043D\u0443\u0442\u044B";
            else return "\u043F\u043E\u043B\u043C\u0438\u043D\u0443\u0442\u044B \u043D\u0430\u0437\u0430\u0434";
        }
        return "\u043F\u043E\u043B\u043C\u0438\u043D\u0443\u0442\u044B";
    },
    lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
            one: "\u043C\u0435\u043D\u044C\u0448\u0435 \u043C\u0438\u043D\u0443\u0442\u044B",
            singularNominative: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u043C\u0438\u043D\u0443\u0442\u044B",
            singularGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u043C\u0438\u043D\u0443\u0442",
            pluralGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435 {{count}} \u043C\u0438\u043D\u0443\u0442"
        },
        future: {
            one: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 \u043C\u0438\u043D\u0443\u0442\u0443",
            singularNominative: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442\u0443",
            singularGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442\u044B",
            pluralGenitive: "\u043C\u0435\u043D\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442"
        }
    }),
    xMinutes: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0430",
            singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u044B",
            pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442"
        },
        past: {
            singularNominative: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0443 \u043D\u0430\u0437\u0430\u0434",
            singularGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442\u044B \u043D\u0430\u0437\u0430\u0434",
            pluralGenitive: "{{count}} \u043C\u0438\u043D\u0443\u0442 \u043D\u0430\u0437\u0430\u0434"
        },
        future: {
            singularNominative: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442\u0443",
            singularGenitive: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442\u044B",
            pluralGenitive: "\u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0438\u043D\u0443\u0442"
        }
    }),
    aboutXHours: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0447\u0430\u0441\u0430",
            singularGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0447\u0430\u0441\u043E\u0432",
            pluralGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0447\u0430\u0441\u043E\u0432"
        },
        future: {
            singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0447\u0430\u0441",
            singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0447\u0430\u0441\u0430",
            pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0447\u0430\u0441\u043E\u0432"
        }
    }),
    xHours: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0447\u0430\u0441",
            singularGenitive: "{{count}} \u0447\u0430\u0441\u0430",
            pluralGenitive: "{{count}} \u0447\u0430\u0441\u043E\u0432"
        }
    }),
    xDays: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0434\u0435\u043D\u044C",
            singularGenitive: "{{count}} \u0434\u043D\u044F",
            pluralGenitive: "{{count}} \u0434\u043D\u0435\u0439"
        }
    }),
    aboutXWeeks: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043D\u0435\u0434\u0435\u043B\u0438",
            singularGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043D\u0435\u0434\u0435\u043B\u044C",
            pluralGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043D\u0435\u0434\u0435\u043B\u044C"
        },
        future: {
            singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043D\u0435\u0434\u0435\u043B\u044E",
            singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043D\u0435\u0434\u0435\u043B\u0438",
            pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043D\u0435\u0434\u0435\u043B\u044C"
        }
    }),
    xWeeks: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u043D\u0435\u0434\u0435\u043B\u044F",
            singularGenitive: "{{count}} \u043D\u0435\u0434\u0435\u043B\u0438",
            pluralGenitive: "{{count}} \u043D\u0435\u0434\u0435\u043B\u044C"
        }
    }),
    aboutXMonths: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
            singularGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043C\u0435\u0441\u044F\u0446\u0435\u0432",
            pluralGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043C\u0435\u0441\u044F\u0446\u0435\u0432"
        },
        future: {
            singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446",
            singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
            pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043C\u0435\u0441\u044F\u0446\u0435\u0432"
        }
    }),
    xMonths: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u043C\u0435\u0441\u044F\u0446",
            singularGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0430",
            pluralGenitive: "{{count}} \u043C\u0435\u0441\u044F\u0446\u0435\u0432"
        }
    }),
    aboutXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043E\u043A\u043E\u043B\u043E {{count}} \u0433\u043E\u0434\u0430",
            singularGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043B\u0435\u0442",
            pluralGenitive: "\u043E\u043A\u043E\u043B\u043E {{count}} \u043B\u0435\u0442"
        },
        future: {
            singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434\u0430",
            pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u0438\u0442\u0435\u043B\u044C\u043D\u043E \u0447\u0435\u0440\u0435\u0437 {{count}} \u043B\u0435\u0442"
        }
    }),
    xYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0433\u043E\u0434",
            singularGenitive: "{{count}} \u0433\u043E\u0434\u0430",
            pluralGenitive: "{{count}} \u043B\u0435\u0442"
        }
    }),
    overXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0431\u043E\u043B\u044C\u0448\u0435 {{count}} \u0433\u043E\u0434\u0430",
            singularGenitive: "\u0431\u043E\u043B\u044C\u0448\u0435 {{count}} \u043B\u0435\u0442",
            pluralGenitive: "\u0431\u043E\u043B\u044C\u0448\u0435 {{count}} \u043B\u0435\u0442"
        },
        future: {
            singularNominative: "\u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434\u0430",
            pluralGenitive: "\u0431\u043E\u043B\u044C\u0448\u0435, \u0447\u0435\u043C \u0447\u0435\u0440\u0435\u0437 {{count}} \u043B\u0435\u0442"
        }
    }),
    almostXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043F\u043E\u0447\u0442\u0438 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u043F\u043E\u0447\u0442\u0438 {{count}} \u0433\u043E\u0434\u0430",
            pluralGenitive: "\u043F\u043E\u0447\u0442\u0438 {{count}} \u043B\u0435\u0442"
        },
        future: {
            singularNominative: "\u043F\u043E\u0447\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434",
            singularGenitive: "\u043F\u043E\u0447\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 {{count}} \u0433\u043E\u0434\u0430",
            pluralGenitive: "\u043F\u043E\u0447\u0442\u0438 \u0447\u0435\u0440\u0435\u0437 {{count}} \u043B\u0435\u0442"
        }
    })
};
const formatDistance = (token, count, options)=>{
    return formatDistanceLocale[token](count, options);
};
exports.formatDistance = formatDistance;

},{}],"g4HbR":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("febfefa9b2eba6f3");
const dateFormats = {
    full: "EEEE, d MMMM y '\u0433.'",
    long: "d MMMM y '\u0433.'",
    medium: "d MMM y '\u0433.'",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    any: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"febfefa9b2eba6f3":"6OYyu"}],"fz4CO":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("351f66f5b446aa17");
const accusativeWeekdays = [
    "\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435",
    "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A",
    "\u0432\u0442\u043E\u0440\u043D\u0438\u043A",
    "\u0441\u0440\u0435\u0434\u0443",
    "\u0447\u0435\u0442\u0432\u0435\u0440\u0433",
    "\u043F\u044F\u0442\u043D\u0438\u0446\u0443",
    "\u0441\u0443\u0431\u0431\u043E\u0442\u0443"
];
function lastWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
            return "'\u0432 \u043F\u0440\u043E\u0448\u043B\u043E\u0435 " + weekday + " \u0432' p";
        case 1:
        case 2:
        case 4:
            return "'\u0432 \u043F\u0440\u043E\u0448\u043B\u044B\u0439 " + weekday + " \u0432' p";
        case 3:
        case 5:
        case 6:
            return "'\u0432 \u043F\u0440\u043E\u0448\u043B\u0443\u044E " + weekday + " \u0432' p";
    }
}
function thisWeek(day) {
    const weekday = accusativeWeekdays[day];
    if (day === 2 /* Tue */ ) return "'\u0432\u043E " + weekday + " \u0432' p";
    else return "'\u0432 " + weekday + " \u0432' p";
}
function nextWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
            return "'\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0435\u0435 " + weekday + " \u0432' p";
        case 1:
        case 2:
        case 4:
            return "'\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0438\u0439 " + weekday + " \u0432' p";
        case 3:
        case 5:
        case 6:
            return "'\u0432 \u0441\u043B\u0435\u0434\u0443\u044E\u0449\u0443\u044E " + weekday + " \u0432' p";
    }
}
const formatRelativeLocale = {
    lastWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return lastWeek(day);
    },
    yesterday: "'\u0432\u0447\u0435\u0440\u0430 \u0432' p",
    today: "'\u0441\u0435\u0433\u043E\u0434\u043D\u044F \u0432' p",
    tomorrow: "'\u0437\u0430\u0432\u0442\u0440\u0430 \u0432' p",
    nextWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return nextWeek(day);
    },
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"351f66f5b446aa17":"16SmB"}],"khvIn":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("e9438cdf4c25131b");
const eraValues = {
    narrow: [
        "\u0434\u043E \u043D.\u044D.",
        "\u043D.\u044D."
    ],
    abbreviated: [
        "\u0434\u043E \u043D. \u044D.",
        "\u043D. \u044D."
    ],
    wide: [
        "\u0434\u043E \u043D\u0430\u0448\u0435\u0439 \u044D\u0440\u044B",
        "\u043D\u0430\u0448\u0435\u0439 \u044D\u0440\u044B"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u0439 \u043A\u0432.",
        "2-\u0439 \u043A\u0432.",
        "3-\u0439 \u043A\u0432.",
        "4-\u0439 \u043A\u0432."
    ],
    wide: [
        "1-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "2-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "3-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "4-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B"
    ]
};
const monthValues = {
    narrow: [
        "\u042F",
        "\u0424",
        "\u041C",
        "\u0410",
        "\u041C",
        "\u0418",
        "\u0418",
        "\u0410",
        "\u0421",
        "\u041E",
        "\u041D",
        "\u0414"
    ],
    abbreviated: [
        "\u044F\u043D\u0432.",
        "\u0444\u0435\u0432.",
        "\u043C\u0430\u0440\u0442",
        "\u0430\u043F\u0440.",
        "\u043C\u0430\u0439",
        "\u0438\u044E\u043D\u044C",
        "\u0438\u044E\u043B\u044C",
        "\u0430\u0432\u0433.",
        "\u0441\u0435\u043D\u0442.",
        "\u043E\u043A\u0442.",
        "\u043D\u043E\u044F\u0431.",
        "\u0434\u0435\u043A."
    ],
    wide: [
        "\u044F\u043D\u0432\u0430\u0440\u044C",
        "\u0444\u0435\u0432\u0440\u0430\u043B\u044C",
        "\u043C\u0430\u0440\u0442",
        "\u0430\u043F\u0440\u0435\u043B\u044C",
        "\u043C\u0430\u0439",
        "\u0438\u044E\u043D\u044C",
        "\u0438\u044E\u043B\u044C",
        "\u0430\u0432\u0433\u0443\u0441\u0442",
        "\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044C",
        "\u043E\u043A\u0442\u044F\u0431\u0440\u044C",
        "\u043D\u043E\u044F\u0431\u0440\u044C",
        "\u0434\u0435\u043A\u0430\u0431\u0440\u044C"
    ]
};
const formattingMonthValues = {
    narrow: [
        "\u042F",
        "\u0424",
        "\u041C",
        "\u0410",
        "\u041C",
        "\u0418",
        "\u0418",
        "\u0410",
        "\u0421",
        "\u041E",
        "\u041D",
        "\u0414"
    ],
    abbreviated: [
        "\u044F\u043D\u0432.",
        "\u0444\u0435\u0432.",
        "\u043C\u0430\u0440.",
        "\u0430\u043F\u0440.",
        "\u043C\u0430\u044F",
        "\u0438\u044E\u043D.",
        "\u0438\u044E\u043B.",
        "\u0430\u0432\u0433.",
        "\u0441\u0435\u043D\u0442.",
        "\u043E\u043A\u0442.",
        "\u043D\u043E\u044F\u0431.",
        "\u0434\u0435\u043A."
    ],
    wide: [
        "\u044F\u043D\u0432\u0430\u0440\u044F",
        "\u0444\u0435\u0432\u0440\u0430\u043B\u044F",
        "\u043C\u0430\u0440\u0442\u0430",
        "\u0430\u043F\u0440\u0435\u043B\u044F",
        "\u043C\u0430\u044F",
        "\u0438\u044E\u043D\u044F",
        "\u0438\u044E\u043B\u044F",
        "\u0430\u0432\u0433\u0443\u0441\u0442\u0430",
        "\u0441\u0435\u043D\u0442\u044F\u0431\u0440\u044F",
        "\u043E\u043A\u0442\u044F\u0431\u0440\u044F",
        "\u043D\u043E\u044F\u0431\u0440\u044F",
        "\u0434\u0435\u043A\u0430\u0431\u0440\u044F"
    ]
};
const dayValues = {
    narrow: [
        "\u0412",
        "\u041F",
        "\u0412",
        "\u0421",
        "\u0427",
        "\u041F",
        "\u0421"
    ],
    short: [
        "\u0432\u0441",
        "\u043F\u043D",
        "\u0432\u0442",
        "\u0441\u0440",
        "\u0447\u0442",
        "\u043F\u0442",
        "\u0441\u0431"
    ],
    abbreviated: [
        "\u0432\u0441\u043A",
        "\u043F\u043D\u0434",
        "\u0432\u0442\u0440",
        "\u0441\u0440\u0434",
        "\u0447\u0442\u0432",
        "\u043F\u0442\u043D",
        "\u0441\u0443\u0431"
    ],
    wide: [
        "\u0432\u043E\u0441\u043A\u0440\u0435\u0441\u0435\u043D\u044C\u0435",
        "\u043F\u043E\u043D\u0435\u0434\u0435\u043B\u044C\u043D\u0438\u043A",
        "\u0432\u0442\u043E\u0440\u043D\u0438\u043A",
        "\u0441\u0440\u0435\u0434\u0430",
        "\u0447\u0435\u0442\u0432\u0435\u0440\u0433",
        "\u043F\u044F\u0442\u043D\u0438\u0446\u0430",
        "\u0441\u0443\u0431\u0431\u043E\u0442\u0430"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u043B\u043D.",
        noon: "\u043F\u043E\u043B\u0434.",
        morning: "\u0443\u0442\u0440\u043E",
        afternoon: "\u0434\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u044C"
    },
    abbreviated: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u043B\u043D.",
        noon: "\u043F\u043E\u043B\u0434.",
        morning: "\u0443\u0442\u0440\u043E",
        afternoon: "\u0434\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u044C"
    },
    wide: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u043B\u043D\u043E\u0447\u044C",
        noon: "\u043F\u043E\u043B\u0434\u0435\u043D\u044C",
        morning: "\u0443\u0442\u0440\u043E",
        afternoon: "\u0434\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447\u0435\u0440",
        night: "\u043D\u043E\u0447\u044C"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u043B\u043D.",
        noon: "\u043F\u043E\u043B\u0434.",
        morning: "\u0443\u0442\u0440\u0430",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u0438"
    },
    abbreviated: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u043B\u043D.",
        noon: "\u043F\u043E\u043B\u0434.",
        morning: "\u0443\u0442\u0440\u0430",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u0438"
    },
    wide: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u043E\u043B\u043D\u043E\u0447\u044C",
        noon: "\u043F\u043E\u043B\u0434\u0435\u043D\u044C",
        morning: "\u0443\u0442\u0440\u0430",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447\u0435\u0440\u0430",
        night: "\u043D\u043E\u0447\u0438"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = options?.unit;
    let suffix;
    if (unit === "date") suffix = "-\u0435";
    else if (unit === "week" || unit === "minute" || unit === "second") suffix = "-\u044F";
    else suffix = "-\u0439";
    return number + suffix;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"e9438cdf4c25131b":"fGq1u"}],"ihBFU":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("acea1d4f72edcf13");
var _index2 = require("c31fef6ef7d13416");
const matchOrdinalNumberPattern = /^(\d+)(-?(е|я|й|ое|ье|ая|ья|ый|ой|ий|ый))?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^((до )?н\.?\s?э\.?)/i,
    abbreviated: /^((до )?н\.?\s?э\.?)/i,
    wide: /^(до нашей эры|нашей эры|наша эра)/i
};
const parseEraPatterns = {
    any: [
        /^д/i,
        /^н/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234](-?[ыои]?й?)? кв.?/i,
    wide: /^[1234](-?[ыои]?й?)? квартал/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[яфмаисонд]/i,
    abbreviated: /^(янв|фев|март?|апр|ма[йя]|июн[ья]?|июл[ья]?|авг|сент?|окт|нояб?|дек)\.?/i,
    wide: /^(январ[ья]|феврал[ья]|марта?|апрел[ья]|ма[йя]|июн[ья]|июл[ья]|августа?|сентябр[ья]|октябр[ья]|октябр[ья]|ноябр[ья]|декабр[ья])/i
};
const parseMonthPatterns = {
    narrow: [
        /^я/i,
        /^ф/i,
        /^м/i,
        /^а/i,
        /^м/i,
        /^и/i,
        /^и/i,
        /^а/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^я/i
    ],
    any: [
        /^я/i,
        /^ф/i,
        /^мар/i,
        /^ап/i,
        /^ма[йя]/i,
        /^июн/i,
        /^июл/i,
        /^ав/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^д/i
    ]
};
const matchDayPatterns = {
    narrow: /^[впсч]/i,
    short: /^(вс|во|пн|по|вт|ср|чт|че|пт|пя|сб|су)\.?/i,
    abbreviated: /^(вск|вос|пнд|пон|втр|вто|срд|сре|чтв|чет|птн|пят|суб).?/i,
    wide: /^(воскресень[ея]|понедельника?|вторника?|сред[аы]|четверга?|пятниц[аы]|суббот[аы])/i
};
const parseDayPatterns = {
    narrow: [
        /^в/i,
        /^п/i,
        /^в/i,
        /^с/i,
        /^ч/i,
        /^п/i,
        /^с/i
    ],
    any: [
        /^в[ос]/i,
        /^п[он]/i,
        /^в/i,
        /^ср/i,
        /^ч/i,
        /^п[ят]/i,
        /^с[уб]/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
    abbreviated: /^([дп]п|полн\.?|полд\.?|утр[оа]|день|дня|веч\.?|ноч[ьи])/i,
    wide: /^([дп]п|полночь|полдень|утр[оа]|день|дня|вечера?|ноч[ьи])/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^полн/i,
        noon: /^полд/i,
        morning: /^у/i,
        afternoon: /^д[ен]/i,
        evening: /^в/i,
        night: /^н/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"acea1d4f72edcf13":"15lWd","c31fef6ef7d13416":"kWqg8"}],"4SIjy":[function(require,module,exports) {
"use strict";
exports.se = void 0;
var _index = require("f61ac7533572c25b");
var _index2 = require("f3d9d335ac4367dc");
var _index3 = require("6995447ed179162e");
var _index4 = require("ad078db8dba6cdfc");
var _index5 = require("e9df54e2da68fc00");
/**
 * @category Locales
 * @summary Northern Sámi locale.
 * @language Northern Sámi
 * @iso-639-2 sme
 * @author Audun Rundberg [@audunru](https://github.com/audunru)
 */ const se = exports.se = {
    code: "se",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"f61ac7533572c25b":"lduxl","f3d9d335ac4367dc":"6EGJ9","6995447ed179162e":"4e8hT","ad078db8dba6cdfc":"hp0Zv","e9df54e2da68fc00":"duUNO"}],"lduxl":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "unnit go ovtta sekundda",
        other: "unnit go {{count}} sekundda"
    },
    xSeconds: {
        one: "sekundda",
        other: "{{count}} sekundda"
    },
    halfAMinute: "bealle minuhta",
    lessThanXMinutes: {
        one: "unnit go bealle minuhta",
        other: "unnit go {{count}} minuhta"
    },
    xMinutes: {
        one: "minuhta",
        other: "{{count}} minuhta"
    },
    aboutXHours: {
        one: "sullii ovtta diimmu",
        other: "sullii {{count}} diimmu"
    },
    xHours: {
        one: "diimmu",
        other: "{{count}} diimmu"
    },
    xDays: {
        one: "beaivvi",
        other: "{{count}} beaivvi"
    },
    aboutXWeeks: {
        one: "sullii ovtta vahku",
        other: "sullii {{count}} vahku"
    },
    xWeeks: {
        one: "vahku",
        other: "{{count}} vahku"
    },
    aboutXMonths: {
        one: "sullii ovtta m\xe1nu",
        other: "sullii {{count}} m\xe1nu"
    },
    xMonths: {
        one: "m\xe1nu",
        other: "{{count}} m\xe1nu"
    },
    aboutXYears: {
        one: "sullii ovtta jagi",
        other: "sullii {{count}} jagi"
    },
    xYears: {
        one: "jagi",
        other: "{{count}} jagi"
    },
    overXYears: {
        one: "guhkit go jagi",
        other: "guhkit go {{count}} jagi"
    },
    almostXYears: {
        one: "measta jagi",
        other: "measta {{count}} jagi"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "geah\u010Den " + result;
        else return result + " \xe1igi";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"6EGJ9":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("62aa9c0967a834d0");
const dateFormats = {
    full: "EEEE MMMM d. 'b.' y",
    long: "MMMM d. 'b.' y",
    medium: "MMM d. 'b.' y",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "'dii.' HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'dii.' {{time}}",
    long: "{{date}} 'dii.' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"62aa9c0967a834d0":"6OYyu"}],"4e8hT":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'ovddit' eeee 'dii.' p",
    yesterday: "'ikte dii.' p",
    today: "'odne dii.' p",
    tomorrow: "'ihtin dii.' p",
    nextWeek: "EEEE 'dii.' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"hp0Zv":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("fefeeb58c636b2e9");
const eraValues = {
    narrow: [
        "o.Kr.",
        "m.Kr."
    ],
    abbreviated: [
        "o.Kr.",
        "m.Kr."
    ],
    wide: [
        "ovdal Kristusa",
        "ma\u014B\u014Bel Kristusa"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1. kvart\xe1la",
        "2. kvart\xe1la",
        "3. kvart\xe1la",
        "4. kvart\xe1la"
    ]
};
const monthValues = {
    narrow: [
        "O",
        "G",
        "N",
        "C",
        "M",
        "G",
        "S",
        "B",
        "\u010C",
        "G",
        "S",
        "J"
    ],
    abbreviated: [
        "o\u0111\u0111a",
        "guov",
        "njuk",
        "cuo",
        "mies",
        "geas",
        "suoi",
        "borg",
        "\u010Dak\u010D",
        "golg",
        "sk\xe1b",
        "juov"
    ],
    wide: [
        "o\u0111\u0111ajagem\xe1nnu",
        "guovvam\xe1nnu",
        "njuk\u010Dam\xe1nnu",
        "cuo\u014Bom\xe1nnu",
        "miessem\xe1nnu",
        "geassem\xe1nnu",
        "suoidnem\xe1nnu",
        "borgem\xe1nnu",
        "\u010Dak\u010Dam\xe1nnu",
        "golggotm\xe1nnu",
        "sk\xe1bmam\xe1nnu",
        "juovlam\xe1nnu"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "V",
        "M",
        "G",
        "D",
        "B",
        "L"
    ],
    short: [
        "sotn",
        "vuos",
        "ma\u014B",
        "gask",
        "duor",
        "bear",
        "l\xe1v"
    ],
    abbreviated: [
        "sotn",
        "vuos",
        "ma\u014B",
        "gask",
        "duor",
        "bear",
        "l\xe1v"
    ],
    wide: [
        "sotnabeaivi",
        "vuoss\xe1rga",
        "ma\u014B\u014Beb\xe1rga",
        "gaskavahkku",
        "duorastat",
        "bearjadat",
        "l\xe1vvardat"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "gaskaidja",
        noon: "gaskabeaivi",
        morning: "i\u0111\u0111es",
        afternoon: "ma\u014B\u014Bel gaska.",
        evening: "eahkes",
        night: "ihkku"
    },
    abbreviated: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gaskaidja",
        noon: "gaskabeaivvi",
        morning: "i\u0111\u0111es",
        afternoon: "ma\u014B\u014Bel gaskabea.",
        evening: "eahkes",
        night: "ihkku"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "gaskaidja",
        noon: "gaskabeavvi",
        morning: "i\u0111\u0111es",
        afternoon: "ma\u014B\u014Bel gaskabeaivvi",
        evening: "eahkes",
        night: "ihkku"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide"
    })
};

},{"fefeeb58c636b2e9":"fGq1u"}],"duUNO":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("4588e8cf7641895e");
var _index2 = require("860738471a325b25");
const matchOrdinalNumberPattern = /^(\d+)\.?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(o\.? ?Kr\.?|m\.? ?Kr\.?)/i,
    abbreviated: /^(o\.? ?Kr\.?|m\.? ?Kr\.?)/i,
    wide: /^(ovdal Kristusa|ovdal min áiggi|maŋŋel Kristusa|min áigi)/i
};
const parseEraPatterns = {
    any: [
        /^o/i,
        /^m/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](\.)? kvartála/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[ogncmsbčj]/i,
    abbreviated: /^(ođđa|guov|njuk|cuo|mies|geas|suoi|borg|čakč|golg|skáb|juov)\.?/i,
    wide: /^(ođđajagemánnu|guovvamánnu|njukčamánnu|cuoŋománnu|miessemánnu|geassemánnu|suoidnemánnu|borgemánnu|čakčamánnu|golggotmánnu|skábmamánnu|juovlamánnu)/i
};
const parseMonthPatterns = {
    narrow: [
        /^o/i,
        /^g/i,
        /^n/i,
        /^c/i,
        /^m/i,
        /^g/i,
        /^s/i,
        /^b/i,
        /^č/i,
        /^g/i,
        /^s/i,
        /^j/i
    ],
    any: [
        /^o/i,
        /^gu/i,
        /^n/i,
        /^c/i,
        /^m/i,
        /^ge/i,
        /^su/i,
        /^b/i,
        /^č/i,
        /^go/i,
        /^sk/i,
        /^j/i
    ]
};
const matchDayPatterns = {
    narrow: /^[svmgdbl]/i,
    short: /^(sotn|vuos|maŋ|gask|duor|bear|láv)/i,
    abbreviated: /^(sotn|vuos|maŋ|gask|duor|bear|láv)/i,
    wide: /^(sotnabeaivi|vuossárga|maŋŋebárga|gaskavahkku|duorastat|bearjadat|lávvardat)/i
};
const parseDayPatterns = {
    any: [
        /^s/i,
        /^v/i,
        /^m/i,
        /^g/i,
        /^d/i,
        /^b/i,
        /^l/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(gaskaidja|gaskabeaivvi|(på) (iđđes|maŋŋel gaskabeaivvi|eahkes|ihkku)|[ap])/i,
    any: /^([ap]\.?\s?m\.?|gaskaidja|gaskabeaivvi|(på) (iđđes|maŋŋel gaskabeaivvi|eahkes|ihkku))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a(\.?\s?m\.?)?$/i,
        pm: /^p(\.?\s?m\.?)?$/i,
        midnight: /^gaskai/i,
        noon: /^gaskab/i,
        morning: /iđđes/i,
        afternoon: /maŋŋel gaskabeaivvi/i,
        evening: /eahkes/i,
        night: /ihkku/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"4588e8cf7641895e":"15lWd","860738471a325b25":"kWqg8"}],"3iW9A":[function(require,module,exports) {
"use strict";
exports.sk = void 0;
var _index = require("fe716f811a80f7b3");
var _index2 = require("f4c93e2c9e2e2961");
var _index3 = require("448d893956be781");
var _index4 = require("e17885ff54c5748e");
var _index5 = require("b7d4e3ae6e695d3f");
/**
 * @category Locales
 * @summary Slovak locale.
 * @language Slovak
 * @iso-639-2 slk
 * @author Marek Suscak [@mareksuscak](https://github.com/mareksuscak)
 */ const sk = exports.sk = {
    code: "sk",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"fe716f811a80f7b3":"3voWs","f4c93e2c9e2e2961":"kEpJw","448d893956be781":"3ntX2","e17885ff54c5748e":"2b3Ys","b7d4e3ae6e695d3f":"047fO"}],"3voWs":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function declensionGroup(scheme, count) {
    if (count === 1 && scheme.one) return scheme.one;
    if (count >= 2 && count <= 4 && scheme.twoFour) return scheme.twoFour;
    // if count === null || count === 0 || count >= 5
    return scheme.other;
}
function declension(scheme, count, time) {
    const group = declensionGroup(scheme, count);
    const finalText = group[time];
    return finalText.replace("{{count}}", String(count));
}
function extractPreposition(token) {
    const result = [
        "lessThan",
        "about",
        "over",
        "almost"
    ].filter(function(preposition) {
        return !!token.match(new RegExp("^" + preposition));
    });
    return result[0];
}
function prefixPreposition(preposition) {
    let translation = "";
    if (preposition === "almost") translation = "takmer";
    if (preposition === "about") translation = "pribli\u017Ene";
    return translation.length > 0 ? translation + " " : "";
}
function suffixPreposition(preposition) {
    let translation = "";
    if (preposition === "lessThan") translation = "menej ne\u017E";
    if (preposition === "over") translation = "viac ne\u017E";
    return translation.length > 0 ? translation + " " : "";
}
function lowercaseFirstLetter(string) {
    return string.charAt(0).toLowerCase() + string.slice(1);
}
const formatDistanceLocale = {
    xSeconds: {
        one: {
            present: "sekunda",
            past: "sekundou",
            future: "sekundu"
        },
        twoFour: {
            present: "{{count}} sekundy",
            past: "{{count}} sekundami",
            future: "{{count}} sekundy"
        },
        other: {
            present: "{{count}} sek\xfand",
            past: "{{count}} sekundami",
            future: "{{count}} sek\xfand"
        }
    },
    halfAMinute: {
        other: {
            present: "pol min\xfaty",
            past: "pol min\xfatou",
            future: "pol min\xfaty"
        }
    },
    xMinutes: {
        one: {
            present: "min\xfata",
            past: "min\xfatou",
            future: "min\xfatu"
        },
        twoFour: {
            present: "{{count}} min\xfaty",
            past: "{{count}} min\xfatami",
            future: "{{count}} min\xfaty"
        },
        other: {
            present: "{{count}} min\xfat",
            past: "{{count}} min\xfatami",
            future: "{{count}} min\xfat"
        }
    },
    xHours: {
        one: {
            present: "hodina",
            past: "hodinou",
            future: "hodinu"
        },
        twoFour: {
            present: "{{count}} hodiny",
            past: "{{count}} hodinami",
            future: "{{count}} hodiny"
        },
        other: {
            present: "{{count}} hod\xedn",
            past: "{{count}} hodinami",
            future: "{{count}} hod\xedn"
        }
    },
    xDays: {
        one: {
            present: "de\u0148",
            past: "d\u0148om",
            future: "de\u0148"
        },
        twoFour: {
            present: "{{count}} dni",
            past: "{{count}} d\u0148ami",
            future: "{{count}} dni"
        },
        other: {
            present: "{{count}} dn\xed",
            past: "{{count}} d\u0148ami",
            future: "{{count}} dn\xed"
        }
    },
    xWeeks: {
        one: {
            present: "t\xfd\u017Ede\u0148",
            past: "t\xfd\u017Ed\u0148om",
            future: "t\xfd\u017Ede\u0148"
        },
        twoFour: {
            present: "{{count}} t\xfd\u017Edne",
            past: "{{count}} t\xfd\u017Ed\u0148ami",
            future: "{{count}} t\xfd\u017Edne"
        },
        other: {
            present: "{{count}} t\xfd\u017Ed\u0148ov",
            past: "{{count}} t\xfd\u017Ed\u0148ami",
            future: "{{count}} t\xfd\u017Ed\u0148ov"
        }
    },
    xMonths: {
        one: {
            present: "mesiac",
            past: "mesiacom",
            future: "mesiac"
        },
        twoFour: {
            present: "{{count}} mesiace",
            past: "{{count}} mesiacmi",
            future: "{{count}} mesiace"
        },
        other: {
            present: "{{count}} mesiacov",
            past: "{{count}} mesiacmi",
            future: "{{count}} mesiacov"
        }
    },
    xYears: {
        one: {
            present: "rok",
            past: "rokom",
            future: "rok"
        },
        twoFour: {
            present: "{{count}} roky",
            past: "{{count}} rokmi",
            future: "{{count}} roky"
        },
        other: {
            present: "{{count}} rokov",
            past: "{{count}} rokmi",
            future: "{{count}} rokov"
        }
    }
};
const formatDistance = (token, count, options)=>{
    const preposition = extractPreposition(token) || "";
    const key = lowercaseFirstLetter(token.substring(preposition.length));
    const scheme = formatDistanceLocale[key];
    if (!options?.addSuffix) return prefixPreposition(preposition) + suffixPreposition(preposition) + declension(scheme, count, "present");
    if (options.comparison && options.comparison > 0) return prefixPreposition(preposition) + "o " + suffixPreposition(preposition) + declension(scheme, count, "future");
    else return prefixPreposition(preposition) + "pred " + suffixPreposition(preposition) + declension(scheme, count, "past");
};
exports.formatDistance = formatDistance;

},{}],"kEpJw":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("de50d3326a506e86");
// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1986
const dateFormats = {
    full: "EEEE d. MMMM y",
    long: "d. MMMM y",
    medium: "d. M. y",
    short: "d. M. y"
};
// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#2149
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1994
const dateTimeFormats = {
    full: "{{date}}, {{time}}",
    long: "{{date}}, {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"de50d3326a506e86":"6OYyu"}],"3ntX2":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("82b4c7af8f11b9ce");
// https://www.unicode.org/cldr/charts/32/summary/sk.html?hide#1308
const accusativeWeekdays = [
    "nede\u013Eu",
    "pondelok",
    "utorok",
    "stredu",
    "\u0161tvrtok",
    "piatok",
    "sobotu"
];
function lastWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
        /* Sun */ case 3:
        /* Wed */ case 6 /* Sat */ :
            return "'minul\xfa " + weekday + " o' p";
        default:
            return "'minul\xfd' eeee 'o' p";
    }
}
function thisWeek(day) {
    const weekday = accusativeWeekdays[day];
    if (day === 4 /* Thu */ ) return "'vo' eeee 'o' p";
    else return "'v " + weekday + " o' p";
}
function nextWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
        /* Sun */ case 4:
        /* Wed */ case 6 /* Sat */ :
            return "'bud\xfacu " + weekday + " o' p";
        default:
            return "'bud\xfaci' eeee 'o' p";
    }
}
const formatRelativeLocale = {
    lastWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return lastWeek(day);
    },
    yesterday: "'v\u010Dera o' p",
    today: "'dnes o' p",
    tomorrow: "'zajtra o' p",
    nextWeek: (date, baseDate, options)=>{
        const day = date.getDay();
        if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
        else return nextWeek(day);
    },
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"82b4c7af8f11b9ce":"16SmB"}],"2b3Ys":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("7b75dbd2d95b7504");
// https://www.unicode.org/cldr/charts/32/summary/sk.html#1772
const eraValues = {
    narrow: [
        "pred Kr.",
        "po Kr."
    ],
    abbreviated: [
        "pred Kr.",
        "po Kr."
    ],
    wide: [
        "pred Kristom",
        "po Kristovi"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/sk.html#1780
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1. \u0161tvr\u0165rok",
        "2. \u0161tvr\u0165rok",
        "3. \u0161tvr\u0165rok",
        "4. \u0161tvr\u0165rok"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/sk.html#1804
const monthValues = {
    narrow: [
        "j",
        "f",
        "m",
        "a",
        "m",
        "j",
        "j",
        "a",
        "s",
        "o",
        "n",
        "d"
    ],
    abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "m\xe1j",
        "j\xfan",
        "j\xfal",
        "aug",
        "sep",
        "okt",
        "nov",
        "dec"
    ],
    wide: [
        "janu\xe1r",
        "febru\xe1r",
        "marec",
        "apr\xedl",
        "m\xe1j",
        "j\xfan",
        "j\xfal",
        "august",
        "september",
        "okt\xf3ber",
        "november",
        "december"
    ]
};
const formattingMonthValues = {
    narrow: [
        "j",
        "f",
        "m",
        "a",
        "m",
        "j",
        "j",
        "a",
        "s",
        "o",
        "n",
        "d"
    ],
    abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "m\xe1j",
        "j\xfan",
        "j\xfal",
        "aug",
        "sep",
        "okt",
        "nov",
        "dec"
    ],
    wide: [
        "janu\xe1ra",
        "febru\xe1ra",
        "marca",
        "apr\xedla",
        "m\xe1ja",
        "j\xfana",
        "j\xfala",
        "augusta",
        "septembra",
        "okt\xf3bra",
        "novembra",
        "decembra"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/sk.html#1876
const dayValues = {
    narrow: [
        "n",
        "p",
        "u",
        "s",
        "\u0161",
        "p",
        "s"
    ],
    short: [
        "ne",
        "po",
        "ut",
        "st",
        "\u0161t",
        "pi",
        "so"
    ],
    abbreviated: [
        "ne",
        "po",
        "ut",
        "st",
        "\u0161t",
        "pi",
        "so"
    ],
    wide: [
        "nede\u013Ea",
        "pondelok",
        "utorok",
        "streda",
        "\u0161tvrtok",
        "piatok",
        "sobota"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/sk.html#1932
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "poln.",
        noon: "pol.",
        morning: "r\xe1no",
        afternoon: "pop.",
        evening: "ve\u010D.",
        night: "noc"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "poln.",
        noon: "pol.",
        morning: "r\xe1no",
        afternoon: "popol.",
        evening: "ve\u010Der",
        night: "noc"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "polnoc",
        noon: "poludnie",
        morning: "r\xe1no",
        afternoon: "popoludnie",
        evening: "ve\u010Der",
        night: "noc"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "o poln.",
        noon: "nap.",
        morning: "r\xe1no",
        afternoon: "pop.",
        evening: "ve\u010D.",
        night: "v n."
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "o poln.",
        noon: "napol.",
        morning: "r\xe1no",
        afternoon: "popol.",
        evening: "ve\u010Der",
        night: "v noci"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "o polnoci",
        noon: "napoludnie",
        morning: "r\xe1no",
        afternoon: "popoludn\xed",
        evening: "ve\u010Der",
        night: "v noci"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"7b75dbd2d95b7504":"fGq1u"}],"047fO":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("364b0ed168b73237");
var _index2 = require("7b42c012ca4d180c");
const matchOrdinalNumberPattern = /^(\d+)\.?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
    abbreviated: /^(pred Kr\.|pred n\. l\.|po Kr\.|n\. l\.)/i,
    wide: /^(pred Kristom|pred na[šs][íi]m letopo[čc]tom|po Kristovi|n[áa][šs]ho letopo[čc]tu)/i
};
const parseEraPatterns = {
    any: [
        /^pr/i,
        /^(po|n)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234]\. [šs]tvr[ťt]rok/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar|apr|m[áa]j|j[úu]n|j[úu]l|aug|sep|okt|nov|dec)/i,
    wide: /^(janu[áa]ra?|febru[áa]ra?|(marec|marca)|apr[íi]la?|m[áa]ja?|j[úu]na?|j[úu]la?|augusta?|(september|septembra)|(okt[óo]ber|okt[óo]bra)|(november|novembra)|(december|decembra))/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^m[áa]j/i,
        /^j[úu]n/i,
        /^j[úu]l/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[npusšp]/i,
    short: /^(ne|po|ut|st|št|pi|so)/i,
    abbreviated: /^(ne|po|ut|st|št|pi|so)/i,
    wide: /^(nede[ľl]a|pondelok|utorok|streda|[šs]tvrtok|piatok|sobota])/i
};
const parseDayPatterns = {
    narrow: [
        /^n/i,
        /^p/i,
        /^u/i,
        /^s/i,
        /^š/i,
        /^p/i,
        /^s/i
    ],
    any: [
        /^n/i,
        /^po/i,
        /^u/i,
        /^st/i,
        /^(št|stv)/i,
        /^pi/i,
        /^so/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(am|pm|(o )?poln\.?|(nap\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]\.?|(v n\.?|noc))/i,
    abbreviated: /^(am|pm|(o )?poln\.?|(napol\.?|pol\.?)|r[áa]no|pop\.?|ve[čc]er|(v )?noci?)/i,
    any: /^(am|pm|(o )?polnoci?|(na)?poludnie|r[áa]no|popoludn(ie|í|i)|ve[čc]er|(v )?noci?)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^am/i,
        pm: /^pm/i,
        midnight: /poln/i,
        noon: /^(nap|(na)?pol(\.|u))/i,
        morning: /^r[áa]no/i,
        afternoon: /^pop/i,
        evening: /^ve[čc]/i,
        night: /^(noc|v n\.)/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"364b0ed168b73237":"15lWd","7b42c012ca4d180c":"kWqg8"}],"7KgoU":[function(require,module,exports) {
"use strict";
exports.sl = void 0;
var _index = require("a14d1466d4f6f955");
var _index2 = require("8b927d646121abe7");
var _index3 = require("1446f4ca2bce0510");
var _index4 = require("8f1798e8811c1e5");
var _index5 = require("dd80a4139ebf572a");
/**
 * @category Locales
 * @summary Slovenian locale.
 * @language Slovenian
 * @iso-639-2 slv
 * @author Adam Stradovnik [@Neoglyph](https://github.com/Neoglyph)
 * @author Mato Žgajner [@mzgajner](https://github.com/mzgajner)
 */ const sl = exports.sl = {
    code: "sl",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"a14d1466d4f6f955":"apzey","8b927d646121abe7":"lsTHa","1446f4ca2bce0510":"04TuV","8f1798e8811c1e5":"cuZRh","dd80a4139ebf572a":"4MhwL"}],"apzey":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function isPluralType(val) {
    return val.one !== undefined;
}
const formatDistanceLocale = {
    lessThanXSeconds: {
        present: {
            one: "manj kot {{count}} sekunda",
            two: "manj kot {{count}} sekundi",
            few: "manj kot {{count}} sekunde",
            other: "manj kot {{count}} sekund"
        },
        past: {
            one: "manj kot {{count}} sekundo",
            two: "manj kot {{count}} sekundama",
            few: "manj kot {{count}} sekundami",
            other: "manj kot {{count}} sekundami"
        },
        future: {
            one: "manj kot {{count}} sekundo",
            two: "manj kot {{count}} sekundi",
            few: "manj kot {{count}} sekunde",
            other: "manj kot {{count}} sekund"
        }
    },
    xSeconds: {
        present: {
            one: "{{count}} sekunda",
            two: "{{count}} sekundi",
            few: "{{count}} sekunde",
            other: "{{count}} sekund"
        },
        past: {
            one: "{{count}} sekundo",
            two: "{{count}} sekundama",
            few: "{{count}} sekundami",
            other: "{{count}} sekundami"
        },
        future: {
            one: "{{count}} sekundo",
            two: "{{count}} sekundi",
            few: "{{count}} sekunde",
            other: "{{count}} sekund"
        }
    },
    halfAMinute: "pol minute",
    lessThanXMinutes: {
        present: {
            one: "manj kot {{count}} minuta",
            two: "manj kot {{count}} minuti",
            few: "manj kot {{count}} minute",
            other: "manj kot {{count}} minut"
        },
        past: {
            one: "manj kot {{count}} minuto",
            two: "manj kot {{count}} minutama",
            few: "manj kot {{count}} minutami",
            other: "manj kot {{count}} minutami"
        },
        future: {
            one: "manj kot {{count}} minuto",
            two: "manj kot {{count}} minuti",
            few: "manj kot {{count}} minute",
            other: "manj kot {{count}} minut"
        }
    },
    xMinutes: {
        present: {
            one: "{{count}} minuta",
            two: "{{count}} minuti",
            few: "{{count}} minute",
            other: "{{count}} minut"
        },
        past: {
            one: "{{count}} minuto",
            two: "{{count}} minutama",
            few: "{{count}} minutami",
            other: "{{count}} minutami"
        },
        future: {
            one: "{{count}} minuto",
            two: "{{count}} minuti",
            few: "{{count}} minute",
            other: "{{count}} minut"
        }
    },
    aboutXHours: {
        present: {
            one: "pribli\u017Eno {{count}} ura",
            two: "pribli\u017Eno {{count}} uri",
            few: "pribli\u017Eno {{count}} ure",
            other: "pribli\u017Eno {{count}} ur"
        },
        past: {
            one: "pribli\u017Eno {{count}} uro",
            two: "pribli\u017Eno {{count}} urama",
            few: "pribli\u017Eno {{count}} urami",
            other: "pribli\u017Eno {{count}} urami"
        },
        future: {
            one: "pribli\u017Eno {{count}} uro",
            two: "pribli\u017Eno {{count}} uri",
            few: "pribli\u017Eno {{count}} ure",
            other: "pribli\u017Eno {{count}} ur"
        }
    },
    xHours: {
        present: {
            one: "{{count}} ura",
            two: "{{count}} uri",
            few: "{{count}} ure",
            other: "{{count}} ur"
        },
        past: {
            one: "{{count}} uro",
            two: "{{count}} urama",
            few: "{{count}} urami",
            other: "{{count}} urami"
        },
        future: {
            one: "{{count}} uro",
            two: "{{count}} uri",
            few: "{{count}} ure",
            other: "{{count}} ur"
        }
    },
    xDays: {
        present: {
            one: "{{count}} dan",
            two: "{{count}} dni",
            few: "{{count}} dni",
            other: "{{count}} dni"
        },
        past: {
            one: "{{count}} dnem",
            two: "{{count}} dnevoma",
            few: "{{count}} dnevi",
            other: "{{count}} dnevi"
        },
        future: {
            one: "{{count}} dan",
            two: "{{count}} dni",
            few: "{{count}} dni",
            other: "{{count}} dni"
        }
    },
    // no tenses for weeks?
    aboutXWeeks: {
        one: "pribli\u017Eno {{count}} teden",
        two: "pribli\u017Eno {{count}} tedna",
        few: "pribli\u017Eno {{count}} tedne",
        other: "pribli\u017Eno {{count}} tednov"
    },
    // no tenses for weeks?
    xWeeks: {
        one: "{{count}} teden",
        two: "{{count}} tedna",
        few: "{{count}} tedne",
        other: "{{count}} tednov"
    },
    aboutXMonths: {
        present: {
            one: "pribli\u017Eno {{count}} mesec",
            two: "pribli\u017Eno {{count}} meseca",
            few: "pribli\u017Eno {{count}} mesece",
            other: "pribli\u017Eno {{count}} mesecev"
        },
        past: {
            one: "pribli\u017Eno {{count}} mesecem",
            two: "pribli\u017Eno {{count}} mesecema",
            few: "pribli\u017Eno {{count}} meseci",
            other: "pribli\u017Eno {{count}} meseci"
        },
        future: {
            one: "pribli\u017Eno {{count}} mesec",
            two: "pribli\u017Eno {{count}} meseca",
            few: "pribli\u017Eno {{count}} mesece",
            other: "pribli\u017Eno {{count}} mesecev"
        }
    },
    xMonths: {
        present: {
            one: "{{count}} mesec",
            two: "{{count}} meseca",
            few: "{{count}} meseci",
            other: "{{count}} mesecev"
        },
        past: {
            one: "{{count}} mesecem",
            two: "{{count}} mesecema",
            few: "{{count}} meseci",
            other: "{{count}} meseci"
        },
        future: {
            one: "{{count}} mesec",
            two: "{{count}} meseca",
            few: "{{count}} mesece",
            other: "{{count}} mesecev"
        }
    },
    aboutXYears: {
        present: {
            one: "pribli\u017Eno {{count}} leto",
            two: "pribli\u017Eno {{count}} leti",
            few: "pribli\u017Eno {{count}} leta",
            other: "pribli\u017Eno {{count}} let"
        },
        past: {
            one: "pribli\u017Eno {{count}} letom",
            two: "pribli\u017Eno {{count}} letoma",
            few: "pribli\u017Eno {{count}} leti",
            other: "pribli\u017Eno {{count}} leti"
        },
        future: {
            one: "pribli\u017Eno {{count}} leto",
            two: "pribli\u017Eno {{count}} leti",
            few: "pribli\u017Eno {{count}} leta",
            other: "pribli\u017Eno {{count}} let"
        }
    },
    xYears: {
        present: {
            one: "{{count}} leto",
            two: "{{count}} leti",
            few: "{{count}} leta",
            other: "{{count}} let"
        },
        past: {
            one: "{{count}} letom",
            two: "{{count}} letoma",
            few: "{{count}} leti",
            other: "{{count}} leti"
        },
        future: {
            one: "{{count}} leto",
            two: "{{count}} leti",
            few: "{{count}} leta",
            other: "{{count}} let"
        }
    },
    overXYears: {
        present: {
            one: "ve\u010D kot {{count}} leto",
            two: "ve\u010D kot {{count}} leti",
            few: "ve\u010D kot {{count}} leta",
            other: "ve\u010D kot {{count}} let"
        },
        past: {
            one: "ve\u010D kot {{count}} letom",
            two: "ve\u010D kot {{count}} letoma",
            few: "ve\u010D kot {{count}} leti",
            other: "ve\u010D kot {{count}} leti"
        },
        future: {
            one: "ve\u010D kot {{count}} leto",
            two: "ve\u010D kot {{count}} leti",
            few: "ve\u010D kot {{count}} leta",
            other: "ve\u010D kot {{count}} let"
        }
    },
    almostXYears: {
        present: {
            one: "skoraj {{count}} leto",
            two: "skoraj {{count}} leti",
            few: "skoraj {{count}} leta",
            other: "skoraj {{count}} let"
        },
        past: {
            one: "skoraj {{count}} letom",
            two: "skoraj {{count}} letoma",
            few: "skoraj {{count}} leti",
            other: "skoraj {{count}} leti"
        },
        future: {
            one: "skoraj {{count}} leto",
            two: "skoraj {{count}} leti",
            few: "skoraj {{count}} leta",
            other: "skoraj {{count}} let"
        }
    }
};
function getFormFromCount(count) {
    switch(count % 100){
        case 1:
            return "one";
        case 2:
            return "two";
        case 3:
        case 4:
            return "few";
        default:
            return "other";
    }
}
const formatDistance = (token, count, options)=>{
    let result = "";
    let tense = "present";
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) {
            tense = "future";
            result = "\u010Dez ";
        } else {
            tense = "past";
            result = "pred ";
        }
    }
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result += tokenValue;
    else {
        const form = getFormFromCount(count);
        if (isPluralType(tokenValue)) result += tokenValue[form].replace("{{count}}", String(count));
        else result += tokenValue[tense][form].replace("{{count}}", String(count));
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"lsTHa":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("d322b5c86f55068f");
const dateFormats = {
    full: "EEEE, dd. MMMM y",
    long: "dd. MMMM y",
    medium: "d. MMM y",
    short: "d. MM. yy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"d322b5c86f55068f":"6OYyu"}],"04TuV":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        const day = date.getDay();
        switch(day){
            case 0:
                return "'prej\u0161njo nedeljo ob' p";
            case 3:
                return "'prej\u0161njo sredo ob' p";
            case 6:
                return "'prej\u0161njo soboto ob' p";
            default:
                return "'prej\u0161nji' EEEE 'ob' p";
        }
    },
    yesterday: "'v\u010Deraj ob' p",
    today: "'danes ob' p",
    tomorrow: "'jutri ob' p",
    nextWeek: (date)=>{
        const day = date.getDay();
        switch(day){
            case 0:
                return "'naslednjo nedeljo ob' p";
            case 3:
                return "'naslednjo sredo ob' p";
            case 6:
                return "'naslednjo soboto ob' p";
            default:
                return "'naslednji' EEEE 'ob' p";
        }
    },
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"cuZRh":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("d918ac21f408bbf4");
const eraValues = {
    narrow: [
        "pr. n. \u0161t.",
        "po n. \u0161t."
    ],
    abbreviated: [
        "pr. n. \u0161t.",
        "po n. \u0161t."
    ],
    wide: [
        "pred na\u0161im \u0161tetjem",
        "po na\u0161em \u0161tetju"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1. \u010Det.",
        "2. \u010Det.",
        "3. \u010Det.",
        "4. \u010Det."
    ],
    wide: [
        "1. \u010Detrtletje",
        "2. \u010Detrtletje",
        "3. \u010Detrtletje",
        "4. \u010Detrtletje"
    ]
};
const monthValues = {
    narrow: [
        "j",
        "f",
        "m",
        "a",
        "m",
        "j",
        "j",
        "a",
        "s",
        "o",
        "n",
        "d"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mar.",
        "apr.",
        "maj",
        "jun.",
        "jul.",
        "avg.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
    ],
    wide: [
        "januar",
        "februar",
        "marec",
        "april",
        "maj",
        "junij",
        "julij",
        "avgust",
        "september",
        "oktober",
        "november",
        "december"
    ]
};
const dayValues = {
    narrow: [
        "n",
        "p",
        "t",
        "s",
        "\u010D",
        "p",
        "s"
    ],
    short: [
        "ned.",
        "pon.",
        "tor.",
        "sre.",
        "\u010Det.",
        "pet.",
        "sob."
    ],
    abbreviated: [
        "ned.",
        "pon.",
        "tor.",
        "sre.",
        "\u010Det.",
        "pet.",
        "sob."
    ],
    wide: [
        "nedelja",
        "ponedeljek",
        "torek",
        "sreda",
        "\u010Detrtek",
        "petek",
        "sobota"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "d",
        pm: "p",
        midnight: "24.00",
        noon: "12.00",
        morning: "j",
        afternoon: "p",
        evening: "v",
        night: "n"
    },
    abbreviated: {
        am: "dop.",
        pm: "pop.",
        midnight: "poln.",
        noon: "pold.",
        morning: "jut.",
        afternoon: "pop.",
        evening: "ve\u010D.",
        night: "no\u010D"
    },
    wide: {
        am: "dop.",
        pm: "pop.",
        midnight: "polno\u010D",
        noon: "poldne",
        morning: "jutro",
        afternoon: "popoldne",
        evening: "ve\u010Der",
        night: "no\u010D"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "d",
        pm: "p",
        midnight: "24.00",
        noon: "12.00",
        morning: "zj",
        afternoon: "p",
        evening: "zv",
        night: "po"
    },
    abbreviated: {
        am: "dop.",
        pm: "pop.",
        midnight: "opoln.",
        noon: "opold.",
        morning: "zjut.",
        afternoon: "pop.",
        evening: "zve\u010D.",
        night: "pono\u010Di"
    },
    wide: {
        am: "dop.",
        pm: "pop.",
        midnight: "opolno\u010Di",
        noon: "opoldne",
        morning: "zjutraj",
        afternoon: "popoldan",
        evening: "zve\u010Der",
        night: "pono\u010Di"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"d918ac21f408bbf4":"fGq1u"}],"4MhwL":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("3ef4ceaa65d4f8b7");
var _index2 = require("29ebc50c8ae9f07d");
const matchOrdinalNumberPattern = /^(\d+)\./i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    abbreviated: /^(pr\. n\. št\.|po n\. št\.)/i,
    wide: /^(pred Kristusom|pred na[sš]im [sš]tetjem|po Kristusu|po na[sš]em [sš]tetju|na[sš]ega [sš]tetja)/i
};
const parseEraPatterns = {
    any: [
        /^pr/i,
        /^(po|na[sš]em)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]\.\s?[čc]et\.?/i,
    wide: /^[1234]\. [čc]etrtletje/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan\.|feb\.|mar\.|apr\.|maj|jun\.|jul\.|avg\.|sep\.|okt\.|nov\.|dec\.)/i,
    wide: /^(januar|februar|marec|april|maj|junij|julij|avgust|september|oktober|november|december)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    abbreviated: [
        /^ja/i,
        /^fe/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^av/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    wide: [
        /^ja/i,
        /^fe/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^av/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[nptsčc]/i,
    short: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
    abbreviated: /^(ned\.|pon\.|tor\.|sre\.|[cč]et\.|pet\.|sob\.)/i,
    wide: /^(nedelja|ponedeljek|torek|sreda|[cč]etrtek|petek|sobota)/i
};
const parseDayPatterns = {
    narrow: [
        /^n/i,
        /^p/i,
        /^t/i,
        /^s/i,
        /^[cč]/i,
        /^p/i,
        /^s/i
    ],
    any: [
        /^n/i,
        /^po/i,
        /^t/i,
        /^sr/i,
        /^[cč]/i,
        /^pe/i,
        /^so/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(d|po?|z?v|n|z?j|24\.00|12\.00)/i,
    any: /^(dop\.|pop\.|o?poln(\.|o[cč]i?)|o?pold(\.|ne)|z?ve[cč](\.|er)|(po)?no[cč]i?|popold(ne|an)|jut(\.|ro)|zjut(\.|raj))/i
};
const parseDayPeriodPatterns = {
    narrow: {
        am: /^d/i,
        pm: /^p/i,
        midnight: /^24/i,
        noon: /^12/i,
        morning: /^(z?j)/i,
        afternoon: /^p/i,
        evening: /^(z?v)/i,
        night: /^(n|po)/i
    },
    any: {
        am: /^dop\./i,
        pm: /^pop\./i,
        midnight: /^o?poln/i,
        noon: /^o?pold/i,
        morning: /j/i,
        afternoon: /^pop\./i,
        evening: /^z?ve/i,
        night: /(po)?no/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "wide"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"3ef4ceaa65d4f8b7":"15lWd","29ebc50c8ae9f07d":"kWqg8"}],"crVuJ":[function(require,module,exports) {
"use strict";
exports.sq = void 0;
var _index = require("a8c46c9f0d513325");
var _index2 = require("1965303578be5ad7");
var _index3 = require("8077397ca3facb3");
var _index4 = require("be9371e56891e46f");
var _index5 = require("420d863e072c8625");
/**
 * @category Locales
 * @summary Albanian locale.
 * @language Shqip
 * @iso-639-2 sqi
 * @author Ardit Dine [@arditdine](https://github.com/arditdine)
 */ const sq = exports.sq = {
    code: "sq",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"a8c46c9f0d513325":"cYzDr","1965303578be5ad7":"i71H3","8077397ca3facb3":"asKYo","be9371e56891e46f":"kT3iC","420d863e072c8625":"dnefE"}],"cYzDr":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "m\xeb pak se nj\xeb sekond\xeb",
        other: "m\xeb pak se {{count}} sekonda"
    },
    xSeconds: {
        one: "1 sekond\xeb",
        other: "{{count}} sekonda"
    },
    halfAMinute: "gjys\xebm minuti",
    lessThanXMinutes: {
        one: "m\xeb pak se nj\xeb minute",
        other: "m\xeb pak se {{count}} minuta"
    },
    xMinutes: {
        one: "1 minut\xeb",
        other: "{{count}} minuta"
    },
    aboutXHours: {
        one: "rreth 1 or\xeb",
        other: "rreth {{count}} or\xeb"
    },
    xHours: {
        one: "1 or\xeb",
        other: "{{count}} or\xeb"
    },
    xDays: {
        one: "1 dit\xeb",
        other: "{{count}} dit\xeb"
    },
    aboutXWeeks: {
        one: "rreth 1 jav\xeb",
        other: "rreth {{count}} jav\xeb"
    },
    xWeeks: {
        one: "1 jav\xeb",
        other: "{{count}} jav\xeb"
    },
    aboutXMonths: {
        one: "rreth 1 muaj",
        other: "rreth {{count}} muaj"
    },
    xMonths: {
        one: "1 muaj",
        other: "{{count}} muaj"
    },
    aboutXYears: {
        one: "rreth 1 vit",
        other: "rreth {{count}} vite"
    },
    xYears: {
        one: "1 vit",
        other: "{{count}} vite"
    },
    overXYears: {
        one: "mbi 1 vit",
        other: "mbi {{count}} vite"
    },
    almostXYears: {
        one: "pothuajse 1 vit",
        other: "pothuajse {{count}} vite"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "n\xeb " + result;
        else return result + " m\xeb par\xeb";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"i71H3":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("f3f2bee2e33e17fa");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} 'n\xeb' {{time}}",
    long: "{{date}} 'n\xeb' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"f3f2bee2e33e17fa":"6OYyu"}],"asKYo":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'t\xeb' eeee 'e shkuar n\xeb' p",
    yesterday: "'dje n\xeb' p",
    today: "'sot n\xeb' p",
    tomorrow: "'nes\xebr n\xeb' p",
    nextWeek: "eeee 'at' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"kT3iC":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("8d55418613b7db78");
const eraValues = {
    narrow: [
        "P",
        "M"
    ],
    abbreviated: [
        "PK",
        "MK"
    ],
    wide: [
        "Para Krishtit",
        "Mbas Krishtit"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "4-mujori I",
        "4-mujori II",
        "4-mujori III",
        "4-mujori IV"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "J",
        "S",
        "M",
        "P",
        "M",
        "Q",
        "K",
        "G",
        "S",
        "T",
        "N",
        "D"
    ],
    abbreviated: [
        "Jan",
        "Shk",
        "Mar",
        "Pri",
        "Maj",
        "Qer",
        "Kor",
        "Gus",
        "Sht",
        "Tet",
        "N\xebn",
        "Dhj"
    ],
    wide: [
        "Janar",
        "Shkurt",
        "Mars",
        "Prill",
        "Maj",
        "Qershor",
        "Korrik",
        "Gusht",
        "Shtator",
        "Tetor",
        "N\xebntor",
        "Dhjetor"
    ]
};
const dayValues = {
    narrow: [
        "D",
        "H",
        "M",
        "M",
        "E",
        "P",
        "S"
    ],
    short: [
        "Di",
        "H\xeb",
        "Ma",
        "M\xeb",
        "En",
        "Pr",
        "Sh"
    ],
    abbreviated: [
        "Die",
        "H\xebn",
        "Mar",
        "M\xebr",
        "Enj",
        "Pre",
        "Sht"
    ],
    wide: [
        "Diel\xeb",
        "H\xebn\xeb",
        "Mart\xeb",
        "M\xebrkur\xeb",
        "Enjte",
        "Premte",
        "Shtun\xeb"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "p",
        pm: "m",
        midnight: "m",
        noon: "d",
        morning: "m\xebngjes",
        afternoon: "dite",
        evening: "mbr\xebmje",
        night: "nat\xeb"
    },
    abbreviated: {
        am: "PD",
        pm: "MD",
        midnight: "mesn\xebt\xeb",
        noon: "drek",
        morning: "m\xebngjes",
        afternoon: "mbasdite",
        evening: "mbr\xebmje",
        night: "nat\xeb"
    },
    wide: {
        am: "p.d.",
        pm: "m.d.",
        midnight: "mesn\xebt\xeb",
        noon: "drek",
        morning: "m\xebngjes",
        afternoon: "mbasdite",
        evening: "mbr\xebmje",
        night: "nat\xeb"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "p",
        pm: "m",
        midnight: "m",
        noon: "d",
        morning: "n\xeb m\xebngjes",
        afternoon: "n\xeb mbasdite",
        evening: "n\xeb mbr\xebmje",
        night: "n\xeb mesnat\xeb"
    },
    abbreviated: {
        am: "PD",
        pm: "MD",
        midnight: "mesnat\xeb",
        noon: "drek",
        morning: "n\xeb m\xebngjes",
        afternoon: "n\xeb mbasdite",
        evening: "n\xeb mbr\xebmje",
        night: "n\xeb mesnat\xeb"
    },
    wide: {
        am: "p.d.",
        pm: "m.d.",
        midnight: "mesnat\xeb",
        noon: "drek",
        morning: "n\xeb m\xebngjes",
        afternoon: "n\xeb mbasdite",
        evening: "n\xeb mbr\xebmje",
        night: "n\xeb mesnat\xeb"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    if (options?.unit === "hour") return String(number);
    if (number === 1) return number + "-r\xeb";
    if (number === 4) return number + "t";
    return number + "-t\xeb";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"8d55418613b7db78":"fGq1u"}],"dnefE":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("48559552e4bbf36e");
var _index2 = require("861fc35dbd04e52d");
const matchOrdinalNumberPattern = /^(\d+)(-rë|-të|t|)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(p|m)/i,
    abbreviated: /^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,
    wide: /^(para krishtit|mbas krishtit)/i
};
const parseEraPatterns = {
    any: [
        /^b/i,
        /^(p|m)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234]-mujori (i{1,3}|iv)/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jsmpqkftnd]/i,
    abbreviated: /^(jan|shk|mar|pri|maj|qer|kor|gus|sht|tet|nën|dhj)/i,
    wide: /^(janar|shkurt|mars|prill|maj|qershor|korrik|gusht|shtator|tetor|nëntor|dhjetor)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^s/i,
        /^m/i,
        /^p/i,
        /^m/i,
        /^q/i,
        /^k/i,
        /^g/i,
        /^s/i,
        /^t/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^shk/i,
        /^mar/i,
        /^pri/i,
        /^maj/i,
        /^qer/i,
        /^kor/i,
        /^gu/i,
        /^sht/i,
        /^tet/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[dhmeps]/i,
    short: /^(di|hë|ma|më|en|pr|sh)/i,
    abbreviated: /^(die|hën|mar|mër|enj|pre|sht)/i,
    wide: /^(dielë|hënë|martë|mërkurë|enjte|premte|shtunë)/i
};
const parseDayPatterns = {
    narrow: [
        /^d/i,
        /^h/i,
        /^m/i,
        /^m/i,
        /^e/i,
        /^p/i,
        /^s/i
    ],
    any: [
        /^d/i,
        /^h/i,
        /^ma/i,
        /^më/i,
        /^e/i,
        /^p/i,
        /^s/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(p|m|me|në (mëngjes|mbasdite|mbrëmje|mesnatë))/i,
    any: /^([pm]\.?\s?d\.?|drek|në (mëngjes|mbasdite|mbrëmje|mesnatë))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^p/i,
        pm: /^m/i,
        midnight: /^me/i,
        noon: /^dr/i,
        morning: /mëngjes/i,
        afternoon: /mbasdite/i,
        evening: /mbrëmje/i,
        night: /natë/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"48559552e4bbf36e":"15lWd","861fc35dbd04e52d":"kWqg8"}],"hOu7f":[function(require,module,exports) {
"use strict";
exports.sr = void 0;
var _index = require("426f4af0843776f6");
var _index2 = require("b8c54cc772d04ffa");
var _index3 = require("a299314f6576983f");
var _index4 = require("aa5d25af7564b4d");
var _index5 = require("83f65afb8aa46d4f");
/**
 * @category Locales
 * @summary Serbian cyrillic locale.
 * @language Serbian
 * @iso-639-2 srp
 * @author Igor Radivojević [@rogyvoje](https://github.com/rogyvoje)
 */ const sr = exports.sr = {
    code: "sr",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"426f4af0843776f6":"7fBxI","b8c54cc772d04ffa":"bJq4a","a299314f6576983f":"cKVvA","aa5d25af7564b4d":"4C8Q8","83f65afb8aa46d4f":"9kpZJ"}],"7fBxI":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: {
            standalone: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
            withPrepositionAgo: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
            withPrepositionIn: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u0441\u0435\u043A\u0443\u043D\u0434\u0443"
        },
        dual: "\u043C\u0430\u045A\u0435 \u043E\u0434 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
        other: "\u043C\u0430\u045A\u0435 \u043E\u0434 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
    },
    xSeconds: {
        one: {
            standalone: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
            withPrepositionAgo: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
            withPrepositionIn: "1 \u0441\u0435\u043A\u0443\u043D\u0434\u0443"
        },
        dual: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0435",
        other: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438"
    },
    halfAMinute: "\u043F\u043E\u043B\u0430 \u043C\u0438\u043D\u0443\u0442\u0435",
    lessThanXMinutes: {
        one: {
            standalone: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u043C\u0438\u043D\u0443\u0442\u0435",
            withPrepositionAgo: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u043C\u0438\u043D\u0443\u0442\u0435",
            withPrepositionIn: "\u043C\u0430\u045A\u0435 \u043E\u0434 1 \u043C\u0438\u043D\u0443\u0442\u0443"
        },
        dual: "\u043C\u0430\u045A\u0435 \u043E\u0434 {{count}} \u043C\u0438\u043D\u0443\u0442\u0435",
        other: "\u043C\u0430\u045A\u0435 \u043E\u0434 {{count}} \u043C\u0438\u043D\u0443\u0442\u0430"
    },
    xMinutes: {
        one: {
            standalone: "1 \u043C\u0438\u043D\u0443\u0442\u0430",
            withPrepositionAgo: "1 \u043C\u0438\u043D\u0443\u0442\u0435",
            withPrepositionIn: "1 \u043C\u0438\u043D\u0443\u0442\u0443"
        },
        dual: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0435",
        other: "{{count}} \u043C\u0438\u043D\u0443\u0442\u0430"
    },
    aboutXHours: {
        one: {
            standalone: "\u043E\u043A\u043E 1 \u0441\u0430\u0442",
            withPrepositionAgo: "\u043E\u043A\u043E 1 \u0441\u0430\u0442",
            withPrepositionIn: "\u043E\u043A\u043E 1 \u0441\u0430\u0442"
        },
        dual: "\u043E\u043A\u043E {{count}} \u0441\u0430\u0442\u0430",
        other: "\u043E\u043A\u043E {{count}} \u0441\u0430\u0442\u0438"
    },
    xHours: {
        one: {
            standalone: "1 \u0441\u0430\u0442",
            withPrepositionAgo: "1 \u0441\u0430\u0442",
            withPrepositionIn: "1 \u0441\u0430\u0442"
        },
        dual: "{{count}} \u0441\u0430\u0442\u0430",
        other: "{{count}} \u0441\u0430\u0442\u0438"
    },
    xDays: {
        one: {
            standalone: "1 \u0434\u0430\u043D",
            withPrepositionAgo: "1 \u0434\u0430\u043D",
            withPrepositionIn: "1 \u0434\u0430\u043D"
        },
        dual: "{{count}} \u0434\u0430\u043D\u0430",
        other: "{{count}} \u0434\u0430\u043D\u0430"
    },
    aboutXWeeks: {
        one: {
            standalone: "\u043E\u043A\u043E 1 \u043D\u0435\u0434\u0435\u0459\u0443",
            withPrepositionAgo: "\u043E\u043A\u043E 1 \u043D\u0435\u0434\u0435\u0459\u0443",
            withPrepositionIn: "\u043E\u043A\u043E 1 \u043D\u0435\u0434\u0435\u0459\u0443"
        },
        dual: "\u043E\u043A\u043E {{count}} \u043D\u0435\u0434\u0435\u0459\u0435",
        other: "\u043E\u043A\u043E {{count}} \u043D\u0435\u0434\u0435\u0459\u0435"
    },
    xWeeks: {
        one: {
            standalone: "1 \u043D\u0435\u0434\u0435\u0459\u0443",
            withPrepositionAgo: "1 \u043D\u0435\u0434\u0435\u0459\u0443",
            withPrepositionIn: "1 \u043D\u0435\u0434\u0435\u0459\u0443"
        },
        dual: "{{count}} \u043D\u0435\u0434\u0435\u0459\u0435",
        other: "{{count}} \u043D\u0435\u0434\u0435\u0459\u0435"
    },
    aboutXMonths: {
        one: {
            standalone: "\u043E\u043A\u043E 1 \u043C\u0435\u0441\u0435\u0446",
            withPrepositionAgo: "\u043E\u043A\u043E 1 \u043C\u0435\u0441\u0435\u0446",
            withPrepositionIn: "\u043E\u043A\u043E 1 \u043C\u0435\u0441\u0435\u0446"
        },
        dual: "\u043E\u043A\u043E {{count}} \u043C\u0435\u0441\u0435\u0446\u0430",
        other: "\u043E\u043A\u043E {{count}} \u043C\u0435\u0441\u0435\u0446\u0438"
    },
    xMonths: {
        one: {
            standalone: "1 \u043C\u0435\u0441\u0435\u0446",
            withPrepositionAgo: "1 \u043C\u0435\u0441\u0435\u0446",
            withPrepositionIn: "1 \u043C\u0435\u0441\u0435\u0446"
        },
        dual: "{{count}} \u043C\u0435\u0441\u0435\u0446\u0430",
        other: "{{count}} \u043C\u0435\u0441\u0435\u0446\u0438"
    },
    aboutXYears: {
        one: {
            standalone: "\u043E\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
            withPrepositionAgo: "\u043E\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
            withPrepositionIn: "\u043E\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443"
        },
        dual: "\u043E\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0435",
        other: "\u043E\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0430"
    },
    xYears: {
        one: {
            standalone: "1 \u0433\u043E\u0434\u0438\u043D\u0430",
            withPrepositionAgo: "1 \u0433\u043E\u0434\u0438\u043D\u0435",
            withPrepositionIn: "1 \u0433\u043E\u0434\u0438\u043D\u0443"
        },
        dual: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0435",
        other: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0430"
    },
    overXYears: {
        one: {
            standalone: "\u043F\u0440\u0435\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
            withPrepositionAgo: "\u043F\u0440\u0435\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
            withPrepositionIn: "\u043F\u0440\u0435\u043A\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443"
        },
        dual: "\u043F\u0440\u0435\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0435",
        other: "\u043F\u0440\u0435\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0430"
    },
    almostXYears: {
        one: {
            standalone: "\u0433\u043E\u0442\u043E\u0432\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
            withPrepositionAgo: "\u0433\u043E\u0442\u043E\u0432\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443",
            withPrepositionIn: "\u0433\u043E\u0442\u043E\u0432\u043E 1 \u0433\u043E\u0434\u0438\u043D\u0443"
        },
        dual: "\u0433\u043E\u0442\u043E\u0432\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0435",
        other: "\u0433\u043E\u0442\u043E\u0432\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0430"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) {
        if (options?.addSuffix) {
            if (options.comparison && options.comparison > 0) result = tokenValue.one.withPrepositionIn;
            else result = tokenValue.one.withPrepositionAgo;
        } else result = tokenValue.one.standalone;
    } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
    String(count).substr(-2, 1) !== "1" // unless the 2nd to last digit is "1"
    ) result = tokenValue.dual.replace("{{count}}", String(count));
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0437\u0430 " + result;
        else return "\u043F\u0440\u0435 " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"bJq4a":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("5f450c066f8dc60");
const dateFormats = {
    full: "EEEE, d. MMMM yyyy.",
    long: "d. MMMM yyyy.",
    medium: "d. MMM yy.",
    short: "dd. MM. yy."
};
const timeFormats = {
    full: "HH:mm:ss (zzzz)",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\u0443' {{time}}",
    long: "{{date}} '\u0443' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"5f450c066f8dc60":"6OYyu"}],"cKVvA":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        const day = date.getDay();
        switch(day){
            case 0:
                return "'\u043F\u0440\u043E\u0448\u043B\u0435 \u043D\u0435\u0434\u0435\u0459\u0435 \u0443' p";
            case 3:
                return "'\u043F\u0440\u043E\u0448\u043B\u0435 \u0441\u0440\u0435\u0434\u0435 \u0443' p";
            case 6:
                return "'\u043F\u0440\u043E\u0448\u043B\u0435 \u0441\u0443\u0431\u043E\u0442\u0435 \u0443' p";
            default:
                return "'\u043F\u0440\u043E\u0448\u043B\u0438' EEEE '\u0443' p";
        }
    },
    yesterday: "'\u0458\u0443\u0447\u0435 \u0443' p",
    today: "'\u0434\u0430\u043D\u0430\u0441 \u0443' p",
    tomorrow: "'\u0441\u0443\u0442\u0440\u0430 \u0443' p",
    nextWeek: (date)=>{
        const day = date.getDay();
        switch(day){
            case 0:
                return "'\u0441\u043B\u0435\u0434\u0435\u045B\u0435 \u043D\u0435\u0434\u0435\u0459\u0435 \u0443' p";
            case 3:
                return "'\u0441\u043B\u0435\u0434\u0435\u045B\u0443 \u0441\u0440\u0435\u0434\u0443 \u0443' p";
            case 6:
                return "'\u0441\u043B\u0435\u0434\u0435\u045B\u0443 \u0441\u0443\u0431\u043E\u0442\u0443 \u0443' p";
            default:
                return "'\u0441\u043B\u0435\u0434\u0435\u045B\u0438' EEEE '\u0443' p";
        }
    },
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"4C8Q8":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("a657a29614579ef1");
const eraValues = {
    narrow: [
        "\u043F\u0440.\u043D.\u0435.",
        "\u0410\u0414"
    ],
    abbreviated: [
        "\u043F\u0440. \u0425\u0440.",
        "\u043F\u043E. \u0425\u0440."
    ],
    wide: [
        "\u041F\u0440\u0435 \u0425\u0440\u0438\u0441\u0442\u0430",
        "\u041F\u043E\u0441\u043B\u0435 \u0425\u0440\u0438\u0441\u0442\u0430"
    ]
};
const quarterValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4."
    ],
    abbreviated: [
        "1. \u043A\u0432.",
        "2. \u043A\u0432.",
        "3. \u043A\u0432.",
        "4. \u043A\u0432."
    ],
    wide: [
        "1. \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "2. \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "3. \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "4. \u043A\u0432\u0430\u0440\u0442\u0430\u043B"
    ]
};
const monthValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
    ],
    abbreviated: [
        "\u0458\u0430\u043D",
        "\u0444\u0435\u0431",
        "\u043C\u0430\u0440",
        "\u0430\u043F\u0440",
        "\u043C\u0430\u0458",
        "\u0458\u0443\u043D",
        "\u0458\u0443\u043B",
        "\u0430\u0432\u0433",
        "\u0441\u0435\u043F",
        "\u043E\u043A\u0442",
        "\u043D\u043E\u0432",
        "\u0434\u0435\u0446"
    ],
    wide: [
        "\u0458\u0430\u043D\u0443\u0430\u0440",
        "\u0444\u0435\u0431\u0440\u0443\u0430\u0440",
        "\u043C\u0430\u0440\u0442",
        "\u0430\u043F\u0440\u0438\u043B",
        "\u043C\u0430\u0458",
        "\u0458\u0443\u043D",
        "\u0458\u0443\u043B",
        "\u0430\u0432\u0433\u0443\u0441\u0442",
        "\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440",
        "\u043E\u043A\u0442\u043E\u0431\u0430\u0440",
        "\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440",
        "\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440"
    ]
};
const formattingMonthValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
    ],
    abbreviated: [
        "\u0458\u0430\u043D",
        "\u0444\u0435\u0431",
        "\u043C\u0430\u0440",
        "\u0430\u043F\u0440",
        "\u043C\u0430\u0458",
        "\u0458\u0443\u043D",
        "\u0458\u0443\u043B",
        "\u0430\u0432\u0433",
        "\u0441\u0435\u043F",
        "\u043E\u043A\u0442",
        "\u043D\u043E\u0432",
        "\u0434\u0435\u0446"
    ],
    wide: [
        "\u0458\u0430\u043D\u0443\u0430\u0440",
        "\u0444\u0435\u0431\u0440\u0443\u0430\u0440",
        "\u043C\u0430\u0440\u0442",
        "\u0430\u043F\u0440\u0438\u043B",
        "\u043C\u0430\u0458",
        "\u0458\u0443\u043D",
        "\u0458\u0443\u043B",
        "\u0430\u0432\u0433\u0443\u0441\u0442",
        "\u0441\u0435\u043F\u0442\u0435\u043C\u0431\u0430\u0440",
        "\u043E\u043A\u0442\u043E\u0431\u0430\u0440",
        "\u043D\u043E\u0432\u0435\u043C\u0431\u0430\u0440",
        "\u0434\u0435\u0446\u0435\u043C\u0431\u0430\u0440"
    ]
};
const dayValues = {
    narrow: [
        "\u041D",
        "\u041F",
        "\u0423",
        "\u0421",
        "\u0427",
        "\u041F",
        "\u0421"
    ],
    short: [
        "\u043D\u0435\u0434",
        "\u043F\u043E\u043D",
        "\u0443\u0442\u043E",
        "\u0441\u0440\u0435",
        "\u0447\u0435\u0442",
        "\u043F\u0435\u0442",
        "\u0441\u0443\u0431"
    ],
    abbreviated: [
        "\u043D\u0435\u0434",
        "\u043F\u043E\u043D",
        "\u0443\u0442\u043E",
        "\u0441\u0440\u0435",
        "\u0447\u0435\u0442",
        "\u043F\u0435\u0442",
        "\u0441\u0443\u0431"
    ],
    wide: [
        "\u043D\u0435\u0434\u0435\u0459\u0430",
        "\u043F\u043E\u043D\u0435\u0434\u0435\u0459\u0430\u043A",
        "\u0443\u0442\u043E\u0440\u0430\u043A",
        "\u0441\u0440\u0435\u0434\u0430",
        "\u0447\u0435\u0442\u0432\u0440\u0442\u0430\u043A",
        "\u043F\u0435\u0442\u0430\u043A",
        "\u0441\u0443\u0431\u043E\u0442\u0430"
    ]
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0410\u041C",
        pm: "\u041F\u041C",
        midnight: "\u043F\u043E\u043D\u043E\u045B",
        noon: "\u043F\u043E\u0434\u043D\u0435",
        morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
        afternoon: "\u043F\u043E\u043F\u043E\u0434\u043D\u0435",
        evening: "\u0443\u0432\u0435\u0447\u0435",
        night: "\u043D\u043E\u045B\u0443"
    },
    abbreviated: {
        am: "\u0410\u041C",
        pm: "\u041F\u041C",
        midnight: "\u043F\u043E\u043D\u043E\u045B",
        noon: "\u043F\u043E\u0434\u043D\u0435",
        morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
        afternoon: "\u043F\u043E\u043F\u043E\u0434\u043D\u0435",
        evening: "\u0443\u0432\u0435\u0447\u0435",
        night: "\u043D\u043E\u045B\u0443"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "\u043F\u043E\u043D\u043E\u045B",
        noon: "\u043F\u043E\u0434\u043D\u0435",
        morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
        afternoon: "\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u0434\u043D\u0435",
        evening: "\u0443\u0432\u0435\u0447\u0435",
        night: "\u043D\u043E\u045B\u0443"
    }
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "\u043F\u043E\u043D\u043E\u045B",
        noon: "\u043F\u043E\u0434\u043D\u0435",
        morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
        afternoon: "\u043F\u043E\u043F\u043E\u0434\u043D\u0435",
        evening: "\u0443\u0432\u0435\u0447\u0435",
        night: "\u043D\u043E\u045B\u0443"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "\u043F\u043E\u043D\u043E\u045B",
        noon: "\u043F\u043E\u0434\u043D\u0435",
        morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
        afternoon: "\u043F\u043E\u043F\u043E\u0434\u043D\u0435",
        evening: "\u0443\u0432\u0435\u0447\u0435",
        night: "\u043D\u043E\u045B\u0443"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "\u043F\u043E\u043D\u043E\u045B",
        noon: "\u043F\u043E\u0434\u043D\u0435",
        morning: "\u0443\u0458\u0443\u0442\u0440\u0443",
        afternoon: "\u043F\u043E\u0441\u043B\u0435 \u043F\u043E\u0434\u043D\u0435",
        evening: "\u0443\u0432\u0435\u0447\u0435",
        night: "\u043D\u043E\u045B\u0443"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"a657a29614579ef1":"fGq1u"}],"9kpZJ":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("e47f9e3cb61c6473");
var _index2 = require("875ccd7573b47954");
const matchOrdinalNumberPattern = /^(\d+)\./i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(пр\.н\.е\.|АД)/i,
    abbreviated: /^(пр\.\s?Хр\.|по\.\s?Хр\.)/i,
    wide: /^(Пре Христа|пре нове ере|После Христа|нова ера)/i
};
const parseEraPatterns = {
    any: [
        /^пр/i,
        /^(по|нова)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]\.\s?кв\.?/i,
    wide: /^[1234]\. квартал/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(10|11|12|[123456789])\./i,
    abbreviated: /^(јан|феб|мар|апр|мај|јун|јул|авг|сеп|окт|нов|дец)/i,
    wide: /^((јануар|јануара)|(фебруар|фебруара)|(март|марта)|(април|априла)|(мја|маја)|(јун|јуна)|(јул|јула)|(август|августа)|(септембар|септембра)|(октобар|октобра)|(новембар|новембра)|(децембар|децембра))/i
};
const parseMonthPatterns = {
    narrow: [
        /^1/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^7/i,
        /^8/i,
        /^9/i,
        /^10/i,
        /^11/i,
        /^12/i
    ],
    any: [
        /^ја/i,
        /^ф/i,
        /^мар/i,
        /^ап/i,
        /^мај/i,
        /^јун/i,
        /^јул/i,
        /^авг/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^д/i
    ]
};
const matchDayPatterns = {
    narrow: /^[пусчн]/i,
    short: /^(нед|пон|уто|сре|чет|пет|суб)/i,
    abbreviated: /^(нед|пон|уто|сре|чет|пет|суб)/i,
    wide: /^(недеља|понедељак|уторак|среда|четвртак|петак|субота)/i
};
const parseDayPatterns = {
    narrow: [
        /^п/i,
        /^у/i,
        /^с/i,
        /^ч/i,
        /^п/i,
        /^с/i,
        /^н/i
    ],
    any: [
        /^нед/i,
        /^пон/i,
        /^уто/i,
        /^сре/i,
        /^чет/i,
        /^пет/i,
        /^суб/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(ам|пм|поноћ|(по)?подне|увече|ноћу|после подне|ујутру)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^поно/i,
        noon: /^под/i,
        morning: /ујутру/i,
        afternoon: /(после\s|по)+подне/i,
        evening: /(увече)/i,
        night: /(ноћу)/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"e47f9e3cb61c6473":"15lWd","875ccd7573b47954":"kWqg8"}],"kRDTq":[function(require,module,exports) {
"use strict";
exports.srLatn = void 0;
var _index = require("d1719761115f74c8");
var _index2 = require("47ae9280fbff4ea1");
var _index3 = require("3590ffbdd33af22a");
var _index4 = require("20a2927d7480972b");
var _index5 = require("70b9af253599a577");
/**
 * @category Locales
 * @summary Serbian latin locale.
 * @language Serbian
 * @iso-639-2 srp
 * @author Igor Radivojević [@rogyvoje](https://github.com/rogyvoje)
 */ const srLatn = exports.srLatn = {
    code: "sr-Latn",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"d1719761115f74c8":"asxYf","47ae9280fbff4ea1":"48LyT","3590ffbdd33af22a":"2RXK4","20a2927d7480972b":"gOeYO","70b9af253599a577":"zFT8p"}],"asxYf":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: {
            standalone: "manje od 1 sekunde",
            withPrepositionAgo: "manje od 1 sekunde",
            withPrepositionIn: "manje od 1 sekundu"
        },
        dual: "manje od {{count}} sekunde",
        other: "manje od {{count}} sekundi"
    },
    xSeconds: {
        one: {
            standalone: "1 sekunda",
            withPrepositionAgo: "1 sekunde",
            withPrepositionIn: "1 sekundu"
        },
        dual: "{{count}} sekunde",
        other: "{{count}} sekundi"
    },
    halfAMinute: "pola minute",
    lessThanXMinutes: {
        one: {
            standalone: "manje od 1 minute",
            withPrepositionAgo: "manje od 1 minute",
            withPrepositionIn: "manje od 1 minutu"
        },
        dual: "manje od {{count}} minute",
        other: "manje od {{count}} minuta"
    },
    xMinutes: {
        one: {
            standalone: "1 minuta",
            withPrepositionAgo: "1 minute",
            withPrepositionIn: "1 minutu"
        },
        dual: "{{count}} minute",
        other: "{{count}} minuta"
    },
    aboutXHours: {
        one: {
            standalone: "oko 1 sat",
            withPrepositionAgo: "oko 1 sat",
            withPrepositionIn: "oko 1 sat"
        },
        dual: "oko {{count}} sata",
        other: "oko {{count}} sati"
    },
    xHours: {
        one: {
            standalone: "1 sat",
            withPrepositionAgo: "1 sat",
            withPrepositionIn: "1 sat"
        },
        dual: "{{count}} sata",
        other: "{{count}} sati"
    },
    xDays: {
        one: {
            standalone: "1 dan",
            withPrepositionAgo: "1 dan",
            withPrepositionIn: "1 dan"
        },
        dual: "{{count}} dana",
        other: "{{count}} dana"
    },
    aboutXWeeks: {
        one: {
            standalone: "oko 1 nedelju",
            withPrepositionAgo: "oko 1 nedelju",
            withPrepositionIn: "oko 1 nedelju"
        },
        dual: "oko {{count}} nedelje",
        other: "oko {{count}} nedelje"
    },
    xWeeks: {
        one: {
            standalone: "1 nedelju",
            withPrepositionAgo: "1 nedelju",
            withPrepositionIn: "1 nedelju"
        },
        dual: "{{count}} nedelje",
        other: "{{count}} nedelje"
    },
    aboutXMonths: {
        one: {
            standalone: "oko 1 mesec",
            withPrepositionAgo: "oko 1 mesec",
            withPrepositionIn: "oko 1 mesec"
        },
        dual: "oko {{count}} meseca",
        other: "oko {{count}} meseci"
    },
    xMonths: {
        one: {
            standalone: "1 mesec",
            withPrepositionAgo: "1 mesec",
            withPrepositionIn: "1 mesec"
        },
        dual: "{{count}} meseca",
        other: "{{count}} meseci"
    },
    aboutXYears: {
        one: {
            standalone: "oko 1 godinu",
            withPrepositionAgo: "oko 1 godinu",
            withPrepositionIn: "oko 1 godinu"
        },
        dual: "oko {{count}} godine",
        other: "oko {{count}} godina"
    },
    xYears: {
        one: {
            standalone: "1 godina",
            withPrepositionAgo: "1 godine",
            withPrepositionIn: "1 godinu"
        },
        dual: "{{count}} godine",
        other: "{{count}} godina"
    },
    overXYears: {
        one: {
            standalone: "preko 1 godinu",
            withPrepositionAgo: "preko 1 godinu",
            withPrepositionIn: "preko 1 godinu"
        },
        dual: "preko {{count}} godine",
        other: "preko {{count}} godina"
    },
    almostXYears: {
        one: {
            standalone: "gotovo 1 godinu",
            withPrepositionAgo: "gotovo 1 godinu",
            withPrepositionIn: "gotovo 1 godinu"
        },
        dual: "gotovo {{count}} godine",
        other: "gotovo {{count}} godina"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) {
        if (options?.addSuffix) {
            if (options.comparison && options.comparison > 0) result = tokenValue.one.withPrepositionIn;
            else result = tokenValue.one.withPrepositionAgo;
        } else result = tokenValue.one.standalone;
    } else if (count % 10 > 1 && count % 10 < 5 && // if last digit is between 2 and 4
    String(count).substr(-2, 1) !== "1" // unless the 2nd to last digit is "1"
    ) result = tokenValue.dual.replace("{{count}}", String(count));
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "za " + result;
        else return "pre " + result;
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"48LyT":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("35284bf9fa8673a2");
const dateFormats = {
    full: "EEEE, d. MMMM yyyy.",
    long: "d. MMMM yyyy.",
    medium: "d. MMM yy.",
    short: "dd. MM. yy."
};
const timeFormats = {
    full: "HH:mm:ss (zzzz)",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'u' {{time}}",
    long: "{{date}} 'u' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"35284bf9fa8673a2":"6OYyu"}],"2RXK4":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: (date)=>{
        switch(date.getDay()){
            case 0:
                return "'pro\u0161le nedelje u' p";
            case 3:
                return "'pro\u0161le srede u' p";
            case 6:
                return "'pro\u0161le subote u' p";
            default:
                return "'pro\u0161li' EEEE 'u' p";
        }
    },
    yesterday: "'ju\u010De u' p",
    today: "'danas u' p",
    tomorrow: "'sutra u' p",
    nextWeek: (date)=>{
        switch(date.getDay()){
            case 0:
                return "'slede\u0107e nedelje u' p";
            case 3:
                return "'slede\u0107u sredu u' p";
            case 6:
                return "'slede\u0107u subotu u' p";
            default:
                return "'slede\u0107i' EEEE 'u' p";
        }
    },
    other: "P"
};
const formatRelative = (token, date, _baseDate, _options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date);
    return format;
};
exports.formatRelative = formatRelative;

},{}],"gOeYO":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("82f9a59a1e7edae8");
const eraValues = {
    narrow: [
        "pr.n.e.",
        "AD"
    ],
    abbreviated: [
        "pr. Hr.",
        "po. Hr."
    ],
    wide: [
        "Pre Hrista",
        "Posle Hrista"
    ]
};
const quarterValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4."
    ],
    abbreviated: [
        "1. kv.",
        "2. kv.",
        "3. kv.",
        "4. kv."
    ],
    wide: [
        "1. kvartal",
        "2. kvartal",
        "3. kvartal",
        "4. kvartal"
    ]
};
const monthValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
    ],
    abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "avg",
        "sep",
        "okt",
        "nov",
        "dec"
    ],
    wide: [
        "januar",
        "februar",
        "mart",
        "april",
        "maj",
        "jun",
        "jul",
        "avgust",
        "septembar",
        "oktobar",
        "novembar",
        "decembar"
    ]
};
const formattingMonthValues = {
    narrow: [
        "1.",
        "2.",
        "3.",
        "4.",
        "5.",
        "6.",
        "7.",
        "8.",
        "9.",
        "10.",
        "11.",
        "12."
    ],
    abbreviated: [
        "jan",
        "feb",
        "mar",
        "apr",
        "maj",
        "jun",
        "jul",
        "avg",
        "sep",
        "okt",
        "nov",
        "dec"
    ],
    wide: [
        "januar",
        "februar",
        "mart",
        "april",
        "maj",
        "jun",
        "jul",
        "avgust",
        "septembar",
        "oktobar",
        "novembar",
        "decembar"
    ]
};
const dayValues = {
    narrow: [
        "N",
        "P",
        "U",
        "S",
        "\u010C",
        "P",
        "S"
    ],
    short: [
        "ned",
        "pon",
        "uto",
        "sre",
        "\u010Det",
        "pet",
        "sub"
    ],
    abbreviated: [
        "ned",
        "pon",
        "uto",
        "sre",
        "\u010Det",
        "pet",
        "sub"
    ],
    wide: [
        "nedelja",
        "ponedeljak",
        "utorak",
        "sreda",
        "\u010Detvrtak",
        "petak",
        "subota"
    ]
};
const formattingDayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uve\u010De",
        night: "no\u0107u"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uve\u010De",
        night: "no\u0107u"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "posle podne",
        evening: "uve\u010De",
        night: "no\u0107u"
    }
};
const dayPeriodValues = {
    narrow: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uve\u010De",
        night: "no\u0107u"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "popodne",
        evening: "uve\u010De",
        night: "no\u0107u"
    },
    wide: {
        am: "AM",
        pm: "PM",
        midnight: "pono\u0107",
        noon: "podne",
        morning: "ujutru",
        afternoon: "posle podne",
        evening: "uve\u010De",
        night: "no\u0107u"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"82f9a59a1e7edae8":"fGq1u"}],"zFT8p":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("6b96fa05328d18a8");
var _index2 = require("88bb1449d210e2c");
const matchOrdinalNumberPattern = /^(\d+)\./i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(pr\.n\.e\.|AD)/i,
    abbreviated: /^(pr\.\s?Hr\.|po\.\s?Hr\.)/i,
    wide: /^(Pre Hrista|pre nove ere|Posle Hrista|nova era)/i
};
const parseEraPatterns = {
    any: [
        /^pr/i,
        /^(po|nova)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]\.\s?kv\.?/i,
    wide: /^[1234]\. kvartal/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(10|11|12|[123456789])\./i,
    abbreviated: /^(jan|feb|mar|apr|maj|jun|jul|avg|sep|okt|nov|dec)/i,
    wide: /^((januar|januara)|(februar|februara)|(mart|marta)|(april|aprila)|(maj|maja)|(jun|juna)|(jul|jula)|(avgust|avgusta)|(septembar|septembra)|(oktobar|oktobra)|(novembar|novembra)|(decembar|decembra))/i
};
const parseMonthPatterns = {
    narrow: [
        /^1/i,
        /^2/i,
        /^3/i,
        /^4/i,
        /^5/i,
        /^6/i,
        /^7/i,
        /^8/i,
        /^9/i,
        /^10/i,
        /^11/i,
        /^12/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^avg/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[npusčc]/i,
    short: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
    abbreviated: /^(ned|pon|uto|sre|(čet|cet)|pet|sub)/i,
    wide: /^(nedelja|ponedeljak|utorak|sreda|(četvrtak|cetvrtak)|petak|subota)/i
};
const parseDayPatterns = {
    narrow: [
        /^s/i,
        /^m/i,
        /^t/i,
        /^w/i,
        /^t/i,
        /^f/i,
        /^s/i
    ],
    any: [
        /^su/i,
        /^m/i,
        /^tu/i,
        /^w/i,
        /^th/i,
        /^f/i,
        /^sa/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(am|pm|ponoc|ponoć|(po)?podne|uvece|uveče|noću|posle podne|ujutru)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^pono/i,
        noon: /^pod/i,
        morning: /jutro/i,
        afternoon: /(posle\s|po)+podne/i,
        evening: /(uvece|uveče)/i,
        night: /(nocu|noću)/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"6b96fa05328d18a8":"15lWd","88bb1449d210e2c":"kWqg8"}],"aRRLu":[function(require,module,exports) {
"use strict";
exports.sv = void 0;
var _index = require("1ef9d7ee6fc27020");
var _index2 = require("e309a23e7bbca7e2");
var _index3 = require("ee3e8443de473329");
var _index4 = require("9b427af480ea597c");
var _index5 = require("5758cae8385c593f");
/**
 * @category Locales
 * @summary Swedish locale.
 * @language Swedish
 * @iso-639-2 swe
 * @author Johannes Ulén [@ejulen](https://github.com/ejulen)
 * @author Alexander Nanberg [@alexandernanberg](https://github.com/alexandernanberg)
 * @author Henrik Andersson [@limelights](https://github.com/limelights)
 */ const sv = exports.sv = {
    code: "sv",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"1ef9d7ee6fc27020":"38kHg","e309a23e7bbca7e2":"5QSRV","ee3e8443de473329":"4pyH3","9b427af480ea597c":"fxV3X","5758cae8385c593f":"alWng"}],"38kHg":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "mindre \xe4n en sekund",
        other: "mindre \xe4n {{count}} sekunder"
    },
    xSeconds: {
        one: "en sekund",
        other: "{{count}} sekunder"
    },
    halfAMinute: "en halv minut",
    lessThanXMinutes: {
        one: "mindre \xe4n en minut",
        other: "mindre \xe4n {{count}} minuter"
    },
    xMinutes: {
        one: "en minut",
        other: "{{count}} minuter"
    },
    aboutXHours: {
        one: "ungef\xe4r en timme",
        other: "ungef\xe4r {{count}} timmar"
    },
    xHours: {
        one: "en timme",
        other: "{{count}} timmar"
    },
    xDays: {
        one: "en dag",
        other: "{{count}} dagar"
    },
    aboutXWeeks: {
        one: "ungef\xe4r en vecka",
        other: "ungef\xe4r {{count}} veckor"
    },
    xWeeks: {
        one: "en vecka",
        other: "{{count}} veckor"
    },
    aboutXMonths: {
        one: "ungef\xe4r en m\xe5nad",
        other: "ungef\xe4r {{count}} m\xe5nader"
    },
    xMonths: {
        one: "en m\xe5nad",
        other: "{{count}} m\xe5nader"
    },
    aboutXYears: {
        one: "ungef\xe4r ett \xe5r",
        other: "ungef\xe4r {{count}} \xe5r"
    },
    xYears: {
        one: "ett \xe5r",
        other: "{{count}} \xe5r"
    },
    overXYears: {
        one: "\xf6ver ett \xe5r",
        other: "\xf6ver {{count}} \xe5r"
    },
    almostXYears: {
        one: "n\xe4stan ett \xe5r",
        other: "n\xe4stan {{count}} \xe5r"
    }
};
const wordMapping = [
    "noll",
    "en",
    "tv\xe5",
    "tre",
    "fyra",
    "fem",
    "sex",
    "sju",
    "\xe5tta",
    "nio",
    "tio",
    "elva",
    "tolv"
];
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count < 13 ? wordMapping[count] : String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return "om " + result;
        else return result + " sedan";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"5QSRV":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("e564310debaa7364");
const dateFormats = {
    full: "EEEE d MMMM y",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "y-MM-dd"
};
const timeFormats = {
    full: "'kl'. HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'kl.' {{time}}",
    long: "{{date}} 'kl.' {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"e564310debaa7364":"6OYyu"}],"4pyH3":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'i' EEEE's kl.' p",
    yesterday: "'ig\xe5r kl.' p",
    today: "'idag kl.' p",
    tomorrow: "'imorgon kl.' p",
    nextWeek: "EEEE 'kl.' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"fxV3X":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("5ae8e956183ddd92");
const eraValues = {
    narrow: [
        "f.Kr.",
        "e.Kr."
    ],
    abbreviated: [
        "f.Kr.",
        "e.Kr."
    ],
    wide: [
        "f\xf6re Kristus",
        "efter Kristus"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "1:a kvartalet",
        "2:a kvartalet",
        "3:e kvartalet",
        "4:e kvartalet"
    ]
};
const monthValues = {
    narrow: [
        "J",
        "F",
        "M",
        "A",
        "M",
        "J",
        "J",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "jan.",
        "feb.",
        "mars",
        "apr.",
        "maj",
        "juni",
        "juli",
        "aug.",
        "sep.",
        "okt.",
        "nov.",
        "dec."
    ],
    wide: [
        "januari",
        "februari",
        "mars",
        "april",
        "maj",
        "juni",
        "juli",
        "augusti",
        "september",
        "oktober",
        "november",
        "december"
    ]
};
const dayValues = {
    narrow: [
        "S",
        "M",
        "T",
        "O",
        "T",
        "F",
        "L"
    ],
    short: [
        "s\xf6",
        "m\xe5",
        "ti",
        "on",
        "to",
        "fr",
        "l\xf6"
    ],
    abbreviated: [
        "s\xf6n",
        "m\xe5n",
        "tis",
        "ons",
        "tors",
        "fre",
        "l\xf6r"
    ],
    wide: [
        "s\xf6ndag",
        "m\xe5ndag",
        "tisdag",
        "onsdag",
        "torsdag",
        "fredag",
        "l\xf6rdag"
    ]
};
// https://www.unicode.org/cldr/charts/32/summary/sv.html#1888
const dayPeriodValues = {
    narrow: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "morg.",
        afternoon: "efterm.",
        evening: "kv\xe4ll",
        night: "natt"
    },
    abbreviated: {
        am: "f.m.",
        pm: "e.m.",
        midnight: "midnatt",
        noon: "middag",
        morning: "morgon",
        afternoon: "efterm.",
        evening: "kv\xe4ll",
        night: "natt"
    },
    wide: {
        am: "f\xf6rmiddag",
        pm: "eftermiddag",
        midnight: "midnatt",
        noon: "middag",
        morning: "morgon",
        afternoon: "eftermiddag",
        evening: "kv\xe4ll",
        night: "natt"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morg.",
        afternoon: "p\xe5 efterm.",
        evening: "p\xe5 kv\xe4llen",
        night: "p\xe5 natten"
    },
    abbreviated: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morg.",
        afternoon: "p\xe5 efterm.",
        evening: "p\xe5 kv\xe4llen",
        night: "p\xe5 natten"
    },
    wide: {
        am: "fm",
        pm: "em",
        midnight: "midnatt",
        noon: "middag",
        morning: "p\xe5 morgonen",
        afternoon: "p\xe5 eftermiddagen",
        evening: "p\xe5 kv\xe4llen",
        night: "p\xe5 natten"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    const rem100 = number % 100;
    if (rem100 > 20 || rem100 < 10) switch(rem100 % 10){
        case 1:
        case 2:
            return number + ":a";
    }
    return number + ":e";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"5ae8e956183ddd92":"fGq1u"}],"alWng":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("b925aecd54e35b7d");
var _index2 = require("cc8ea7b52bc5a37");
const matchOrdinalNumberPattern = /^(\d+)(:a|:e)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
    abbreviated: /^(f\.? ?Kr\.?|f\.? ?v\.? ?t\.?|e\.? ?Kr\.?|v\.? ?t\.?)/i,
    wide: /^(före Kristus|före vår tid|efter Kristus|vår tid)/i
};
const parseEraPatterns = {
    any: [
        /^f/i,
        /^[ev]/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](:a|:e)? kvartalet/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[jfmasond]/i,
    abbreviated: /^(jan|feb|mar[s]?|apr|maj|jun[i]?|jul[i]?|aug|sep|okt|nov|dec)\.?/i,
    wide: /^(januari|februari|mars|april|maj|juni|juli|augusti|september|oktober|november|december)/i
};
const parseMonthPatterns = {
    narrow: [
        /^j/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^j/i,
        /^j/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ja/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^maj/i,
        /^jun/i,
        /^jul/i,
        /^au/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[smtofl]/i,
    short: /^(sö|må|ti|on|to|fr|lö)/i,
    abbreviated: /^(sön|mån|tis|ons|tors|fre|lör)/i,
    wide: /^(söndag|måndag|tisdag|onsdag|torsdag|fredag|lördag)/i
};
const parseDayPatterns = {
    any: [
        /^s/i,
        /^m/i,
        /^ti/i,
        /^o/i,
        /^to/i,
        /^f/i,
        /^l/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^([fe]\.?\s?m\.?|midn(att)?|midd(ag)?|(på) (morgonen|eftermiddagen|kvällen|natten))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^f/i,
        pm: /^e/i,
        midnight: /^midn/i,
        noon: /^midd/i,
        morning: /morgon/i,
        afternoon: /eftermiddag/i,
        evening: /kväll/i,
        night: /natt/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"b925aecd54e35b7d":"15lWd","cc8ea7b52bc5a37":"kWqg8"}],"6hGEr":[function(require,module,exports) {
"use strict";
exports.ta = void 0;
var _index = require("85371b3bc6434496");
var _index2 = require("a8356f56bd6cba9e");
var _index3 = require("e0a07f0b1ee51a14");
var _index4 = require("6bf725856e674969");
var _index5 = require("d98d7f213ccfe154");
/**
 * @category Locales
 * @summary Tamil locale (India).
 * @language Tamil
 * @iso-639-2 tam
 * @author Sibiraj [@sibiraj-s](https://github.com/sibiraj-s)
 */ const ta = exports.ta = {
    code: "ta",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"85371b3bc6434496":"iaUFf","a8356f56bd6cba9e":"jew3Y","e0a07f0b1ee51a14":"cT94V","6bf725856e674969":"aiGi9","d98d7f213ccfe154":"iOs3A"}],"iaUFf":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function isPluralType(val) {
    return val.one !== undefined;
}
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: {
            default: "\u0B92\u0BB0\u0BC1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BCD\u0B95\u0BC1 \u0B95\u0BC1\u0BB1\u0BC8\u0BB5\u0BBE\u0B95",
            in: "\u0B92\u0BB0\u0BC1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BCD\u0B95\u0BC1\u0BB3\u0BCD",
            ago: "\u0B92\u0BB0\u0BC1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0B95\u0BC1\u0BB1\u0BC8\u0BB5\u0BBE\u0B95",
            in: "{{count}} \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BB3\u0BCD",
            ago: "{{count}} \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    xSeconds: {
        one: {
            default: "1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF",
            in: "1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0BAF\u0BBF\u0BB2\u0BCD",
            ago: "1 \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0BB5\u0BBF\u0BA8\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BCD",
            in: "{{count}} \u0BB5\u0BBF\u0BA9\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "{{count}} \u0BB5\u0BBF\u0BA8\u0BBE\u0B9F\u0BBF\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    halfAMinute: {
        default: "\u0B85\u0BB0\u0BC8 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD",
        in: "\u0B85\u0BB0\u0BC8 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
        ago: "\u0B85\u0BB0\u0BC8 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
    },
    lessThanXMinutes: {
        one: {
            default: "\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1\u0BAE\u0BCD \u0B95\u0BC1\u0BB1\u0BC8\u0BB5\u0BBE\u0B95",
            in: "\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1\u0BB3\u0BCD",
            ago: "\u0B92\u0BB0\u0BC1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BAE\u0BCD \u0B95\u0BC1\u0BB1\u0BC8\u0BB5\u0BBE\u0B95",
            in: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BB3\u0BCD",
            ago: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    xMinutes: {
        one: {
            default: "1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD",
            in: "1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
            ago: "1 \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
            in: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "{{count}} \u0BA8\u0BBF\u0BAE\u0BBF\u0B9F\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    aboutXHours: {
        one: {
            default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
            in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
            ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
            in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1",
            ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD"
        }
    },
    xHours: {
        one: {
            default: "1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
            in: "1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
            ago: "1 \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BAE\u0BCD",
            in: "{{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
            ago: "{{count}} \u0BAE\u0BA3\u0BBF \u0BA8\u0BC7\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    xDays: {
        one: {
            default: "1 \u0BA8\u0BBE\u0BB3\u0BCD",
            in: "1 \u0BA8\u0BBE\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "1 \u0BA8\u0BBE\u0BB3\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BCD",
            in: "{{count}} \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "{{count}} \u0BA8\u0BBE\u0B9F\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    aboutXWeeks: {
        one: {
            default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD",
            in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BBE\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
            ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
            in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    xWeeks: {
        one: {
            default: "1 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD",
            in: "1 \u0BB5\u0BBE\u0BB0\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
            ago: "1 \u0BB5\u0BBE\u0BB0\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
            in: "{{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "{{count}} \u0BB5\u0BBE\u0BB0\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    aboutXMonths: {
        one: {
            default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD",
            in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BBE\u0BA4\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
            ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BAE\u0BBE\u0BA4\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
            in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    xMonths: {
        one: {
            default: "1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD",
            in: "1 \u0BAE\u0BBE\u0BA4\u0BA4\u0BCD\u0BA4\u0BBF\u0BB2\u0BCD",
            ago: "1 \u0BAE\u0BBE\u0BA4\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
            in: "{{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "{{count}} \u0BAE\u0BBE\u0BA4\u0B99\u0BCD\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    aboutXYears: {
        one: {
            default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD",
            in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0B86\u0BA3\u0BCD\u0B9F\u0BBF\u0BB2\u0BCD",
            ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD 1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD",
            in: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "\u0B9A\u0BC1\u0BAE\u0BBE\u0BB0\u0BCD {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    xYears: {
        one: {
            default: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD",
            in: "1 \u0B86\u0BA3\u0BCD\u0B9F\u0BBF\u0BB2\u0BCD",
            ago: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD",
            in: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    overXYears: {
        one: {
            default: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1 \u0BAE\u0BC7\u0BB2\u0BCD",
            in: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BA4\u0BCD\u0BA4\u0BBF\u0BB1\u0BCD\u0B95\u0BC1\u0BAE\u0BCD \u0BAE\u0BC7\u0BB2\u0BBE\u0B95",
            ago: "1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1\u0BAE\u0BCD \u0BAE\u0BC7\u0BB2\u0BBE\u0B95",
            in: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "{{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    },
    almostXYears: {
        one: {
            default: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F 1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD",
            in: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F 1 \u0B86\u0BA3\u0BCD\u0B9F\u0BBF\u0BB2\u0BCD",
            ago: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F 1 \u0BB5\u0BB0\u0BC1\u0B9F\u0BAE\u0BCD \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        },
        other: {
            default: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BCD",
            in: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BBF\u0BB2\u0BCD",
            ago: "\u0B95\u0BBF\u0B9F\u0BCD\u0B9F\u0BA4\u0BCD\u0BA4\u0B9F\u0BCD\u0B9F {{count}} \u0B86\u0BA3\u0BCD\u0B9F\u0BC1\u0B95\u0BB3\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD\u0BAA\u0BC1"
        }
    }
};
const formatDistance = (token, count, options)=>{
    const tense = options?.addSuffix ? options.comparison && options.comparison > 0 ? "in" : "ago" : "default";
    const tokenValue = formatDistanceLocale[token];
    if (!isPluralType(tokenValue)) return tokenValue[tense];
    if (count === 1) return tokenValue.one[tense];
    else return tokenValue.other[tense].replace("{{count}}", String(count));
};
exports.formatDistance = formatDistance;

},{}],"jew3Y":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("150450940e74a470");
// Ref: https://www.unicode.org/cldr/charts/32/summary/ta.html
// CLDR #1846 - #1849
const dateFormats = {
    full: "EEEE, d MMMM, y",
    long: "d MMMM, y",
    medium: "d MMM, y",
    short: "d/M/yy"
};
// CLDR #1850 - #1853
const timeFormats = {
    full: "a h:mm:ss zzzz",
    long: "a h:mm:ss z",
    medium: "a h:mm:ss",
    short: "a h:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"150450940e74a470":"6OYyu"}],"cT94V":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0B95\u0B9F\u0BA8\u0BCD\u0BA4' eeee p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
    yesterday: "'\u0BA8\u0BC7\u0BB1\u0BCD\u0BB1\u0BC1 ' p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
    today: "'\u0B87\u0BA9\u0BCD\u0BB1\u0BC1 ' p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
    tomorrow: "'\u0BA8\u0BBE\u0BB3\u0BC8 ' p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
    nextWeek: "eeee p '\u0BAE\u0BA3\u0BBF\u0B95\u0BCD\u0B95\u0BC1'",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"aiGi9":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("5e57002d5ca4f7be");
// Ref: https://www.unicode.org/cldr/charts/32/summary/ta.html
const eraValues = {
    narrow: [
        "\u0B95\u0BBF.\u0BAE\u0BC1.",
        "\u0B95\u0BBF.\u0BAA\u0BBF."
    ],
    abbreviated: [
        "\u0B95\u0BBF.\u0BAE\u0BC1.",
        "\u0B95\u0BBF.\u0BAA\u0BBF."
    ],
    wide: [
        "\u0B95\u0BBF\u0BB1\u0BBF\u0BB8\u0BCD\u0BA4\u0BC1\u0BB5\u0BC1\u0B95\u0BCD\u0B95\u0BC1 \u0BAE\u0BC1\u0BA9\u0BCD",
        "\u0B85\u0BA9\u0BCD\u0BA9\u0BCB \u0B9F\u0BCB\u0BAE\u0BBF\u0BA9\u0BBF"
    ]
};
const quarterValues = {
    // CLDR #1644 - #1647
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    // CLDR #1636 - #1639
    abbreviated: [
        "\u0B95\u0BBE\u0BB2\u0BBE.1",
        "\u0B95\u0BBE\u0BB2\u0BBE.2",
        "\u0B95\u0BBE\u0BB2\u0BBE.3",
        "\u0B95\u0BBE\u0BB2\u0BBE.4"
    ],
    // CLDR #1628 - #1631
    wide: [
        "\u0B92\u0BA9\u0BCD\u0BB1\u0BBE\u0BAE\u0BCD \u0B95\u0BBE\u0BB2\u0BBE\u0BA3\u0BCD\u0B9F\u0BC1",
        "\u0B87\u0BB0\u0BA3\u0BCD\u0B9F\u0BBE\u0BAE\u0BCD \u0B95\u0BBE\u0BB2\u0BBE\u0BA3\u0BCD\u0B9F\u0BC1",
        "\u0BAE\u0BC2\u0BA9\u0BCD\u0BB1\u0BBE\u0BAE\u0BCD \u0B95\u0BBE\u0BB2\u0BBE\u0BA3\u0BCD\u0B9F\u0BC1",
        "\u0BA8\u0BBE\u0BA9\u0BCD\u0B95\u0BBE\u0BAE\u0BCD \u0B95\u0BBE\u0BB2\u0BBE\u0BA3\u0BCD\u0B9F\u0BC1"
    ]
};
const monthValues = {
    // CLDR #700 - #711
    narrow: [
        "\u0B9C",
        "\u0BAA\u0BBF",
        "\u0BAE\u0BBE",
        "\u0B8F",
        "\u0BAE\u0BC7",
        "\u0B9C\u0BC2",
        "\u0B9C\u0BC2",
        "\u0B86",
        "\u0B9A\u0BC6",
        "\u0B85",
        "\u0BA8",
        "\u0B9F\u0BBF"
    ],
    // CLDR #1676 - #1687
    abbreviated: [
        "\u0B9C\u0BA9.",
        "\u0BAA\u0BBF\u0BAA\u0BCD.",
        "\u0BAE\u0BBE\u0BB0\u0BCD.",
        "\u0B8F\u0BAA\u0BCD.",
        "\u0BAE\u0BC7",
        "\u0B9C\u0BC2\u0BA9\u0BCD",
        "\u0B9C\u0BC2\u0BB2\u0BC8",
        "\u0B86\u0B95.",
        "\u0B9A\u0BC6\u0BAA\u0BCD.",
        "\u0B85\u0B95\u0BCD.",
        "\u0BA8\u0BB5.",
        "\u0B9F\u0BBF\u0B9A."
    ],
    // CLDR #1652 - #1663
    wide: [
        "\u0B9C\u0BA9\u0BB5\u0BB0\u0BBF",
        "\u0BAA\u0BBF\u0BAA\u0BCD\u0BB0\u0BB5\u0BB0\u0BBF",
        "\u0BAE\u0BBE\u0BB0\u0BCD\u0B9A\u0BCD",
        "\u0B8F\u0BAA\u0BCD\u0BB0\u0BB2\u0BCD",
        "\u0BAE\u0BC7",
        "\u0B9C\u0BC2\u0BA9\u0BCD",
        "\u0B9C\u0BC2\u0BB2\u0BC8",
        "\u0B86\u0B95\u0BB8\u0BCD\u0B9F\u0BCD",
        "\u0B9A\u0BC6\u0BAA\u0BCD\u0B9F\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD",
        "\u0B85\u0B95\u0BCD\u0B9F\u0BCB\u0BAA\u0BB0\u0BCD",
        "\u0BA8\u0BB5\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD",
        "\u0B9F\u0BBF\u0B9A\u0BAE\u0BCD\u0BAA\u0BB0\u0BCD"
    ]
};
const dayValues = {
    // CLDR #1766 - #1772
    narrow: [
        "\u0B9E\u0BBE",
        "\u0BA4\u0BBF",
        "\u0B9A\u0BC6",
        "\u0BAA\u0BC1",
        "\u0BB5\u0BBF",
        "\u0BB5\u0BC6",
        "\u0B9A"
    ],
    // CLDR #1752 - #1758
    short: [
        "\u0B9E\u0BBE",
        "\u0BA4\u0BBF",
        "\u0B9A\u0BC6",
        "\u0BAA\u0BC1",
        "\u0BB5\u0BBF",
        "\u0BB5\u0BC6",
        "\u0B9A"
    ],
    // CLDR #1738 - #1744
    abbreviated: [
        "\u0B9E\u0BBE\u0BAF\u0BBF.",
        "\u0BA4\u0BBF\u0B99\u0BCD.",
        "\u0B9A\u0BC6\u0BB5\u0BCD.",
        "\u0BAA\u0BC1\u0BA4.",
        "\u0BB5\u0BBF\u0BAF\u0BBE.",
        "\u0BB5\u0BC6\u0BB3\u0BCD.",
        "\u0B9A\u0BA9\u0BBF"
    ],
    // CLDR #1724 - #1730
    wide: [
        "\u0B9E\u0BBE\u0BAF\u0BBF\u0BB1\u0BC1",
        "\u0BA4\u0BBF\u0B99\u0BCD\u0B95\u0BB3\u0BCD",
        "\u0B9A\u0BC6\u0BB5\u0BCD\u0BB5\u0BBE\u0BAF\u0BCD",
        "\u0BAA\u0BC1\u0BA4\u0BA9\u0BCD",
        "\u0BB5\u0BBF\u0BAF\u0BBE\u0BB4\u0BA9\u0BCD",
        "\u0BB5\u0BC6\u0BB3\u0BCD\u0BB3\u0BBF",
        "\u0B9A\u0BA9\u0BBF"
    ]
};
// CLDR #1780 - #1845
const dayPeriodValues = {
    narrow: {
        am: "\u0BAE\u0BC1.\u0BAA",
        pm: "\u0BAA\u0BBF.\u0BAA",
        midnight: "\u0BA8\u0BB3\u0BCD.",
        noon: "\u0BA8\u0BA3\u0BCD.",
        morning: "\u0B95\u0BBE.",
        afternoon: "\u0BAE\u0BA4\u0BBF.",
        evening: "\u0BAE\u0BBE.",
        night: "\u0B87\u0BB0."
    },
    abbreviated: {
        am: "\u0BAE\u0BC1\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        pm: "\u0BAA\u0BBF\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        midnight: "\u0BA8\u0BB3\u0BCD\u0BB3\u0BBF\u0BB0\u0BB5\u0BC1",
        noon: "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        morning: "\u0B95\u0BBE\u0BB2\u0BC8",
        afternoon: "\u0BAE\u0BA4\u0BBF\u0BAF\u0BAE\u0BCD",
        evening: "\u0BAE\u0BBE\u0BB2\u0BC8",
        night: "\u0B87\u0BB0\u0BB5\u0BC1"
    },
    wide: {
        am: "\u0BAE\u0BC1\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        pm: "\u0BAA\u0BBF\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        midnight: "\u0BA8\u0BB3\u0BCD\u0BB3\u0BBF\u0BB0\u0BB5\u0BC1",
        noon: "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        morning: "\u0B95\u0BBE\u0BB2\u0BC8",
        afternoon: "\u0BAE\u0BA4\u0BBF\u0BAF\u0BAE\u0BCD",
        evening: "\u0BAE\u0BBE\u0BB2\u0BC8",
        night: "\u0B87\u0BB0\u0BB5\u0BC1"
    }
};
// CLDR #1780 - #1845
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0BAE\u0BC1.\u0BAA",
        pm: "\u0BAA\u0BBF.\u0BAA",
        midnight: "\u0BA8\u0BB3\u0BCD.",
        noon: "\u0BA8\u0BA3\u0BCD.",
        morning: "\u0B95\u0BBE.",
        afternoon: "\u0BAE\u0BA4\u0BBF.",
        evening: "\u0BAE\u0BBE.",
        night: "\u0B87\u0BB0."
    },
    abbreviated: {
        am: "\u0BAE\u0BC1\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        pm: "\u0BAA\u0BBF\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        midnight: "\u0BA8\u0BB3\u0BCD\u0BB3\u0BBF\u0BB0\u0BB5\u0BC1",
        noon: "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        morning: "\u0B95\u0BBE\u0BB2\u0BC8",
        afternoon: "\u0BAE\u0BA4\u0BBF\u0BAF\u0BAE\u0BCD",
        evening: "\u0BAE\u0BBE\u0BB2\u0BC8",
        night: "\u0B87\u0BB0\u0BB5\u0BC1"
    },
    wide: {
        am: "\u0BAE\u0BC1\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        pm: "\u0BAA\u0BBF\u0BB1\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        midnight: "\u0BA8\u0BB3\u0BCD\u0BB3\u0BBF\u0BB0\u0BB5\u0BC1",
        noon: "\u0BA8\u0BA3\u0BCD\u0BAA\u0B95\u0BB2\u0BCD",
        morning: "\u0B95\u0BBE\u0BB2\u0BC8",
        afternoon: "\u0BAE\u0BA4\u0BBF\u0BAF\u0BAE\u0BCD",
        evening: "\u0BAE\u0BBE\u0BB2\u0BC8",
        night: "\u0B87\u0BB0\u0BB5\u0BC1"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"5e57002d5ca4f7be":"fGq1u"}],"iOs3A":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("202201c4b1f30d7a");
var _index2 = require("2c77e20bee5dc503");
const matchOrdinalNumberPattern = /^(\d+)(வது)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(கி.மு.|கி.பி.)/i,
    abbreviated: /^(கி\.?\s?மு\.?|கி\.?\s?பி\.?)/,
    wide: /^(கிறிஸ்துவுக்கு\sமுன்|அன்னோ\sடோமினி)/i
};
const parseEraPatterns = {
    any: [
        /கி\.?\s?மு\.?/,
        /கி\.?\s?பி\.?/
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^காலா.[1234]/i,
    wide: /^(ஒன்றாம்|இரண்டாம்|மூன்றாம்|நான்காம்) காலாண்டு/i
};
const parseQuarterPatterns = {
    narrow: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ],
    any: [
        /(1|காலா.1|ஒன்றாம்)/i,
        /(2|காலா.2|இரண்டாம்)/i,
        /(3|காலா.3|மூன்றாம்)/i,
        /(4|காலா.4|நான்காம்)/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(ஜ|பி|மா|ஏ|மே|ஜூ|ஆ|செ|அ|ந|டி)$/i,
    abbreviated: /^(ஜன.|பிப்.|மார்.|ஏப்.|மே|ஜூன்|ஜூலை|ஆக.|செப்.|அக்.|நவ.|டிச.)/i,
    wide: /^(ஜனவரி|பிப்ரவரி|மார்ச்|ஏப்ரல்|மே|ஜூன்|ஜூலை|ஆகஸ்ட்|செப்டம்பர்|அக்டோபர்|நவம்பர்|டிசம்பர்)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ஜ$/i,
        /^பி/i,
        /^மா/i,
        /^ஏ/i,
        /^மே/i,
        /^ஜூ/i,
        /^ஜூ/i,
        /^ஆ/i,
        /^செ/i,
        /^அ/i,
        /^ந/i,
        /^டி/i
    ],
    any: [
        /^ஜன/i,
        /^பி/i,
        /^மா/i,
        /^ஏ/i,
        /^மே/i,
        /^ஜூன்/i,
        /^ஜூலை/i,
        /^ஆ/i,
        /^செ/i,
        /^அ/i,
        /^ந/i,
        /^டி/i
    ]
};
const matchDayPatterns = {
    narrow: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
    short: /^(ஞா|தி|செ|பு|வி|வெ|ச)/i,
    abbreviated: /^(ஞாயி.|திங்.|செவ்.|புத.|வியா.|வெள்.|சனி)/i,
    wide: /^(ஞாயிறு|திங்கள்|செவ்வாய்|புதன்|வியாழன்|வெள்ளி|சனி)/i
};
const parseDayPatterns = {
    narrow: [
        /^ஞா/i,
        /^தி/i,
        /^செ/i,
        /^பு/i,
        /^வி/i,
        /^வெ/i,
        /^ச/i
    ],
    any: [
        /^ஞா/i,
        /^தி/i,
        /^செ/i,
        /^பு/i,
        /^வி/i,
        /^வெ/i,
        /^ச/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(மு.ப|பி.ப|நள்|நண்|காலை|மதியம்|மாலை|இரவு)/i,
    any: /^(மு.ப|பி.ப|முற்பகல்|பிற்பகல்|நள்ளிரவு|நண்பகல்|காலை|மதியம்|மாலை|இரவு)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^மு/i,
        pm: /^பி/i,
        midnight: /^நள்/i,
        noon: /^நண்/i,
        morning: /காலை/i,
        afternoon: /மதியம்/i,
        evening: /மாலை/i,
        night: /இரவு/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"202201c4b1f30d7a":"15lWd","2c77e20bee5dc503":"kWqg8"}],"frsgC":[function(require,module,exports) {
"use strict";
exports.te = void 0;
var _index = require("cefc724c95bbc83c");
var _index2 = require("25bd47b43558cec4");
var _index3 = require("950050b41bd11a84");
var _index4 = require("561ba6b3e79f2ae");
var _index5 = require("64ab2f4d5412d227");
/**
 * @category Locales
 * @summary Telugu locale
 * @language Telugu
 * @iso-639-2 tel
 * @author Kranthi Lakum [@kranthilakum](https://github.com/kranthilakum)
 */ const te = exports.te = {
    code: "te",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"cefc724c95bbc83c":"b38C6","25bd47b43558cec4":"94hIA","950050b41bd11a84":"5cJxl","561ba6b3e79f2ae":"1xeha","64ab2f4d5412d227":"jUR6T"}],"b38C6":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
// Source: https://www.unicode.org/cldr/charts/32/summary/te.html
const formatDistanceLocale = {
    lessThanXSeconds: {
        standalone: {
            one: "\u0C38\u0C46\u0C15\u0C28\u0C41 \u0C15\u0C28\u0C4D\u0C28\u0C3E \u0C24\u0C15\u0C4D\u0C15\u0C41\u0C35",
            other: "{{count}} \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32 \u0C15\u0C28\u0C4D\u0C28\u0C3E \u0C24\u0C15\u0C4D\u0C15\u0C41\u0C35"
        },
        withPreposition: {
            one: "\u0C38\u0C46\u0C15\u0C28\u0C41",
            other: "{{count}} \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32"
        }
    },
    xSeconds: {
        standalone: {
            one: "\u0C12\u0C15 \u0C38\u0C46\u0C15\u0C28\u0C41",
            other: "{{count}} \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C38\u0C46\u0C15\u0C28\u0C41",
            other: "{{count}} \u0C38\u0C46\u0C15\u0C28\u0C4D\u0C32"
        }
    },
    halfAMinute: {
        standalone: "\u0C05\u0C30 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02",
        withPreposition: "\u0C05\u0C30 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02"
    },
    lessThanXMinutes: {
        standalone: {
            one: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02 \u0C15\u0C28\u0C4D\u0C28\u0C3E \u0C24\u0C15\u0C4D\u0C15\u0C41\u0C35",
            other: "{{count}} \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32 \u0C15\u0C28\u0C4D\u0C28\u0C3E \u0C24\u0C15\u0C4D\u0C15\u0C41\u0C35"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02",
            other: "{{count}} \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32"
        }
    },
    xMinutes: {
        standalone: {
            one: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02",
            other: "{{count}} \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C02",
            other: "{{count}} \u0C28\u0C3F\u0C2E\u0C3F\u0C37\u0C3E\u0C32"
        }
    },
    aboutXHours: {
        standalone: {
            one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C17\u0C02\u0C1F",
            other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C17\u0C02\u0C1F\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C17\u0C02\u0C1F",
            other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C17\u0C02\u0C1F\u0C32"
        }
    },
    xHours: {
        standalone: {
            one: "\u0C12\u0C15 \u0C17\u0C02\u0C1F",
            other: "{{count}} \u0C17\u0C02\u0C1F\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C17\u0C02\u0C1F",
            other: "{{count}} \u0C17\u0C02\u0C1F\u0C32"
        }
    },
    xDays: {
        standalone: {
            one: "\u0C12\u0C15 \u0C30\u0C4B\u0C1C\u0C41",
            other: "{{count}} \u0C30\u0C4B\u0C1C\u0C41\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C30\u0C4B\u0C1C\u0C41",
            other: "{{count}} \u0C30\u0C4B\u0C1C\u0C41\u0C32"
        }
    },
    aboutXWeeks: {
        standalone: {
            one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C35\u0C3E\u0C30\u0C02",
            other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C35\u0C3E\u0C30\u0C3E\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C35\u0C3E\u0C30\u0C02",
            other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C35\u0C3E\u0C30\u0C3E\u0C32\u0C32"
        }
    },
    xWeeks: {
        standalone: {
            one: "\u0C12\u0C15 \u0C35\u0C3E\u0C30\u0C02",
            other: "{{count}} \u0C35\u0C3E\u0C30\u0C3E\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C35\u0C3E\u0C30\u0C02",
            other: "{{count}} \u0C35\u0C3E\u0C30\u0C3E\u0C32\u0C32"
        }
    },
    aboutXMonths: {
        standalone: {
            one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C28\u0C46\u0C32",
            other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C28\u0C46\u0C32\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C28\u0C46\u0C32",
            other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C28\u0C46\u0C32\u0C32"
        }
    },
    xMonths: {
        standalone: {
            one: "\u0C12\u0C15 \u0C28\u0C46\u0C32",
            other: "{{count}} \u0C28\u0C46\u0C32\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C28\u0C46\u0C32",
            other: "{{count}} \u0C28\u0C46\u0C32\u0C32"
        }
    },
    aboutXYears: {
        standalone: {
            one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
            other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 \u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
            other: "\u0C38\u0C41\u0C2E\u0C3E\u0C30\u0C41 {{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32"
        }
    },
    xYears: {
        standalone: {
            one: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
            other: "{{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
            other: "{{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32"
        }
    },
    overXYears: {
        standalone: {
            one: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02 \u0C2A\u0C48\u0C17\u0C3E",
            other: "{{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C15\u0C41 \u0C2A\u0C48\u0C17\u0C3E"
        },
        withPreposition: {
            one: "\u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
            other: "{{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32"
        }
    },
    almostXYears: {
        standalone: {
            one: "\u0C26\u0C3E\u0C26\u0C3E\u0C2A\u0C41 \u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
            other: "\u0C26\u0C3E\u0C26\u0C3E\u0C2A\u0C41 {{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32\u0C41"
        },
        withPreposition: {
            one: "\u0C26\u0C3E\u0C26\u0C3E\u0C2A\u0C41 \u0C12\u0C15 \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C02",
            other: "\u0C26\u0C3E\u0C26\u0C3E\u0C2A\u0C41 {{count}} \u0C38\u0C02\u0C35\u0C24\u0C4D\u0C38\u0C30\u0C3E\u0C32"
        }
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = options?.addSuffix ? formatDistanceLocale[token].withPreposition : formatDistanceLocale[token].standalone;
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u0C32\u0C4B";
        else return result + " \u0C15\u0C4D\u0C30\u0C3F\u0C24\u0C02";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"94hIA":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("af5002d1aeb05cd2");
// Source: https://www.unicode.org/cldr/charts/32/summary/te.html
// CLDR #1807 - #1811
const dateFormats = {
    full: "d, MMMM y, EEEE",
    long: "d MMMM, y",
    medium: "d MMM, y",
    short: "dd-MM-yy"
};
// CLDR #1807 - #1811
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
// CLDR #1815 - #1818
const dateTimeFormats = {
    full: "{{date}} {{time}}'\u0C15\u0C3F'",
    long: "{{date}} {{time}}'\u0C15\u0C3F'",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"af5002d1aeb05cd2":"6OYyu"}],"5cJxl":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
// Source: https://www.unicode.org/cldr/charts/32/summary/te.html
const formatRelativeLocale = {
    lastWeek: "'\u0C17\u0C24' eeee p",
    yesterday: "'\u0C28\u0C3F\u0C28\u0C4D\u0C28' p",
    today: "'\u0C08 \u0C30\u0C4B\u0C1C\u0C41' p",
    tomorrow: "'\u0C30\u0C47\u0C2A\u0C41' p",
    nextWeek: "'\u0C24\u0C26\u0C41\u0C2A\u0C30\u0C3F' eeee p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"1xeha":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("c4bf34cd0d0e467a");
// Source: https://www.unicode.org/cldr/charts/32/summary/te.html
// Source: https://dsal.uchicago.edu/dictionaries/brown/
// CLDR #1605 - #1608
const eraValues = {
    narrow: [
        "\u0C15\u0C4D\u0C30\u0C40.\u0C2A\u0C42.",
        "\u0C15\u0C4D\u0C30\u0C40.\u0C36."
    ],
    abbreviated: [
        "\u0C15\u0C4D\u0C30\u0C40.\u0C2A\u0C42.",
        "\u0C15\u0C4D\u0C30\u0C40.\u0C36."
    ],
    wide: [
        "\u0C15\u0C4D\u0C30\u0C40\u0C38\u0C4D\u0C24\u0C41 \u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C02",
        "\u0C15\u0C4D\u0C30\u0C40\u0C38\u0C4D\u0C24\u0C41\u0C36\u0C15\u0C02"
    ]
};
// CLDR #1613 - #1628
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u0C24\u0C4D\u0C30\u0C481",
        "\u0C24\u0C4D\u0C30\u0C482",
        "\u0C24\u0C4D\u0C30\u0C483",
        "\u0C24\u0C4D\u0C30\u0C484"
    ],
    wide: [
        "1\u0C35 \u0C24\u0C4D\u0C30\u0C48\u0C2E\u0C3E\u0C38\u0C3F\u0C15\u0C02",
        "2\u0C35 \u0C24\u0C4D\u0C30\u0C48\u0C2E\u0C3E\u0C38\u0C3F\u0C15\u0C02",
        "3\u0C35 \u0C24\u0C4D\u0C30\u0C48\u0C2E\u0C3E\u0C38\u0C3F\u0C15\u0C02",
        "4\u0C35 \u0C24\u0C4D\u0C30\u0C48\u0C2E\u0C3E\u0C38\u0C3F\u0C15\u0C02"
    ]
};
// CLDR #1637 - #1708
const monthValues = {
    narrow: [
        "\u0C1C",
        "\u0C2B\u0C3F",
        "\u0C2E\u0C3E",
        "\u0C0F",
        "\u0C2E\u0C47",
        "\u0C1C\u0C42",
        "\u0C1C\u0C41",
        "\u0C06",
        "\u0C38\u0C46",
        "\u0C05",
        "\u0C28",
        "\u0C21\u0C3F"
    ],
    abbreviated: [
        "\u0C1C\u0C28",
        "\u0C2B\u0C3F\u0C2C\u0C4D\u0C30",
        "\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F",
        "\u0C0F\u0C2A\u0C4D\u0C30\u0C3F",
        "\u0C2E\u0C47",
        "\u0C1C\u0C42\u0C28\u0C4D",
        "\u0C1C\u0C41\u0C32\u0C48",
        "\u0C06\u0C17",
        "\u0C38\u0C46\u0C2A\u0C4D\u0C1F\u0C46\u0C02",
        "\u0C05\u0C15\u0C4D\u0C1F\u0C4B",
        "\u0C28\u0C35\u0C02",
        "\u0C21\u0C3F\u0C38\u0C46\u0C02"
    ],
    wide: [
        "\u0C1C\u0C28\u0C35\u0C30\u0C3F",
        "\u0C2B\u0C3F\u0C2C\u0C4D\u0C30\u0C35\u0C30\u0C3F",
        "\u0C2E\u0C3E\u0C30\u0C4D\u0C1A\u0C3F",
        "\u0C0F\u0C2A\u0C4D\u0C30\u0C3F\u0C32\u0C4D",
        "\u0C2E\u0C47",
        "\u0C1C\u0C42\u0C28\u0C4D",
        "\u0C1C\u0C41\u0C32\u0C48",
        "\u0C06\u0C17\u0C38\u0C4D\u0C1F\u0C41",
        "\u0C38\u0C46\u0C2A\u0C4D\u0C1F\u0C46\u0C02\u0C2C\u0C30\u0C4D",
        "\u0C05\u0C15\u0C4D\u0C1F\u0C4B\u0C2C\u0C30\u0C4D",
        "\u0C28\u0C35\u0C02\u0C2C\u0C30\u0C4D",
        "\u0C21\u0C3F\u0C38\u0C46\u0C02\u0C2C\u0C30\u0C4D"
    ]
};
// CLDR #1709 - #1764
const dayValues = {
    narrow: [
        "\u0C06",
        "\u0C38\u0C4B",
        "\u0C2E",
        "\u0C2C\u0C41",
        "\u0C17\u0C41",
        "\u0C36\u0C41",
        "\u0C36"
    ],
    short: [
        "\u0C06\u0C26\u0C3F",
        "\u0C38\u0C4B\u0C2E",
        "\u0C2E\u0C02\u0C17\u0C33",
        "\u0C2C\u0C41\u0C27",
        "\u0C17\u0C41\u0C30\u0C41",
        "\u0C36\u0C41\u0C15\u0C4D\u0C30",
        "\u0C36\u0C28\u0C3F"
    ],
    abbreviated: [
        "\u0C06\u0C26\u0C3F",
        "\u0C38\u0C4B\u0C2E",
        "\u0C2E\u0C02\u0C17\u0C33",
        "\u0C2C\u0C41\u0C27",
        "\u0C17\u0C41\u0C30\u0C41",
        "\u0C36\u0C41\u0C15\u0C4D\u0C30",
        "\u0C36\u0C28\u0C3F"
    ],
    wide: [
        "\u0C06\u0C26\u0C3F\u0C35\u0C3E\u0C30\u0C02",
        "\u0C38\u0C4B\u0C2E\u0C35\u0C3E\u0C30\u0C02",
        "\u0C2E\u0C02\u0C17\u0C33\u0C35\u0C3E\u0C30\u0C02",
        "\u0C2C\u0C41\u0C27\u0C35\u0C3E\u0C30\u0C02",
        "\u0C17\u0C41\u0C30\u0C41\u0C35\u0C3E\u0C30\u0C02",
        "\u0C36\u0C41\u0C15\u0C4D\u0C30\u0C35\u0C3E\u0C30\u0C02",
        "\u0C36\u0C28\u0C3F\u0C35\u0C3E\u0C30\u0C02"
    ]
};
// CLDR #1767 - #1806
const dayPeriodValues = {
    narrow: {
        am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
        noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        morning: "\u0C09\u0C26\u0C2F\u0C02",
        afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
        night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
    },
    abbreviated: {
        am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
        noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        morning: "\u0C09\u0C26\u0C2F\u0C02",
        afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
        night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
    },
    wide: {
        am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
        noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        morning: "\u0C09\u0C26\u0C2F\u0C02",
        afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
        night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
        noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        morning: "\u0C09\u0C26\u0C2F\u0C02",
        afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
        night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
    },
    abbreviated: {
        am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
        noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        morning: "\u0C09\u0C26\u0C2F\u0C02",
        afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
        night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
    },
    wide: {
        am: "\u0C2A\u0C42\u0C30\u0C4D\u0C35\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        pm: "\u0C05\u0C2A\u0C30\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        midnight: "\u0C05\u0C30\u0C4D\u0C27\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F",
        noon: "\u0C2E\u0C3F\u0C1F\u0C4D\u0C1F\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        morning: "\u0C09\u0C26\u0C2F\u0C02",
        afternoon: "\u0C2E\u0C27\u0C4D\u0C2F\u0C3E\u0C39\u0C4D\u0C28\u0C02",
        evening: "\u0C38\u0C3E\u0C2F\u0C02\u0C24\u0C4D\u0C30\u0C02",
        night: "\u0C30\u0C3E\u0C24\u0C4D\u0C30\u0C3F"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + "\u0C35";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"c4bf34cd0d0e467a":"fGq1u"}],"jUR6T":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("b4b37e78b3a210f9");
var _index2 = require("775c6fcc1681172d");
const matchOrdinalNumberPattern = /^(\d+)(వ)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(క్రీ\.పూ\.|క్రీ\.శ\.)/i,
    abbreviated: /^(క్రీ\.?\s?పూ\.?|ప్ర\.?\s?శ\.?\s?పూ\.?|క్రీ\.?\s?శ\.?|సా\.?\s?శ\.?)/i,
    wide: /^(క్రీస్తు పూర్వం|ప్రస్తుత శకానికి పూర్వం|క్రీస్తు శకం|ప్రస్తుత శకం)/i
};
const parseEraPatterns = {
    any: [
        /^(పూ|శ)/i,
        /^సా/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^త్రై[1234]/i,
    wide: /^[1234](వ)? త్రైమాసికం/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(జూ|జు|జ|ఫి|మా|ఏ|మే|ఆ|సె|అ|న|డి)/i,
    abbreviated: /^(జన|ఫిబ్ర|మార్చి|ఏప్రి|మే|జూన్|జులై|ఆగ|సెప్|అక్టో|నవ|డిసె)/i,
    wide: /^(జనవరి|ఫిబ్రవరి|మార్చి|ఏప్రిల్|మే|జూన్|జులై|ఆగస్టు|సెప్టెంబర్|అక్టోబర్|నవంబర్|డిసెంబర్)/i
};
const parseMonthPatterns = {
    narrow: [
        /^జ/i,
        /^ఫి/i,
        /^మా/i,
        /^ఏ/i,
        /^మే/i,
        /^జూ/i,
        /^జు/i,
        /^ఆ/i,
        /^సె/i,
        /^అ/i,
        /^న/i,
        /^డి/i
    ],
    any: [
        /^జన/i,
        /^ఫి/i,
        /^మా/i,
        /^ఏ/i,
        /^మే/i,
        /^జూన్/i,
        /^జులై/i,
        /^ఆగ/i,
        /^సె/i,
        /^అ/i,
        /^న/i,
        /^డి/i
    ]
};
const matchDayPatterns = {
    narrow: /^(ఆ|సో|మ|బు|గు|శు|శ)/i,
    short: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
    abbreviated: /^(ఆది|సోమ|మం|బుధ|గురు|శుక్ర|శని)/i,
    wide: /^(ఆదివారం|సోమవారం|మంగళవారం|బుధవారం|గురువారం|శుక్రవారం|శనివారం)/i
};
const parseDayPatterns = {
    narrow: [
        /^ఆ/i,
        /^సో/i,
        /^మ/i,
        /^బు/i,
        /^గు/i,
        /^శు/i,
        /^శ/i
    ],
    any: [
        /^ఆది/i,
        /^సోమ/i,
        /^మం/i,
        /^బుధ/i,
        /^గురు/i,
        /^శుక్ర/i,
        /^శని/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i,
    any: /^(పూర్వాహ్నం|అపరాహ్నం|అర్ధరాత్రి|మిట్టమధ్యాహ్నం|ఉదయం|మధ్యాహ్నం|సాయంత్రం|రాత్రి)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^పూర్వాహ్నం/i,
        pm: /^అపరాహ్నం/i,
        midnight: /^అర్ధ/i,
        noon: /^మిట్ట/i,
        morning: /ఉదయం/i,
        afternoon: /మధ్యాహ్నం/i,
        evening: /సాయంత్రం/i,
        night: /రాత్రి/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"b4b37e78b3a210f9":"15lWd","775c6fcc1681172d":"kWqg8"}],"gLhd7":[function(require,module,exports) {
"use strict";
exports.th = void 0;
var _index = require("fa2366e1b41ee585");
var _index2 = require("75055a8ea397c817");
var _index3 = require("48983306fd701bd7");
var _index4 = require("93b6bd93586215ae");
var _index5 = require("f782ca34930fcf55");
/**
 * @category Locales
 * @summary Thai locale.
 * @language Thai
 * @iso-639-2 tha
 * @author Athiwat Hirunworawongkun [@athivvat](https://github.com/athivvat)
 * @author [@hawkup](https://github.com/hawkup)
 * @author  Jirawat I. [@nodtem66](https://github.com/nodtem66)
 */ const th = exports.th = {
    code: "th",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"fa2366e1b41ee585":"9husc","75055a8ea397c817":"iUjJl","48983306fd701bd7":"6mgd1","93b6bd93586215ae":"cUPsy","f782ca34930fcf55":"9LFiF"}],"9husc":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32 1 \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35",
        other: "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32 {{count}} \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35"
    },
    xSeconds: {
        one: "1 \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35",
        other: "{{count}} \u0E27\u0E34\u0E19\u0E32\u0E17\u0E35"
    },
    halfAMinute: "\u0E04\u0E23\u0E36\u0E48\u0E07\u0E19\u0E32\u0E17\u0E35",
    lessThanXMinutes: {
        one: "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32 1 \u0E19\u0E32\u0E17\u0E35",
        other: "\u0E19\u0E49\u0E2D\u0E22\u0E01\u0E27\u0E48\u0E32 {{count}} \u0E19\u0E32\u0E17\u0E35"
    },
    xMinutes: {
        one: "1 \u0E19\u0E32\u0E17\u0E35",
        other: "{{count}} \u0E19\u0E32\u0E17\u0E35"
    },
    aboutXHours: {
        one: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 1 \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07",
        other: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 {{count}} \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07"
    },
    xHours: {
        one: "1 \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07",
        other: "{{count}} \u0E0A\u0E31\u0E48\u0E27\u0E42\u0E21\u0E07"
    },
    xDays: {
        one: "1 \u0E27\u0E31\u0E19",
        other: "{{count}} \u0E27\u0E31\u0E19"
    },
    aboutXWeeks: {
        one: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 1 \u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C",
        other: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 {{count}} \u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C"
    },
    xWeeks: {
        one: "1 \u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C",
        other: "{{count}} \u0E2A\u0E31\u0E1B\u0E14\u0E32\u0E2B\u0E4C"
    },
    aboutXMonths: {
        one: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 1 \u0E40\u0E14\u0E37\u0E2D\u0E19",
        other: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 {{count}} \u0E40\u0E14\u0E37\u0E2D\u0E19"
    },
    xMonths: {
        one: "1 \u0E40\u0E14\u0E37\u0E2D\u0E19",
        other: "{{count}} \u0E40\u0E14\u0E37\u0E2D\u0E19"
    },
    aboutXYears: {
        one: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 1 \u0E1B\u0E35",
        other: "\u0E1B\u0E23\u0E30\u0E21\u0E32\u0E13 {{count}} \u0E1B\u0E35"
    },
    xYears: {
        one: "1 \u0E1B\u0E35",
        other: "{{count}} \u0E1B\u0E35"
    },
    overXYears: {
        one: "\u0E21\u0E32\u0E01\u0E01\u0E27\u0E48\u0E32 1 \u0E1B\u0E35",
        other: "\u0E21\u0E32\u0E01\u0E01\u0E27\u0E48\u0E32 {{count}} \u0E1B\u0E35"
    },
    almostXYears: {
        one: "\u0E40\u0E01\u0E37\u0E2D\u0E1A 1 \u0E1B\u0E35",
        other: "\u0E40\u0E01\u0E37\u0E2D\u0E1A {{count}} \u0E1B\u0E35"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) {
            if (token === "halfAMinute") return "\u0E43\u0E19" + result;
            else return "\u0E43\u0E19 " + result;
        } else return result + "\u0E17\u0E35\u0E48\u0E1C\u0E48\u0E32\u0E19\u0E21\u0E32";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"iUjJl":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("c82cf7c138ca5cb");
const dateFormats = {
    full: "\u0E27\u0E31\u0E19EEEE\u0E17\u0E35\u0E48 do MMMM y",
    long: "do MMMM y",
    medium: "d MMM y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "H:mm:ss \u0E19. zzzz",
    long: "H:mm:ss \u0E19. z",
    medium: "H:mm:ss \u0E19.",
    short: "H:mm \u0E19."
};
const dateTimeFormats = {
    full: "{{date}} '\u0E40\u0E27\u0E25\u0E32' {{time}}",
    long: "{{date}} '\u0E40\u0E27\u0E25\u0E32' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "medium"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"c82cf7c138ca5cb":"6OYyu"}],"6mgd1":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee'\u0E17\u0E35\u0E48\u0E41\u0E25\u0E49\u0E27\u0E40\u0E27\u0E25\u0E32' p",
    yesterday: "'\u0E40\u0E21\u0E37\u0E48\u0E2D\u0E27\u0E32\u0E19\u0E19\u0E35\u0E49\u0E40\u0E27\u0E25\u0E32' p",
    today: "'\u0E27\u0E31\u0E19\u0E19\u0E35\u0E49\u0E40\u0E27\u0E25\u0E32' p",
    tomorrow: "'\u0E1E\u0E23\u0E38\u0E48\u0E07\u0E19\u0E35\u0E49\u0E40\u0E27\u0E25\u0E32' p",
    nextWeek: "eeee '\u0E40\u0E27\u0E25\u0E32' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"cUPsy":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("8a368ee726804c8e");
const eraValues = {
    narrow: [
        "B",
        "\u0E04\u0E28"
    ],
    abbreviated: [
        "BC",
        "\u0E04.\u0E28."
    ],
    wide: [
        "\u0E1B\u0E35\u0E01\u0E48\u0E2D\u0E19\u0E04\u0E23\u0E34\u0E2A\u0E15\u0E01\u0E32\u0E25",
        "\u0E04\u0E23\u0E34\u0E2A\u0E15\u0E4C\u0E28\u0E31\u0E01\u0E23\u0E32\u0E0A"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A\u0E41\u0E23\u0E01",
        "\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A\u0E17\u0E35\u0E48\u0E2A\u0E2D\u0E07",
        "\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A\u0E17\u0E35\u0E48\u0E2A\u0E32\u0E21",
        "\u0E44\u0E15\u0E23\u0E21\u0E32\u0E2A\u0E17\u0E35\u0E48\u0E2A\u0E35\u0E48"
    ]
};
const dayValues = {
    narrow: [
        "\u0E2D\u0E32.",
        "\u0E08.",
        "\u0E2D.",
        "\u0E1E.",
        "\u0E1E\u0E24.",
        "\u0E28.",
        "\u0E2A."
    ],
    short: [
        "\u0E2D\u0E32.",
        "\u0E08.",
        "\u0E2D.",
        "\u0E1E.",
        "\u0E1E\u0E24.",
        "\u0E28.",
        "\u0E2A."
    ],
    abbreviated: [
        "\u0E2D\u0E32.",
        "\u0E08.",
        "\u0E2D.",
        "\u0E1E.",
        "\u0E1E\u0E24.",
        "\u0E28.",
        "\u0E2A."
    ],
    wide: [
        "\u0E2D\u0E32\u0E17\u0E34\u0E15\u0E22\u0E4C",
        "\u0E08\u0E31\u0E19\u0E17\u0E23\u0E4C",
        "\u0E2D\u0E31\u0E07\u0E04\u0E32\u0E23",
        "\u0E1E\u0E38\u0E18",
        "\u0E1E\u0E24\u0E2B\u0E31\u0E2A\u0E1A\u0E14\u0E35",
        "\u0E28\u0E38\u0E01\u0E23\u0E4C",
        "\u0E40\u0E2A\u0E32\u0E23\u0E4C"
    ]
};
const monthValues = {
    narrow: [
        "\u0E21.\u0E04.",
        "\u0E01.\u0E1E.",
        "\u0E21\u0E35.\u0E04.",
        "\u0E40\u0E21.\u0E22.",
        "\u0E1E.\u0E04.",
        "\u0E21\u0E34.\u0E22.",
        "\u0E01.\u0E04.",
        "\u0E2A.\u0E04.",
        "\u0E01.\u0E22.",
        "\u0E15.\u0E04.",
        "\u0E1E.\u0E22.",
        "\u0E18.\u0E04."
    ],
    abbreviated: [
        "\u0E21.\u0E04.",
        "\u0E01.\u0E1E.",
        "\u0E21\u0E35.\u0E04.",
        "\u0E40\u0E21.\u0E22.",
        "\u0E1E.\u0E04.",
        "\u0E21\u0E34.\u0E22.",
        "\u0E01.\u0E04.",
        "\u0E2A.\u0E04.",
        "\u0E01.\u0E22.",
        "\u0E15.\u0E04.",
        "\u0E1E.\u0E22.",
        "\u0E18.\u0E04."
    ],
    wide: [
        "\u0E21\u0E01\u0E23\u0E32\u0E04\u0E21",
        "\u0E01\u0E38\u0E21\u0E20\u0E32\u0E1E\u0E31\u0E19\u0E18\u0E4C",
        "\u0E21\u0E35\u0E19\u0E32\u0E04\u0E21",
        "\u0E40\u0E21\u0E29\u0E32\u0E22\u0E19",
        "\u0E1E\u0E24\u0E29\u0E20\u0E32\u0E04\u0E21",
        "\u0E21\u0E34\u0E16\u0E38\u0E19\u0E32\u0E22\u0E19",
        "\u0E01\u0E23\u0E01\u0E0E\u0E32\u0E04\u0E21",
        "\u0E2A\u0E34\u0E07\u0E2B\u0E32\u0E04\u0E21",
        "\u0E01\u0E31\u0E19\u0E22\u0E32\u0E22\u0E19",
        "\u0E15\u0E38\u0E25\u0E32\u0E04\u0E21",
        "\u0E1E\u0E24\u0E28\u0E08\u0E34\u0E01\u0E32\u0E22\u0E19",
        "\u0E18\u0E31\u0E19\u0E27\u0E32\u0E04\u0E21"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
        noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        morning: "\u0E40\u0E0A\u0E49\u0E32",
        afternoon: "\u0E1A\u0E48\u0E32\u0E22",
        evening: "\u0E40\u0E22\u0E47\u0E19",
        night: "\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
    },
    abbreviated: {
        am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
        noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        morning: "\u0E40\u0E0A\u0E49\u0E32",
        afternoon: "\u0E1A\u0E48\u0E32\u0E22",
        evening: "\u0E40\u0E22\u0E47\u0E19",
        night: "\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
    },
    wide: {
        am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
        noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        morning: "\u0E40\u0E0A\u0E49\u0E32",
        afternoon: "\u0E1A\u0E48\u0E32\u0E22",
        evening: "\u0E40\u0E22\u0E47\u0E19",
        night: "\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
        noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        morning: "\u0E15\u0E2D\u0E19\u0E40\u0E0A\u0E49\u0E32",
        afternoon: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E27\u0E31\u0E19",
        evening: "\u0E15\u0E2D\u0E19\u0E40\u0E22\u0E47\u0E19",
        night: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
    },
    abbreviated: {
        am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
        noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        morning: "\u0E15\u0E2D\u0E19\u0E40\u0E0A\u0E49\u0E32",
        afternoon: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E27\u0E31\u0E19",
        evening: "\u0E15\u0E2D\u0E19\u0E40\u0E22\u0E47\u0E19",
        night: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
    },
    wide: {
        am: "\u0E01\u0E48\u0E2D\u0E19\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        pm: "\u0E2B\u0E25\u0E31\u0E07\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        midnight: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07\u0E04\u0E37\u0E19",
        noon: "\u0E40\u0E17\u0E35\u0E48\u0E22\u0E07",
        morning: "\u0E15\u0E2D\u0E19\u0E40\u0E0A\u0E49\u0E32",
        afternoon: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E27\u0E31\u0E19",
        evening: "\u0E15\u0E2D\u0E19\u0E40\u0E22\u0E47\u0E19",
        night: "\u0E15\u0E2D\u0E19\u0E01\u0E25\u0E32\u0E07\u0E04\u0E37\u0E19"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"8a368ee726804c8e":"fGq1u"}],"9LFiF":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("ae3cdd36c9fccac6");
var _index2 = require("79146e0103bfe3fa");
const matchOrdinalNumberPattern = /^\d+/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^([bB]|[aA]|คศ)/i,
    abbreviated: /^([bB]\.?\s?[cC]\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?|ค\.?ศ\.?)/i,
    wide: /^(ก่อนคริสตกาล|คริสต์ศักราช|คริสตกาล)/i
};
const parseEraPatterns = {
    any: [
        /^[bB]/i,
        /^(^[aA]|ค\.?ศ\.?|คริสตกาล|คริสต์ศักราช|)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^ไตรมาส(ที่)? ?[1234]/i
};
const parseQuarterPatterns = {
    any: [
        /(1|แรก|หนึ่ง)/i,
        /(2|สอง)/i,
        /(3|สาม)/i,
        /(4|สี่)/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?)/i,
    abbreviated: /^(ม\.?ค\.?|ก\.?พ\.?|มี\.?ค\.?|เม\.?ย\.?|พ\.?ค\.?|มิ\.?ย\.?|ก\.?ค\.?|ส\.?ค\.?|ก\.?ย\.?|ต\.?ค\.?|พ\.?ย\.?|ธ\.?ค\.?')/i,
    wide: /^(มกราคม|กุมภาพันธ์|มีนาคม|เมษายน|พฤษภาคม|มิถุนายน|กรกฎาคม|สิงหาคม|กันยายน|ตุลาคม|พฤศจิกายน|ธันวาคม)/i
};
const parseMonthPatterns = {
    wide: [
        /^มก/i,
        /^กุม/i,
        /^มี/i,
        /^เม/i,
        /^พฤษ/i,
        /^มิ/i,
        /^กรก/i,
        /^ส/i,
        /^กัน/i,
        /^ต/i,
        /^พฤศ/i,
        /^ธ/i
    ],
    any: [
        /^ม\.?ค\.?/i,
        /^ก\.?พ\.?/i,
        /^มี\.?ค\.?/i,
        /^เม\.?ย\.?/i,
        /^พ\.?ค\.?/i,
        /^มิ\.?ย\.?/i,
        /^ก\.?ค\.?/i,
        /^ส\.?ค\.?/i,
        /^ก\.?ย\.?/i,
        /^ต\.?ค\.?/i,
        /^พ\.?ย\.?/i,
        /^ธ\.?ค\.?/i
    ]
};
const matchDayPatterns = {
    narrow: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
    short: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
    abbreviated: /^(อา\.?|จ\.?|อ\.?|พฤ\.?|พ\.?|ศ\.?|ส\.?)/i,
    wide: /^(อาทิตย์|จันทร์|อังคาร|พุธ|พฤหัสบดี|ศุกร์|เสาร์)/i
};
const parseDayPatterns = {
    wide: [
        /^อา/i,
        /^จั/i,
        /^อั/i,
        /^พุธ/i,
        /^พฤ/i,
        /^ศ/i,
        /^เส/i
    ],
    any: [
        /^อา/i,
        /^จ/i,
        /^อ/i,
        /^พ(?!ฤ)/i,
        /^พฤ/i,
        /^ศ/i,
        /^ส/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(ก่อนเที่ยง|หลังเที่ยง|เที่ยงคืน|เที่ยง|(ตอน.*?)?.*(เที่ยง|เช้า|บ่าย|เย็น|กลางคืน))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ก่อนเที่ยง/i,
        pm: /^หลังเที่ยง/i,
        midnight: /^เที่ยงคืน/i,
        noon: /^เที่ยง/i,
        morning: /เช้า/i,
        afternoon: /บ่าย/i,
        evening: /เย็น/i,
        night: /กลางคืน/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"ae3cdd36c9fccac6":"15lWd","79146e0103bfe3fa":"kWqg8"}],"ixjFL":[function(require,module,exports) {
"use strict";
exports.tr = void 0;
var _index = require("cc7842284753f4b9");
var _index2 = require("66ac3700a60ba0aa");
var _index3 = require("51a065be8c942ae8");
var _index4 = require("ae2ba36a53d255ca");
var _index5 = require("df1a2bb54a3673c3");
/**
 * @category Locales
 * @summary Turkish locale.
 * @language Turkish
 * @iso-639-2 tur
 * @author Alpcan Aydın [@alpcanaydin](https://github.com/alpcanaydin)
 * @author Berkay Sargın [@berkaey](https://github.com/berkaey)
 * @author Fatih Bulut [@bulutfatih](https://github.com/bulutfatih)
 * @author Ismail Demirbilek [@dbtek](https://github.com/dbtek)
 * @author İsmail Kayar [@ikayar](https://github.com/ikayar)
 *
 *
 */ const tr = exports.tr = {
    code: "tr",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"cc7842284753f4b9":"gw8FJ","66ac3700a60ba0aa":"lIGd8","51a065be8c942ae8":"8o0Ss","ae2ba36a53d255ca":"9OCIf","df1a2bb54a3673c3":"5A1Mt"}],"gw8FJ":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "bir saniyeden az",
        other: "{{count}} saniyeden az"
    },
    xSeconds: {
        one: "1 saniye",
        other: "{{count}} saniye"
    },
    halfAMinute: "yar\u0131m dakika",
    lessThanXMinutes: {
        one: "bir dakikadan az",
        other: "{{count}} dakikadan az"
    },
    xMinutes: {
        one: "1 dakika",
        other: "{{count}} dakika"
    },
    aboutXHours: {
        one: "yakla\u015F\u0131k 1 saat",
        other: "yakla\u015F\u0131k {{count}} saat"
    },
    xHours: {
        one: "1 saat",
        other: "{{count}} saat"
    },
    xDays: {
        one: "1 g\xfcn",
        other: "{{count}} g\xfcn"
    },
    aboutXWeeks: {
        one: "yakla\u015F\u0131k 1 hafta",
        other: "yakla\u015F\u0131k {{count}} hafta"
    },
    xWeeks: {
        one: "1 hafta",
        other: "{{count}} hafta"
    },
    aboutXMonths: {
        one: "yakla\u015F\u0131k 1 ay",
        other: "yakla\u015F\u0131k {{count}} ay"
    },
    xMonths: {
        one: "1 ay",
        other: "{{count}} ay"
    },
    aboutXYears: {
        one: "yakla\u015F\u0131k 1 y\u0131l",
        other: "yakla\u015F\u0131k {{count}} y\u0131l"
    },
    xYears: {
        one: "1 y\u0131l",
        other: "{{count}} y\u0131l"
    },
    overXYears: {
        one: "1 y\u0131ldan fazla",
        other: "{{count}} y\u0131ldan fazla"
    },
    almostXYears: {
        one: "neredeyse 1 y\u0131l",
        other: "neredeyse {{count}} y\u0131l"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", count.toString());
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + " sonra";
        else return result + " \xf6nce";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"lIGd8":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("c43507eb4723d71c");
const dateFormats = {
    full: "d MMMM y EEEE",
    long: "d MMMM y",
    medium: "d MMM y",
    short: "dd.MM.yyyy"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    full: "{{date}} 'saat' {{time}}",
    long: "{{date}} 'saat' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"c43507eb4723d71c":"6OYyu"}],"8o0Ss":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'ge\xe7en hafta' eeee 'saat' p",
    yesterday: "'d\xfcn saat' p",
    today: "'bug\xfcn saat' p",
    tomorrow: "'yar\u0131n saat' p",
    nextWeek: "eeee 'saat' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"9OCIf":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("6ee99462a50d4268");
const eraValues = {
    narrow: [
        "M\xd6",
        "MS"
    ],
    abbreviated: [
        "M\xd6",
        "MS"
    ],
    wide: [
        "Milattan \xd6nce",
        "Milattan Sonra"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1\xc7",
        "2\xc7",
        "3\xc7",
        "4\xc7"
    ],
    wide: [
        "\u0130lk \xe7eyrek",
        "\u0130kinci \xc7eyrek",
        "\xdc\xe7\xfcnc\xfc \xe7eyrek",
        "Son \xe7eyrek"
    ]
};
const monthValues = {
    narrow: [
        "O",
        "\u015E",
        "M",
        "N",
        "M",
        "H",
        "T",
        "A",
        "E",
        "E",
        "K",
        "A"
    ],
    abbreviated: [
        "Oca",
        "\u015Eub",
        "Mar",
        "Nis",
        "May",
        "Haz",
        "Tem",
        "A\u011Fu",
        "Eyl",
        "Eki",
        "Kas",
        "Ara"
    ],
    wide: [
        "Ocak",
        "\u015Eubat",
        "Mart",
        "Nisan",
        "May\u0131s",
        "Haziran",
        "Temmuz",
        "A\u011Fustos",
        "Eyl\xfcl",
        "Ekim",
        "Kas\u0131m",
        "Aral\u0131k"
    ]
};
const dayValues = {
    narrow: [
        "P",
        "P",
        "S",
        "\xc7",
        "P",
        "C",
        "C"
    ],
    short: [
        "Pz",
        "Pt",
        "Sa",
        "\xc7a",
        "Pe",
        "Cu",
        "Ct"
    ],
    abbreviated: [
        "Paz",
        "Pzt",
        "Sal",
        "\xc7ar",
        "Per",
        "Cum",
        "Cts"
    ],
    wide: [
        "Pazar",
        "Pazartesi",
        "Sal\u0131",
        "\xc7ar\u015Famba",
        "Per\u015Fembe",
        "Cuma",
        "Cumartesi"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\xf6\xf6",
        pm: "\xf6s",
        midnight: "gy",
        noon: "\xf6",
        morning: "sa",
        afternoon: "\xf6s",
        evening: "ak",
        night: "ge"
    },
    abbreviated: {
        am: "\xd6\xd6",
        pm: "\xd6S",
        midnight: "gece yar\u0131s\u0131",
        noon: "\xf6\u011Fle",
        morning: "sabah",
        afternoon: "\xf6\u011Fleden sonra",
        evening: "ak\u015Fam",
        night: "gece"
    },
    wide: {
        am: "\xd6.\xd6.",
        pm: "\xd6.S.",
        midnight: "gece yar\u0131s\u0131",
        noon: "\xf6\u011Fle",
        morning: "sabah",
        afternoon: "\xf6\u011Fleden sonra",
        evening: "ak\u015Fam",
        night: "gece"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\xf6\xf6",
        pm: "\xf6s",
        midnight: "gy",
        noon: "\xf6",
        morning: "sa",
        afternoon: "\xf6s",
        evening: "ak",
        night: "ge"
    },
    abbreviated: {
        am: "\xd6\xd6",
        pm: "\xd6S",
        midnight: "gece yar\u0131s\u0131",
        noon: "\xf6\u011Flen",
        morning: "sabahleyin",
        afternoon: "\xf6\u011Fleden sonra",
        evening: "ak\u015Famleyin",
        night: "geceleyin"
    },
    wide: {
        am: "\xf6.\xf6.",
        pm: "\xf6.s.",
        midnight: "gece yar\u0131s\u0131",
        noon: "\xf6\u011Flen",
        morning: "sabahleyin",
        afternoon: "\xf6\u011Fleden sonra",
        evening: "ak\u015Famleyin",
        night: "geceleyin"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    const number = Number(dirtyNumber);
    return number + ".";
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>Number(quarter) - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"6ee99462a50d4268":"fGq1u"}],"5A1Mt":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("565a312fd7f0d61e");
var _index2 = require("8e24767de19e8fd1");
const matchOrdinalNumberPattern = /^(\d+)(\.)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(mö|ms)/i,
    abbreviated: /^(mö|ms)/i,
    wide: /^(milattan önce|milattan sonra)/i
};
const parseEraPatterns = {
    any: [
        /(^mö|^milattan önce)/i,
        /(^ms|^milattan sonra)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]ç/i,
    wide: /^((i|İ)lk|(i|İ)kinci|üçüncü|son) çeyrek/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ],
    abbreviated: [
        /1ç/i,
        /2ç/i,
        /3ç/i,
        /4ç/i
    ],
    wide: [
        /^(i|İ)lk çeyrek/i,
        /(i|İ)kinci çeyrek/i,
        /üçüncü çeyrek/i,
        /son çeyrek/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[oşmnhtaek]/i,
    abbreviated: /^(oca|şub|mar|nis|may|haz|tem|ağu|eyl|eki|kas|ara)/i,
    wide: /^(ocak|şubat|mart|nisan|mayıs|haziran|temmuz|ağustos|eylül|ekim|kasım|aralık)/i
};
const parseMonthPatterns = {
    narrow: [
        /^o/i,
        /^ş/i,
        /^m/i,
        /^n/i,
        /^m/i,
        /^h/i,
        /^t/i,
        /^a/i,
        /^e/i,
        /^e/i,
        /^k/i,
        /^a/i
    ],
    any: [
        /^o/i,
        /^ş/i,
        /^mar/i,
        /^n/i,
        /^may/i,
        /^h/i,
        /^t/i,
        /^ağ/i,
        /^ey/i,
        /^ek/i,
        /^k/i,
        /^ar/i
    ]
};
const matchDayPatterns = {
    narrow: /^[psçc]/i,
    short: /^(pz|pt|sa|ça|pe|cu|ct)/i,
    abbreviated: /^(paz|pzt|sal|çar|per|cum|cts)/i,
    wide: /^(pazar(?!tesi)|pazartesi|salı|çarşamba|perşembe|cuma(?!rtesi)|cumartesi)/i
};
const parseDayPatterns = {
    narrow: [
        /^p/i,
        /^p/i,
        /^s/i,
        /^ç/i,
        /^p/i,
        /^c/i,
        /^c/i
    ],
    any: [
        /^pz/i,
        /^pt/i,
        /^sa/i,
        /^ça/i,
        /^pe/i,
        /^cu/i,
        /^ct/i
    ],
    wide: [
        /^pazar(?!tesi)/i,
        /^pazartesi/i,
        /^salı/i,
        /^çarşamba/i,
        /^perşembe/i,
        /^cuma(?!rtesi)/i,
        /^cumartesi/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(öö|ös|gy|ö|sa|ös|ak|ge)/i,
    any: /^(ö\.?\s?[ös]\.?|öğleden sonra|gece yarısı|öğle|(sabah|öğ|akşam|gece)(leyin))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ö\.?ö\.?/i,
        pm: /^ö\.?s\.?/i,
        midnight: /^(gy|gece yarısı)/i,
        noon: /^öğ/i,
        morning: /^sa/i,
        afternoon: /^öğleden sonra/i,
        evening: /^ak/i,
        night: /^ge/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: function(value) {
            return parseInt(value, 10);
        }
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"565a312fd7f0d61e":"15lWd","8e24767de19e8fd1":"kWqg8"}],"9lAi6":[function(require,module,exports) {
"use strict";
exports.ug = void 0;
var _index = require("32bfe45fc08cf2d1");
var _index2 = require("24f463ae881bb567");
var _index3 = require("9de88350f9c7c2c7");
var _index4 = require("4ea4ac5c78b47355");
var _index5 = require("5bdac2a5ced1071d");
/**
 * @category Locales
 * @summary Uighur locale
 * @language Uighur
 * @iso-639-2 uig
 * @author Abduwaly M. [@abduwaly](https://github.com/abduwaly)
 */ const ug = exports.ug = {
    code: "ug",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"32bfe45fc08cf2d1":"iRkAJ","24f463ae881bb567":"hlf3q","9de88350f9c7c2c7":"gCJo3","4ea4ac5c78b47355":"juPmS","5bdac2a5ced1071d":"a94bt"}],"iRkAJ":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u0628\u0649\u0631 \u0633\u0649\u0643\u06C7\u0646\u062A \u0626\u0649\u0686\u0649\u062F\u06D5",
        other: "\u0633\u0649\u0643\u06C7\u0646\u062A \u0626\u0649\u0686\u0649\u062F\u06D5 {{count}}"
    },
    xSeconds: {
        one: "\u0628\u0649\u0631 \u0633\u0649\u0643\u06C7\u0646\u062A",
        other: "\u0633\u0649\u0643\u06C7\u0646\u062A {{count}}"
    },
    halfAMinute: "\u064A\u0649\u0631\u0649\u0645 \u0645\u0649\u0646\u06C7\u062A",
    lessThanXMinutes: {
        one: "\u0628\u0649\u0631 \u0645\u0649\u0646\u06C7\u062A \u0626\u0649\u0686\u0649\u062F\u06D5",
        other: "\u0645\u0649\u0646\u06C7\u062A \u0626\u0649\u0686\u0649\u062F\u06D5 {{count}}"
    },
    xMinutes: {
        one: "\u0628\u0649\u0631 \u0645\u0649\u0646\u06C7\u062A",
        other: "\u0645\u0649\u0646\u06C7\u062A {{count}}"
    },
    aboutXHours: {
        one: "\u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646 \u0628\u0649\u0631 \u0633\u0627\u0626\u06D5\u062A",
        other: "\u0633\u0627\u0626\u06D5\u062A {{count}} \u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646"
    },
    xHours: {
        one: "\u0628\u0649\u0631 \u0633\u0627\u0626\u06D5\u062A",
        other: "\u0633\u0627\u0626\u06D5\u062A {{count}}"
    },
    xDays: {
        one: "\u0628\u0649\u0631 \u0643\u06C8\u0646",
        other: "\u0643\u06C8\u0646 {{count}}"
    },
    aboutXWeeks: {
        one: "\u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646 \u0628\u0649\u0631\u06BE\u06D5\u067E\u062A\u06D5",
        other: "\u06BE\u06D5\u067E\u062A\u06D5 {{count}} \u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646"
    },
    xWeeks: {
        one: "\u0628\u0649\u0631\u06BE\u06D5\u067E\u062A\u06D5",
        other: "\u06BE\u06D5\u067E\u062A\u06D5 {{count}}"
    },
    aboutXMonths: {
        one: "\u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646 \u0628\u0649\u0631 \u0626\u0627\u064A",
        other: "\u0626\u0627\u064A {{count}} \u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646"
    },
    xMonths: {
        one: "\u0628\u0649\u0631 \u0626\u0627\u064A",
        other: "\u0626\u0627\u064A {{count}}"
    },
    aboutXYears: {
        one: "\u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646 \u0628\u0649\u0631 \u064A\u0649\u0644",
        other: "\u064A\u0649\u0644 {{count}} \u062A\u06D5\u062E\u0645\u0649\u0646\u06D5\u0646"
    },
    xYears: {
        one: "\u0628\u0649\u0631 \u064A\u0649\u0644",
        other: "\u064A\u0649\u0644 {{count}}"
    },
    overXYears: {
        one: "\u0628\u0649\u0631 \u064A\u0649\u0644\u062F\u0649\u0646 \u0626\u0627\u0631\u062A\u06C7\u0642",
        other: "\u064A\u0649\u0644\u062F\u0649\u0646 \u0626\u0627\u0631\u062A\u06C7\u0642 {{count}}"
    },
    almostXYears: {
        one: "\u0626\u0627\u0633\u0627\u0633\u06D5\u0646 \u0628\u0649\u0631 \u064A\u0649\u0644",
        other: "\u064A\u0649\u0644 {{count}} \u0626\u0627\u0633\u0627\u0633\u06D5\u0646"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result;
        else return result + " \u0628\u0648\u0644\u062F\u0649";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"hlf3q":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("e9daf00eda2db8c8");
const dateFormats = {
    full: "EEEE, MMMM do, y",
    long: "MMMM do, y",
    medium: "MMM d, y",
    short: "MM/dd/yyyy"
};
const timeFormats = {
    full: "h:mm:ss a zzzz",
    long: "h:mm:ss a z",
    medium: "h:mm:ss a",
    short: "h:mm a"
};
const dateTimeFormats = {
    full: "{{date}} '\u062F\u06D5' {{time}}",
    long: "{{date}} '\u062F\u06D5' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"e9daf00eda2db8c8":"6OYyu"}],"gCJo3":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u0626\u200D\u06C6\u062A\u0643\u06D5\u0646' eeee '\u062F\u06D5' p",
    yesterday: "'\u062A\u06C8\u0646\u06C8\u06AF\u06C8\u0646 \u062F\u06D5' p",
    today: "'\u0628\u06C8\u06AF\u06C8\u0646 \u062F\u06D5' p",
    tomorrow: "'\u0626\u06D5\u062A\u06D5 \u062F\u06D5' p",
    nextWeek: "eeee '\u062F\u06D5' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"juPmS":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("7ac784e19bb17bbd");
const eraValues = {
    narrow: [
        "\u0628",
        "\u0643"
    ],
    abbreviated: [
        "\u0628",
        "\u0643"
    ],
    wide: [
        "\u0645\u0649\u064A\u0644\u0627\u062F\u0649\u062F\u0649\u0646 \u0628\u06C7\u0631\u06C7\u0646",
        "\u0645\u0649\u064A\u0644\u0627\u062F\u0649\u062F\u0649\u0646 \u0643\u0649\u064A\u0649\u0646"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1",
        "2",
        "3",
        "4"
    ],
    wide: [
        "\u0628\u0649\u0631\u0649\u0646\u062C\u0649 \u0686\u0627\u0631\u06D5\u0643",
        "\u0626\u0649\u0643\u0643\u0649\u0646\u062C\u0649 \u0686\u0627\u0631\u06D5\u0643",
        "\u0626\u06C8\u0686\u0649\u0646\u062C\u0649 \u0686\u0627\u0631\u06D5\u0643",
        "\u062A\u06C6\u062A\u0649\u0646\u062C\u0649 \u0686\u0627\u0631\u06D5\u0643"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "\u064A",
        "\u0641",
        "\u0645",
        "\u0627",
        "\u0645",
        "\u0649",
        "\u0649",
        "\u0627",
        "\u0633",
        "\u06C6",
        "\u0646",
        "\u062F"
    ],
    abbreviated: [
        "\u064A\u0627\u0646\u06CB\u0627\u0631",
        "\u0641\u06D0\u06CB\u0649\u0631\u0627\u0644",
        "\u0645\u0627\u0631\u062A",
        "\u0626\u0627\u067E\u0631\u0649\u0644",
        "\u0645\u0627\u064A",
        "\u0626\u0649\u064A\u06C7\u0646",
        "\u0626\u0649\u064A\u0648\u0644",
        "\u0626\u0627\u06CB\u063A\u06C7\u0633\u062A",
        "\u0633\u0649\u0646\u062A\u06D5\u0628\u0649\u0631",
        "\u0626\u06C6\u0643\u062A\u06D5\u0628\u0649\u0631",
        "\u0646\u0648\u064A\u0627\u0628\u0649\u0631",
        "\u062F\u0649\u0643\u0627\u0628\u0649\u0631"
    ],
    wide: [
        "\u064A\u0627\u0646\u06CB\u0627\u0631",
        "\u0641\u06D0\u06CB\u0649\u0631\u0627\u0644",
        "\u0645\u0627\u0631\u062A",
        "\u0626\u0627\u067E\u0631\u0649\u0644",
        "\u0645\u0627\u064A",
        "\u0626\u0649\u064A\u06C7\u0646",
        "\u0626\u0649\u064A\u0648\u0644",
        "\u0626\u0627\u06CB\u063A\u06C7\u0633\u062A",
        "\u0633\u0649\u0646\u062A\u06D5\u0628\u0649\u0631",
        "\u0626\u06C6\u0643\u062A\u06D5\u0628\u0649\u0631",
        "\u0646\u0648\u064A\u0627\u0628\u0649\u0631",
        "\u062F\u0649\u0643\u0627\u0628\u0649\u0631"
    ]
};
const dayValues = {
    narrow: [
        "\u064A",
        "\u062F",
        "\u0633",
        "\u0686",
        "\u067E",
        "\u062C",
        "\u0634"
    ],
    short: [
        "\u064A",
        "\u062F",
        "\u0633",
        "\u0686",
        "\u067E",
        "\u062C",
        "\u0634"
    ],
    abbreviated: [
        "\u064A\u06D5\u0643\u0634\u06D5\u0646\u0628\u06D5",
        "\u062F\u06C8\u0634\u06D5\u0646\u0628\u06D5",
        "\u0633\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5",
        "\u0686\u0627\u0631\u0634\u06D5\u0646\u0628\u06D5",
        "\u067E\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5",
        "\u062C\u06C8\u0645\u06D5",
        "\u0634\u06D5\u0646\u0628\u06D5"
    ],
    wide: [
        "\u064A\u06D5\u0643\u0634\u06D5\u0646\u0628\u06D5",
        "\u062F\u06C8\u0634\u06D5\u0646\u0628\u06D5",
        "\u0633\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5",
        "\u0686\u0627\u0631\u0634\u06D5\u0646\u0628\u06D5",
        "\u067E\u06D5\u064A\u0634\u06D5\u0646\u0628\u06D5",
        "\u062C\u06C8\u0645\u06D5",
        "\u0634\u06D5\u0646\u0628\u06D5"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0626\u06D5",
        pm: "\u0686",
        midnight: "\u0643",
        noon: "\u0686",
        morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646",
        afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
        evening: "\u0626\u0627\u062E\u0634\u0649\u0645",
        night: "\u0643\u0649\u0686\u06D5"
    },
    abbreviated: {
        am: "\u0626\u06D5",
        pm: "\u0686",
        midnight: "\u0643",
        noon: "\u0686",
        morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646",
        afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
        evening: "\u0626\u0627\u062E\u0634\u0649\u0645",
        night: "\u0643\u0649\u0686\u06D5"
    },
    wide: {
        am: "\u0626\u06D5",
        pm: "\u0686",
        midnight: "\u0643",
        noon: "\u0686",
        morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646",
        afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
        evening: "\u0626\u0627\u062E\u0634\u0649\u0645",
        night: "\u0643\u0649\u0686\u06D5"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0626\u06D5",
        pm: "\u0686",
        midnight: "\u0643",
        noon: "\u0686",
        morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646\u062F\u06D5",
        afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
        evening: "\u0626\u0627\u062E\u0634\u0627\u0645\u062F\u0627",
        night: "\u0643\u0649\u0686\u0649\u062F\u06D5"
    },
    abbreviated: {
        am: "\u0626\u06D5",
        pm: "\u0686",
        midnight: "\u0643",
        noon: "\u0686",
        morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646\u062F\u06D5",
        afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
        evening: "\u0626\u0627\u062E\u0634\u0627\u0645\u062F\u0627",
        night: "\u0643\u0649\u0686\u0649\u062F\u06D5"
    },
    wide: {
        am: "\u0626\u06D5",
        pm: "\u0686",
        midnight: "\u0643",
        noon: "\u0686",
        morning: "\u0626\u06D5\u062A\u0649\u06AF\u06D5\u0646\u062F\u06D5",
        afternoon: "\u0686\u06C8\u0634\u062A\u0649\u0646 \u0643\u0649\u064A\u0649\u0646",
        evening: "\u0626\u0627\u062E\u0634\u0627\u0645\u062F\u0627",
        night: "\u0643\u0649\u0686\u0649\u062F\u06D5"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"7ac784e19bb17bbd":"fGq1u"}],"a94bt":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("eeef20b04eca6af4");
var _index2 = require("57ef5cbddc0869f5");
const matchOrdinalNumberPattern = /^(\d+)(th|st|nd|rd)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(ب|ك)/i,
    wide: /^(مىيلادىدىن بۇرۇن|مىيلادىدىن كىيىن)/i
};
const parseEraPatterns = {
    any: [
        /^بۇرۇن/i,
        /^كىيىن/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^چ[1234]/i,
    wide: /^چارەك [1234]/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    // eslint-disable-next-line no-misleading-character-class
    narrow: /^[يفمئامئ‍ئاسۆند]/i,
    abbreviated: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i,
    wide: /^(يانۋار|فېۋىرال|مارت|ئاپرىل|ماي|ئىيۇن|ئىيول|ئاۋغۇست|سىنتەبىر|ئۆكتەبىر|نويابىر|دىكابىر)/i
};
const parseMonthPatterns = {
    narrow: [
        /^ي/i,
        /^ف/i,
        /^م/i,
        /^ا/i,
        /^م/i,
        /^ى‍/i,
        /^ى‍/i,
        /^ا‍/i,
        /^س/i,
        /^ۆ/i,
        /^ن/i,
        /^د/i
    ],
    any: [
        /^يان/i,
        /^فېۋ/i,
        /^مار/i,
        /^ئاپ/i,
        /^ماي/i,
        /^ئىيۇن/i,
        /^ئىيول/i,
        /^ئاۋ/i,
        /^سىن/i,
        /^ئۆك/i,
        /^نوي/i,
        /^دىك/i
    ]
};
const matchDayPatterns = {
    narrow: /^[دسچپجشي]/i,
    short: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
    abbreviated: /^(يە|دۈ|سە|چا|پە|جۈ|شە)/i,
    wide: /^(يەكشەنبە|دۈشەنبە|سەيشەنبە|چارشەنبە|پەيشەنبە|جۈمە|شەنبە)/i
};
const parseDayPatterns = {
    narrow: [
        /^ي/i,
        /^د/i,
        /^س/i,
        /^چ/i,
        /^پ/i,
        /^ج/i,
        /^ش/i
    ],
    any: [
        /^ي/i,
        /^د/i,
        /^س/i,
        /^چ/i,
        /^پ/i,
        /^ج/i,
        /^ش/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i,
    any: /^(ئە|چ|ك|چ|(دە|ئەتىگەن) ( ئە‍|چۈشتىن كىيىن|ئاخشىم|كىچە))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^ئە/i,
        pm: /^چ/i,
        midnight: /^ك/i,
        noon: /^چ/i,
        morning: /ئەتىگەن/i,
        afternoon: /چۈشتىن كىيىن/i,
        evening: /ئاخشىم/i,
        night: /كىچە/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"eeef20b04eca6af4":"15lWd","57ef5cbddc0869f5":"kWqg8"}],"4ihbh":[function(require,module,exports) {
"use strict";
exports.uk = void 0;
var _index = require("c0be11945b7a5593");
var _index2 = require("784d65427eeeac75");
var _index3 = require("856adddcf24d23ad");
var _index4 = require("d402123da95d1dc");
var _index5 = require("ef386c44843e2cd2");
/**
 * @category Locales
 * @summary Ukrainian locale.
 * @language Ukrainian
 * @iso-639-2 ukr
 * @author Andrii Korzh [@korzhyk](https://github.com/korzhyk)
 * @author Andriy Shcherbyak [@shcherbyakdev](https://github.com/shcherbyakdev)
 */ const uk = exports.uk = {
    code: "uk",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"c0be11945b7a5593":"41vlm","784d65427eeeac75":"czevz","856adddcf24d23ad":"fsMrQ","d402123da95d1dc":"5iOrM","ef386c44843e2cd2":"8R9NJ"}],"41vlm":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
function declension(scheme, count) {
    // scheme for count=1 exists
    if (scheme.one !== undefined && count === 1) return scheme.one;
    const rem10 = count % 10;
    const rem100 = count % 100;
    // 1, 21, 31, ...
    if (rem10 === 1 && rem100 !== 11) return scheme.singularNominative.replace("{{count}}", String(count));
    else if (rem10 >= 2 && rem10 <= 4 && (rem100 < 10 || rem100 > 20)) return scheme.singularGenitive.replace("{{count}}", String(count));
    else return scheme.pluralGenitive.replace("{{count}}", String(count));
}
function buildLocalizeTokenFn(scheme) {
    return (count, options)=>{
        if (options && options.addSuffix) {
            if (options.comparison && options.comparison > 0) {
                if (scheme.future) return declension(scheme.future, count);
                else return "\u0437\u0430 " + declension(scheme.regular, count);
            } else {
                if (scheme.past) return declension(scheme.past, count);
                else return declension(scheme.regular, count) + " \u0442\u043E\u043C\u0443";
            }
        } else return declension(scheme.regular, count);
    };
}
const halfAtMinute = (_, options)=>{
    if (options && options.addSuffix) {
        if (options.comparison && options.comparison > 0) return "\u0437\u0430 \u043F\u0456\u0432\u0445\u0432\u0438\u043B\u0438\u043D\u0438";
        else return "\u043F\u0456\u0432\u0445\u0432\u0438\u043B\u0438\u043D\u0438 \u0442\u043E\u043C\u0443";
    }
    return "\u043F\u0456\u0432\u0445\u0432\u0438\u043B\u0438\u043D\u0438";
};
const formatDistanceLocale = {
    lessThanXSeconds: buildLocalizeTokenFn({
        regular: {
            one: "\u043C\u0435\u043D\u0448\u0435 \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
            singularNominative: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
            singularGenitive: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434",
            pluralGenitive: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        future: {
            one: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
            pluralGenitive: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        }
    }),
    xSeconds: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0430",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        },
        past: {
            singularNominative: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443 \u0442\u043E\u043C\u0443",
            singularGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438 \u0442\u043E\u043C\u0443",
            pluralGenitive: "{{count}} \u0441\u0435\u043A\u0443\u043D\u0434 \u0442\u043E\u043C\u0443"
        },
        future: {
            singularNominative: "\u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0443",
            singularGenitive: "\u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434\u0438",
            pluralGenitive: "\u0437\u0430 {{count}} \u0441\u0435\u043A\u0443\u043D\u0434"
        }
    }),
    halfAMinute: halfAtMinute,
    lessThanXMinutes: buildLocalizeTokenFn({
        regular: {
            one: "\u043C\u0435\u043D\u0448\u0435 \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
            singularNominative: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
            singularGenitive: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D",
            pluralGenitive: "\u043C\u0435\u043D\u0448\u0435 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D"
        },
        future: {
            one: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 \u0445\u0432\u0438\u043B\u0438\u043D\u0443",
            singularNominative: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0443",
            singularGenitive: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
            pluralGenitive: "\u043C\u0435\u043D\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D"
        }
    }),
    xMinutes: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0430",
            singularGenitive: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
            pluralGenitive: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D"
        },
        past: {
            singularNominative: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0443 \u0442\u043E\u043C\u0443",
            singularGenitive: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438 \u0442\u043E\u043C\u0443",
            pluralGenitive: "{{count}} \u0445\u0432\u0438\u043B\u0438\u043D \u0442\u043E\u043C\u0443"
        },
        future: {
            singularNominative: "\u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0443",
            singularGenitive: "\u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D\u0438",
            pluralGenitive: "\u0437\u0430 {{count}} \u0445\u0432\u0438\u043B\u0438\u043D"
        }
    }),
    aboutXHours: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D\u0438",
            singularGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D",
            pluralGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0433\u043E\u0434\u0438\u043D"
        },
        future: {
            singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0433\u043E\u0434\u0438\u043D\u0443",
            singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0433\u043E\u0434\u0438\u043D\u0438",
            pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0433\u043E\u0434\u0438\u043D"
        }
    }),
    xHours: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0443",
            singularGenitive: "{{count}} \u0433\u043E\u0434\u0438\u043D\u0438",
            pluralGenitive: "{{count}} \u0433\u043E\u0434\u0438\u043D"
        }
    }),
    xDays: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0434\u0435\u043D\u044C",
            singularGenitive: "{{count}} \u0434\u043Di",
            pluralGenitive: "{{count}} \u0434\u043D\u0456\u0432"
        }
    }),
    aboutXWeeks: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0442\u0438\u0436\u043D\u044F",
            singularGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0442\u0438\u0436\u043D\u0456\u0432",
            pluralGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0442\u0438\u0436\u043D\u0456\u0432"
        },
        future: {
            singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0442\u0438\u0436\u0434\u0435\u043D\u044C",
            singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0442\u0438\u0436\u043D\u0456",
            pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0442\u0438\u0436\u043D\u0456\u0432"
        }
    }),
    xWeeks: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0442\u0438\u0436\u0434\u0435\u043D\u044C",
            singularGenitive: "{{count}} \u0442\u0438\u0436\u043D\u0456",
            pluralGenitive: "{{count}} \u0442\u0438\u0436\u043D\u0456\u0432"
        }
    }),
    aboutXMonths: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u043C\u0456\u0441\u044F\u0446\u044F",
            singularGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u043C\u0456\u0441\u044F\u0446\u0456\u0432",
            pluralGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u043C\u0456\u0441\u044F\u0446\u0456\u0432"
        },
        future: {
            singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u043C\u0456\u0441\u044F\u0446\u044C",
            singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u043C\u0456\u0441\u044F\u0446\u0456",
            pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u043C\u0456\u0441\u044F\u0446\u0456\u0432"
        }
    }),
    xMonths: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u043C\u0456\u0441\u044F\u0446\u044C",
            singularGenitive: "{{count}} \u043C\u0456\u0441\u044F\u0446\u0456",
            pluralGenitive: "{{count}} \u043C\u0456\u0441\u044F\u0446\u0456\u0432"
        }
    }),
    aboutXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0440\u043E\u043A\u0443",
            singularGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0440\u043E\u043A\u0456\u0432",
            pluralGenitive: "\u0431\u043B\u0438\u0437\u044C\u043A\u043E {{count}} \u0440\u043E\u043A\u0456\u0432"
        },
        future: {
            singularNominative: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0440\u0456\u043A",
            singularGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0440\u043E\u043A\u0438",
            pluralGenitive: "\u043F\u0440\u0438\u0431\u043B\u0438\u0437\u043D\u043E \u0437\u0430 {{count}} \u0440\u043E\u043A\u0456\u0432"
        }
    }),
    xYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "{{count}} \u0440\u0456\u043A",
            singularGenitive: "{{count}} \u0440\u043E\u043A\u0438",
            pluralGenitive: "{{count}} \u0440\u043E\u043A\u0456\u0432"
        }
    }),
    overXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u0431\u0456\u043B\u044C\u0448\u0435 {{count}} \u0440\u043E\u043A\u0443",
            singularGenitive: "\u0431\u0456\u043B\u044C\u0448\u0435 {{count}} \u0440\u043E\u043A\u0456\u0432",
            pluralGenitive: "\u0431\u0456\u043B\u044C\u0448\u0435 {{count}} \u0440\u043E\u043A\u0456\u0432"
        },
        future: {
            singularNominative: "\u0431\u0456\u043B\u044C\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0440\u0456\u043A",
            singularGenitive: "\u0431\u0456\u043B\u044C\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0440\u043E\u043A\u0438",
            pluralGenitive: "\u0431\u0456\u043B\u044C\u0448\u0435, \u043D\u0456\u0436 \u0437\u0430 {{count}} \u0440\u043E\u043A\u0456\u0432"
        }
    }),
    almostXYears: buildLocalizeTokenFn({
        regular: {
            singularNominative: "\u043C\u0430\u0439\u0436\u0435 {{count}} \u0440\u0456\u043A",
            singularGenitive: "\u043C\u0430\u0439\u0436\u0435 {{count}} \u0440\u043E\u043A\u0438",
            pluralGenitive: "\u043C\u0430\u0439\u0436\u0435 {{count}} \u0440\u043E\u043A\u0456\u0432"
        },
        future: {
            singularNominative: "\u043C\u0430\u0439\u0436\u0435 \u0437\u0430 {{count}} \u0440\u0456\u043A",
            singularGenitive: "\u043C\u0430\u0439\u0436\u0435 \u0437\u0430 {{count}} \u0440\u043E\u043A\u0438",
            pluralGenitive: "\u043C\u0430\u0439\u0436\u0435 \u0437\u0430 {{count}} \u0440\u043E\u043A\u0456\u0432"
        }
    })
};
const formatDistance = (token, count, options)=>{
    options = options || {};
    return formatDistanceLocale[token](count, options);
};
exports.formatDistance = formatDistance;

},{}],"czevz":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("ec7d37208c3d6ede");
const dateFormats = {
    full: "EEEE, do MMMM y '\u0440.'",
    long: "do MMMM y '\u0440.'",
    medium: "d MMM y '\u0440.'",
    short: "dd.MM.y"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    full: "{{date}} '\u043E' {{time}}",
    long: "{{date}} '\u043E' {{time}}",
    medium: "{{date}}, {{time}}",
    short: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"ec7d37208c3d6ede":"6OYyu"}],"fsMrQ":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("ef332975d6b3c943");
var _index2 = require("cdcf75effa879aff");
const accusativeWeekdays = [
    "\u043D\u0435\u0434\u0456\u043B\u044E",
    "\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A",
    "\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A",
    "\u0441\u0435\u0440\u0435\u0434\u0443",
    "\u0447\u0435\u0442\u0432\u0435\u0440",
    "\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044E",
    "\u0441\u0443\u0431\u043E\u0442\u0443"
];
function lastWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
        case 3:
        case 5:
        case 6:
            return "'\u0443 \u043C\u0438\u043D\u0443\u043B\u0443 " + weekday + " \u043E' p";
        case 1:
        case 2:
        case 4:
            return "'\u0443 \u043C\u0438\u043D\u0443\u043B\u0438\u0439 " + weekday + " \u043E' p";
    }
}
function thisWeek(day) {
    const weekday = accusativeWeekdays[day];
    return "'\u0443 " + weekday + " \u043E' p";
}
function nextWeek(day) {
    const weekday = accusativeWeekdays[day];
    switch(day){
        case 0:
        case 3:
        case 5:
        case 6:
            return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0443 " + weekday + " \u043E' p";
        case 1:
        case 2:
        case 4:
            return "'\u0443 \u043D\u0430\u0441\u0442\u0443\u043F\u043D\u0438\u0439 " + weekday + " \u043E' p";
    }
}
const lastWeekFormat = (dirtyDate, baseDate, options)=>{
    const date = (0, _index2.toDate)(dirtyDate);
    const day = date.getDay();
    if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
    else return lastWeek(day);
};
const nextWeekFormat = (dirtyDate, baseDate, options)=>{
    const date = (0, _index2.toDate)(dirtyDate);
    const day = date.getDay();
    if ((0, _index.isSameWeek)(date, baseDate, options)) return thisWeek(day);
    else return nextWeek(day);
};
const formatRelativeLocale = {
    lastWeek: lastWeekFormat,
    yesterday: "'\u0432\u0447\u043E\u0440\u0430 \u043E' p",
    today: "'\u0441\u044C\u043E\u0433\u043E\u0434\u043D\u0456 \u043E' p",
    tomorrow: "'\u0437\u0430\u0432\u0442\u0440\u0430 \u043E' p",
    nextWeek: nextWeekFormat,
    other: "P"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"ef332975d6b3c943":"16SmB","cdcf75effa879aff":"actWA"}],"5iOrM":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("95ac7ea3b1590166");
const eraValues = {
    narrow: [
        "\u0434\u043E \u043D.\u0435.",
        "\u043D.\u0435."
    ],
    abbreviated: [
        "\u0434\u043E \u043D. \u0435.",
        "\u043D. \u0435."
    ],
    wide: [
        "\u0434\u043E \u043D\u0430\u0448\u043E\u0457 \u0435\u0440\u0438",
        "\u043D\u0430\u0448\u043E\u0457 \u0435\u0440\u0438"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u0439 \u043A\u0432.",
        "2-\u0439 \u043A\u0432.",
        "3-\u0439 \u043A\u0432.",
        "4-\u0439 \u043A\u0432."
    ],
    wide: [
        "1-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "2-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "3-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B",
        "4-\u0439 \u043A\u0432\u0430\u0440\u0442\u0430\u043B"
    ]
};
const monthValues = {
    // ДСТУ 3582:2013
    narrow: [
        "\u0421",
        "\u041B",
        "\u0411",
        "\u041A",
        "\u0422",
        "\u0427",
        "\u041B",
        "\u0421",
        "\u0412",
        "\u0416",
        "\u041B",
        "\u0413"
    ],
    abbreviated: [
        "\u0441\u0456\u0447.",
        "\u043B\u044E\u0442.",
        "\u0431\u0435\u0440\u0435\u0437.",
        "\u043A\u0432\u0456\u0442.",
        "\u0442\u0440\u0430\u0432.",
        "\u0447\u0435\u0440\u0432.",
        "\u043B\u0438\u043F.",
        "\u0441\u0435\u0440\u043F.",
        "\u0432\u0435\u0440\u0435\u0441.",
        "\u0436\u043E\u0432\u0442.",
        "\u043B\u0438\u0441\u0442\u043E\u043F.",
        "\u0433\u0440\u0443\u0434."
    ],
    wide: [
        "\u0441\u0456\u0447\u0435\u043D\u044C",
        "\u043B\u044E\u0442\u0438\u0439",
        "\u0431\u0435\u0440\u0435\u0437\u0435\u043D\u044C",
        "\u043A\u0432\u0456\u0442\u0435\u043D\u044C",
        "\u0442\u0440\u0430\u0432\u0435\u043D\u044C",
        "\u0447\u0435\u0440\u0432\u0435\u043D\u044C",
        "\u043B\u0438\u043F\u0435\u043D\u044C",
        "\u0441\u0435\u0440\u043F\u0435\u043D\u044C",
        "\u0432\u0435\u0440\u0435\u0441\u0435\u043D\u044C",
        "\u0436\u043E\u0432\u0442\u0435\u043D\u044C",
        "\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434",
        "\u0433\u0440\u0443\u0434\u0435\u043D\u044C"
    ]
};
const formattingMonthValues = {
    narrow: [
        "\u0421",
        "\u041B",
        "\u0411",
        "\u041A",
        "\u0422",
        "\u0427",
        "\u041B",
        "\u0421",
        "\u0412",
        "\u0416",
        "\u041B",
        "\u0413"
    ],
    abbreviated: [
        "\u0441\u0456\u0447.",
        "\u043B\u044E\u0442.",
        "\u0431\u0435\u0440\u0435\u0437.",
        "\u043A\u0432\u0456\u0442.",
        "\u0442\u0440\u0430\u0432.",
        "\u0447\u0435\u0440\u0432.",
        "\u043B\u0438\u043F.",
        "\u0441\u0435\u0440\u043F.",
        "\u0432\u0435\u0440\u0435\u0441.",
        "\u0436\u043E\u0432\u0442.",
        "\u043B\u0438\u0441\u0442\u043E\u043F.",
        "\u0433\u0440\u0443\u0434."
    ],
    wide: [
        "\u0441\u0456\u0447\u043D\u044F",
        "\u043B\u044E\u0442\u043E\u0433\u043E",
        "\u0431\u0435\u0440\u0435\u0437\u043D\u044F",
        "\u043A\u0432\u0456\u0442\u043D\u044F",
        "\u0442\u0440\u0430\u0432\u043D\u044F",
        "\u0447\u0435\u0440\u0432\u043D\u044F",
        "\u043B\u0438\u043F\u043D\u044F",
        "\u0441\u0435\u0440\u043F\u043D\u044F",
        "\u0432\u0435\u0440\u0435\u0441\u043D\u044F",
        "\u0436\u043E\u0432\u0442\u043D\u044F",
        "\u043B\u0438\u0441\u0442\u043E\u043F\u0430\u0434\u0430",
        "\u0433\u0440\u0443\u0434\u043D\u044F"
    ]
};
const dayValues = {
    narrow: [
        "\u041D",
        "\u041F",
        "\u0412",
        "\u0421",
        "\u0427",
        "\u041F",
        "\u0421"
    ],
    short: [
        "\u043D\u0434",
        "\u043F\u043D",
        "\u0432\u0442",
        "\u0441\u0440",
        "\u0447\u0442",
        "\u043F\u0442",
        "\u0441\u0431"
    ],
    abbreviated: [
        "\u043D\u0435\u0434",
        "\u043F\u043E\u043D",
        "\u0432\u0456\u0432",
        "\u0441\u0435\u0440",
        "\u0447\u0442\u0432",
        "\u043F\u0442\u043D",
        "\u0441\u0443\u0431"
    ],
    wide: [
        "\u043D\u0435\u0434\u0456\u043B\u044F",
        "\u043F\u043E\u043D\u0435\u0434\u0456\u043B\u043E\u043A",
        "\u0432\u0456\u0432\u0442\u043E\u0440\u043E\u043A",
        "\u0441\u0435\u0440\u0435\u0434\u0430",
        "\u0447\u0435\u0442\u0432\u0435\u0440",
        "\u043F\u2019\u044F\u0442\u043D\u0438\u0446\u044F",
        "\u0441\u0443\u0431\u043E\u0442\u0430"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u0456\u0432\u043D.",
        noon: "\u043F\u043E\u043B.",
        morning: "\u0440\u0430\u043D\u043E\u043A",
        afternoon: "\u0434\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u0456\u0447"
    },
    abbreviated: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u0456\u0432\u043D.",
        noon: "\u043F\u043E\u043B.",
        morning: "\u0440\u0430\u043D\u043E\u043A",
        afternoon: "\u0434\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u0456\u0447"
    },
    wide: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u0456\u0432\u043D\u0456\u0447",
        noon: "\u043F\u043E\u043B\u0443\u0434\u0435\u043D\u044C",
        morning: "\u0440\u0430\u043D\u043E\u043A",
        afternoon: "\u0434\u0435\u043D\u044C",
        evening: "\u0432\u0435\u0447\u0456\u0440",
        night: "\u043D\u0456\u0447"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u0456\u0432\u043D.",
        noon: "\u043F\u043E\u043B.",
        morning: "\u0440\u0430\u043D\u043A\u0443",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u0456"
    },
    abbreviated: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u0456\u0432\u043D.",
        noon: "\u043F\u043E\u043B.",
        morning: "\u0440\u0430\u043D\u043A\u0443",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u0456"
    },
    wide: {
        am: "\u0414\u041F",
        pm: "\u041F\u041F",
        midnight: "\u043F\u0456\u0432\u043D\u0456\u0447",
        noon: "\u043F\u043E\u043B\u0443\u0434\u0435\u043D\u044C",
        morning: "\u0440\u0430\u043D\u043A\u0443",
        afternoon: "\u0434\u043D\u044F",
        evening: "\u0432\u0435\u0447.",
        night: "\u043D\u043E\u0447\u0456"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const unit = String(options?.unit);
    const number = Number(dirtyNumber);
    let suffix;
    if (unit === "date") {
        if (number === 3 || number === 23) suffix = "-\u0454";
        else suffix = "-\u0435";
    } else if (unit === "minute" || unit === "second" || unit === "hour") suffix = "-\u0430";
    else suffix = "-\u0439";
    return number + suffix;
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"95ac7ea3b1590166":"fGq1u"}],"8R9NJ":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("77a261b2188ce0b4");
var _index2 = require("2780bc3102d35b8a");
const matchOrdinalNumberPattern = /^(\d+)(-?(е|й|є|а|я))?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^((до )?н\.?\s?е\.?)/i,
    abbreviated: /^((до )?н\.?\s?е\.?)/i,
    wide: /^(до нашої ери|нашої ери|наша ера)/i
};
const parseEraPatterns = {
    any: [
        /^д/i,
        /^н/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234](-?[иі]?й?)? кв.?/i,
    wide: /^[1234](-?[иі]?й?)? квартал/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[слбктчвжг]/i,
    abbreviated: /^(січ|лют|бер(ез)?|квіт|трав|черв|лип|серп|вер(ес)?|жовт|лис(топ)?|груд)\.?/i,
    wide: /^(січень|січня|лютий|лютого|березень|березня|квітень|квітня|травень|травня|червня|червень|липень|липня|серпень|серпня|вересень|вересня|жовтень|жовтня|листопад[а]?|грудень|грудня)/i
};
const parseMonthPatterns = {
    narrow: [
        /^с/i,
        /^л/i,
        /^б/i,
        /^к/i,
        /^т/i,
        /^ч/i,
        /^л/i,
        /^с/i,
        /^в/i,
        /^ж/i,
        /^л/i,
        /^г/i
    ],
    any: [
        /^сі/i,
        /^лю/i,
        /^б/i,
        /^к/i,
        /^т/i,
        /^ч/i,
        /^лип/i,
        /^се/i,
        /^в/i,
        /^ж/i,
        /^лис/i,
        /^г/i
    ]
};
const matchDayPatterns = {
    narrow: /^[нпвсч]/i,
    short: /^(нд|пн|вт|ср|чт|пт|сб)\.?/i,
    abbreviated: /^(нед|пон|вів|сер|че?тв|птн?|суб)\.?/i,
    wide: /^(неділ[яі]|понеділ[ок][ка]|вівтор[ок][ка]|серед[аи]|четвер(га)?|п\W*?ятниц[яі]|субот[аи])/i
};
const parseDayPatterns = {
    narrow: [
        /^н/i,
        /^п/i,
        /^в/i,
        /^с/i,
        /^ч/i,
        /^п/i,
        /^с/i
    ],
    any: [
        /^н/i,
        /^п[он]/i,
        /^в/i,
        /^с[ер]/i,
        /^ч/i,
        /^п\W*?[ят]/i,
        /^с[уб]/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
    abbreviated: /^([дп]п|півн\.?|пол\.?|ранок|ранку|день|дня|веч\.?|ніч|ночі)/i,
    wide: /^([дп]п|північ|полудень|ранок|ранку|день|дня|вечір|вечора|ніч|ночі)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^дп/i,
        pm: /^пп/i,
        midnight: /^півн/i,
        noon: /^пол/i,
        morning: /^р/i,
        afternoon: /^д[ен]/i,
        evening: /^в/i,
        night: /^н/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"77a261b2188ce0b4":"15lWd","2780bc3102d35b8a":"kWqg8"}],"a7qrF":[function(require,module,exports) {
"use strict";
exports.uz = void 0;
var _index = require("a641bdc2f6d03832");
var _index2 = require("c0a04e6b5103e5b0");
var _index3 = require("d6b67aab73ff256b");
var _index4 = require("8271cc32925d6a65");
var _index5 = require("2400a519dec64255");
/**
 * @category Locales
 * @summary Uzbek locale.
 * @language Uzbek
 * @iso-639-2 uzb
 * @author Mukhammadali [@mukhammadali](https://github.com/Mukhammadali)
 */ const uz = exports.uz = {
    code: "uz",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"a641bdc2f6d03832":"bNzaf","c0a04e6b5103e5b0":"hSGtC","d6b67aab73ff256b":"eMJ0S","8271cc32925d6a65":"bRKjv","2400a519dec64255":"aRPvX"}],"bNzaf":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "sekunddan kam",
        other: "{{count}} sekunddan kam"
    },
    xSeconds: {
        one: "1 sekund",
        other: "{{count}} sekund"
    },
    halfAMinute: "yarim minut",
    lessThanXMinutes: {
        one: "bir minutdan kam",
        other: "{{count}} minutdan kam"
    },
    xMinutes: {
        one: "1 minut",
        other: "{{count}} minut"
    },
    aboutXHours: {
        one: "tahminan 1 soat",
        other: "tahminan {{count}} soat"
    },
    xHours: {
        one: "1 soat",
        other: "{{count}} soat"
    },
    xDays: {
        one: "1 kun",
        other: "{{count}} kun"
    },
    aboutXWeeks: {
        one: "tahminan 1 hafta",
        other: "tahminan {{count}} hafta"
    },
    xWeeks: {
        one: "1 hafta",
        other: "{{count}} hafta"
    },
    aboutXMonths: {
        one: "tahminan 1 oy",
        other: "tahminan {{count}} oy"
    },
    xMonths: {
        one: "1 oy",
        other: "{{count}} oy"
    },
    aboutXYears: {
        one: "tahminan 1 yil",
        other: "tahminan {{count}} yil"
    },
    xYears: {
        one: "1 yil",
        other: "{{count}} yil"
    },
    overXYears: {
        one: "1 yildan ko'p",
        other: "{{count}} yildan ko'p"
    },
    almostXYears: {
        one: "deyarli 1 yil",
        other: "deyarli {{count}} yil"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + " dan keyin";
        else return result + " oldin";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"hSGtC":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("10d7acc5bf60cf6c");
const dateFormats = {
    full: "EEEE, do MMMM, y",
    long: "do MMMM, y",
    medium: "d MMM, y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "h:mm:ss zzzz",
    long: "h:mm:ss z",
    medium: "h:mm:ss",
    short: "h:mm"
};
const dateTimeFormats = {
    any: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"10d7acc5bf60cf6c":"6OYyu"}],"eMJ0S":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'oldingi' eeee p 'da'",
    yesterday: "'kecha' p 'da'",
    today: "'bugun' p 'da'",
    tomorrow: "'ertaga' p 'da'",
    nextWeek: "eeee p 'da'",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"bRKjv":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("6c9fbbbd68cbf816");
const eraValues = {
    narrow: [
        "M.A",
        "M."
    ],
    abbreviated: [
        "M.A",
        "M."
    ],
    wide: [
        "Miloddan Avvalgi",
        "Milodiy"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "CH.1",
        "CH.2",
        "CH.3",
        "CH.4"
    ],
    wide: [
        "1-chi chorak",
        "2-chi chorak",
        "3-chi chorak",
        "4-chi chorak"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "Y",
        "F",
        "M",
        "A",
        "M",
        "I",
        "I",
        "A",
        "S",
        "O",
        "N",
        "D"
    ],
    abbreviated: [
        "Yan",
        "Fev",
        "Mar",
        "Apr",
        "May",
        "Iyun",
        "Iyul",
        "Avg",
        "Sen",
        "Okt",
        "Noy",
        "Dek"
    ],
    wide: [
        "Yanvar",
        "Fevral",
        "Mart",
        "Aprel",
        "May",
        "Iyun",
        "Iyul",
        "Avgust",
        "Sentabr",
        "Oktabr",
        "Noyabr",
        "Dekabr"
    ]
};
const dayValues = {
    narrow: [
        "Y",
        "D",
        "S",
        "CH",
        "P",
        "J",
        "SH"
    ],
    short: [
        "Ya",
        "Du",
        "Se",
        "Cho",
        "Pa",
        "Ju",
        "Sha"
    ],
    abbreviated: [
        "Yak",
        "Dush",
        "Sesh",
        "Chor",
        "Pay",
        "Jum",
        "Shan"
    ],
    wide: [
        "Yakshanba",
        "Dushanba",
        "Seshanba",
        "Chorshanba",
        "Payshanba",
        "Juma",
        "Shanba"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "y.t",
        noon: "p.",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "yarim tun",
        noon: "peshin",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "yarim tun",
        noon: "peshin",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "a",
        pm: "p",
        midnight: "y.t",
        noon: "p.",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "yarim tun",
        noon: "peshin",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
    },
    wide: {
        am: "a.m.",
        pm: "p.m.",
        midnight: "yarim tun",
        noon: "peshin",
        morning: "ertalab",
        afternoon: "tushdan keyin",
        evening: "kechqurun",
        night: "tun"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"6c9fbbbd68cbf816":"fGq1u"}],"aRPvX":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("43fd53856e7d5ee5");
var _index2 = require("6f3ff366af3db4b6");
const matchOrdinalNumberPattern = /^(\d+)(chi)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(m\.a|m\.)/i,
    abbreviated: /^(m\.a\.?\s?m\.?)/i,
    wide: /^(miloddan avval|miloddan keyin)/i
};
const parseEraPatterns = {
    any: [
        /^b/i,
        /^(a|c)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^q[1234]/i,
    wide: /^[1234](chi)? chorak/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[yfmasond]/i,
    abbreviated: /^(yan|fev|mar|apr|may|iyun|iyul|avg|sen|okt|noy|dek)/i,
    wide: /^(yanvar|fevral|mart|aprel|may|iyun|iyul|avgust|sentabr|oktabr|noyabr|dekabr)/i
};
const parseMonthPatterns = {
    narrow: [
        /^y/i,
        /^f/i,
        /^m/i,
        /^a/i,
        /^m/i,
        /^i/i,
        /^i/i,
        /^a/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ],
    any: [
        /^ya/i,
        /^f/i,
        /^mar/i,
        /^ap/i,
        /^may/i,
        /^iyun/i,
        /^iyul/i,
        /^av/i,
        /^s/i,
        /^o/i,
        /^n/i,
        /^d/i
    ]
};
const matchDayPatterns = {
    narrow: /^[ydschj]/i,
    short: /^(ya|du|se|cho|pa|ju|sha)/i,
    abbreviated: /^(yak|dush|sesh|chor|pay|jum|shan)/i,
    wide: /^(yakshanba|dushanba|seshanba|chorshanba|payshanba|juma|shanba)/i
};
const parseDayPatterns = {
    narrow: [
        /^y/i,
        /^d/i,
        /^s/i,
        /^ch/i,
        /^p/i,
        /^j/i,
        /^sh/i
    ],
    any: [
        /^ya/i,
        /^d/i,
        /^se/i,
        /^ch/i,
        /^p/i,
        /^j/i,
        /^sh/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|y\.t|p| (ertalab|tushdan keyin|kechqurun|tun))/i,
    any: /^([ap]\.?\s?m\.?|yarim tun|peshin| (ertalab|tushdan keyin|kechqurun|tun))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^a/i,
        pm: /^p/i,
        midnight: /^y\.t/i,
        noon: /^pe/i,
        morning: /ertalab/i,
        afternoon: /tushdan keyin/i,
        evening: /kechqurun/i,
        night: /tun/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"43fd53856e7d5ee5":"15lWd","6f3ff366af3db4b6":"kWqg8"}],"n0TtW":[function(require,module,exports) {
"use strict";
exports.uzCyrl = void 0;
var _index = require("91c33382b0527706");
var _index2 = require("b69a88fcdae4bfad");
var _index3 = require("6c21b18056e6893a");
var _index4 = require("de0fa8b0194d6deb");
var _index5 = require("6c722c0f6a2a5a21");
/**
 * @category Locales
 * @summary Uzbek Cyrillic locale.
 * @language Uzbek
 * @iso-639-2 uzb
 * @author Kamronbek Shodmonov [@kamronbek28](https://github.com/kamronbek28)
 */ const uzCyrl = exports.uzCyrl = {
    code: "uz-Cyrl",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1
    }
};

},{"91c33382b0527706":"kBmU1","b69a88fcdae4bfad":"5HE1i","6c21b18056e6893a":"axLdj","de0fa8b0194d6deb":"cXjBJ","6c722c0f6a2a5a21":"d0UWF"}],"kBmU1":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "1 \u0441\u043E\u043D\u0438\u044F\u0434\u0430\u043D \u043A\u0430\u043C",
        other: "{{count}} \u0441\u043E\u043D\u0438\u044F\u0434\u0430\u043D \u043A\u0430\u043C"
    },
    xSeconds: {
        one: "1 \u0441\u043E\u043D\u0438\u044F",
        other: "{{count}} \u0441\u043E\u043D\u0438\u044F"
    },
    halfAMinute: "\u044F\u0440\u0438\u043C \u0434\u0430\u049B\u0438\u049B\u0430",
    lessThanXMinutes: {
        one: "1 \u0434\u0430\u049B\u0438\u049B\u0430\u0434\u0430\u043D \u043A\u0430\u043C",
        other: "{{count}} \u0434\u0430\u049B\u0438\u049B\u0430\u0434\u0430\u043D \u043A\u0430\u043C"
    },
    xMinutes: {
        one: "1 \u0434\u0430\u049B\u0438\u049B\u0430",
        other: "{{count}} \u0434\u0430\u049B\u0438\u049B\u0430"
    },
    aboutXHours: {
        one: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D 1 \u0441\u043E\u0430\u0442",
        other: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D {{count}} \u0441\u043E\u0430\u0442"
    },
    xHours: {
        one: "1 \u0441\u043E\u0430\u0442",
        other: "{{count}} \u0441\u043E\u0430\u0442"
    },
    xDays: {
        one: "1 \u043A\u0443\u043D",
        other: "{{count}} \u043A\u0443\u043D"
    },
    aboutXWeeks: {
        one: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D 1 \u0445\u0430\u0444\u0442\u0430",
        other: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D {{count}} \u0445\u0430\u0444\u0442\u0430"
    },
    xWeeks: {
        one: "1 \u0445\u0430\u0444\u0442\u0430",
        other: "{{count}} \u0445\u0430\u0444\u0442\u0430"
    },
    aboutXMonths: {
        one: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D 1 \u043E\u0439",
        other: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D {{count}} \u043E\u0439"
    },
    xMonths: {
        one: "1 \u043E\u0439",
        other: "{{count}} \u043E\u0439"
    },
    aboutXYears: {
        one: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D 1 \u0439\u0438\u043B",
        other: "\u0442\u0430\u0445\u043C\u0438\u043D\u0430\u043D {{count}} \u0439\u0438\u043B"
    },
    xYears: {
        one: "1 \u0439\u0438\u043B",
        other: "{{count}} \u0439\u0438\u043B"
    },
    overXYears: {
        one: "1 \u0439\u0438\u043B\u0434\u0430\u043D \u043A\u045E\u043F",
        other: "{{count}} \u0439\u0438\u043B\u0434\u0430\u043D \u043A\u045E\u043F"
    },
    almostXYears: {
        one: "\u0434\u0435\u044F\u0440\u043B\u0438 1 \u0439\u0438\u043B",
        other: "\u0434\u0435\u044F\u0440\u043B\u0438 {{count}} \u0439\u0438\u043B"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u0434\u0430\u043D \u043A\u0435\u0439\u0438\u043D";
        else return result + " \u043E\u043B\u0434\u0438\u043D";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"5HE1i":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("38e6672cc07066a7");
const dateFormats = {
    full: "EEEE, do MMMM, y",
    long: "do MMMM, y",
    medium: "d MMM, y",
    short: "dd/MM/yyyy"
};
const timeFormats = {
    full: "H:mm:ss zzzz",
    long: "H:mm:ss z",
    medium: "H:mm:ss",
    short: "H:mm"
};
const dateTimeFormats = {
    any: "{{date}}, {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "any"
    })
};

},{"38e6672cc07066a7":"6OYyu"}],"axLdj":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u045E\u0442\u0433\u0430\u043D' eeee p '\u0434\u0430'",
    yesterday: "'\u043A\u0435\u0447\u0430' p '\u0434\u0430'",
    today: "'\u0431\u0443\u0433\u0443\u043D' p '\u0434\u0430'",
    tomorrow: "'\u044D\u0440\u0442\u0430\u0433\u0430' p '\u0434\u0430'",
    nextWeek: "eeee p '\u0434\u0430'",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"cXjBJ":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("c95c67d25d7a1ac0");
const eraValues = {
    narrow: [
        "\u041C.\u0410",
        "\u041C"
    ],
    abbreviated: [
        "\u041C.\u0410",
        "\u041C"
    ],
    wide: [
        "\u041C\u0438\u043B\u043E\u0434\u0434\u0430\u043D \u0410\u0432\u0432\u0430\u043B\u0433\u0438",
        "\u041C\u0438\u043B\u043E\u0434\u0438\u0439"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "1-\u0447\u043E\u0440.",
        "2-\u0447\u043E\u0440.",
        "3-\u0447\u043E\u0440.",
        "4-\u0447\u043E\u0440."
    ],
    wide: [
        "1-\u0447\u043E\u0440\u0430\u043A",
        "2-\u0447\u043E\u0440\u0430\u043A",
        "3-\u0447\u043E\u0440\u0430\u043A",
        "4-\u0447\u043E\u0440\u0430\u043A"
    ]
};
const monthValues = {
    narrow: [
        "\u042F",
        "\u0424",
        "\u041C",
        "\u0410",
        "\u041C",
        "\u0418",
        "\u0418",
        "\u0410",
        "\u0421",
        "\u041E",
        "\u041D",
        "\u0414"
    ],
    abbreviated: [
        "\u044F\u043D\u0432",
        "\u0444\u0435\u0432",
        "\u043C\u0430\u0440",
        "\u0430\u043F\u0440",
        "\u043C\u0430\u0439",
        "\u0438\u044E\u043D",
        "\u0438\u044E\u043B",
        "\u0430\u0432\u0433",
        "\u0441\u0435\u043D",
        "\u043E\u043A\u0442",
        "\u043D\u043E\u044F",
        "\u0434\u0435\u043A"
    ],
    wide: [
        "\u044F\u043D\u0432\u0430\u0440",
        "\u0444\u0435\u0432\u0440\u0430\u043B",
        "\u043C\u0430\u0440\u0442",
        "\u0430\u043F\u0440\u0435\u043B",
        "\u043C\u0430\u0439",
        "\u0438\u044E\u043D",
        "\u0438\u044E\u043B",
        "\u0430\u0432\u0433\u0443\u0441\u0442",
        "\u0441\u0435\u043D\u0442\u0430\u0431\u0440",
        "\u043E\u043A\u0442\u0430\u0431\u0440",
        "\u043D\u043E\u044F\u0431\u0440",
        "\u0434\u0435\u043A\u0430\u0431\u0440"
    ]
};
const dayValues = {
    narrow: [
        "\u042F",
        "\u0414",
        "\u0421",
        "\u0427",
        "\u041F",
        "\u0416",
        "\u0428"
    ],
    short: [
        "\u044F\u043A",
        "\u0434\u0443",
        "\u0441\u0435",
        "\u0447\u043E",
        "\u043F\u0430",
        "\u0436\u0443",
        "\u0448\u0430"
    ],
    abbreviated: [
        "\u044F\u043A\u0448",
        "\u0434\u0443\u0448",
        "\u0441\u0435\u0448",
        "\u0447\u043E\u0440",
        "\u043F\u0430\u0439",
        "\u0436\u0443\u043C",
        "\u0448\u0430\u043D"
    ],
    wide: [
        "\u044F\u043A\u0448\u0430\u043D\u0431\u0430",
        "\u0434\u0443\u0448\u0430\u043D\u0431\u0430",
        "\u0441\u0435\u0448\u0430\u043D\u0431\u0430",
        "\u0447\u043E\u0440\u0448\u0430\u043D\u0431\u0430",
        "\u043F\u0430\u0439\u0448\u0430\u043D\u0431\u0430",
        "\u0436\u0443\u043C\u0430",
        "\u0448\u0430\u043D\u0431\u0430"
    ]
};
const dayPeriodValues = {
    any: {
        am: "\u041F.\u041E.",
        pm: "\u041F.\u041A.",
        midnight: "\u044F\u0440\u0438\u043C \u0442\u0443\u043D",
        noon: "\u043F\u0435\u0448\u0438\u043D",
        morning: "\u044D\u0440\u0442\u0430\u043B\u0430\u0431",
        afternoon: "\u043F\u0435\u0448\u0438\u043D\u0434\u0430\u043D \u043A\u0435\u0439\u0438\u043D",
        evening: "\u043A\u0435\u0447\u0430\u0441\u0438",
        night: "\u0442\u0443\u043D"
    }
};
const formattingDayPeriodValues = {
    any: {
        am: "\u041F.\u041E.",
        pm: "\u041F.\u041A.",
        midnight: "\u044F\u0440\u0438\u043C \u0442\u0443\u043D",
        noon: "\u043F\u0435\u0448\u0438\u043D",
        morning: "\u044D\u0440\u0442\u0430\u043B\u0430\u0431",
        afternoon: "\u043F\u0435\u0448\u0438\u043D\u0434\u0430\u043D \u043A\u0435\u0439\u0438\u043D",
        evening: "\u043A\u0435\u0447\u0430\u0441\u0438",
        night: "\u0442\u0443\u043D"
    }
};
const ordinalNumber = (dirtyNumber, _options)=>{
    return String(dirtyNumber);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "any",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "any"
    })
};

},{"c95c67d25d7a1ac0":"fGq1u"}],"d0UWF":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("2c8c50c0c65d2e56");
var _index2 = require("4e0baa49bd08d250");
const matchOrdinalNumberPattern = /^(\d+)(чи)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(м\.а|м\.)/i,
    abbreviated: /^(м\.а|м\.)/i,
    wide: /^(милоддан аввал|милоддан кейин)/i
};
const parseEraPatterns = {
    any: [
        /^м/i,
        /^а/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^[1234]-чор./i,
    wide: /^[1234]-чорак/i
};
const parseQuarterPatterns = {
    any: [
        /1/i,
        /2/i,
        /3/i,
        /4/i
    ]
};
const matchMonthPatterns = {
    narrow: /^[яфмамииасонд]/i,
    abbreviated: /^(янв|фев|мар|апр|май|июн|июл|авг|сен|окт|ноя|дек)/i,
    wide: /^(январ|феврал|март|апрел|май|июн|июл|август|сентабр|октабр|ноябр|декабр)/i
};
const parseMonthPatterns = {
    narrow: [
        /^я/i,
        /^ф/i,
        /^м/i,
        /^а/i,
        /^м/i,
        /^и/i,
        /^и/i,
        /^а/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^д/i
    ],
    any: [
        /^я/i,
        /^ф/i,
        /^мар/i,
        /^ап/i,
        /^май/i,
        /^июн/i,
        /^июл/i,
        /^ав/i,
        /^с/i,
        /^о/i,
        /^н/i,
        /^д/i
    ]
};
const matchDayPatterns = {
    narrow: /^[ядсчпжш]/i,
    short: /^(як|ду|се|чо|па|жу|ша)/i,
    abbreviated: /^(якш|душ|сеш|чор|пай|жум|шан)/i,
    wide: /^(якшанба|душанба|сешанба|чоршанба|пайшанба|жума|шанба)/i
};
const parseDayPatterns = {
    narrow: [
        /^я/i,
        /^д/i,
        /^с/i,
        /^ч/i,
        /^п/i,
        /^ж/i,
        /^ш/i
    ],
    any: [
        /^як/i,
        /^ду/i,
        /^се/i,
        /^чор/i,
        /^пай/i,
        /^жу/i,
        /^шан/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(п\.о\.|п\.к\.|ярим тун|пешиндан кейин|(эрталаб|пешиндан кейин|кечаси|тун))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^п\.о\./i,
        pm: /^п\.к\./i,
        midnight: /^ярим тун/i,
        noon: /^пешиндан кейин/i,
        morning: /эрталаб/i,
        afternoon: /пешиндан кейин/i,
        evening: /кечаси/i,
        night: /тун/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"2c8c50c0c65d2e56":"15lWd","4e0baa49bd08d250":"kWqg8"}],"kWnBp":[function(require,module,exports) {
"use strict";
exports.vi = void 0;
var _index = require("1a1226be42358f8c");
var _index2 = require("88b9e401436fcbd");
var _index3 = require("d8e4998c4fec5d80");
var _index4 = require("3e2a959a8f526e42");
var _index5 = require("172848afe72911fa");
/**
 * @category Locales
 * @summary Vietnamese locale (Vietnam).
 * @language Vietnamese
 * @iso-639-2 vie
 * @author Thanh Tran [@trongthanh](https://github.com/trongthanh)
 * @author Leroy Hopson [@lihop](https://github.com/lihop)
 */ const vi = exports.vi = {
    code: "vi",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 1 /* First week of new year contains Jan 1st  */ 
    }
};

},{"1a1226be42358f8c":"7pUq4","88b9e401436fcbd":"69jMV","d8e4998c4fec5d80":"i1ZpI","3e2a959a8f526e42":"amwc0","172848afe72911fa":"hat5o"}],"7pUq4":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "d\u01B0\u1EDBi 1 gi\xe2y",
        other: "d\u01B0\u1EDBi {{count}} gi\xe2y"
    },
    xSeconds: {
        one: "1 gi\xe2y",
        other: "{{count}} gi\xe2y"
    },
    halfAMinute: "n\u1EEDa ph\xfat",
    lessThanXMinutes: {
        one: "d\u01B0\u1EDBi 1 ph\xfat",
        other: "d\u01B0\u1EDBi {{count}} ph\xfat"
    },
    xMinutes: {
        one: "1 ph\xfat",
        other: "{{count}} ph\xfat"
    },
    aboutXHours: {
        one: "kho\u1EA3ng 1 gi\u1EDD",
        other: "kho\u1EA3ng {{count}} gi\u1EDD"
    },
    xHours: {
        one: "1 gi\u1EDD",
        other: "{{count}} gi\u1EDD"
    },
    xDays: {
        one: "1 ng\xe0y",
        other: "{{count}} ng\xe0y"
    },
    aboutXWeeks: {
        one: "kho\u1EA3ng 1 tu\u1EA7n",
        other: "kho\u1EA3ng {{count}} tu\u1EA7n"
    },
    xWeeks: {
        one: "1 tu\u1EA7n",
        other: "{{count}} tu\u1EA7n"
    },
    aboutXMonths: {
        one: "kho\u1EA3ng 1 th\xe1ng",
        other: "kho\u1EA3ng {{count}} th\xe1ng"
    },
    xMonths: {
        one: "1 th\xe1ng",
        other: "{{count}} th\xe1ng"
    },
    aboutXYears: {
        one: "kho\u1EA3ng 1 n\u0103m",
        other: "kho\u1EA3ng {{count}} n\u0103m"
    },
    xYears: {
        one: "1 n\u0103m",
        other: "{{count}} n\u0103m"
    },
    overXYears: {
        one: "h\u01A1n 1 n\u0103m",
        other: "h\u01A1n {{count}} n\u0103m"
    },
    almostXYears: {
        one: "g\u1EA7n 1 n\u0103m",
        other: "g\u1EA7n {{count}} n\u0103m"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + " n\u1EEFa";
        else return result + " tr\u01B0\u1EDBc";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"69jMV":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("512911ecb527492e");
const dateFormats = {
    // thứ Sáu, ngày 25 tháng 08 năm 2017
    full: "EEEE, 'ng\xe0y' d MMMM 'n\u0103m' y",
    // ngày 25 tháng 08 năm 2017
    long: "'ng\xe0y' d MMMM 'n\u0103m' y",
    // 25 thg 08 năm 2017
    medium: "d MMM 'n\u0103m' y",
    // 25/08/2017
    short: "dd/MM/y"
};
const timeFormats = {
    full: "HH:mm:ss zzzz",
    long: "HH:mm:ss z",
    medium: "HH:mm:ss",
    short: "HH:mm"
};
const dateTimeFormats = {
    // thứ Sáu, ngày 25 tháng 08 năm 2017 23:25:59
    full: "{{date}} {{time}}",
    // ngày 25 tháng 08 năm 2017 23:25
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"512911ecb527492e":"6OYyu"}],"i1ZpI":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "eeee 'tu\u1EA7n tr\u01B0\u1EDBc v\xe0o l\xfac' p",
    yesterday: "'h\xf4m qua v\xe0o l\xfac' p",
    today: "'h\xf4m nay v\xe0o l\xfac' p",
    tomorrow: "'ng\xe0y mai v\xe0o l\xfac' p",
    nextWeek: "eeee 't\u1EDBi v\xe0o l\xfac' p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"amwc0":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("22a203746214b35b");
// Vietnamese locale reference: http://www.localeplanet.com/icu/vi-VN/index.html
// Capitalization reference: http://hcmup.edu.vn/index.php?option=com_content&view=article&id=4106%3Avit-hoa-trong-vn-bn-hanh-chinh&catid=2345%3Atham-kho&Itemid=4103&lang=vi&site=134
const eraValues = {
    narrow: [
        "TCN",
        "SCN"
    ],
    abbreviated: [
        "tr\u01B0\u1EDBc CN",
        "sau CN"
    ],
    wide: [
        "tr\u01B0\u1EDBc C\xf4ng Nguy\xean",
        "sau C\xf4ng Nguy\xean"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    wide: [
        "Qu\xfd 1",
        "Qu\xfd 2",
        "Qu\xfd 3",
        "Qu\xfd 4"
    ]
};
const formattingQuarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "Q1",
        "Q2",
        "Q3",
        "Q4"
    ],
    // I notice many news outlet use this "quý II/2018"
    wide: [
        "qu\xfd I",
        "qu\xfd II",
        "qu\xfd III",
        "qu\xfd IV"
    ]
};
// Note: in English, the names of days of the week and months are capitalized.
// If you are making a new locale based on this one, check if the same is true for the language you're working on.
// Generally, formatted dates should look like they are in the middle of a sentence,
// e.g. in Spanish language the weekdays and months should be in the lowercase.
const monthValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4",
        "5",
        "6",
        "7",
        "8",
        "9",
        "10",
        "11",
        "12"
    ],
    abbreviated: [
        "Thg 1",
        "Thg 2",
        "Thg 3",
        "Thg 4",
        "Thg 5",
        "Thg 6",
        "Thg 7",
        "Thg 8",
        "Thg 9",
        "Thg 10",
        "Thg 11",
        "Thg 12"
    ],
    wide: [
        "Th\xe1ng M\u1ED9t",
        "Th\xe1ng Hai",
        "Th\xe1ng Ba",
        "Th\xe1ng T\u01B0",
        "Th\xe1ng N\u0103m",
        "Th\xe1ng S\xe1u",
        "Th\xe1ng B\u1EA3y",
        "Th\xe1ng T\xe1m",
        "Th\xe1ng Ch\xedn",
        "Th\xe1ng M\u01B0\u1EDDi",
        "Th\xe1ng M\u01B0\u1EDDi M\u1ED9t",
        "Th\xe1ng M\u01B0\u1EDDi Hai"
    ]
};
// In Vietnamese date formatting, month number less than 10 expected to have leading zero
const formattingMonthValues = {
    narrow: [
        "01",
        "02",
        "03",
        "04",
        "05",
        "06",
        "07",
        "08",
        "09",
        "10",
        "11",
        "12"
    ],
    abbreviated: [
        "thg 1",
        "thg 2",
        "thg 3",
        "thg 4",
        "thg 5",
        "thg 6",
        "thg 7",
        "thg 8",
        "thg 9",
        "thg 10",
        "thg 11",
        "thg 12"
    ],
    wide: [
        "th\xe1ng 01",
        "th\xe1ng 02",
        "th\xe1ng 03",
        "th\xe1ng 04",
        "th\xe1ng 05",
        "th\xe1ng 06",
        "th\xe1ng 07",
        "th\xe1ng 08",
        "th\xe1ng 09",
        "th\xe1ng 10",
        "th\xe1ng 11",
        "th\xe1ng 12"
    ]
};
const dayValues = {
    narrow: [
        "CN",
        "T2",
        "T3",
        "T4",
        "T5",
        "T6",
        "T7"
    ],
    short: [
        "CN",
        "Th 2",
        "Th 3",
        "Th 4",
        "Th 5",
        "Th 6",
        "Th 7"
    ],
    abbreviated: [
        "CN",
        "Th\u1EE9 2",
        "Th\u1EE9 3",
        "Th\u1EE9 4",
        "Th\u1EE9 5",
        "Th\u1EE9 6",
        "Th\u1EE9 7"
    ],
    wide: [
        "Ch\u1EE7 Nh\u1EADt",
        "Th\u1EE9 Hai",
        "Th\u1EE9 Ba",
        "Th\u1EE9 T\u01B0",
        "Th\u1EE9 N\u0103m",
        "Th\u1EE9 S\xe1u",
        "Th\u1EE9 B\u1EA3y"
    ]
};
// Vietnamese are used to AM/PM borrowing from English, hence `narrow` and
// `abbreviated` are just like English but I'm leaving the `wide`
// format being localized with abbreviations found in some systems (SÁng / CHiều);
// however, personally, I don't think `Chiều` sounds appropriate for `PM`
const dayPeriodValues = {
    // narrow date period is extremely rare in Vietnamese
    // I used abbreviated form for noon, morning and afternoon
    // which are regconizable by Vietnamese, others cannot be any shorter
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "n\u1EEDa \u0111\xeam",
        noon: "tr",
        morning: "sg",
        afternoon: "ch",
        evening: "t\u1ED1i",
        night: "\u0111\xeam"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "n\u1EEDa \u0111\xeam",
        noon: "tr\u01B0a",
        morning: "s\xe1ng",
        afternoon: "chi\u1EC1u",
        evening: "t\u1ED1i",
        night: "\u0111\xeam"
    },
    wide: {
        am: "SA",
        pm: "CH",
        midnight: "n\u1EEDa \u0111\xeam",
        noon: "tr\u01B0a",
        morning: "s\xe1ng",
        afternoon: "chi\u1EC1u",
        evening: "t\u1ED1i",
        night: "\u0111\xeam"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "am",
        pm: "pm",
        midnight: "n\u1EEDa \u0111\xeam",
        noon: "tr",
        morning: "sg",
        afternoon: "ch",
        evening: "t\u1ED1i",
        night: "\u0111\xeam"
    },
    abbreviated: {
        am: "AM",
        pm: "PM",
        midnight: "n\u1EEDa \u0111\xeam",
        noon: "tr\u01B0a",
        morning: "s\xe1ng",
        afternoon: "chi\u1EC1u",
        evening: "t\u1ED1i",
        night: "\u0111\xeam"
    },
    wide: {
        am: "SA",
        pm: "CH",
        midnight: "n\u1EEDa \u0111\xeam",
        noon: "gi\u1EEFa tr\u01B0a",
        morning: "v\xe0o bu\u1ED5i s\xe1ng",
        afternoon: "v\xe0o bu\u1ED5i chi\u1EC1u",
        evening: "v\xe0o bu\u1ED5i t\u1ED1i",
        night: "v\xe0o ban \u0111\xeam"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    const unit = options?.unit;
    if (unit === "quarter") // many news outlets use "quý I"...
    switch(number){
        case 1:
            return "I";
        case 2:
            return "II";
        case 3:
            return "III";
        case 4:
            return "IV";
    }
    else if (unit === "day") // day of week in Vietnamese has ordinal number meaning,
    // so we should use them, else it'll sound weird
    switch(number){
        case 1:
            return "th\u1EE9 2"; // meaning 2nd day but it's the first day of the week :D
        case 2:
            return "th\u1EE9 3"; // meaning 3rd day
        case 3:
            return "th\u1EE9 4"; // meaning 4th day and so on
        case 4:
            return "th\u1EE9 5";
        case 5:
            return "th\u1EE9 6";
        case 6:
            return "th\u1EE9 7";
        case 7:
            return "ch\u1EE7 nh\u1EADt"; // meaning Sunday, there's no 8th day :D
    }
    else if (unit === "week") {
        if (number === 1) return "th\u1EE9 nh\u1EA5t";
        else return "th\u1EE9 " + number;
    } else if (unit === "dayOfYear") {
        if (number === 1) return "\u0111\u1EA7u ti\xean";
        else return "th\u1EE9 " + number;
    }
    // there are no different forms of ordinal numbers in Vietnamese
    return String(number);
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        formattingValues: formattingQuarterValues,
        defaultFormattingWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide",
        formattingValues: formattingMonthValues,
        defaultFormattingWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"22a203746214b35b":"fGq1u"}],"hat5o":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("c1bed90a310a22ab");
var _index2 = require("e0d8117d44aee674");
const matchOrdinalNumberPattern = /^(\d+)/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(tcn|scn)/i,
    abbreviated: /^(trước CN|sau CN)/i,
    wide: /^(trước Công Nguyên|sau Công Nguyên)/i
};
const parseEraPatterns = {
    any: [
        /^t/i,
        /^s/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^([1234]|i{1,3}v?)/i,
    abbreviated: /^q([1234]|i{1,3}v?)/i,
    wide: /^quý ([1234]|i{1,3}v?)/i
};
const parseQuarterPatterns = {
    any: [
        /(1|i)$/i,
        /(2|ii)$/i,
        /(3|iii)$/i,
        /(4|iv)$/i
    ]
};
const matchMonthPatterns = {
    // month number may contain leading 0, 'thg' prefix may have space, underscore or empty before number
    // note the order of '1' since it is a sub-string of '10', so must be lower priority
    narrow: /^(0?[2-9]|10|11|12|0?1)/i,
    // note the order of 'thg 1' since it is sub-string of 'thg 10', so must be lower priority
    abbreviated: /^thg[ _]?(0?[1-9](?!\d)|10|11|12)/i,
    // note the order of 'Mười' since it is sub-string of Mười Một, so must be lower priority
    wide: /^tháng ?(Một|Hai|Ba|Tư|Năm|Sáu|Bảy|Tám|Chín|Mười|Mười ?Một|Mười ?Hai|0?[1-9](?!\d)|10|11|12)/i
};
const parseMonthPatterns = {
    narrow: [
        /0?1$/i,
        /0?2/i,
        /3/,
        /4/,
        /5/,
        /6/,
        /7/,
        /8/,
        /9/,
        /10/,
        /11/,
        /12/
    ],
    abbreviated: [
        /^thg[ _]?0?1(?!\d)/i,
        /^thg[ _]?0?2/i,
        /^thg[ _]?0?3/i,
        /^thg[ _]?0?4/i,
        /^thg[ _]?0?5/i,
        /^thg[ _]?0?6/i,
        /^thg[ _]?0?7/i,
        /^thg[ _]?0?8/i,
        /^thg[ _]?0?9/i,
        /^thg[ _]?10/i,
        /^thg[ _]?11/i,
        /^thg[ _]?12/i
    ],
    wide: [
        /^tháng ?(Một|0?1(?!\d))/i,
        /^tháng ?(Hai|0?2)/i,
        /^tháng ?(Ba|0?3)/i,
        /^tháng ?(Tư|0?4)/i,
        /^tháng ?(Năm|0?5)/i,
        /^tháng ?(Sáu|0?6)/i,
        /^tháng ?(Bảy|0?7)/i,
        /^tháng ?(Tám|0?8)/i,
        /^tháng ?(Chín|0?9)/i,
        /^tháng ?(Mười|10)/i,
        /^tháng ?(Mười ?Một|11)/i,
        /^tháng ?(Mười ?Hai|12)/i
    ]
};
const matchDayPatterns = {
    narrow: /^(CN|T2|T3|T4|T5|T6|T7)/i,
    short: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
    abbreviated: /^(CN|Th ?2|Th ?3|Th ?4|Th ?5|Th ?6|Th ?7)/i,
    wide: /^(Chủ ?Nhật|Chúa ?Nhật|thứ ?Hai|thứ ?Ba|thứ ?Tư|thứ ?Năm|thứ ?Sáu|thứ ?Bảy)/i
};
const parseDayPatterns = {
    narrow: [
        /CN/i,
        /2/i,
        /3/i,
        /4/i,
        /5/i,
        /6/i,
        /7/i
    ],
    short: [
        /CN/i,
        /2/i,
        /3/i,
        /4/i,
        /5/i,
        /6/i,
        /7/i
    ],
    abbreviated: [
        /CN/i,
        /2/i,
        /3/i,
        /4/i,
        /5/i,
        /6/i,
        /7/i
    ],
    wide: [
        /(Chủ|Chúa) ?Nhật/i,
        /Hai/i,
        /Ba/i,
        /Tư/i,
        /Năm/i,
        /Sáu/i,
        /Bảy/i
    ]
};
const matchDayPeriodPatterns = {
    narrow: /^(a|p|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
    abbreviated: /^(am|pm|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i,
    wide: /^(ch[^i]*|sa|nửa đêm|trưa|(giờ) (sáng|chiều|tối|đêm))/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^(a|sa)/i,
        pm: /^(p|ch[^i]*)/i,
        midnight: /nửa đêm/i,
        noon: /trưa/i,
        morning: /sáng/i,
        afternoon: /chiều/i,
        evening: /tối/i,
        night: /^đêm/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "wide"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "wide"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"c1bed90a310a22ab":"15lWd","e0d8117d44aee674":"kWqg8"}],"cJsC6":[function(require,module,exports) {
"use strict";
exports.zhCN = void 0;
var _index = require("d5fd0cd92ac5b94d");
var _index2 = require("71c382317fe463a5");
var _index3 = require("fcb487c58afcc424");
var _index4 = require("839b849f9afb2002");
var _index5 = require("e267428ebc549658");
/**
 * @category Locales
 * @summary Chinese Simplified locale.
 * @language Chinese Simplified
 * @iso-639-2 zho
 * @author Changyu Geng [@KingMario](https://github.com/KingMario)
 * @author Song Shuoyun [@fnlctrl](https://github.com/fnlctrl)
 * @author sabrinaM [@sabrinamiao](https://github.com/sabrinamiao)
 * @author Carney Wu [@cubicwork](https://github.com/cubicwork)
 * @author Terrence Lam [@skyuplam](https://github.com/skyuplam)
 */ const zhCN = exports.zhCN = {
    code: "zh-CN",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"d5fd0cd92ac5b94d":"ki5sG","71c382317fe463a5":"kEaSA","fcb487c58afcc424":"glzTC","839b849f9afb2002":"5JEdw","e267428ebc549658":"2EY2e"}],"ki5sG":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u4E0D\u5230 1 \u79D2",
        other: "\u4E0D\u5230 {{count}} \u79D2"
    },
    xSeconds: {
        one: "1 \u79D2",
        other: "{{count}} \u79D2"
    },
    halfAMinute: "\u534A\u5206\u949F",
    lessThanXMinutes: {
        one: "\u4E0D\u5230 1 \u5206\u949F",
        other: "\u4E0D\u5230 {{count}} \u5206\u949F"
    },
    xMinutes: {
        one: "1 \u5206\u949F",
        other: "{{count}} \u5206\u949F"
    },
    xHours: {
        one: "1 \u5C0F\u65F6",
        other: "{{count}} \u5C0F\u65F6"
    },
    aboutXHours: {
        one: "\u5927\u7EA6 1 \u5C0F\u65F6",
        other: "\u5927\u7EA6 {{count}} \u5C0F\u65F6"
    },
    xDays: {
        one: "1 \u5929",
        other: "{{count}} \u5929"
    },
    aboutXWeeks: {
        one: "\u5927\u7EA6 1 \u4E2A\u661F\u671F",
        other: "\u5927\u7EA6 {{count}} \u4E2A\u661F\u671F"
    },
    xWeeks: {
        one: "1 \u4E2A\u661F\u671F",
        other: "{{count}} \u4E2A\u661F\u671F"
    },
    aboutXMonths: {
        one: "\u5927\u7EA6 1 \u4E2A\u6708",
        other: "\u5927\u7EA6 {{count}} \u4E2A\u6708"
    },
    xMonths: {
        one: "1 \u4E2A\u6708",
        other: "{{count}} \u4E2A\u6708"
    },
    aboutXYears: {
        one: "\u5927\u7EA6 1 \u5E74",
        other: "\u5927\u7EA6 {{count}} \u5E74"
    },
    xYears: {
        one: "1 \u5E74",
        other: "{{count}} \u5E74"
    },
    overXYears: {
        one: "\u8D85\u8FC7 1 \u5E74",
        other: "\u8D85\u8FC7 {{count}} \u5E74"
    },
    almostXYears: {
        one: "\u5C06\u8FD1 1 \u5E74",
        other: "\u5C06\u8FD1 {{count}} \u5E74"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u5185";
        else return result + "\u524D";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"kEaSA":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("82811b4f43da950d");
const dateFormats = {
    full: "y'\u5E74'M'\u6708'd'\u65E5' EEEE",
    long: "y'\u5E74'M'\u6708'd'\u65E5'",
    medium: "yyyy-MM-dd",
    short: "yy-MM-dd"
};
const timeFormats = {
    full: "zzzz a h:mm:ss",
    long: "z a h:mm:ss",
    medium: "a h:mm:ss",
    short: "a h:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"82811b4f43da950d":"6OYyu"}],"glzTC":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
var _index = require("328b4c93e30999ed");
function checkWeek(date, baseDate, options) {
    const baseFormat = "eeee p";
    if ((0, _index.isSameWeek)(date, baseDate, options)) return baseFormat; // in same week
    else if (date.getTime() > baseDate.getTime()) return "'\u4E0B\u4E2A'" + baseFormat; // in next week
    return "'\u4E0A\u4E2A'" + baseFormat; // in last week
}
const formatRelativeLocale = {
    lastWeek: checkWeek,
    yesterday: "'\u6628\u5929' p",
    today: "'\u4ECA\u5929' p",
    tomorrow: "'\u660E\u5929' p",
    nextWeek: checkWeek,
    other: "PP p"
};
const formatRelative = (token, date, baseDate, options)=>{
    const format = formatRelativeLocale[token];
    if (typeof format === "function") return format(date, baseDate, options);
    return format;
};
exports.formatRelative = formatRelative;

},{"328b4c93e30999ed":"16SmB"}],"5JEdw":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("21fa1b5e65208a93");
const eraValues = {
    narrow: [
        "\u524D",
        "\u516C\u5143"
    ],
    abbreviated: [
        "\u524D",
        "\u516C\u5143"
    ],
    wide: [
        "\u516C\u5143\u524D",
        "\u516C\u5143"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u7B2C\u4E00\u5B63",
        "\u7B2C\u4E8C\u5B63",
        "\u7B2C\u4E09\u5B63",
        "\u7B2C\u56DB\u5B63"
    ],
    wide: [
        "\u7B2C\u4E00\u5B63\u5EA6",
        "\u7B2C\u4E8C\u5B63\u5EA6",
        "\u7B2C\u4E09\u5B63\u5EA6",
        "\u7B2C\u56DB\u5B63\u5EA6"
    ]
};
const monthValues = {
    narrow: [
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D",
        "\u4E03",
        "\u516B",
        "\u4E5D",
        "\u5341",
        "\u5341\u4E00",
        "\u5341\u4E8C"
    ],
    abbreviated: [
        "1\u6708",
        "2\u6708",
        "3\u6708",
        "4\u6708",
        "5\u6708",
        "6\u6708",
        "7\u6708",
        "8\u6708",
        "9\u6708",
        "10\u6708",
        "11\u6708",
        "12\u6708"
    ],
    wide: [
        "\u4E00\u6708",
        "\u4E8C\u6708",
        "\u4E09\u6708",
        "\u56DB\u6708",
        "\u4E94\u6708",
        "\u516D\u6708",
        "\u4E03\u6708",
        "\u516B\u6708",
        "\u4E5D\u6708",
        "\u5341\u6708",
        "\u5341\u4E00\u6708",
        "\u5341\u4E8C\u6708"
    ]
};
const dayValues = {
    narrow: [
        "\u65E5",
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D"
    ],
    short: [
        "\u65E5",
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D"
    ],
    abbreviated: [
        "\u5468\u65E5",
        "\u5468\u4E00",
        "\u5468\u4E8C",
        "\u5468\u4E09",
        "\u5468\u56DB",
        "\u5468\u4E94",
        "\u5468\u516D"
    ],
    wide: [
        "\u661F\u671F\u65E5",
        "\u661F\u671F\u4E00",
        "\u661F\u671F\u4E8C",
        "\u661F\u671F\u4E09",
        "\u661F\u671F\u56DB",
        "\u661F\u671F\u4E94",
        "\u661F\u671F\u516D"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u4E0A",
        pm: "\u4E0B",
        midnight: "\u51CC\u6668",
        noon: "\u5348",
        morning: "\u65E9",
        afternoon: "\u4E0B\u5348",
        evening: "\u665A",
        night: "\u591C"
    },
    abbreviated: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u51CC\u6668",
        noon: "\u4E2D\u5348",
        morning: "\u65E9\u6668",
        afternoon: "\u4E2D\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u95F4"
    },
    wide: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u51CC\u6668",
        noon: "\u4E2D\u5348",
        morning: "\u65E9\u6668",
        afternoon: "\u4E2D\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u95F4"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u4E0A",
        pm: "\u4E0B",
        midnight: "\u51CC\u6668",
        noon: "\u5348",
        morning: "\u65E9",
        afternoon: "\u4E0B\u5348",
        evening: "\u665A",
        night: "\u591C"
    },
    abbreviated: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u51CC\u6668",
        noon: "\u4E2D\u5348",
        morning: "\u65E9\u6668",
        afternoon: "\u4E2D\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u95F4"
    },
    wide: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u51CC\u6668",
        noon: "\u4E2D\u5348",
        morning: "\u65E9\u6668",
        afternoon: "\u4E2D\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u95F4"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    switch(options?.unit){
        case "date":
            return number.toString() + "\u65E5";
        case "hour":
            return number.toString() + "\u65F6";
        case "minute":
            return number.toString() + "\u5206";
        case "second":
            return number.toString() + "\u79D2";
        default:
            return "\u7B2C " + number.toString();
    }
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"21fa1b5e65208a93":"fGq1u"}],"2EY2e":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("cf8290128f3a4fc4");
var _index2 = require("f37e0938bc291107");
const matchOrdinalNumberPattern = /^(第\s*)?\d+(日|时|分|秒)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(前)/i,
    abbreviated: /^(前)/i,
    wide: /^(公元前|公元)/i
};
const parseEraPatterns = {
    any: [
        /^(前)/i,
        /^(公元)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^第[一二三四]刻/i,
    wide: /^第[一二三四]刻钟/i
};
const parseQuarterPatterns = {
    any: [
        /(1|一)/i,
        /(2|二)/i,
        /(3|三)/i,
        /(4|四)/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
    abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
    wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
const parseMonthPatterns = {
    narrow: [
        /^一/i,
        /^二/i,
        /^三/i,
        /^四/i,
        /^五/i,
        /^六/i,
        /^七/i,
        /^八/i,
        /^九/i,
        /^十(?!(一|二))/i,
        /^十一/i,
        /^十二/i
    ],
    any: [
        /^一|1/i,
        /^二|2/i,
        /^三|3/i,
        /^四|4/i,
        /^五|5/i,
        /^六|6/i,
        /^七|7/i,
        /^八|8/i,
        /^九|9/i,
        /^十(?!(一|二))|10/i,
        /^十一|11/i,
        /^十二|12/i
    ]
};
const matchDayPatterns = {
    narrow: /^[一二三四五六日]/i,
    short: /^[一二三四五六日]/i,
    abbreviated: /^周[一二三四五六日]/i,
    wide: /^星期[一二三四五六日]/i
};
const parseDayPatterns = {
    any: [
        /日/i,
        /一/i,
        /二/i,
        /三/i,
        /四/i,
        /五/i,
        /六/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨|)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^上午?/i,
        pm: /^下午?/i,
        midnight: /^午夜/i,
        noon: /^[中正]午/i,
        morning: /^早上/i,
        afternoon: /^下午/i,
        evening: /^晚上?/i,
        night: /^凌晨/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"cf8290128f3a4fc4":"15lWd","f37e0938bc291107":"kWqg8"}],"fQfBM":[function(require,module,exports) {
"use strict";
exports.zhHK = void 0;
var _index = require("e0ea860d18ccc058");
var _index2 = require("ed57842b07d26214");
var _index3 = require("ceff682b25cd0209");
var _index4 = require("f0ee8477afdc7f0e");
var _index5 = require("29e4caa221527f02");
/**
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author Gary Ip [@gaplo](https://github.com/gaplo)
 */ const zhHK = exports.zhHK = {
    code: "zh-HK",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 0 /* Sunday */ ,
        firstWeekContainsDate: 1
    }
};

},{"e0ea860d18ccc058":"2OW84","ed57842b07d26214":"39tq3","ceff682b25cd0209":"3GxQS","f0ee8477afdc7f0e":"5ICCN","29e4caa221527f02":"1OZPZ"}],"2OW84":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u5C11\u65BC 1 \u79D2",
        other: "\u5C11\u65BC {{count}} \u79D2"
    },
    xSeconds: {
        one: "1 \u79D2",
        other: "{{count}} \u79D2"
    },
    halfAMinute: "\u534A\u5206\u9418",
    lessThanXMinutes: {
        one: "\u5C11\u65BC 1 \u5206\u9418",
        other: "\u5C11\u65BC {{count}} \u5206\u9418"
    },
    xMinutes: {
        one: "1 \u5206\u9418",
        other: "{{count}} \u5206\u9418"
    },
    xHours: {
        one: "1 \u5C0F\u6642",
        other: "{{count}} \u5C0F\u6642"
    },
    aboutXHours: {
        one: "\u5927\u7D04 1 \u5C0F\u6642",
        other: "\u5927\u7D04 {{count}} \u5C0F\u6642"
    },
    xDays: {
        one: "1 \u5929",
        other: "{{count}} \u5929"
    },
    aboutXWeeks: {
        one: "\u5927\u7D04 1 \u500B\u661F\u671F",
        other: "\u5927\u7D04 {{count}} \u500B\u661F\u671F"
    },
    xWeeks: {
        one: "1 \u500B\u661F\u671F",
        other: "{{count}} \u500B\u661F\u671F"
    },
    aboutXMonths: {
        one: "\u5927\u7D04 1 \u500B\u6708",
        other: "\u5927\u7D04 {{count}} \u500B\u6708"
    },
    xMonths: {
        one: "1 \u500B\u6708",
        other: "{{count}} \u500B\u6708"
    },
    aboutXYears: {
        one: "\u5927\u7D04 1 \u5E74",
        other: "\u5927\u7D04 {{count}} \u5E74"
    },
    xYears: {
        one: "1 \u5E74",
        other: "{{count}} \u5E74"
    },
    overXYears: {
        one: "\u8D85\u904E 1 \u5E74",
        other: "\u8D85\u904E {{count}} \u5E74"
    },
    almostXYears: {
        one: "\u5C07\u8FD1 1 \u5E74",
        other: "\u5C07\u8FD1 {{count}} \u5E74"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u5167";
        else return result + "\u524D";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"39tq3":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("e1ce4b8d8bb4a94d");
const dateFormats = {
    full: "y'\u5E74'M'\u6708'd'\u65E5' EEEE",
    long: "y'\u5E74'M'\u6708'd'\u65E5'",
    medium: "yyyy-MM-dd",
    short: "yy-MM-dd"
};
const timeFormats = {
    full: "zzzz a h:mm:ss",
    long: "z a h:mm:ss",
    medium: "a h:mm:ss",
    short: "a h:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"e1ce4b8d8bb4a94d":"6OYyu"}],"3GxQS":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u4E0A\u500B'eeee p",
    yesterday: "'\u6628\u5929' p",
    today: "'\u4ECA\u5929' p",
    tomorrow: "'\u660E\u5929' p",
    nextWeek: "'\u4E0B\u500B'eeee p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"5ICCN":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("6eb1470f454d2072");
const eraValues = {
    narrow: [
        "\u524D",
        "\u516C\u5143"
    ],
    abbreviated: [
        "\u524D",
        "\u516C\u5143"
    ],
    wide: [
        "\u516C\u5143\u524D",
        "\u516C\u5143"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u7B2C\u4E00\u5B63",
        "\u7B2C\u4E8C\u5B63",
        "\u7B2C\u4E09\u5B63",
        "\u7B2C\u56DB\u5B63"
    ],
    wide: [
        "\u7B2C\u4E00\u5B63\u5EA6",
        "\u7B2C\u4E8C\u5B63\u5EA6",
        "\u7B2C\u4E09\u5B63\u5EA6",
        "\u7B2C\u56DB\u5B63\u5EA6"
    ]
};
const monthValues = {
    narrow: [
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D",
        "\u4E03",
        "\u516B",
        "\u4E5D",
        "\u5341",
        "\u5341\u4E00",
        "\u5341\u4E8C"
    ],
    abbreviated: [
        "1\u6708",
        "2\u6708",
        "3\u6708",
        "4\u6708",
        "5\u6708",
        "6\u6708",
        "7\u6708",
        "8\u6708",
        "9\u6708",
        "10\u6708",
        "11\u6708",
        "12\u6708"
    ],
    wide: [
        "\u4E00\u6708",
        "\u4E8C\u6708",
        "\u4E09\u6708",
        "\u56DB\u6708",
        "\u4E94\u6708",
        "\u516D\u6708",
        "\u4E03\u6708",
        "\u516B\u6708",
        "\u4E5D\u6708",
        "\u5341\u6708",
        "\u5341\u4E00\u6708",
        "\u5341\u4E8C\u6708"
    ]
};
const dayValues = {
    narrow: [
        "\u65E5",
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D"
    ],
    short: [
        "\u65E5",
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D"
    ],
    abbreviated: [
        "\u9031\u65E5",
        "\u9031\u4E00",
        "\u9031\u4E8C",
        "\u9031\u4E09",
        "\u9031\u56DB",
        "\u9031\u4E94",
        "\u9031\u516D"
    ],
    wide: [
        "\u661F\u671F\u65E5",
        "\u661F\u671F\u4E00",
        "\u661F\u671F\u4E8C",
        "\u661F\u671F\u4E09",
        "\u661F\u671F\u56DB",
        "\u661F\u671F\u4E94",
        "\u661F\u671F\u516D"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u4E0A",
        pm: "\u4E0B",
        midnight: "\u5348\u591C",
        noon: "\u664C",
        morning: "\u65E9",
        afternoon: "\u5348",
        evening: "\u665A",
        night: "\u591C"
    },
    abbreviated: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u5348\u591C",
        noon: "\u4E2D\u5348",
        morning: "\u4E0A\u5348",
        afternoon: "\u4E0B\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u665A"
    },
    wide: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u5348\u591C",
        noon: "\u4E2D\u5348",
        morning: "\u4E0A\u5348",
        afternoon: "\u4E0B\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u665A"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u4E0A",
        pm: "\u4E0B",
        midnight: "\u5348\u591C",
        noon: "\u664C",
        morning: "\u65E9",
        afternoon: "\u5348",
        evening: "\u665A",
        night: "\u591C"
    },
    abbreviated: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u5348\u591C",
        noon: "\u4E2D\u5348",
        morning: "\u4E0A\u5348",
        afternoon: "\u4E0B\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u665A"
    },
    wide: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u5348\u591C",
        noon: "\u4E2D\u5348",
        morning: "\u4E0A\u5348",
        afternoon: "\u4E0B\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u665A"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    switch(options?.unit){
        case "date":
            return number + "\u65E5";
        case "hour":
            return number + "\u6642";
        case "minute":
            return number + "\u5206";
        case "second":
            return number + "\u79D2";
        default:
            return "\u7B2C " + number;
    }
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"6eb1470f454d2072":"fGq1u"}],"1OZPZ":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("24e9378903269973");
var _index2 = require("f8efa9149ae5e19");
const matchOrdinalNumberPattern = /^(第\s*)?\d+(日|時|分|秒)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(前)/i,
    abbreviated: /^(前)/i,
    wide: /^(公元前|公元)/i
};
const parseEraPatterns = {
    any: [
        /^(前)/i,
        /^(公元)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^第[一二三四]季/i,
    wide: /^第[一二三四]季度/i
};
const parseQuarterPatterns = {
    any: [
        /(1|一)/i,
        /(2|二)/i,
        /(3|三)/i,
        /(4|四)/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
    abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
    wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
const parseMonthPatterns = {
    narrow: [
        /^一/i,
        /^二/i,
        /^三/i,
        /^四/i,
        /^五/i,
        /^六/i,
        /^七/i,
        /^八/i,
        /^九/i,
        /^十(?!(一|二))/i,
        /^十一/i,
        /^十二/i
    ],
    any: [
        /^一|1/i,
        /^二|2/i,
        /^三|3/i,
        /^四|4/i,
        /^五|5/i,
        /^六|6/i,
        /^七|7/i,
        /^八|8/i,
        /^九|9/i,
        /^十(?!(一|二))|10/i,
        /^十一|11/i,
        /^十二|12/i
    ]
};
const matchDayPatterns = {
    narrow: /^[一二三四五六日]/i,
    short: /^[一二三四五六日]/i,
    abbreviated: /^週[一二三四五六日]/i,
    wide: /^星期[一二三四五六日]/i
};
const parseDayPatterns = {
    any: [
        /日/i,
        /一/i,
        /二/i,
        /三/i,
        /四/i,
        /五/i,
        /六/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^上午?/i,
        pm: /^下午?/i,
        midnight: /^午夜/i,
        noon: /^[中正]午/i,
        morning: /^早上/i,
        afternoon: /^下午/i,
        evening: /^晚上?/i,
        night: /^凌晨/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"24e9378903269973":"15lWd","f8efa9149ae5e19":"kWqg8"}],"flOwS":[function(require,module,exports) {
"use strict";
exports.zhTW = void 0;
var _index = require("f6c3b3a0e7a0d547");
var _index2 = require("2a86985a96388450");
var _index3 = require("2ce36f0f3dae3812");
var _index4 = require("985bb2114d5bc8e1");
var _index5 = require("61d6c1f4fb4ebc43");
/**
 * @category Locales
 * @summary Chinese Traditional locale.
 * @language Chinese Traditional
 * @iso-639-2 zho
 * @author tonypai [@tpai](https://github.com/tpai)
 * @author Jack Hsu [@jackhsu978](https://github.com/jackhsu978)
 * @author Terrence Lam [@skyuplam](https://github.com/skyuplam)
 */ const zhTW = exports.zhTW = {
    code: "zh-TW",
    formatDistance: _index.formatDistance,
    formatLong: _index2.formatLong,
    formatRelative: _index3.formatRelative,
    localize: _index4.localize,
    match: _index5.match,
    options: {
        weekStartsOn: 1 /* Monday */ ,
        firstWeekContainsDate: 4
    }
};

},{"f6c3b3a0e7a0d547":"3p2GK","2a86985a96388450":"6aUb4","2ce36f0f3dae3812":"6EuQO","985bb2114d5bc8e1":"fqMbh","61d6c1f4fb4ebc43":"goMsA"}],"3p2GK":[function(require,module,exports) {
"use strict";
exports.formatDistance = void 0;
const formatDistanceLocale = {
    lessThanXSeconds: {
        one: "\u5C11\u65BC 1 \u79D2",
        other: "\u5C11\u65BC {{count}} \u79D2"
    },
    xSeconds: {
        one: "1 \u79D2",
        other: "{{count}} \u79D2"
    },
    halfAMinute: "\u534A\u5206\u9418",
    lessThanXMinutes: {
        one: "\u5C11\u65BC 1 \u5206\u9418",
        other: "\u5C11\u65BC {{count}} \u5206\u9418"
    },
    xMinutes: {
        one: "1 \u5206\u9418",
        other: "{{count}} \u5206\u9418"
    },
    xHours: {
        one: "1 \u5C0F\u6642",
        other: "{{count}} \u5C0F\u6642"
    },
    aboutXHours: {
        one: "\u5927\u7D04 1 \u5C0F\u6642",
        other: "\u5927\u7D04 {{count}} \u5C0F\u6642"
    },
    xDays: {
        one: "1 \u5929",
        other: "{{count}} \u5929"
    },
    aboutXWeeks: {
        one: "\u5927\u7D04 1 \u500B\u661F\u671F",
        other: "\u5927\u7D04 {{count}} \u500B\u661F\u671F"
    },
    xWeeks: {
        one: "1 \u500B\u661F\u671F",
        other: "{{count}} \u500B\u661F\u671F"
    },
    aboutXMonths: {
        one: "\u5927\u7D04 1 \u500B\u6708",
        other: "\u5927\u7D04 {{count}} \u500B\u6708"
    },
    xMonths: {
        one: "1 \u500B\u6708",
        other: "{{count}} \u500B\u6708"
    },
    aboutXYears: {
        one: "\u5927\u7D04 1 \u5E74",
        other: "\u5927\u7D04 {{count}} \u5E74"
    },
    xYears: {
        one: "1 \u5E74",
        other: "{{count}} \u5E74"
    },
    overXYears: {
        one: "\u8D85\u904E 1 \u5E74",
        other: "\u8D85\u904E {{count}} \u5E74"
    },
    almostXYears: {
        one: "\u5C07\u8FD1 1 \u5E74",
        other: "\u5C07\u8FD1 {{count}} \u5E74"
    }
};
const formatDistance = (token, count, options)=>{
    let result;
    const tokenValue = formatDistanceLocale[token];
    if (typeof tokenValue === "string") result = tokenValue;
    else if (count === 1) result = tokenValue.one;
    else result = tokenValue.other.replace("{{count}}", String(count));
    if (options?.addSuffix) {
        if (options.comparison && options.comparison > 0) return result + "\u5167";
        else return result + "\u524D";
    }
    return result;
};
exports.formatDistance = formatDistance;

},{}],"6aUb4":[function(require,module,exports) {
"use strict";
exports.formatLong = void 0;
var _index = require("879459afab8f4538");
const dateFormats = {
    full: "y'\u5E74'M'\u6708'd'\u65E5' EEEE",
    long: "y'\u5E74'M'\u6708'd'\u65E5'",
    medium: "yyyy-MM-dd",
    short: "yy-MM-dd"
};
const timeFormats = {
    full: "zzzz a h:mm:ss",
    long: "z a h:mm:ss",
    medium: "a h:mm:ss",
    short: "a h:mm"
};
const dateTimeFormats = {
    full: "{{date}} {{time}}",
    long: "{{date}} {{time}}",
    medium: "{{date}} {{time}}",
    short: "{{date}} {{time}}"
};
const formatLong = exports.formatLong = {
    date: (0, _index.buildFormatLongFn)({
        formats: dateFormats,
        defaultWidth: "full"
    }),
    time: (0, _index.buildFormatLongFn)({
        formats: timeFormats,
        defaultWidth: "full"
    }),
    dateTime: (0, _index.buildFormatLongFn)({
        formats: dateTimeFormats,
        defaultWidth: "full"
    })
};

},{"879459afab8f4538":"6OYyu"}],"6EuQO":[function(require,module,exports) {
"use strict";
exports.formatRelative = void 0;
const formatRelativeLocale = {
    lastWeek: "'\u4E0A\u500B'eeee p",
    yesterday: "'\u6628\u5929' p",
    today: "'\u4ECA\u5929' p",
    tomorrow: "'\u660E\u5929' p",
    nextWeek: "'\u4E0B\u500B'eeee p",
    other: "P"
};
const formatRelative = (token, _date, _baseDate, _options)=>formatRelativeLocale[token];
exports.formatRelative = formatRelative;

},{}],"fqMbh":[function(require,module,exports) {
"use strict";
exports.localize = void 0;
var _index = require("407133832f03df9c");
const eraValues = {
    narrow: [
        "\u524D",
        "\u516C\u5143"
    ],
    abbreviated: [
        "\u524D",
        "\u516C\u5143"
    ],
    wide: [
        "\u516C\u5143\u524D",
        "\u516C\u5143"
    ]
};
const quarterValues = {
    narrow: [
        "1",
        "2",
        "3",
        "4"
    ],
    abbreviated: [
        "\u7B2C\u4E00\u523B",
        "\u7B2C\u4E8C\u523B",
        "\u7B2C\u4E09\u523B",
        "\u7B2C\u56DB\u523B"
    ],
    wide: [
        "\u7B2C\u4E00\u523B\u9418",
        "\u7B2C\u4E8C\u523B\u9418",
        "\u7B2C\u4E09\u523B\u9418",
        "\u7B2C\u56DB\u523B\u9418"
    ]
};
const monthValues = {
    narrow: [
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D",
        "\u4E03",
        "\u516B",
        "\u4E5D",
        "\u5341",
        "\u5341\u4E00",
        "\u5341\u4E8C"
    ],
    abbreviated: [
        "1\u6708",
        "2\u6708",
        "3\u6708",
        "4\u6708",
        "5\u6708",
        "6\u6708",
        "7\u6708",
        "8\u6708",
        "9\u6708",
        "10\u6708",
        "11\u6708",
        "12\u6708"
    ],
    wide: [
        "\u4E00\u6708",
        "\u4E8C\u6708",
        "\u4E09\u6708",
        "\u56DB\u6708",
        "\u4E94\u6708",
        "\u516D\u6708",
        "\u4E03\u6708",
        "\u516B\u6708",
        "\u4E5D\u6708",
        "\u5341\u6708",
        "\u5341\u4E00\u6708",
        "\u5341\u4E8C\u6708"
    ]
};
const dayValues = {
    narrow: [
        "\u65E5",
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D"
    ],
    short: [
        "\u65E5",
        "\u4E00",
        "\u4E8C",
        "\u4E09",
        "\u56DB",
        "\u4E94",
        "\u516D"
    ],
    abbreviated: [
        "\u9031\u65E5",
        "\u9031\u4E00",
        "\u9031\u4E8C",
        "\u9031\u4E09",
        "\u9031\u56DB",
        "\u9031\u4E94",
        "\u9031\u516D"
    ],
    wide: [
        "\u661F\u671F\u65E5",
        "\u661F\u671F\u4E00",
        "\u661F\u671F\u4E8C",
        "\u661F\u671F\u4E09",
        "\u661F\u671F\u56DB",
        "\u661F\u671F\u4E94",
        "\u661F\u671F\u516D"
    ]
};
const dayPeriodValues = {
    narrow: {
        am: "\u4E0A",
        pm: "\u4E0B",
        midnight: "\u51CC\u6668",
        noon: "\u5348",
        morning: "\u65E9",
        afternoon: "\u4E0B\u5348",
        evening: "\u665A",
        night: "\u591C"
    },
    abbreviated: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u51CC\u6668",
        noon: "\u4E2D\u5348",
        morning: "\u65E9\u6668",
        afternoon: "\u4E2D\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u9593"
    },
    wide: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u51CC\u6668",
        noon: "\u4E2D\u5348",
        morning: "\u65E9\u6668",
        afternoon: "\u4E2D\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u9593"
    }
};
const formattingDayPeriodValues = {
    narrow: {
        am: "\u4E0A",
        pm: "\u4E0B",
        midnight: "\u51CC\u6668",
        noon: "\u5348",
        morning: "\u65E9",
        afternoon: "\u4E0B\u5348",
        evening: "\u665A",
        night: "\u591C"
    },
    abbreviated: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u51CC\u6668",
        noon: "\u4E2D\u5348",
        morning: "\u65E9\u6668",
        afternoon: "\u4E2D\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u9593"
    },
    wide: {
        am: "\u4E0A\u5348",
        pm: "\u4E0B\u5348",
        midnight: "\u51CC\u6668",
        noon: "\u4E2D\u5348",
        morning: "\u65E9\u6668",
        afternoon: "\u4E2D\u5348",
        evening: "\u665A\u4E0A",
        night: "\u591C\u9593"
    }
};
const ordinalNumber = (dirtyNumber, options)=>{
    const number = Number(dirtyNumber);
    switch(options?.unit){
        case "date":
            return number + "\u65E5";
        case "hour":
            return number + "\u6642";
        case "minute":
            return number + "\u5206";
        case "second":
            return number + "\u79D2";
        default:
            return "\u7B2C " + number;
    }
};
const localize = exports.localize = {
    ordinalNumber,
    era: (0, _index.buildLocalizeFn)({
        values: eraValues,
        defaultWidth: "wide"
    }),
    quarter: (0, _index.buildLocalizeFn)({
        values: quarterValues,
        defaultWidth: "wide",
        argumentCallback: (quarter)=>quarter - 1
    }),
    month: (0, _index.buildLocalizeFn)({
        values: monthValues,
        defaultWidth: "wide"
    }),
    day: (0, _index.buildLocalizeFn)({
        values: dayValues,
        defaultWidth: "wide"
    }),
    dayPeriod: (0, _index.buildLocalizeFn)({
        values: dayPeriodValues,
        defaultWidth: "wide",
        formattingValues: formattingDayPeriodValues,
        defaultFormattingWidth: "wide"
    })
};

},{"407133832f03df9c":"fGq1u"}],"goMsA":[function(require,module,exports) {
"use strict";
exports.match = void 0;
var _index = require("3c605c4f9d11ce54");
var _index2 = require("c21df40d4958ad48");
const matchOrdinalNumberPattern = /^(第\s*)?\d+(日|時|分|秒)?/i;
const parseOrdinalNumberPattern = /\d+/i;
const matchEraPatterns = {
    narrow: /^(前)/i,
    abbreviated: /^(前)/i,
    wide: /^(公元前|公元)/i
};
const parseEraPatterns = {
    any: [
        /^(前)/i,
        /^(公元)/i
    ]
};
const matchQuarterPatterns = {
    narrow: /^[1234]/i,
    abbreviated: /^第[一二三四]刻/i,
    wide: /^第[一二三四]刻鐘/i
};
const parseQuarterPatterns = {
    any: [
        /(1|一)/i,
        /(2|二)/i,
        /(3|三)/i,
        /(4|四)/i
    ]
};
const matchMonthPatterns = {
    narrow: /^(一|二|三|四|五|六|七|八|九|十[二一])/i,
    abbreviated: /^(一|二|三|四|五|六|七|八|九|十[二一]|\d|1[12])月/i,
    wide: /^(一|二|三|四|五|六|七|八|九|十[二一])月/i
};
const parseMonthPatterns = {
    narrow: [
        /^一/i,
        /^二/i,
        /^三/i,
        /^四/i,
        /^五/i,
        /^六/i,
        /^七/i,
        /^八/i,
        /^九/i,
        /^十(?!(一|二))/i,
        /^十一/i,
        /^十二/i
    ],
    any: [
        /^一|1/i,
        /^二|2/i,
        /^三|3/i,
        /^四|4/i,
        /^五|5/i,
        /^六|6/i,
        /^七|7/i,
        /^八|8/i,
        /^九|9/i,
        /^十(?!(一|二))|10/i,
        /^十一|11/i,
        /^十二|12/i
    ]
};
const matchDayPatterns = {
    narrow: /^[一二三四五六日]/i,
    short: /^[一二三四五六日]/i,
    abbreviated: /^週[一二三四五六日]/i,
    wide: /^星期[一二三四五六日]/i
};
const parseDayPatterns = {
    any: [
        /日/i,
        /一/i,
        /二/i,
        /三/i,
        /四/i,
        /五/i,
        /六/i
    ]
};
const matchDayPeriodPatterns = {
    any: /^(上午?|下午?|午夜|[中正]午|早上?|下午|晚上?|凌晨)/i
};
const parseDayPeriodPatterns = {
    any: {
        am: /^上午?/i,
        pm: /^下午?/i,
        midnight: /^午夜/i,
        noon: /^[中正]午/i,
        morning: /^早上/i,
        afternoon: /^下午/i,
        evening: /^晚上?/i,
        night: /^凌晨/i
    }
};
const match = exports.match = {
    ordinalNumber: (0, _index2.buildMatchPatternFn)({
        matchPattern: matchOrdinalNumberPattern,
        parsePattern: parseOrdinalNumberPattern,
        valueCallback: (value)=>parseInt(value, 10)
    }),
    era: (0, _index.buildMatchFn)({
        matchPatterns: matchEraPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseEraPatterns,
        defaultParseWidth: "any"
    }),
    quarter: (0, _index.buildMatchFn)({
        matchPatterns: matchQuarterPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseQuarterPatterns,
        defaultParseWidth: "any",
        valueCallback: (index)=>index + 1
    }),
    month: (0, _index.buildMatchFn)({
        matchPatterns: matchMonthPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseMonthPatterns,
        defaultParseWidth: "any"
    }),
    day: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPatterns,
        defaultMatchWidth: "wide",
        parsePatterns: parseDayPatterns,
        defaultParseWidth: "any"
    }),
    dayPeriod: (0, _index.buildMatchFn)({
        matchPatterns: matchDayPeriodPatterns,
        defaultMatchWidth: "any",
        parsePatterns: parseDayPeriodPatterns,
        defaultParseWidth: "any"
    })
};

},{"3c605c4f9d11ce54":"15lWd","c21df40d4958ad48":"kWqg8"}]},["km5uZ","bB7Pu"], "bB7Pu", "parcelRequired4e2")

//# sourceMappingURL=index.3d214d75.js.map
